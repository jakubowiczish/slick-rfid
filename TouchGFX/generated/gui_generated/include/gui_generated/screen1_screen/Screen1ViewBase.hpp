/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Button.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void plotnikHandler()
    {
        // Override and implement this function in Screen1
    }

    virtual void zajmaHandler()
    {
        // Override and implement this function in Screen1
    }

    virtual void rafalHandler()
    {
        // Override and implement this function in Screen1
    }

    virtual void dybczakHandler()
    {
        // Override and implement this function in Screen1
    }

    virtual void szczygiHandler()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::ScalableImage backgroundImage;
    touchgfx::TextAreaWithOneWildcard uidTextField;
    touchgfx::TextArea avatarChoiceTextField;
    touchgfx::Button szczygi;
    touchgfx::Button dybczak;
    touchgfx::Button rafal;
    touchgfx::Button zajma;
    touchgfx::Button plotnik;
    touchgfx::TextArea choiceTextField;
    touchgfx::Button changeScreenButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t UIDTEXTFIELD_SIZE = 30;
    touchgfx::Unicode::UnicodeChar uidTextFieldBuffer[UIDTEXTFIELD_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SCREEN1VIEWBASE_HPP
