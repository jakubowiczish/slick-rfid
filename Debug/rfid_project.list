
rfid_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f714  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033c8  0801f8d4  0801f8d4  0002f8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000003a  08022c9c  08022c9c  00032c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00013ec0  08022cd8  08022cd8  00032cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000c  08036b98  08036b98  00046b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08036ba4  08036ba4  000500f4  2**0
                  CONTENTS
  7 .ARM          00000008  08036ba4  08036ba4  00046ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08036bac  08036bac  000500f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   0000000c  08036bac  08036bac  00046bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08036bb8  08036bb8  00046bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000f4  20000000  08036bc0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000a904  200000f4  08036cb4  000500f4  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000a9f8  08036cb4  0005a9f8  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000500f4  2**0
                  CONTENTS, READONLY
 15 .debug_info   0009259c  00000000  00000000  00050124  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00014e4d  00000000  00000000  000e26c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005808  00000000  00000000  000f7510  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000051f8  00000000  00000000  000fcd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00042186  00000000  00000000  00101f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004ef72  00000000  00000000  00144096  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001395c6  00000000  00000000  00193008  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002cc5ce  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00018148  00000000  00000000  002cc6c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801f8bc 	.word	0x0801f8bc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000f8 	.word	0x200000f8
 80001fc:	0801f8bc 	.word	0x0801f8bc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000110 	.word	0x20000110
 80005d0:	20000168 	.word	0x20000168

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f001 fd4b 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f895 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fb0d 	bl	8000c00 <_ZL12MX_GPIO_Initv>
  MX_CRC_Init();
 80005e6:	f000 f941 	bl	800086c <_ZL11MX_CRC_Initv>
  MX_I2C1_Init();
 80005ea:	f000 f957 	bl	800089c <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 80005ee:	f000 f989 	bl	8000904 <_ZL12MX_I2C2_Initv>
  MX_QUADSPI_Init();
 80005f2:	f000 f9bb 	bl	800096c <_ZL15MX_QUADSPI_Initv>
  MX_SAI1_Init();
 80005f6:	f000 f9e9 	bl	80009cc <_ZL12MX_SAI1_Initv>
  MX_SDIO_SD_Init();
 80005fa:	f000 fa49 	bl	8000a90 <_ZL15MX_SDIO_SD_Initv>
  MX_USART3_UART_Init();
 80005fe:	f000 faa3 	bl	8000b48 <_ZL19MX_USART3_UART_Initv>
  MX_USART6_UART_Init();
 8000602:	f000 facf 	bl	8000ba4 <_ZL19MX_USART6_UART_Initv>
  MX_SPI2_Init();
 8000606:	f000 fa63 	bl	8000ad0 <_ZL12MX_SPI2_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 800060a:	f015 f9a7 	bl	801595c <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 800060e:	f015 fa1b 	bl	8015a48 <_Z13GRAPHICS_Initv>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  debug_init(&huart3);
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <main+0x68>)
 8000614:	f017 fe8a 	bl	801832c <debug_init>
  xprintf("elo\r\n");
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <main+0x6c>)
 800061a:	f018 fb4d 	bl	8018cb8 <xprintf>
  /* Start scheduler */
//  osKernelStart();
  
  /* We should never get here as control is now taken by the scheduler */

  xTaskCreate(main_task, NULL,1024, NULL, 2, NULL);
 800061e:	2300      	movs	r3, #0
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2302      	movs	r3, #2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062c:	2100      	movs	r1, #0
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <main+0x70>)
 8000630:	f011 f9b4 	bl	801199c <xTaskCreate>
  vTaskStartScheduler();
 8000634:	f011 fb1e 	bl	8011c74 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x64>
 800063a:	bf00      	nop
 800063c:	200005c8 	.word	0x200005c8
 8000640:	0801f8d4 	.word	0x0801f8d4
 8000644:	08000679 	.word	0x08000679

08000648 <_Z15initialize_rfidv>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void initialize_rfid() {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af02      	add	r7, sp, #8
	rfid_configure(&hspi2, GPIOH, SPI_CS_Pin,GPIOA, RFID_RESET_Pin );
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <_Z15initialize_rfidv+0x24>)
 8000654:	2240      	movs	r2, #64	; 0x40
 8000656:	4906      	ldr	r1, [pc, #24]	; (8000670 <_Z15initialize_rfidv+0x28>)
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <_Z15initialize_rfidv+0x2c>)
 800065a:	f017 fe93 	bl	8018384 <rfid_configure>
	 rfid_self_test();
 800065e:	f017 feeb 	bl	8018438 <rfid_self_test>
	  rfid_init();
 8000662:	f017 feb7 	bl	80183d4 <rfid_init>

}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40020000 	.word	0x40020000
 8000670:	40021c00 	.word	0x40021c00
 8000674:	20000570 	.word	0x20000570

08000678 <_Z9main_taskPv>:

void main_task(void *p) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
	initialize_rfid();
 8000680:	f7ff ffe2 	bl	8000648 <_Z15initialize_rfidv>

	xTaskCreate(card_read_task, NULL, configMINIMAL_STACK_SIZE+20, NULL, 2, NULL);
 8000684:	2300      	movs	r3, #0
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	2302      	movs	r3, #2
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2294      	movs	r2, #148	; 0x94
 8000690:	2100      	movs	r1, #0
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <_Z9main_taskPv+0x48>)
 8000694:	f011 f982 	bl	801199c <xTaskCreate>

	xTaskCreate(test_print, NULL, configMINIMAL_STACK_SIZE+20, NULL, 2, NULL);
 8000698:	2300      	movs	r3, #0
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2302      	movs	r3, #2
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	2294      	movs	r2, #148	; 0x94
 80006a4:	2100      	movs	r1, #0
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <_Z9main_taskPv+0x4c>)
 80006a8:	f011 f978 	bl	801199c <xTaskCreate>

  /* init code for FATFS */
  MX_FATFS_Init();
 80006ac:	f00c f988 	bl	800c9c0 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80006b0:	f017 fb3a 	bl	8017d28 <MX_USB_HOST_Init>

/* Graphic application */
  GRAPHICS_MainTask();
 80006b4:	f015 f9ce 	bl	8015a54 <_Z17GRAPHICS_MainTaskv>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f010 f89a 	bl	80107f2 <osDelay>
 80006be:	e7fb      	b.n	80006b8 <_Z9main_taskPv+0x40>
 80006c0:	080006c9 	.word	0x080006c9
 80006c4:	080006f1 	.word	0x080006f1

080006c8 <_Z14card_read_taskPv>:
  }
  /* USER CODE END 5 */
}

void card_read_task(void *p) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	while(1) {
		bool is_new = rfid_is_new_card();
 80006d0:	f018 f86f 	bl	80187b2 <rfid_is_new_card>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
		if(is_new) {
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <_Z14card_read_taskPv+0x1c>
			xprintf("new card \r\n");
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <_Z14card_read_taskPv+0x24>)
 80006e0:	f018 faea 	bl	8018cb8 <xprintf>
		}
		vTaskDelay(70);
 80006e4:	2046      	movs	r0, #70	; 0x46
 80006e6:	f011 fa91 	bl	8011c0c <vTaskDelay>
	}
 80006ea:	e7f1      	b.n	80006d0 <_Z14card_read_taskPv+0x8>
 80006ec:	0801f8dc 	.word	0x0801f8dc

080006f0 <_Z10test_printPv>:
}

void test_print(void *p) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	while(1) {
		xprintf("testowe printowanie\r\n");
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <_Z10test_printPv+0x18>)
 80006fa:	f018 fadd 	bl	8018cb8 <xprintf>
		vTaskDelay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000702:	f011 fa83 	bl	8011c0c <vTaskDelay>
		xprintf("testowe printowanie\r\n");
 8000706:	e7f7      	b.n	80006f8 <_Z10test_printPv+0x8>
 8000708:	0801f8e8 	.word	0x0801f8e8

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0a4      	sub	sp, #144	; 0x90
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000716:	2234      	movs	r2, #52	; 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f01e f951 	bl	801e9c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	223c      	movs	r2, #60	; 0x3c
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f01e f942 	bl	801e9c2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b48      	ldr	r3, [pc, #288]	; (8000864 <SystemClock_Config+0x158>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a47      	ldr	r2, [pc, #284]	; (8000864 <SystemClock_Config+0x158>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
 800074e:	4b45      	ldr	r3, [pc, #276]	; (8000864 <SystemClock_Config+0x158>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b42      	ldr	r3, [pc, #264]	; (8000868 <SystemClock_Config+0x15c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a41      	ldr	r2, [pc, #260]	; (8000868 <SystemClock_Config+0x15c>)
 8000764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <SystemClock_Config+0x15c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000776:	2301      	movs	r3, #1
 8000778:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000784:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000788:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078a:	2304      	movs	r3, #4
 800078c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800078e:	23b4      	movs	r3, #180	; 0xb4
 8000790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800079a:	2306      	movs	r3, #6
 800079c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 6;
 80007a0:	2306      	movs	r3, #6
 80007a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 fa20 	bl	8007bf0 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf14      	ite	ne
 80007b6:	2301      	movne	r3, #1
 80007b8:	2300      	moveq	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007c0:	f000 fbcc 	bl	8000f5c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c4:	f006 fc9e 	bl	8007104 <HAL_PWREx_EnableOverDrive>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007d8:	f000 fbc0 	bl	8000f5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007f8:	2105      	movs	r1, #5
 80007fa:	4618      	mov	r0, r3
 80007fc:	f006 fd96 	bl	800732c <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000810:	f000 fba4 	bl	8000f5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8000814:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8000818:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 800081a:	2390      	movs	r3, #144	; 0x90
 800081c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000826:	2306      	movs	r3, #6
 8000828:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800082e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000834:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000838:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800083a:	2300      	movs	r3, #0
 800083c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4618      	mov	r0, r3
 8000844:	f006 ff96 	bl	8007774 <HAL_RCCEx_PeriphCLKConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000858:	f000 fb80 	bl	8000f5c <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3790      	adds	r7, #144	; 0x90
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <_ZL11MX_CRC_Initv+0x28>)
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <_ZL11MX_CRC_Initv+0x2c>)
 8000874:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <_ZL11MX_CRC_Initv+0x28>)
 8000878:	f001 fd72 	bl	8002360 <HAL_CRC_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 800088c:	f000 fb66 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000368 	.word	0x20000368
 8000898:	40023000 	.word	0x40023000

0800089c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <_ZL12MX_I2C1_Initv+0x60>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008a8:	4a15      	ldr	r2, [pc, #84]	; (8000900 <_ZL12MX_I2C1_Initv+0x64>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80008da:	f005 f81f 	bl	800591c <HAL_I2C_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80008ee:	f000 fb35 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000370 	.word	0x20000370
 80008fc:	40005400 	.word	0x40005400
 8000900:	000186a0 	.word	0x000186a0

08000904 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 800090a:	4a16      	ldr	r2, [pc, #88]	; (8000964 <_ZL12MX_I2C2_Initv+0x60>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 8000910:	4a15      	ldr	r2, [pc, #84]	; (8000968 <_ZL12MX_I2C2_Initv+0x64>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 8000922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000926:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <_ZL12MX_I2C2_Initv+0x5c>)
 8000942:	f004 ffeb 	bl	800591c <HAL_I2C_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8000956:	f000 fb01 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200003c4 	.word	0x200003c4
 8000964:	40005800 	.word	0x40005800
 8000968:	000186a0 	.word	0x000186a0

0800096c <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 800097e:	2201      	movs	r2, #1
 8000980:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 800098a:	2201      	movs	r2, #1
 800098c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <_ZL15MX_QUADSPI_Initv+0x58>)
 80009a8:	f006 fbfc 	bl	80071a4 <HAL_QSPI_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	bf14      	ite	ne
 80009b2:	2301      	movne	r3, #1
 80009b4:	2300      	moveq	r3, #0
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 80009bc:	f000 face 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000418 	.word	0x20000418
 80009c8:	a0001000 	.word	0xa0001000

080009cc <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 80009d2:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <_ZL12MX_SAI1_Initv+0xbc>)
 80009d4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 80009e4:	2240      	movs	r2, #64	; 0x40
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <_ZL12MX_SAI1_Initv+0xc0>)
 8000a16:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a32:	2208      	movs	r2, #8
 8000a34:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <_ZL12MX_SAI1_Initv+0xb8>)
 8000a68:	f007 fb04 	bl	8008074 <HAL_SAI_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <_ZL12MX_SAI1_Initv+0xb4>
  {
    Error_Handler();
 8000a7c:	f000 fa6e 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000464 	.word	0x20000464
 8000a88:	40015804 	.word	0x40015804
 8000a8c:	0002ee00 	.word	0x0002ee00

08000a90 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <_ZL15MX_SDIO_SD_Initv+0x38>)
 8000a96:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <_ZL15MX_SDIO_SD_Initv+0x3c>)
 8000a98:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <_ZL15MX_SDIO_SD_Initv+0x38>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <_ZL15MX_SDIO_SD_Initv+0x38>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <_ZL15MX_SDIO_SD_Initv+0x38>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <_ZL15MX_SDIO_SD_Initv+0x38>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <_ZL15MX_SDIO_SD_Initv+0x38>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <_ZL15MX_SDIO_SD_Initv+0x38>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	200004ec 	.word	0x200004ec
 8000acc:	40012c00 	.word	0x40012c00

08000ad0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <_ZL12MX_SPI2_Initv+0x74>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000b04:	2220      	movs	r2, #32
 8000b06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <_ZL12MX_SPI2_Initv+0x70>)
 8000b22:	f008 fda4 	bl	800966e <HAL_SPI_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf14      	ite	ne
 8000b2c:	2301      	movne	r3, #1
 8000b2e:	2300      	moveq	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8000b36:	f000 fa11 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000570 	.word	0x20000570
 8000b44:	40003800 	.word	0x40003800

08000b48 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b80:	f009 fd80 	bl	800a684 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000b94:	f000 f9e2 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200005c8 	.word	0x200005c8
 8000ba0:	40004800 	.word	0x40004800

08000ba4 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_ZL19MX_USART6_UART_Initv+0x58>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000bdc:	f009 fd52 	bl	800a684 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bf14      	ite	ne
 8000be6:	2301      	movne	r3, #1
 8000be8:	2300      	moveq	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8000bf0:	f000 f9b4 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000608 	.word	0x20000608
 8000bfc:	40011400 	.word	0x40011400

08000c00 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c1a:	4bad      	ldr	r3, [pc, #692]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4aac      	ldr	r2, [pc, #688]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c20:	f043 0310 	orr.w	r3, r3, #16
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4baa      	ldr	r3, [pc, #680]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
 8000c36:	4ba6      	ldr	r3, [pc, #664]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4aa5      	ldr	r2, [pc, #660]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4ba3      	ldr	r3, [pc, #652]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
 8000c52:	4b9f      	ldr	r3, [pc, #636]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a9e      	ldr	r2, [pc, #632]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b9c      	ldr	r3, [pc, #624]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	623b      	str	r3, [r7, #32]
 8000c68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	4b98      	ldr	r3, [pc, #608]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a97      	ldr	r2, [pc, #604]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b95      	ldr	r3, [pc, #596]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	4b91      	ldr	r3, [pc, #580]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a90      	ldr	r2, [pc, #576]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b8e      	ldr	r3, [pc, #568]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	4b8a      	ldr	r3, [pc, #552]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a89      	ldr	r2, [pc, #548]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b87      	ldr	r3, [pc, #540]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b83      	ldr	r3, [pc, #524]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a82      	ldr	r2, [pc, #520]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b80      	ldr	r3, [pc, #512]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b7c      	ldr	r3, [pc, #496]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a7b      	ldr	r2, [pc, #492]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b79      	ldr	r3, [pc, #484]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b75      	ldr	r3, [pc, #468]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a74      	ldr	r2, [pc, #464]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b72      	ldr	r3, [pc, #456]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b6e      	ldr	r3, [pc, #440]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a6d      	ldr	r2, [pc, #436]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b6b      	ldr	r3, [pc, #428]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b67      	ldr	r3, [pc, #412]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a66      	ldr	r2, [pc, #408]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b64      	ldr	r3, [pc, #400]	; (8000ed0 <_ZL12MX_GPIO_Initv+0x2d0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	210c      	movs	r1, #12
 8000d4e:	4861      	ldr	r0, [pc, #388]	; (8000ed4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8000d50:	f003 f964 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2130      	movs	r1, #48	; 0x30
 8000d58:	485f      	ldr	r0, [pc, #380]	; (8000ed8 <_ZL12MX_GPIO_Initv+0x2d8>)
 8000d5a:	f003 f95f 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2108      	movs	r1, #8
 8000d62:	485e      	ldr	r0, [pc, #376]	; (8000edc <_ZL12MX_GPIO_Initv+0x2dc>)
 8000d64:	f003 f95a 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	485c      	ldr	r0, [pc, #368]	; (8000ee0 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000d6e:	f003 f955 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	485b      	ldr	r0, [pc, #364]	; (8000ee4 <_ZL12MX_GPIO_Initv+0x2e4>)
 8000d78:	f003 f950 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7|SPI_CS_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	21c0      	movs	r1, #192	; 0xc0
 8000d80:	4859      	ldr	r0, [pc, #356]	; (8000ee8 <_ZL12MX_GPIO_Initv+0x2e8>)
 8000d82:	f003 f94b 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|RFID_RESET_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2188      	movs	r1, #136	; 0x88
 8000d8a:	4858      	ldr	r0, [pc, #352]	; (8000eec <_ZL12MX_GPIO_Initv+0x2ec>)
 8000d8c:	f003 f946 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000d90:	230c      	movs	r3, #12
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	484b      	ldr	r0, [pc, #300]	; (8000ed4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8000da8:	f002 fe6c 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000dac:	2308      	movs	r3, #8
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dbc:	2306      	movs	r3, #6
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <_ZL12MX_GPIO_Initv+0x2e4>)
 8000dc8:	f002 fe5c 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd0:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <_ZL12MX_GPIO_Initv+0x2f0>)
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4841      	ldr	r0, [pc, #260]	; (8000ee4 <_ZL12MX_GPIO_Initv+0x2e4>)
 8000de0:	f002 fe50 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000de4:	2330      	movs	r3, #48	; 0x30
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000de8:	2311      	movs	r3, #17
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4837      	ldr	r0, [pc, #220]	; (8000ed8 <_ZL12MX_GPIO_Initv+0x2d8>)
 8000dfc:	f002 fe42 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000e00:	2308      	movs	r3, #8
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e04:	2311      	movs	r3, #17
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e14:	4619      	mov	r1, r3
 8000e16:	4831      	ldr	r0, [pc, #196]	; (8000edc <_ZL12MX_GPIO_Initv+0x2dc>)
 8000e18:	f002 fe34 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000e1c:	2340      	movs	r3, #64	; 0x40
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e20:	2311      	movs	r3, #17
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	482b      	ldr	r0, [pc, #172]	; (8000ee0 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e34:	f002 fe26 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4825      	ldr	r0, [pc, #148]	; (8000ee4 <_ZL12MX_GPIO_Initv+0x2e4>)
 8000e50:	f002 fe18 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8000e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e66:	2302      	movs	r3, #2
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <_ZL12MX_GPIO_Initv+0x2d8>)
 8000e72:	f002 fe07 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e76:	2304      	movs	r3, #4
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e86:	4619      	mov	r1, r3
 8000e88:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e8a:	f002 fdfb 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e8e:	2320      	movs	r3, #32
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <_ZL12MX_GPIO_Initv+0x2f0>)
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <_ZL12MX_GPIO_Initv+0x2f4>)
 8000ea2:	f002 fdef 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH7 SPI_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <_ZL12MX_GPIO_Initv+0x2e8>)
 8000ebe:	f002 fde1 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ec2:	2340      	movs	r3, #64	; 0x40
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e014      	b.n	8000ef8 <_ZL12MX_GPIO_Initv+0x2f8>
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40022800 	.word	0x40022800
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	40021c00 	.word	0x40021c00
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	10110000 	.word	0x10110000
 8000ef4:	40022400 	.word	0x40022400
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efa:	2302      	movs	r3, #2
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	480a      	ldr	r0, [pc, #40]	; (8000f30 <_ZL12MX_GPIO_Initv+0x330>)
 8000f06:	f002 fdbd 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin RFID_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|RFID_RESET_Pin;
 8000f0a:	2388      	movs	r3, #136	; 0x88
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <_ZL12MX_GPIO_Initv+0x334>)
 8000f22:	f002 fdaf 	bl	8003a84 <HAL_GPIO_Init>

}
 8000f26:	bf00      	nop
 8000f28:	3740      	adds	r7, #64	; 0x40
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021c00 	.word	0x40021c00
 8000f34:	40020000 	.word	0x40020000

08000f38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f4a:	f001 f8b5 	bl	80020b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40001000 	.word	0x40001000

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_CRC_MspInit+0x3c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10d      	bne.n	8000fea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_CRC_MspInit+0x40>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_CRC_MspInit+0x40>)
 8000fd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_CRC_MspInit+0x40>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023000 	.word	0x40023000
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <HAL_I2C_MspInit+0xe8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12d      	bne.n	800107e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <HAL_I2C_MspInit+0xec>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a30      	ldr	r2, [pc, #192]	; (80010ec <HAL_I2C_MspInit+0xec>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <HAL_I2C_MspInit+0xec>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800103e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001044:	2312      	movs	r3, #18
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001050:	2304      	movs	r3, #4
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4825      	ldr	r0, [pc, #148]	; (80010f0 <HAL_I2C_MspInit+0xf0>)
 800105c:	f002 fd12 	bl	8003a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_I2C_MspInit+0xec>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <HAL_I2C_MspInit+0xec>)
 800106a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HAL_I2C_MspInit+0xec>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800107c:	e030      	b.n	80010e0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_I2C_MspInit+0xf4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d12b      	bne.n	80010e0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_I2C_MspInit+0xec>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a16      	ldr	r2, [pc, #88]	; (80010ec <HAL_I2C_MspInit+0xec>)
 8001092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_I2C_MspInit+0xec>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80010a4:	2330      	movs	r3, #48	; 0x30
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a8:	2312      	movs	r3, #18
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010b4:	2304      	movs	r3, #4
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <HAL_I2C_MspInit+0xf8>)
 80010c0:	f002 fce0 	bl	8003a84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_I2C_MspInit+0xec>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_I2C_MspInit+0xec>)
 80010ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_I2C_MspInit+0xec>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40005400 	.word	0x40005400
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40005800 	.word	0x40005800
 80010f8:	40021c00 	.word	0x40021c00

080010fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_I2C_MspDeInit+0x50>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d10b      	bne.n	8001126 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_I2C_MspDeInit+0x54>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <HAL_I2C_MspDeInit+0x54>)
 8001114:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, I2C1_SCL_Pin|I2C1_SDA_Pin);
 800111a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <HAL_I2C_MspDeInit+0x58>)
 8001120:	f002 fe5a 	bl	8003dd8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001124:	e00e      	b.n	8001144 <HAL_I2C_MspDeInit+0x48>
  else if(hi2c->Instance==I2C2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_I2C_MspDeInit+0x5c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d109      	bne.n	8001144 <HAL_I2C_MspDeInit+0x48>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_I2C_MspDeInit+0x54>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_I2C_MspDeInit+0x54>)
 8001136:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, I2C2_SCL_Pin|I2C2_SDA_Pin);
 800113c:	2130      	movs	r1, #48	; 0x30
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <HAL_I2C_MspDeInit+0x60>)
 8001140:	f002 fe4a 	bl	8003dd8 <HAL_GPIO_DeInit>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40005400 	.word	0x40005400
 8001150:	40023800 	.word	0x40023800
 8001154:	40020400 	.word	0x40020400
 8001158:	40005800 	.word	0x40005800
 800115c:	40021c00 	.word	0x40021c00

08001160 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a31      	ldr	r2, [pc, #196]	; (8001244 <HAL_QSPI_MspInit+0xe4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d15b      	bne.n	800123a <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_QSPI_MspInit+0xe8>)
 8001188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_QSPI_MspInit+0xe8>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6393      	str	r3, [r2, #56]	; 0x38
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <HAL_QSPI_MspInit+0xe8>)
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <HAL_QSPI_MspInit+0xe8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a28      	ldr	r2, [pc, #160]	; (8001248 <HAL_QSPI_MspInit+0xe8>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_QSPI_MspInit+0xe8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_QSPI_MspInit+0xe8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a21      	ldr	r2, [pc, #132]	; (8001248 <HAL_QSPI_MspInit+0xe8>)
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HAL_QSPI_MspInit+0xe8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80011d6:	2340      	movs	r3, #64	; 0x40
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80011e6:	230a      	movs	r3, #10
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4816      	ldr	r0, [pc, #88]	; (800124c <HAL_QSPI_MspInit+0xec>)
 80011f2:	f002 fc47 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80011f6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001208:	2309      	movs	r3, #9
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <HAL_QSPI_MspInit+0xf0>)
 8001214:	f002 fc36 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001218:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800122a:	230a      	movs	r3, #10
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4806      	ldr	r0, [pc, #24]	; (8001250 <HAL_QSPI_MspInit+0xf0>)
 8001236:	f002 fc25 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	a0001000 	.word	0xa0001000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020400 	.word	0x40020400
 8001250:	40021400 	.word	0x40021400

08001254 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a28      	ldr	r2, [pc, #160]	; (8001314 <HAL_SD_MspInit+0xc0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d14a      	bne.n	800130c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <HAL_SD_MspInit+0xc4>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a26      	ldr	r2, [pc, #152]	; (8001318 <HAL_SD_MspInit+0xc4>)
 8001280:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_SD_MspInit+0xc4>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_SD_MspInit+0xc4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_SD_MspInit+0xc4>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_SD_MspInit+0xc4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_SD_MspInit+0xc4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a18      	ldr	r2, [pc, #96]	; (8001318 <HAL_SD_MspInit+0xc4>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_SD_MspInit+0xc4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0 
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin 
 80012ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012ce:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012dc:	230c      	movs	r3, #12
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <HAL_SD_MspInit+0xc8>)
 80012e8:	f002 fbcc 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80012ec:	2304      	movs	r3, #4
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012fc:	230c      	movs	r3, #12
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <HAL_SD_MspInit+0xcc>)
 8001308:	f002 fbbc 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40012c00 	.word	0x40012c00
 8001318:	40023800 	.word	0x40023800
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00

08001324 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a2f      	ldr	r2, [pc, #188]	; (8001400 <HAL_SPI_MspInit+0xdc>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d157      	bne.n	80013f6 <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <HAL_SPI_MspInit+0xe0>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <HAL_SPI_MspInit+0xe0>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_SPI_MspInit+0xe0>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b27      	ldr	r3, [pc, #156]	; (8001404 <HAL_SPI_MspInit+0xe0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a26      	ldr	r2, [pc, #152]	; (8001404 <HAL_SPI_MspInit+0xe0>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_SPI_MspInit+0xe0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_SPI_MspInit+0xe0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a1f      	ldr	r2, [pc, #124]	; (8001404 <HAL_SPI_MspInit+0xe0>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_SPI_MspInit+0xe0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PD3     ------> SPI2_SCK
    PC3     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO 
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin;
 800139a:	2308      	movs	r3, #8
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013aa:	2305      	movs	r3, #5
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4814      	ldr	r0, [pc, #80]	; (8001408 <HAL_SPI_MspInit+0xe4>)
 80013b6:	f002 fb65 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 80013ba:	2308      	movs	r3, #8
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ca:	2305      	movs	r3, #5
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <HAL_SPI_MspInit+0xe8>)
 80013d6:	f002 fb55 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 80013da:	2304      	movs	r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013e6:	2305      	movs	r3, #5
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4806      	ldr	r0, [pc, #24]	; (800140c <HAL_SPI_MspInit+0xe8>)
 80013f2:	f002 fb47 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40003800 	.word	0x40003800
 8001404:	40023800 	.word	0x40023800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40020800 	.word	0x40020800

08001410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <HAL_TIM_Base_MspInit+0x3c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10d      	bne.n	800143e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_TIM_Base_MspInit+0x40>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <HAL_TIM_Base_MspInit+0x40>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <HAL_TIM_Base_MspInit+0x40>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40010000 	.word	0x40010000
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	; 0x30
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a33      	ldr	r2, [pc, #204]	; (8001540 <HAL_UART_MspInit+0xec>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d12d      	bne.n	80014d2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_UART_MspInit+0xf0>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a31      	ldr	r2, [pc, #196]	; (8001544 <HAL_UART_MspInit+0xf0>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_UART_MspInit+0xf0>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_UART_MspInit+0xf0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <HAL_UART_MspInit+0xf0>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_UART_MspInit+0xf0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c0:	2307      	movs	r3, #7
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	481f      	ldr	r0, [pc, #124]	; (8001548 <HAL_UART_MspInit+0xf4>)
 80014cc:	f002 fada 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014d0:	e031      	b.n	8001536 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <HAL_UART_MspInit+0xf8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d12c      	bne.n	8001536 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_UART_MspInit+0xf0>)
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_UART_MspInit+0xf0>)
 80014e6:	f043 0320 	orr.w	r3, r3, #32
 80014ea:	6453      	str	r3, [r2, #68]	; 0x44
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_UART_MspInit+0xf0>)
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_UART_MspInit+0xf0>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_UART_MspInit+0xf0>)
 8001502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_UART_MspInit+0xf0>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001514:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001526:	2308      	movs	r3, #8
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <HAL_UART_MspInit+0xfc>)
 8001532:	f002 faa7 	bl	8003a84 <HAL_GPIO_Init>
}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40004800 	.word	0x40004800
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400
 800154c:	40011400 	.word	0x40011400
 8001550:	40021800 	.word	0x40021800

08001554 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a26      	ldr	r2, [pc, #152]	; (80015fc <HAL_SAI_MspInit+0xa8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d146      	bne.n	80015f4 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_SAI_MspInit+0xac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10d      	bne.n	800158a <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_SAI_MspInit+0xb0>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <HAL_SAI_MspInit+0xb0>)
 8001578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_SAI_MspInit+0xb0>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_SAI_MspInit+0xac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_SAI_MspInit+0xac>)
 8001592:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001594:	2330      	movs	r3, #48	; 0x30
 8001596:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015a4:	2306      	movs	r3, #6
 80015a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4619      	mov	r1, r3
 80015ae:	4816      	ldr	r0, [pc, #88]	; (8001608 <HAL_SAI_MspInit+0xb4>)
 80015b0:	f002 fa68 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80015b4:	2340      	movs	r3, #64	; 0x40
 80015b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015c4:	2306      	movs	r3, #6
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	; (800160c <HAL_SAI_MspInit+0xb8>)
 80015d0:	f002 fa58 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015e4:	2306      	movs	r3, #6
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	4808      	ldr	r0, [pc, #32]	; (8001610 <HAL_SAI_MspInit+0xbc>)
 80015f0:	f002 fa48 	bl	8003a84 <HAL_GPIO_Init>

    }
}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40015804 	.word	0x40015804
 8001600:	20000648 	.word	0x20000648
 8001604:	40023800 	.word	0x40023800
 8001608:	40021000 	.word	0x40021000
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40021800 	.word	0x40021800

08001614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	; 0x30
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	2036      	movs	r0, #54	; 0x36
 800162a:	f000 fe61 	bl	80022f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800162e:	2036      	movs	r0, #54	; 0x36
 8001630:	f000 fe7a 	bl	8002328 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HAL_InitTick+0xa4>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <HAL_InitTick+0xa4>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6413      	str	r3, [r2, #64]	; 0x40
 8001644:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_InitTick+0xa4>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001650:	f107 0210 	add.w	r2, r7, #16
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f006 f858 	bl	8007710 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001660:	f006 f82e 	bl	80076c0 <HAL_RCC_GetPCLK1Freq>
 8001664:	4603      	mov	r3, r0
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166c:	4a13      	ldr	r2, [pc, #76]	; (80016bc <HAL_InitTick+0xa8>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	0c9b      	lsrs	r3, r3, #18
 8001674:	3b01      	subs	r3, #1
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_InitTick+0xac>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <HAL_InitTick+0xb0>)
 800167c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_InitTick+0xac>)
 8001680:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001684:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_InitTick+0xac>)
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_InitTick+0xac>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_InitTick+0xac>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_InitTick+0xac>)
 800169a:	f008 fbcf 	bl	8009e3c <HAL_TIM_Base_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d104      	bne.n	80016ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016a4:	4806      	ldr	r0, [pc, #24]	; (80016c0 <HAL_InitTick+0xac>)
 80016a6:	f008 fc18 	bl	8009eda <HAL_TIM_Base_Start_IT>
 80016aa:	4603      	mov	r3, r0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3730      	adds	r7, #48	; 0x30
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	431bde83 	.word	0x431bde83
 80016c0:	20009ea8 	.word	0x20009ea8
 80016c4:	40001000 	.word	0x40001000

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <TIM6_DAC_IRQHandler+0x10>)
 8001702:	f008 fc0e 	bl	8009f22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20009ea8 	.word	0x20009ea8

08001710 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <OTG_FS_IRQHandler+0x10>)
 8001716:	f002 ff1f 	bl	8004558 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000a730 	.word	0x2000a730

08001724 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <LTDC_IRQHandler+0x10>)
 800172a:	f005 f9cd 	bl	8006ac8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20009b00 	.word	0x20009b00

08001738 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA2D_IRQHandler+0x10>)
 800173e:	f001 f876 	bl	800282e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20009ba8 	.word	0x20009ba8

0800174c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <DSI_IRQHandler+0x10>)
 8001752:	f001 fcca 	bl	80030ea <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20009be8 	.word	0x20009be8

08001760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	return 1;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_kill>:

int _kill(int pid, int sig)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800177a:	f01d f8cb 	bl	801e914 <__errno>
 800177e:	4602      	mov	r2, r0
 8001780:	2316      	movs	r3, #22
 8001782:	6013      	str	r3, [r2, #0]
	return -1;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_exit>:

void _exit (int status)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ffe7 	bl	8001770 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017a2:	e7fe      	b.n	80017a2 <_exit+0x12>

080017a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	e00a      	b.n	80017cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017b6:	f3af 8000 	nop.w
 80017ba:	4601      	mov	r1, r0
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	60ba      	str	r2, [r7, #8]
 80017c2:	b2ca      	uxtb	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbf0      	blt.n	80017b6 <_read+0x12>
	}

return len;
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e009      	b.n	8001804 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf1      	blt.n	80017f0 <_write+0x12>
	}
	return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_close>:

int _close(int file)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	return -1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183e:	605a      	str	r2, [r3, #4]
	return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_isatty>:

int _isatty(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	return 1;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x50>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x16>
		heap_end = &end;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <_sbrk+0x50>)
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <_sbrk+0x54>)
 8001894:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <_sbrk+0x50>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <_sbrk+0x50>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	466a      	mov	r2, sp
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d907      	bls.n	80018ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018aa:	f01d f833 	bl	801e914 <__errno>
 80018ae:	4602      	mov	r2, r0
 80018b0:	230c      	movs	r3, #12
 80018b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	e006      	b.n	80018c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <_sbrk+0x50>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <_sbrk+0x50>)
 80018c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2000064c 	.word	0x2000064c
 80018d4:	2000a9f8 	.word	0x2000a9f8

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <SystemInit+0x28>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a07      	ldr	r2, [pc, #28]	; (8001900 <SystemInit+0x28>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SystemInit+0x28>)
 80018ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018f2:	609a      	str	r2, [r3, #8]
#endif
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800193c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001908:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800190a:	e003      	b.n	8001914 <LoopCopyDataInit>

0800190c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800190e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001910:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001912:	3104      	adds	r1, #4

08001914 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001914:	480b      	ldr	r0, [pc, #44]	; (8001944 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001918:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800191a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800191c:	d3f6      	bcc.n	800190c <CopyDataInit>
  ldr  r2, =_sbss
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001920:	e002      	b.n	8001928 <LoopFillZerobss>

08001922 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001922:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001924:	f842 3b04 	str.w	r3, [r2], #4

08001928 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800192a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800192c:	d3f9      	bcc.n	8001922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800192e:	f7ff ffd3 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001932:	f01d f807 	bl	801e944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7fe fe4d 	bl	80005d4 <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800193c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001940:	08036bc0 	.word	0x08036bc0
  ldr  r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001948:	200000f4 	.word	0x200000f4
  ldr  r2, =_sbss
 800194c:	200000f4 	.word	0x200000f4
  ldr  r3, = _ebss
 8001950:	2000a9f8 	.word	0x2000a9f8

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>
	...

08001958 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f90d 	bl	8001b84 <ft6x06_GetInstance>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2bff      	cmp	r3, #255	; 0xff
 8001972:	d10e      	bne.n	8001992 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8001974:	2000      	movs	r0, #0
 8001976:	f000 f905 	bl	8001b84 <ft6x06_GetInstance>
 800197a:	4603      	mov	r3, r0
 800197c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d806      	bhi.n	8001992 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	b2d1      	uxtb	r1, r2
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <ft6x06_Init+0x44>)
 800198c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800198e:	f011 fd81 	bl	8013494 <TS_IO_Init>
    }
  }
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000650 	.word	0x20000650

080019a0 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80019c0:	f011 fd68 	bl	8013494 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	21a8      	movs	r1, #168	; 0xa8
 80019ca:	4618      	mov	r0, r3
 80019cc:	f011 fd7b 	bl	80134c6 <TS_IO_Read>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29b      	uxth	r3, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f8bc 	bl	8001b66 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f88d 	bl	8001b10 <ft6x06_TS_DisableIT>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2102      	movs	r1, #2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f011 fd56 	bl	80134c6 <TS_IO_Read>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <ft6x06_TS_DetectTouch+0x50>)
 8001a3c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <ft6x06_TS_DetectTouch+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	b2db      	uxtb	r3, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000654 	.word	0x20000654

08001a54 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <ft6x06_TS_GetXY+0x90>)
 8001a68:	789a      	ldrb	r2, [r3, #2]
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <ft6x06_TS_GetXY+0x90>)
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d234      	bcs.n	8001adc <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <ft6x06_TS_GetXY+0x90>)
 8001a74:	789b      	ldrb	r3, [r3, #2]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <ft6x06_TS_GetXY+0x2c>
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d003      	beq.n	8001a86 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8001a7e:	e005      	b.n	8001a8c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8001a80:	2303      	movs	r3, #3
 8001a82:	75fb      	strb	r3, [r7, #23]
      break;
 8001a84:	e002      	b.n	8001a8c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8001a86:	2309      	movs	r3, #9
 8001a88:	75fb      	strb	r3, [r7, #23]
      break;
 8001a8a:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8001a8c:	89fb      	ldrh	r3, [r7, #14]
 8001a8e:	b2d8      	uxtb	r0, r3
 8001a90:	f107 0210 	add.w	r2, r7, #16
 8001a94:	7df9      	ldrb	r1, [r7, #23]
 8001a96:	2304      	movs	r3, #4
 8001a98:	f011 fd28 	bl	80134ec <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8001a9c:	7c3b      	ldrb	r3, [r7, #16]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001aa6:	b21a      	sxth	r2, r3
 8001aa8:	7c7b      	ldrb	r3, [r7, #17]
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8001ab6:	7cbb      	ldrb	r3, [r7, #18]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	7cfb      	ldrb	r3, [r7, #19]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <ft6x06_TS_GetXY+0x90>)
 8001ad2:	789b      	ldrb	r3, [r3, #2]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <ft6x06_TS_GetXY+0x90>)
 8001ada:	709a      	strb	r2, [r3, #2]
  }
}
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000654 	.word	0x20000654

08001ae8 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	21a4      	movs	r1, #164	; 0xa4
 8001b02:	4618      	mov	r0, r3
 8001b04:	f011 fccc 	bl	80134a0 <TS_IO_Write>
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	21a4      	movs	r1, #164	; 0xa4
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f011 fcb8 	bl	80134a0 <TS_IO_Write>
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b085      	sub	sp, #20
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8001b74:	68fb      	ldr	r3, [r7, #12]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	e00b      	b.n	8001bb0 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <ft6x06_GetInstance+0x40>)
 8001b9c:	5cd3      	ldrb	r3, [r2, r3]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d101      	bne.n	8001baa <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	e006      	b.n	8001bb8 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	3301      	adds	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d9f0      	bls.n	8001b98 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001bb6:	23ff      	movs	r3, #255	; 0xff
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20000650 	.word	0x20000650

08001bc8 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001bd2:	49be      	ldr	r1, [pc, #760]	; (8001ecc <OTM8009A_Init+0x304>)
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f013 fe19 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001bda:	49bd      	ldr	r1, [pc, #756]	; (8001ed0 <OTM8009A_Init+0x308>)
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f013 fe15 	bl	801580c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001be2:	49bc      	ldr	r1, [pc, #752]	; (8001ed4 <OTM8009A_Init+0x30c>)
 8001be4:	2000      	movs	r0, #0
 8001be6:	f013 fe11 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001bea:	49bb      	ldr	r1, [pc, #748]	; (8001ed8 <OTM8009A_Init+0x310>)
 8001bec:	2002      	movs	r0, #2
 8001bee:	f013 fe0d 	bl	801580c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001bf2:	49b8      	ldr	r1, [pc, #736]	; (8001ed4 <OTM8009A_Init+0x30c>)
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f013 fe09 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001bfa:	49b8      	ldr	r1, [pc, #736]	; (8001edc <OTM8009A_Init+0x314>)
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f013 fe05 	bl	801580c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001c02:	200a      	movs	r0, #10
 8001c04:	f011 fc8c 	bl	8013520 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001c08:	49b5      	ldr	r1, [pc, #724]	; (8001ee0 <OTM8009A_Init+0x318>)
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f013 fdfe 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001c10:	49b4      	ldr	r1, [pc, #720]	; (8001ee4 <OTM8009A_Init+0x31c>)
 8001c12:	2000      	movs	r0, #0
 8001c14:	f013 fdfa 	bl	801580c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001c18:	200a      	movs	r0, #10
 8001c1a:	f011 fc81 	bl	8013520 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001c1e:	49b2      	ldr	r1, [pc, #712]	; (8001ee8 <OTM8009A_Init+0x320>)
 8001c20:	2000      	movs	r0, #0
 8001c22:	f013 fdf3 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001c26:	49b1      	ldr	r1, [pc, #708]	; (8001eec <OTM8009A_Init+0x324>)
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f013 fdef 	bl	801580c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001c2e:	49b0      	ldr	r1, [pc, #704]	; (8001ef0 <OTM8009A_Init+0x328>)
 8001c30:	2000      	movs	r0, #0
 8001c32:	f013 fdeb 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001c36:	49af      	ldr	r1, [pc, #700]	; (8001ef4 <OTM8009A_Init+0x32c>)
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f013 fde7 	bl	801580c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001c3e:	49ae      	ldr	r1, [pc, #696]	; (8001ef8 <OTM8009A_Init+0x330>)
 8001c40:	2000      	movs	r0, #0
 8001c42:	f013 fde3 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001c46:	49ad      	ldr	r1, [pc, #692]	; (8001efc <OTM8009A_Init+0x334>)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f013 fddf 	bl	801580c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001c4e:	499f      	ldr	r1, [pc, #636]	; (8001ecc <OTM8009A_Init+0x304>)
 8001c50:	2000      	movs	r0, #0
 8001c52:	f013 fddb 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001c56:	49aa      	ldr	r1, [pc, #680]	; (8001f00 <OTM8009A_Init+0x338>)
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f013 fdd7 	bl	801580c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001c5e:	49a9      	ldr	r1, [pc, #676]	; (8001f04 <OTM8009A_Init+0x33c>)
 8001c60:	2000      	movs	r0, #0
 8001c62:	f013 fdd3 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001c66:	49a8      	ldr	r1, [pc, #672]	; (8001f08 <OTM8009A_Init+0x340>)
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f013 fdcf 	bl	801580c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001c6e:	49a7      	ldr	r1, [pc, #668]	; (8001f0c <OTM8009A_Init+0x344>)
 8001c70:	2000      	movs	r0, #0
 8001c72:	f013 fdcb 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001c76:	49a6      	ldr	r1, [pc, #664]	; (8001f10 <OTM8009A_Init+0x348>)
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f013 fdc7 	bl	801580c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001c7e:	49a5      	ldr	r1, [pc, #660]	; (8001f14 <OTM8009A_Init+0x34c>)
 8001c80:	2000      	movs	r0, #0
 8001c82:	f013 fdc3 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001c86:	49a4      	ldr	r1, [pc, #656]	; (8001f18 <OTM8009A_Init+0x350>)
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f013 fdbf 	bl	801580c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001c8e:	49a3      	ldr	r1, [pc, #652]	; (8001f1c <OTM8009A_Init+0x354>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f013 fdbb 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001c96:	4997      	ldr	r1, [pc, #604]	; (8001ef4 <OTM8009A_Init+0x32c>)
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f013 fdb7 	bl	801580c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001c9e:	498b      	ldr	r1, [pc, #556]	; (8001ecc <OTM8009A_Init+0x304>)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f013 fdb3 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001ca6:	499e      	ldr	r1, [pc, #632]	; (8001f20 <OTM8009A_Init+0x358>)
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f013 fdaf 	bl	801580c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001cae:	499d      	ldr	r1, [pc, #628]	; (8001f24 <OTM8009A_Init+0x35c>)
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f013 fdab 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001cb6:	499c      	ldr	r1, [pc, #624]	; (8001f28 <OTM8009A_Init+0x360>)
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f013 fda7 	bl	801580c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001cbe:	499b      	ldr	r1, [pc, #620]	; (8001f2c <OTM8009A_Init+0x364>)
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f013 fda3 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001cc6:	499a      	ldr	r1, [pc, #616]	; (8001f30 <OTM8009A_Init+0x368>)
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f013 fd9f 	bl	801580c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001cce:	4999      	ldr	r1, [pc, #612]	; (8001f34 <OTM8009A_Init+0x36c>)
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f013 fd9b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001cd6:	4998      	ldr	r1, [pc, #608]	; (8001f38 <OTM8009A_Init+0x370>)
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f013 fd97 	bl	801580c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001cde:	4989      	ldr	r1, [pc, #548]	; (8001f04 <OTM8009A_Init+0x33c>)
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f013 fd93 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001ce6:	4995      	ldr	r1, [pc, #596]	; (8001f3c <OTM8009A_Init+0x374>)
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f013 fd8f 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001cee:	4987      	ldr	r1, [pc, #540]	; (8001f0c <OTM8009A_Init+0x344>)
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f013 fd8b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001cf6:	4992      	ldr	r1, [pc, #584]	; (8001f40 <OTM8009A_Init+0x378>)
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f013 fd87 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001cfe:	4991      	ldr	r1, [pc, #580]	; (8001f44 <OTM8009A_Init+0x37c>)
 8001d00:	2000      	movs	r0, #0
 8001d02:	f013 fd83 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001d06:	4990      	ldr	r1, [pc, #576]	; (8001f48 <OTM8009A_Init+0x380>)
 8001d08:	2002      	movs	r0, #2
 8001d0a:	f013 fd7f 	bl	801580c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001d0e:	4971      	ldr	r1, [pc, #452]	; (8001ed4 <OTM8009A_Init+0x30c>)
 8001d10:	2000      	movs	r0, #0
 8001d12:	f013 fd7b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001d16:	498d      	ldr	r1, [pc, #564]	; (8001f4c <OTM8009A_Init+0x384>)
 8001d18:	2006      	movs	r0, #6
 8001d1a:	f013 fd77 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001d1e:	498c      	ldr	r1, [pc, #560]	; (8001f50 <OTM8009A_Init+0x388>)
 8001d20:	2000      	movs	r0, #0
 8001d22:	f013 fd73 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001d26:	498b      	ldr	r1, [pc, #556]	; (8001f54 <OTM8009A_Init+0x38c>)
 8001d28:	200e      	movs	r0, #14
 8001d2a:	f013 fd6f 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001d2e:	498a      	ldr	r1, [pc, #552]	; (8001f58 <OTM8009A_Init+0x390>)
 8001d30:	2000      	movs	r0, #0
 8001d32:	f013 fd6b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001d36:	4989      	ldr	r1, [pc, #548]	; (8001f5c <OTM8009A_Init+0x394>)
 8001d38:	200e      	movs	r0, #14
 8001d3a:	f013 fd67 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001d3e:	4988      	ldr	r1, [pc, #544]	; (8001f60 <OTM8009A_Init+0x398>)
 8001d40:	2000      	movs	r0, #0
 8001d42:	f013 fd63 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001d46:	4987      	ldr	r1, [pc, #540]	; (8001f64 <OTM8009A_Init+0x39c>)
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f013 fd5f 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001d4e:	4986      	ldr	r1, [pc, #536]	; (8001f68 <OTM8009A_Init+0x3a0>)
 8001d50:	2000      	movs	r0, #0
 8001d52:	f013 fd5b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001d56:	4985      	ldr	r1, [pc, #532]	; (8001f6c <OTM8009A_Init+0x3a4>)
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f013 fd57 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001d5e:	495d      	ldr	r1, [pc, #372]	; (8001ed4 <OTM8009A_Init+0x30c>)
 8001d60:	2000      	movs	r0, #0
 8001d62:	f013 fd53 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001d66:	4982      	ldr	r1, [pc, #520]	; (8001f70 <OTM8009A_Init+0x3a8>)
 8001d68:	200a      	movs	r0, #10
 8001d6a:	f013 fd4f 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001d6e:	4981      	ldr	r1, [pc, #516]	; (8001f74 <OTM8009A_Init+0x3ac>)
 8001d70:	2000      	movs	r0, #0
 8001d72:	f013 fd4b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001d76:	4980      	ldr	r1, [pc, #512]	; (8001f78 <OTM8009A_Init+0x3b0>)
 8001d78:	200f      	movs	r0, #15
 8001d7a:	f013 fd47 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001d7e:	4974      	ldr	r1, [pc, #464]	; (8001f50 <OTM8009A_Init+0x388>)
 8001d80:	2000      	movs	r0, #0
 8001d82:	f013 fd43 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001d86:	497d      	ldr	r1, [pc, #500]	; (8001f7c <OTM8009A_Init+0x3b4>)
 8001d88:	200f      	movs	r0, #15
 8001d8a:	f013 fd3f 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001d8e:	4972      	ldr	r1, [pc, #456]	; (8001f58 <OTM8009A_Init+0x390>)
 8001d90:	2000      	movs	r0, #0
 8001d92:	f013 fd3b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001d96:	497a      	ldr	r1, [pc, #488]	; (8001f80 <OTM8009A_Init+0x3b8>)
 8001d98:	200a      	movs	r0, #10
 8001d9a:	f013 fd37 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001d9e:	4970      	ldr	r1, [pc, #448]	; (8001f60 <OTM8009A_Init+0x398>)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f013 fd33 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001da6:	4977      	ldr	r1, [pc, #476]	; (8001f84 <OTM8009A_Init+0x3bc>)
 8001da8:	200f      	movs	r0, #15
 8001daa:	f013 fd2f 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001dae:	496e      	ldr	r1, [pc, #440]	; (8001f68 <OTM8009A_Init+0x3a0>)
 8001db0:	2000      	movs	r0, #0
 8001db2:	f013 fd2b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001db6:	4974      	ldr	r1, [pc, #464]	; (8001f88 <OTM8009A_Init+0x3c0>)
 8001db8:	200f      	movs	r0, #15
 8001dba:	f013 fd27 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001dbe:	4973      	ldr	r1, [pc, #460]	; (8001f8c <OTM8009A_Init+0x3c4>)
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f013 fd23 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001dc6:	4972      	ldr	r1, [pc, #456]	; (8001f90 <OTM8009A_Init+0x3c8>)
 8001dc8:	200a      	movs	r0, #10
 8001dca:	f013 fd1f 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001dce:	4971      	ldr	r1, [pc, #452]	; (8001f94 <OTM8009A_Init+0x3cc>)
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f013 fd1b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001dd6:	4970      	ldr	r1, [pc, #448]	; (8001f98 <OTM8009A_Init+0x3d0>)
 8001dd8:	200a      	movs	r0, #10
 8001dda:	f013 fd17 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001dde:	493d      	ldr	r1, [pc, #244]	; (8001ed4 <OTM8009A_Init+0x30c>)
 8001de0:	2000      	movs	r0, #0
 8001de2:	f013 fd13 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001de6:	496d      	ldr	r1, [pc, #436]	; (8001f9c <OTM8009A_Init+0x3d4>)
 8001de8:	200a      	movs	r0, #10
 8001dea:	f013 fd0f 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001dee:	4961      	ldr	r1, [pc, #388]	; (8001f74 <OTM8009A_Init+0x3ac>)
 8001df0:	2000      	movs	r0, #0
 8001df2:	f013 fd0b 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001df6:	496a      	ldr	r1, [pc, #424]	; (8001fa0 <OTM8009A_Init+0x3d8>)
 8001df8:	200f      	movs	r0, #15
 8001dfa:	f013 fd07 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001dfe:	4954      	ldr	r1, [pc, #336]	; (8001f50 <OTM8009A_Init+0x388>)
 8001e00:	2000      	movs	r0, #0
 8001e02:	f013 fd03 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001e06:	4967      	ldr	r1, [pc, #412]	; (8001fa4 <OTM8009A_Init+0x3dc>)
 8001e08:	200f      	movs	r0, #15
 8001e0a:	f013 fcff 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001e0e:	4952      	ldr	r1, [pc, #328]	; (8001f58 <OTM8009A_Init+0x390>)
 8001e10:	2000      	movs	r0, #0
 8001e12:	f013 fcfb 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001e16:	4964      	ldr	r1, [pc, #400]	; (8001fa8 <OTM8009A_Init+0x3e0>)
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f013 fcf7 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001e1e:	4950      	ldr	r1, [pc, #320]	; (8001f60 <OTM8009A_Init+0x398>)
 8001e20:	2000      	movs	r0, #0
 8001e22:	f013 fcf3 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001e26:	4961      	ldr	r1, [pc, #388]	; (8001fac <OTM8009A_Init+0x3e4>)
 8001e28:	200f      	movs	r0, #15
 8001e2a:	f013 fcef 	bl	801580c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001e2e:	494e      	ldr	r1, [pc, #312]	; (8001f68 <OTM8009A_Init+0x3a0>)
 8001e30:	2000      	movs	r0, #0
 8001e32:	f013 fceb 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001e36:	495e      	ldr	r1, [pc, #376]	; (8001fb0 <OTM8009A_Init+0x3e8>)
 8001e38:	200f      	movs	r0, #15
 8001e3a:	f013 fce7 	bl	801580c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001e3e:	4931      	ldr	r1, [pc, #196]	; (8001f04 <OTM8009A_Init+0x33c>)
 8001e40:	2000      	movs	r0, #0
 8001e42:	f013 fce3 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001e46:	495b      	ldr	r1, [pc, #364]	; (8001fb4 <OTM8009A_Init+0x3ec>)
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f013 fcdf 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001e4e:	495a      	ldr	r1, [pc, #360]	; (8001fb8 <OTM8009A_Init+0x3f0>)
 8001e50:	2000      	movs	r0, #0
 8001e52:	f013 fcdb 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001e56:	4959      	ldr	r1, [pc, #356]	; (8001fbc <OTM8009A_Init+0x3f4>)
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f013 fcd7 	bl	801580c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001e5e:	4958      	ldr	r1, [pc, #352]	; (8001fc0 <OTM8009A_Init+0x3f8>)
 8001e60:	2000      	movs	r0, #0
 8001e62:	f013 fcd3 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001e66:	4957      	ldr	r1, [pc, #348]	; (8001fc4 <OTM8009A_Init+0x3fc>)
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f013 fccf 	bl	801580c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e6e:	4917      	ldr	r1, [pc, #92]	; (8001ecc <OTM8009A_Init+0x304>)
 8001e70:	2000      	movs	r0, #0
 8001e72:	f013 fccb 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001e76:	4954      	ldr	r1, [pc, #336]	; (8001fc8 <OTM8009A_Init+0x400>)
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f013 fcc7 	bl	801580c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e7e:	4913      	ldr	r1, [pc, #76]	; (8001ecc <OTM8009A_Init+0x304>)
 8001e80:	2000      	movs	r0, #0
 8001e82:	f013 fcc3 	bl	801580c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e86:	4911      	ldr	r1, [pc, #68]	; (8001ecc <OTM8009A_Init+0x304>)
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f013 fcbf 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001e8e:	494f      	ldr	r1, [pc, #316]	; (8001fcc <OTM8009A_Init+0x404>)
 8001e90:	2010      	movs	r0, #16
 8001e92:	f013 fcbb 	bl	801580c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e96:	490d      	ldr	r1, [pc, #52]	; (8001ecc <OTM8009A_Init+0x304>)
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f013 fcb7 	bl	801580c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001e9e:	494c      	ldr	r1, [pc, #304]	; (8001fd0 <OTM8009A_Init+0x408>)
 8001ea0:	2010      	movs	r0, #16
 8001ea2:	f013 fcb3 	bl	801580c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001ea6:	494b      	ldr	r1, [pc, #300]	; (8001fd4 <OTM8009A_Init+0x40c>)
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f013 fcaf 	bl	801580c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8001eae:	2078      	movs	r0, #120	; 0x78
 8001eb0:	f011 fb36 	bl	8013520 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8090 	beq.w	8001fdc <OTM8009A_Init+0x414>
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d000      	beq.n	8001ec2 <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8001ec0:	e091      	b.n	8001fe6 <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001ec2:	4945      	ldr	r1, [pc, #276]	; (8001fd8 <OTM8009A_Init+0x410>)
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f013 fca1 	bl	801580c <DSI_IO_WriteCmd>
    break;
 8001eca:	e08c      	b.n	8001fe6 <OTM8009A_Init+0x41e>
 8001ecc:	08020154 	.word	0x08020154
 8001ed0:	0802000c 	.word	0x0802000c
 8001ed4:	08020158 	.word	0x08020158
 8001ed8:	08020010 	.word	0x08020010
 8001edc:	0802015c 	.word	0x0802015c
 8001ee0:	08020160 	.word	0x08020160
 8001ee4:	08020164 	.word	0x08020164
 8001ee8:	08020168 	.word	0x08020168
 8001eec:	0802016c 	.word	0x0802016c
 8001ef0:	08020170 	.word	0x08020170
 8001ef4:	08020174 	.word	0x08020174
 8001ef8:	08020178 	.word	0x08020178
 8001efc:	0802017c 	.word	0x0802017c
 8001f00:	08020180 	.word	0x08020180
 8001f04:	08020184 	.word	0x08020184
 8001f08:	08020188 	.word	0x08020188
 8001f0c:	0802018c 	.word	0x0802018c
 8001f10:	08020190 	.word	0x08020190
 8001f14:	08020194 	.word	0x08020194
 8001f18:	08020198 	.word	0x08020198
 8001f1c:	0802019c 	.word	0x0802019c
 8001f20:	0802003c 	.word	0x0802003c
 8001f24:	080201a0 	.word	0x080201a0
 8001f28:	080201a4 	.word	0x080201a4
 8001f2c:	080201a8 	.word	0x080201a8
 8001f30:	080201ac 	.word	0x080201ac
 8001f34:	080201b0 	.word	0x080201b0
 8001f38:	080201b4 	.word	0x080201b4
 8001f3c:	080201b8 	.word	0x080201b8
 8001f40:	080201bc 	.word	0x080201bc
 8001f44:	080201c0 	.word	0x080201c0
 8001f48:	08020040 	.word	0x08020040
 8001f4c:	08020044 	.word	0x08020044
 8001f50:	080201c4 	.word	0x080201c4
 8001f54:	0802004c 	.word	0x0802004c
 8001f58:	080201c8 	.word	0x080201c8
 8001f5c:	0802005c 	.word	0x0802005c
 8001f60:	080201cc 	.word	0x080201cc
 8001f64:	0802006c 	.word	0x0802006c
 8001f68:	080201d0 	.word	0x080201d0
 8001f6c:	08020208 	.word	0x08020208
 8001f70:	08020078 	.word	0x08020078
 8001f74:	080201d4 	.word	0x080201d4
 8001f78:	08020084 	.word	0x08020084
 8001f7c:	08020094 	.word	0x08020094
 8001f80:	080200a4 	.word	0x080200a4
 8001f84:	080200b0 	.word	0x080200b0
 8001f88:	080200c0 	.word	0x080200c0
 8001f8c:	080201d8 	.word	0x080201d8
 8001f90:	080200d0 	.word	0x080200d0
 8001f94:	080201dc 	.word	0x080201dc
 8001f98:	080200dc 	.word	0x080200dc
 8001f9c:	080200e8 	.word	0x080200e8
 8001fa0:	080200f4 	.word	0x080200f4
 8001fa4:	08020104 	.word	0x08020104
 8001fa8:	08020114 	.word	0x08020114
 8001fac:	08020120 	.word	0x08020120
 8001fb0:	08020130 	.word	0x08020130
 8001fb4:	0802020c 	.word	0x0802020c
 8001fb8:	08020210 	.word	0x08020210
 8001fbc:	08020214 	.word	0x08020214
 8001fc0:	08020218 	.word	0x08020218
 8001fc4:	0802021c 	.word	0x0802021c
 8001fc8:	08020140 	.word	0x08020140
 8001fcc:	08020014 	.word	0x08020014
 8001fd0:	08020028 	.word	0x08020028
 8001fd4:	080201e0 	.word	0x080201e0
 8001fd8:	080201e4 	.word	0x080201e4
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001fdc:	491a      	ldr	r1, [pc, #104]	; (8002048 <OTM8009A_Init+0x480>)
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f013 fc14 	bl	801580c <DSI_IO_WriteCmd>
    break;
 8001fe4:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10b      	bne.n	8002004 <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001fec:	4917      	ldr	r1, [pc, #92]	; (800204c <OTM8009A_Init+0x484>)
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f013 fc0c 	bl	801580c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001ff4:	4916      	ldr	r1, [pc, #88]	; (8002050 <OTM8009A_Init+0x488>)
 8001ff6:	2004      	movs	r0, #4
 8001ff8:	f013 fc08 	bl	801580c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001ffc:	4915      	ldr	r1, [pc, #84]	; (8002054 <OTM8009A_Init+0x48c>)
 8001ffe:	2004      	movs	r0, #4
 8002000:	f013 fc04 	bl	801580c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002004:	4914      	ldr	r1, [pc, #80]	; (8002058 <OTM8009A_Init+0x490>)
 8002006:	2000      	movs	r0, #0
 8002008:	f013 fc00 	bl	801580c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 800200c:	4913      	ldr	r1, [pc, #76]	; (800205c <OTM8009A_Init+0x494>)
 800200e:	2000      	movs	r0, #0
 8002010:	f013 fbfc 	bl	801580c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002014:	4912      	ldr	r1, [pc, #72]	; (8002060 <OTM8009A_Init+0x498>)
 8002016:	2000      	movs	r0, #0
 8002018:	f013 fbf8 	bl	801580c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 800201c:	4911      	ldr	r1, [pc, #68]	; (8002064 <OTM8009A_Init+0x49c>)
 800201e:	2000      	movs	r0, #0
 8002020:	f013 fbf4 	bl	801580c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002024:	4910      	ldr	r1, [pc, #64]	; (8002068 <OTM8009A_Init+0x4a0>)
 8002026:	2000      	movs	r0, #0
 8002028:	f013 fbf0 	bl	801580c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800202c:	490f      	ldr	r1, [pc, #60]	; (800206c <OTM8009A_Init+0x4a4>)
 800202e:	2000      	movs	r0, #0
 8002030:	f013 fbec 	bl	801580c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <OTM8009A_Init+0x4a8>)
 8002036:	2000      	movs	r0, #0
 8002038:	f013 fbe8 	bl	801580c <DSI_IO_WriteCmd>

  return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	080201e8 	.word	0x080201e8
 800204c:	080201ec 	.word	0x080201ec
 8002050:	08020144 	.word	0x08020144
 8002054:	0802014c 	.word	0x0802014c
 8002058:	080201f0 	.word	0x080201f0
 800205c:	080201f4 	.word	0x080201f4
 8002060:	080201f8 	.word	0x080201f8
 8002064:	080201fc 	.word	0x080201fc
 8002068:	08020200 	.word	0x08020200
 800206c:	08020154 	.word	0x08020154
 8002070:	08020204 	.word	0x08020204

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_Init+0x40>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_Init+0x40>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_Init+0x40>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 f91c 	bl	80022da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff fab6 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7fe ff60 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000030 	.word	0x20000030
 80020dc:	20009ee8 	.word	0x20009ee8

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20009ee8 	.word	0x20009ee8

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d005      	beq.n	800211e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_Delay+0x40>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800211e:	bf00      	nop
 8002120:	f7ff ffde 	bl	80020e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d8f7      	bhi.n	8002120 <HAL_Delay+0x28>
  {
  }
}
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000030 	.word	0x20000030

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db10      	blt.n	8002210 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	4909      	ldr	r1, [pc, #36]	; (800221c <__NVIC_DisableIRQ+0x40>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2001      	movs	r0, #1
 80021fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002202:	3320      	adds	r3, #32
 8002204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002208:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800220c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff2a 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002302:	f7ff ff3f 	bl	8002184 <__NVIC_GetPriorityGrouping>
 8002306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	6978      	ldr	r0, [r7, #20]
 800230e:	f7ff ffb1 	bl	8002274 <NVIC_EncodePriority>
 8002312:	4602      	mov	r2, r0
 8002314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff80 	bl	8002220 <__NVIC_SetPriority>
}
 8002320:	bf00      	nop
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff32 	bl	80021a0 <__NVIC_EnableIRQ>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff42 	bl	80021dc <__NVIC_DisableIRQ>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00e      	b.n	8002390 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	795b      	ldrb	r3, [r3, #5]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fe1a 	bl	8000fbc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_DMA_Start_IT+0x26>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e040      	b.n	8002440 <HAL_DMA_Start_IT+0xa8>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d12f      	bne.n	8002432 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f83a 	bl	8002460 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	223f      	movs	r2, #63	; 0x3f
 80023f2:	409a      	lsls	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0216 	orr.w	r2, r2, #22
 8002406:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0208 	orr.w	r2, r2, #8
 800241e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e005      	b.n	800243e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800243a:	2302      	movs	r3, #2
 800243c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800243e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800247c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d108      	bne.n	80024a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800249e:	e007      	b.n	80024b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e03b      	b.n	8002546 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f014 f88e 	bl	8016604 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	f023 0107 	bic.w	r1, r3, #7
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002526:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68d1      	ldr	r1, [r2, #12]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	430b      	orrs	r3, r1
 8002534:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e05f      	b.n	8002622 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8002562:	4b32      	ldr	r3, [pc, #200]	; (800262c <HAL_DMA2D_DeInit+0xdc>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d02e      	beq.n	80025cc <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d107      	bne.n	800258c <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f8c1 	bl	8002704 <HAL_DMA2D_Abort>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d021      	beq.n	80025cc <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e04a      	b.n	8002622 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b20      	cmp	r3, #32
 8002598:	d108      	bne.n	80025ac <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800259a:	2100      	movs	r1, #0
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f8f7 	bl	8002790 <HAL_DMA2D_CLUTLoading_Abort>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d011      	beq.n	80025cc <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e03a      	b.n	8002622 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d108      	bne.n	80025cc <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80025ba:	2101      	movs	r1, #1
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f8e7 	bl	8002790 <HAL_DMA2D_CLUTLoading_Abort>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e02a      	b.n	8002622 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	223f      	movs	r2, #63	; 0x3f
 80025da:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2200      	movs	r2, #0
 80025f2:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f014 f825 	bl	8016654 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_DMA2D_Start_IT+0x1c>
 8002648:	2302      	movs	r3, #2
 800264a:	e020      	b.n	800268e <HAL_DMA2D_Start_IT+0x5e>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa84 	bl	8002b74 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800267a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af02      	add	r7, sp, #8
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e024      	b.n	80026fc <HAL_DMA2D_BlendingStart_IT+0x66>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fa4d 	bl	8002b74 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80026e8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0205 	bic.w	r2, r3, #5
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0204 	orr.w	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002720:	f7ff fcde 	bl	80020e0 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002726:	e017      	b.n	8002758 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002728:	f7ff fcda 	bl	80020e0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002736:	d90f      	bls.n	8002758 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2203      	movs	r2, #3
 8002748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e017      	b.n	8002788 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e0      	bne.n	8002728 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002774:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0204 	orr.w	r2, r2, #4
 80027b0:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d103      	bne.n	80027c0 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	331c      	adds	r3, #28
 80027be:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80027c0:	f7ff fc8e 	bl	80020e0 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80027c6:	e017      	b.n	80027f8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80027c8:	f7ff fc8a 	bl	80020e0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d6:	d90f      	bls.n	80027f8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e016      	b.n	8002826 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e1      	bne.n	80027c8 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8002812:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d026      	beq.n	800289e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d021      	beq.n	800289e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002868:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2201      	movs	r2, #1
 800287c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2204      	movs	r2, #4
 8002882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d026      	beq.n	80028f6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d021      	beq.n	80028f6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028c0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2220      	movs	r2, #32
 80028c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2204      	movs	r2, #4
 80028da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d026      	beq.n	800294e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002906:	2b00      	cmp	r3, #0
 8002908:	d021      	beq.n	800294e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002918:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2208      	movs	r2, #8
 8002920:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	f043 0204 	orr.w	r2, r3, #4
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00e      	beq.n	8002980 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002970:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2204      	movs	r2, #4
 8002978:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f853 	bl	8002a26 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d024      	beq.n	80029d4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01f      	beq.n	80029d4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029a2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2202      	movs	r2, #2
 80029aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01f      	beq.n	8002a1e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01a      	beq.n	8002a1e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029f6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2210      	movs	r2, #16
 80029fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f80e 	bl	8002a3a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_DMA2D_ConfigLayer+0x20>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e079      	b.n	8002b64 <HAL_DMA2D_ConfigLayer+0x114>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	3318      	adds	r3, #24
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002a9a:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <HAL_DMA2D_ConfigLayer+0x120>)
 8002a9c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b0a      	cmp	r3, #10
 8002aa4:	d003      	beq.n	8002aae <HAL_DMA2D_ConfigLayer+0x5e>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b09      	cmp	r3, #9
 8002aac:	d107      	bne.n	8002abe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e005      	b.n	8002aca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d120      	bne.n	8002b12 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	ea02 0103 	and.w	r1, r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b0a      	cmp	r3, #10
 8002af8:	d003      	beq.n	8002b02 <HAL_DMA2D_ConfigLayer+0xb2>
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b09      	cmp	r3, #9
 8002b00:	d127      	bne.n	8002b52 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b10:	e01f      	b.n	8002b52 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	ea02 0103 	and.w	r1, r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b0a      	cmp	r3, #10
 8002b3a:	d003      	beq.n	8002b44 <HAL_DMA2D_ConfigLayer+0xf4>
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	d106      	bne.n	8002b52 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002b50:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	ff03000f 	.word	0xff03000f

08002b74 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b08b      	sub	sp, #44	; 0x2c
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	041a      	lsls	r2, r3, #16
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	431a      	orrs	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bac:	d174      	bne.n	8002c98 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002bb4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bbc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bc4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d108      	bne.n	8002be6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	e053      	b.n	8002c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d106      	bne.n	8002bfc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfa:	e048      	b.n	8002c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d111      	bne.n	8002c28 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	0cdb      	lsrs	r3, r3, #19
 8002c08:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	0a9b      	lsrs	r3, r3, #10
 8002c0e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	08db      	lsrs	r3, r3, #3
 8002c14:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	02db      	lsls	r3, r3, #11
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	e032      	b.n	8002c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d117      	bne.n	8002c60 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	0fdb      	lsrs	r3, r3, #31
 8002c34:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	0cdb      	lsrs	r3, r3, #19
 8002c3a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	0adb      	lsrs	r3, r3, #11
 8002c40:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	08db      	lsrs	r3, r3, #3
 8002c46:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	029b      	lsls	r3, r3, #10
 8002c50:	431a      	orrs	r2, r3
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	03db      	lsls	r3, r3, #15
 8002c56:	4313      	orrs	r3, r2
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	e016      	b.n	8002c8e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	0f1b      	lsrs	r3, r3, #28
 8002c64:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	0d1b      	lsrs	r3, r3, #20
 8002c6a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	0b1b      	lsrs	r3, r3, #12
 8002c70:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	011a      	lsls	r2, r3, #4
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	431a      	orrs	r2, r3
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	031b      	lsls	r3, r3, #12
 8002c86:	4313      	orrs	r3, r2
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002c96:	e003      	b.n	8002ca0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	372c      	adds	r7, #44	; 0x2c
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	019a      	lsls	r2, r3, #6
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cec:	f7ff f9f8 	bl	80020e0 <HAL_GetTick>
 8002cf0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002cf2:	e009      	b.n	8002d08 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002cf4:	f7ff f9f4 	bl	80020e0 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d02:	d901      	bls.n	8002d08 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e015      	b.n	8002d34 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0ee      	beq.n	8002cf4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	019a      	lsls	r2, r3, #6
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	ea42 0103 	orr.w	r1, r2, r3
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e108      	b.n	8002f62 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7c5b      	ldrb	r3, [r3, #17]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f013 fc02 	bl	8016564 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2203      	movs	r2, #3
 8002d64:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002d7a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d8e:	f7ff f9a7 	bl	80020e0 <HAL_GetTick>
 8002d92:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002d94:	e009      	b.n	8002daa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002d96:	f7ff f9a3 	bl	80020e0 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da4:	d901      	bls.n	8002daa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0db      	b.n	8002f62 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0ed      	beq.n	8002d96 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002dca:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002dce:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	009a      	lsls	r2, r3, #2
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	02db      	lsls	r3, r3, #11
 8002de6:	431a      	orrs	r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e22:	f7ff f95d 	bl	80020e0 <HAL_GetTick>
 8002e26:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002e28:	e009      	b.n	8002e3e <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e2a:	f7ff f959 	bl	80020e0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e38:	d901      	bls.n	8002e3e <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e091      	b.n	8002f62 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ed      	beq.n	8002e2a <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0206 	orr.w	r2, r2, #6
 8002e5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0203 	bic.w	r2, r2, #3
 8002e72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0203 	bic.w	r2, r2, #3
 8002ea0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ec8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6899      	ldr	r1, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_DSI_Init+0x1ae>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	e000      	b.n	8002eec <HAL_DSI_Init+0x1b0>
 8002eea:	2301      	movs	r3, #1
 8002eec:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_DSI_Init+0x230>)
 8002ef2:	fb02 f203 	mul.w	r2, r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	409a      	lsls	r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002f22:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	003d0900 	.word	0x003d0900

08002f70 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7c1b      	ldrb	r3, [r3, #16]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_DSI_ConfigErrorMonitor+0x16>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e0ab      	b.n	80030de <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002fc0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002fc4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002fe2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0202 	orr.w	r2, r2, #2
 800301e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 020c 	orr.w	r2, r2, #12
 800303c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0210 	orr.w	r2, r2, #16
 800305a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0220 	orr.w	r2, r2, #32
 8003078:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003096:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80030d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00f      	beq.n	8003122 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2201      	movs	r2, #1
 8003118:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f014 fb09 	bl	8017734 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00f      	beq.n	8003152 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2202      	movs	r2, #2
 8003148:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f014 fb69 	bl	8017824 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 808c 	beq.w	8003274 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003164:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800317c:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f043 0208 	orr.w	r2, r3, #8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f043 0210 	orr.w	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f804 	bl	800327c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7c1b      	ldrb	r3, [r3, #16]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_DSI_SetGenericVCID+0x16>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e016      	b.n	80032d4 <HAL_DSI_SetGenericVCID+0x44>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0203 	bic.w	r2, r2, #3
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7c1b      	ldrb	r3, [r3, #16]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0c5      	b.n	8003482 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0203 	bic.w	r2, r2, #3
 8003342:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68d9      	ldr	r1, [r3, #12]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0207 	bic.w	r2, r2, #7
 8003364:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6959      	ldr	r1, [r3, #20]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	431a      	orrs	r2, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 020f 	bic.w	r2, r2, #15
 8003392:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6919      	ldr	r1, [r3, #16]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 020e 	bic.w	r2, r2, #14
 80033b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005a      	lsls	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003404:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	431a      	orrs	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0202 	orr.w	r2, r2, #2
 8003476:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	7c1b      	ldrb	r3, [r3, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_DSI_ConfigCommand+0x16>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e049      	b.n	800353a <HAL_DSI_ConfigCommand+0xaa>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_DSI_ConfigCommand+0xb8>)
 80034b8:	400b      	ands	r3, r1
 80034ba:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80034ca:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80034d0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80034d6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80034dc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80034e2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80034e8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80034ee:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80034f4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80034fa:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003500:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003506:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0202 	bic.w	r2, r2, #2
 800351e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	fef080ff 	.word	0xfef080ff

0800354c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7c1b      	ldrb	r3, [r3, #16]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_DSI_ConfigFlowControl+0x16>
 800355e:	2302      	movs	r3, #2
 8003560:	e016      	b.n	8003590 <HAL_DSI_ConfigFlowControl+0x44>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 021f 	bic.w	r2, r2, #31
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7c1b      	ldrb	r3, [r3, #16]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_DSI_ConfigPhyTimer+0x16>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e058      	b.n	8003664 <HAL_DSI_ConfigPhyTimer+0xc8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bf38      	it	cc
 80035c4:	4613      	movcc	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80035d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	041a      	lsls	r2, r3, #16
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003606:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	041b      	lsls	r3, r3, #16
 800361c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003640:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	021a      	lsls	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7c1b      	ldrb	r3, [r3, #16]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003682:	2302      	movs	r3, #2
 8003684:	e0b4      	b.n	80037f0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800369a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6899      	ldr	r1, [r3, #8]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	b292      	uxth	r2, r2
 80036bc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	041a      	lsls	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	0c1b      	lsrs	r3, r3, #16
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	041b      	lsls	r3, r3, #16
 8003750:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800377a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7c1b      	ldrb	r3, [r3, #16]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_DSI_Start+0x14>
 800380c:	2302      	movs	r3, #2
 800380e:	e02b      	b.n	8003868 <HAL_DSI_Start+0x6c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0208 	orr.w	r2, r2, #8
 800384c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7c1b      	ldrb	r3, [r3, #16]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_DSI_Refresh+0x14>
 8003884:	2302      	movs	r3, #2
 8003886:	e010      	b.n	80038aa <HAL_DSI_Refresh+0x36>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	741a      	strb	r2, [r3, #16]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0204 	orr.w	r2, r2, #4
 800389e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b088      	sub	sp, #32
 80038ba:	af02      	add	r7, sp, #8
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	7c1b      	ldrb	r3, [r3, #16]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_DSI_ShortWrite+0x1a>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e010      	b.n	80038f2 <HAL_DSI_ShortWrite+0x3c>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7ff f9fc 	bl	8002cde <DSI_ShortWrite>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	741a      	strb	r2, [r3, #16]

  return status;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b08c      	sub	sp, #48	; 0x30
 80038fe:	af02      	add	r7, sp, #8
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	7c1b      	ldrb	r3, [r3, #16]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_DSI_LongWrite+0x1e>
 8003914:	2302      	movs	r3, #2
 8003916:	e084      	b.n	8003a22 <HAL_DSI_LongWrite+0x128>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800391e:	f7fe fbdf 	bl	80020e0 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003924:	e00c      	b.n	8003940 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003926:	f7fe fbdb 	bl	80020e0 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003934:	d904      	bls.n	8003940 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e070      	b.n	8003a22 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0eb      	beq.n	8003926 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b03      	cmp	r3, #3
 8003956:	bf28      	it	cs
 8003958:	2303      	movcs	r3, #3
 800395a:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800395c:	2300      	movs	r3, #0
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	e00f      	b.n	8003982 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	4413      	add	r3, r2
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	3301      	adds	r3, #1
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	4313      	orrs	r3, r2
 800397a:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	3301      	adds	r3, #1
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	6a3a      	ldr	r2, [r7, #32]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	429a      	cmp	r2, r3
 8003988:	d3eb      	bcc.n	8003962 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80039a2:	e028      	b.n	80039f6 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	e00e      	b.n	80039d6 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	4413      	add	r3, r2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	3301      	adds	r3, #1
 80039d4:	623b      	str	r3, [r7, #32]
 80039d6:	6a3a      	ldr	r2, [r7, #32]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d3ec      	bcc.n	80039b8 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1d3      	bne.n	80039a4 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a04:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	f7ff f949 	bl	8002cac <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7c1b      	ldrb	r3, [r3, #16]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e01b      	b.n	8003a78 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003a56:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	065a      	lsls	r2, r3, #25
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	e177      	b.n	8003d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	f040 8166 	bne.w	8003d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d00b      	beq.n	8003ade <HAL_GPIO_Init+0x5a>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d007      	beq.n	8003ade <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ad2:	2b11      	cmp	r3, #17
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b12      	cmp	r3, #18
 8003adc:	d130      	bne.n	8003b40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	2203      	movs	r2, #3
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b14:	2201      	movs	r2, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 0201 	and.w	r2, r3, #1
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0xfc>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b12      	cmp	r3, #18
 8003b7e:	d123      	bne.n	8003bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	08da      	lsrs	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3208      	adds	r2, #8
 8003b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	220f      	movs	r2, #15
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	08da      	lsrs	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3208      	adds	r2, #8
 8003bc2:	69b9      	ldr	r1, [r7, #24]
 8003bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0203 	and.w	r2, r3, #3
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80c0 	beq.w	8003d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <HAL_GPIO_Init+0x320>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	4a64      	ldr	r2, [pc, #400]	; (8003da4 <HAL_GPIO_Init+0x320>)
 8003c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c18:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1a:	4b62      	ldr	r3, [pc, #392]	; (8003da4 <HAL_GPIO_Init+0x320>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c26:	4a60      	ldr	r2, [pc, #384]	; (8003da8 <HAL_GPIO_Init+0x324>)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	220f      	movs	r2, #15
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a57      	ldr	r2, [pc, #348]	; (8003dac <HAL_GPIO_Init+0x328>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d037      	beq.n	8003cc2 <HAL_GPIO_Init+0x23e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a56      	ldr	r2, [pc, #344]	; (8003db0 <HAL_GPIO_Init+0x32c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_GPIO_Init+0x23a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a55      	ldr	r2, [pc, #340]	; (8003db4 <HAL_GPIO_Init+0x330>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02b      	beq.n	8003cba <HAL_GPIO_Init+0x236>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a54      	ldr	r2, [pc, #336]	; (8003db8 <HAL_GPIO_Init+0x334>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d025      	beq.n	8003cb6 <HAL_GPIO_Init+0x232>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a53      	ldr	r2, [pc, #332]	; (8003dbc <HAL_GPIO_Init+0x338>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01f      	beq.n	8003cb2 <HAL_GPIO_Init+0x22e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <HAL_GPIO_Init+0x33c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d019      	beq.n	8003cae <HAL_GPIO_Init+0x22a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a51      	ldr	r2, [pc, #324]	; (8003dc4 <HAL_GPIO_Init+0x340>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_GPIO_Init+0x226>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a50      	ldr	r2, [pc, #320]	; (8003dc8 <HAL_GPIO_Init+0x344>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00d      	beq.n	8003ca6 <HAL_GPIO_Init+0x222>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4f      	ldr	r2, [pc, #316]	; (8003dcc <HAL_GPIO_Init+0x348>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d007      	beq.n	8003ca2 <HAL_GPIO_Init+0x21e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4e      	ldr	r2, [pc, #312]	; (8003dd0 <HAL_GPIO_Init+0x34c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_GPIO_Init+0x21a>
 8003c9a:	2309      	movs	r3, #9
 8003c9c:	e012      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	e010      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	e00e      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	e00c      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003caa:	2306      	movs	r3, #6
 8003cac:	e00a      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cae:	2305      	movs	r3, #5
 8003cb0:	e008      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	e006      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e004      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e002      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	f002 0203 	and.w	r2, r2, #3
 8003cca:	0092      	lsls	r2, r2, #2
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd4:	4934      	ldr	r1, [pc, #208]	; (8003da8 <HAL_GPIO_Init+0x324>)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	3302      	adds	r3, #2
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce2:	4b3c      	ldr	r3, [pc, #240]	; (8003dd4 <HAL_GPIO_Init+0x350>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d06:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <HAL_GPIO_Init+0x350>)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d0c:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <HAL_GPIO_Init+0x350>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d30:	4a28      	ldr	r2, [pc, #160]	; (8003dd4 <HAL_GPIO_Init+0x350>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <HAL_GPIO_Init+0x350>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d5a:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <HAL_GPIO_Init+0x350>)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d60:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <HAL_GPIO_Init+0x350>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <HAL_GPIO_Init+0x350>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	f67f ae84 	bls.w	8003aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d98:	bf00      	nop
 8003d9a:	3724      	adds	r7, #36	; 0x24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40013800 	.word	0x40013800
 8003dac:	40020000 	.word	0x40020000
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40021400 	.word	0x40021400
 8003dc4:	40021800 	.word	0x40021800
 8003dc8:	40021c00 	.word	0x40021c00
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40022400 	.word	0x40022400
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e0d9      	b.n	8003fa8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df4:	2201      	movs	r2, #1
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	f040 80c9 	bne.w	8003fa2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_GPIO_DeInit+0x1e4>)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	3302      	adds	r3, #2
 8003e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	220f      	movs	r2, #15
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a62      	ldr	r2, [pc, #392]	; (8003fc0 <HAL_GPIO_DeInit+0x1e8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d037      	beq.n	8003eaa <HAL_GPIO_DeInit+0xd2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a61      	ldr	r2, [pc, #388]	; (8003fc4 <HAL_GPIO_DeInit+0x1ec>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d031      	beq.n	8003ea6 <HAL_GPIO_DeInit+0xce>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a60      	ldr	r2, [pc, #384]	; (8003fc8 <HAL_GPIO_DeInit+0x1f0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02b      	beq.n	8003ea2 <HAL_GPIO_DeInit+0xca>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a5f      	ldr	r2, [pc, #380]	; (8003fcc <HAL_GPIO_DeInit+0x1f4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d025      	beq.n	8003e9e <HAL_GPIO_DeInit+0xc6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a5e      	ldr	r2, [pc, #376]	; (8003fd0 <HAL_GPIO_DeInit+0x1f8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01f      	beq.n	8003e9a <HAL_GPIO_DeInit+0xc2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a5d      	ldr	r2, [pc, #372]	; (8003fd4 <HAL_GPIO_DeInit+0x1fc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d019      	beq.n	8003e96 <HAL_GPIO_DeInit+0xbe>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a5c      	ldr	r2, [pc, #368]	; (8003fd8 <HAL_GPIO_DeInit+0x200>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_DeInit+0xba>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <HAL_GPIO_DeInit+0x204>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_GPIO_DeInit+0xb6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a5a      	ldr	r2, [pc, #360]	; (8003fe0 <HAL_GPIO_DeInit+0x208>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_DeInit+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a59      	ldr	r2, [pc, #356]	; (8003fe4 <HAL_GPIO_DeInit+0x20c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_GPIO_DeInit+0xae>
 8003e82:	2309      	movs	r3, #9
 8003e84:	e012      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e86:	230a      	movs	r3, #10
 8003e88:	e010      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	e00e      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e00c      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e92:	2306      	movs	r3, #6
 8003e94:	e00a      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e96:	2305      	movs	r3, #5
 8003e98:	e008      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e004      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e002      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_GPIO_DeInit+0xd4>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	f002 0203 	and.w	r2, r2, #3
 8003eb2:	0092      	lsls	r2, r2, #2
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d132      	bne.n	8003f22 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ebc:	4b4a      	ldr	r3, [pc, #296]	; (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4948      	ldr	r1, [pc, #288]	; (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003eca:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	4945      	ldr	r1, [pc, #276]	; (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ed8:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	4941      	ldr	r1, [pc, #260]	; (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ee6:	4b40      	ldr	r3, [pc, #256]	; (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	493e      	ldr	r1, [pc, #248]	; (8003fe8 <HAL_GPIO_DeInit+0x210>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	220f      	movs	r2, #15
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f04:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <HAL_GPIO_DeInit+0x1e4>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	43da      	mvns	r2, r3
 8003f14:	4829      	ldr	r0, [pc, #164]	; (8003fbc <HAL_GPIO_DeInit+0x1e4>)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	08da      	lsrs	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3208      	adds	r2, #8
 8003f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	08d2      	lsrs	r2, r2, #3
 8003f58:	4019      	ands	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3208      	adds	r2, #8
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	401a      	ands	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2103      	movs	r1, #3
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b0f      	cmp	r3, #15
 8003fac:	f67f af22 	bls.w	8003df4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	40020400 	.word	0x40020400
 8003fc8:	40020800 	.word	0x40020800
 8003fcc:	40020c00 	.word	0x40020c00
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40021400 	.word	0x40021400
 8003fd8:	40021800 	.word	0x40021800
 8003fdc:	40021c00 	.word	0x40021c00
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40022400 	.word	0x40022400
 8003fe8:	40013c00 	.word	0x40013c00

08003fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	887b      	ldrh	r3, [r7, #2]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e001      	b.n	800400e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
 8004028:	4613      	mov	r3, r2
 800402a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800402c:	787b      	ldrb	r3, [r7, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004038:	e003      	b.n	8004042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	041a      	lsls	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	619a      	str	r2, [r3, #24]
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800404e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004050:	b08f      	sub	sp, #60	; 0x3c
 8004052:	af0a      	add	r7, sp, #40	; 0x28
 8004054:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e054      	b.n	800410a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f013 fea8 	bl	8017dd0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2203      	movs	r2, #3
 8004084:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f007 fdc0 	bl	800bc24 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	687e      	ldr	r6, [r7, #4]
 80040ac:	466d      	mov	r5, sp
 80040ae:	f106 0410 	add.w	r4, r6, #16
 80040b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040be:	e885 0003 	stmia.w	r5, {r0, r1}
 80040c2:	1d33      	adds	r3, r6, #4
 80040c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c6:	6838      	ldr	r0, [r7, #0]
 80040c8:	f007 fd3a 	bl	800bb40 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f007 fdb7 	bl	800bc46 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	687e      	ldr	r6, [r7, #4]
 80040e0:	466d      	mov	r5, sp
 80040e2:	f106 0410 	add.w	r4, r6, #16
 80040e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040f6:	1d33      	adds	r3, r6, #4
 80040f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040fa:	6838      	ldr	r0, [r7, #0]
 80040fc:	f007 feca 	bl	800be94 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004112 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004112:	b590      	push	{r4, r7, lr}
 8004114:	b089      	sub	sp, #36	; 0x24
 8004116:	af04      	add	r7, sp, #16
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	4608      	mov	r0, r1
 800411c:	4611      	mov	r1, r2
 800411e:	461a      	mov	r2, r3
 8004120:	4603      	mov	r3, r0
 8004122:	70fb      	strb	r3, [r7, #3]
 8004124:	460b      	mov	r3, r1
 8004126:	70bb      	strb	r3, [r7, #2]
 8004128:	4613      	mov	r3, r2
 800412a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_HCD_HC_Init+0x28>
 8004136:	2302      	movs	r3, #2
 8004138:	e07f      	b.n	800423a <HAL_HCD_HC_Init+0x128>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	440b      	add	r3, r1
 8004150:	333d      	adds	r3, #61	; 0x3d
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	3338      	adds	r3, #56	; 0x38
 8004166:	787a      	ldrb	r2, [r7, #1]
 8004168:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	440b      	add	r3, r1
 8004178:	3340      	adds	r3, #64	; 0x40
 800417a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800417c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	3339      	adds	r3, #57	; 0x39
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	333f      	adds	r3, #63	; 0x3f
 80041a2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80041a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	78bb      	ldrb	r3, [r7, #2]
 80041ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b0:	b2d8      	uxtb	r0, r3
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	440b      	add	r3, r1
 80041be:	333a      	adds	r3, #58	; 0x3a
 80041c0:	4602      	mov	r2, r0
 80041c2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80041c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	da0a      	bge.n	80041e2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	440b      	add	r3, r1
 80041da:	333b      	adds	r3, #59	; 0x3b
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	e009      	b.n	80041f6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	333b      	adds	r3, #59	; 0x3b
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	333c      	adds	r3, #60	; 0x3c
 8004206:	f897 2020 	ldrb.w	r2, [r7, #32]
 800420a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	787c      	ldrb	r4, [r7, #1]
 8004212:	78ba      	ldrb	r2, [r7, #2]
 8004214:	78f9      	ldrb	r1, [r7, #3]
 8004216:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004218:	9302      	str	r3, [sp, #8]
 800421a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	4623      	mov	r3, r4
 8004228:	f007 ffaa 	bl	800c180 <USB_HC_Init>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bd90      	pop	{r4, r7, pc}

08004242 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_HCD_HC_Halt+0x1e>
 800425c:	2302      	movs	r3, #2
 800425e:	e00f      	b.n	8004280 <HAL_HCD_HC_Halt+0x3e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	4611      	mov	r1, r2
 8004270:	4618      	mov	r0, r3
 8004272:	f008 f9e4 	bl	800c63e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4603      	mov	r3, r0
 8004298:	70fb      	strb	r3, [r7, #3]
 800429a:	460b      	mov	r3, r1
 800429c:	70bb      	strb	r3, [r7, #2]
 800429e:	4613      	mov	r3, r2
 80042a0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	440b      	add	r3, r1
 80042b0:	333b      	adds	r3, #59	; 0x3b
 80042b2:	78ba      	ldrb	r2, [r7, #2]
 80042b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	333f      	adds	r3, #63	; 0x3f
 80042c6:	787a      	ldrb	r2, [r7, #1]
 80042c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80042ca:	7c3b      	ldrb	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	3342      	adds	r3, #66	; 0x42
 80042e0:	2203      	movs	r2, #3
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e009      	b.n	80042fa <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	440b      	add	r3, r1
 80042f4:	3342      	adds	r3, #66	; 0x42
 80042f6:	2202      	movs	r2, #2
 80042f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80042fa:	787b      	ldrb	r3, [r7, #1]
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	f200 80d6 	bhi.w	80044ae <HAL_HCD_HC_SubmitRequest+0x226>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <HAL_HCD_HC_SubmitRequest+0x80>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004319 	.word	0x08004319
 800430c:	08004499 	.word	0x08004499
 8004310:	08004385 	.word	0x08004385
 8004314:	0800440f 	.word	0x0800440f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004318:	7c3b      	ldrb	r3, [r7, #16]
 800431a:	2b01      	cmp	r3, #1
 800431c:	f040 80c9 	bne.w	80044b2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8004320:	78bb      	ldrb	r3, [r7, #2]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 80c5 	bne.w	80044b2 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8004328:	8b3b      	ldrh	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	440b      	add	r3, r1
 800433c:	3351      	adds	r3, #81	; 0x51
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	440b      	add	r3, r1
 8004350:	3351      	adds	r3, #81	; 0x51
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	440b      	add	r3, r1
 8004366:	3342      	adds	r3, #66	; 0x42
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800436c:	e0a1      	b.n	80044b2 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	440b      	add	r3, r1
 800437c:	3342      	adds	r3, #66	; 0x42
 800437e:	2202      	movs	r2, #2
 8004380:	701a      	strb	r2, [r3, #0]
      break;
 8004382:	e096      	b.n	80044b2 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004384:	78bb      	ldrb	r3, [r7, #2]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d120      	bne.n	80043cc <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	440b      	add	r3, r1
 8004398:	3351      	adds	r3, #81	; 0x51
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	440b      	add	r3, r1
 80043ae:	3342      	adds	r3, #66	; 0x42
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80043b4:	e07e      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	440b      	add	r3, r1
 80043c4:	3342      	adds	r3, #66	; 0x42
 80043c6:	2202      	movs	r2, #2
 80043c8:	701a      	strb	r2, [r3, #0]
      break;
 80043ca:	e073      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	440b      	add	r3, r1
 80043da:	3350      	adds	r3, #80	; 0x50
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	440b      	add	r3, r1
 80043f0:	3342      	adds	r3, #66	; 0x42
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
      break;
 80043f6:	e05d      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	440b      	add	r3, r1
 8004406:	3342      	adds	r3, #66	; 0x42
 8004408:	2202      	movs	r2, #2
 800440a:	701a      	strb	r2, [r3, #0]
      break;
 800440c:	e052      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800440e:	78bb      	ldrb	r3, [r7, #2]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d120      	bne.n	8004456 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	440b      	add	r3, r1
 8004422:	3351      	adds	r3, #81	; 0x51
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	440b      	add	r3, r1
 8004438:	3342      	adds	r3, #66	; 0x42
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800443e:	e039      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	3342      	adds	r3, #66	; 0x42
 8004450:	2202      	movs	r2, #2
 8004452:	701a      	strb	r2, [r3, #0]
      break;
 8004454:	e02e      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	3350      	adds	r3, #80	; 0x50
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	3342      	adds	r3, #66	; 0x42
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
      break;
 8004480:	e018      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	3342      	adds	r3, #66	; 0x42
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]
      break;
 8004496:	e00d      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	3342      	adds	r3, #66	; 0x42
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
      break;
 80044ac:	e002      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80044b2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	440b      	add	r3, r1
 80044c2:	3344      	adds	r3, #68	; 0x44
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	8b39      	ldrh	r1, [r7, #24]
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4403      	add	r3, r0
 80044d8:	3348      	adds	r3, #72	; 0x48
 80044da:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	440b      	add	r3, r1
 80044ea:	335c      	adds	r3, #92	; 0x5c
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	440b      	add	r3, r1
 80044fe:	334c      	adds	r3, #76	; 0x4c
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	440b      	add	r3, r1
 8004512:	3339      	adds	r3, #57	; 0x39
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	440b      	add	r3, r1
 8004526:	335d      	adds	r3, #93	; 0x5d
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	3338      	adds	r3, #56	; 0x38
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	18d1      	adds	r1, r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	f007 ff24 	bl	800c394 <USB_HC_StartXfer>
 800454c:	4603      	mov	r3, r0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop

08004558 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f007 fc4d 	bl	800be0e <USB_GetMode>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	f040 80f1 	bne.w	800475e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f007 fc31 	bl	800bde8 <USB_ReadInterrupts>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80e7 	beq.w	800475c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f007 fc28 	bl	800bde8 <USB_ReadInterrupts>
 8004598:	4603      	mov	r3, r0
 800459a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800459e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a2:	d104      	bne.n	80045ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f007 fc18 	bl	800bde8 <USB_ReadInterrupts>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c2:	d104      	bne.n	80045ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f007 fc08 	bl	800bde8 <USB_ReadInterrupts>
 80045d8:	4603      	mov	r3, r0
 80045da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e2:	d104      	bne.n	80045ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f007 fbf8 	bl	800bde8 <USB_ReadInterrupts>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d103      	bne.n	800460a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2202      	movs	r2, #2
 8004608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f007 fbea 	bl	800bde8 <USB_ReadInterrupts>
 8004614:	4603      	mov	r3, r0
 8004616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800461a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461e:	d117      	bne.n	8004650 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800462e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004632:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f013 fc49 	bl	8017ecc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2101      	movs	r1, #1
 8004640:	4618      	mov	r0, r3
 8004642:	f007 fcd7 	bl	800bff4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800464e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f007 fbc7 	bl	800bde8 <USB_ReadInterrupts>
 800465a:	4603      	mov	r3, r0
 800465c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004664:	d102      	bne.n	800466c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f001 f8c8 	bl	80057fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f007 fbb9 	bl	800bde8 <USB_ReadInterrupts>
 8004676:	4603      	mov	r3, r0
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b08      	cmp	r3, #8
 800467e:	d106      	bne.n	800468e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f013 fc07 	bl	8017e94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2208      	movs	r2, #8
 800468c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f007 fba8 	bl	800bde8 <USB_ReadInterrupts>
 8004698:	4603      	mov	r3, r0
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046a2:	d138      	bne.n	8004716 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f007 ffb7 	bl	800c61c <USB_HC_ReadInterrupt>
 80046ae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e025      	b.n	8004702 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d018      	beq.n	80046fc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e0:	d106      	bne.n	80046f0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f8cf 	bl	800488c <HCD_HC_IN_IRQHandler>
 80046ee:	e005      	b.n	80046fc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fc5f 	bl	8004fba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	3301      	adds	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	429a      	cmp	r2, r3
 800470a:	d3d4      	bcc.n	80046b6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f007 fb64 	bl	800bde8 <USB_ReadInterrupts>
 8004720:	4603      	mov	r3, r0
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b10      	cmp	r3, #16
 8004728:	d101      	bne.n	800472e <HAL_HCD_IRQHandler+0x1d6>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <HAL_HCD_IRQHandler+0x1d8>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d014      	beq.n	800475e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0210 	bic.w	r2, r2, #16
 8004742:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 ffad 	bl	80056a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0210 	orr.w	r2, r2, #16
 8004758:	619a      	str	r2, [r3, #24]
 800475a:	e000      	b.n	800475e <HAL_HCD_IRQHandler+0x206>
      return;
 800475c:	bf00      	nop
    }
  }
}
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_HCD_Start+0x16>
 8004776:	2302      	movs	r3, #2
 8004778:	e013      	b.n	80047a2 <HAL_HCD_Start+0x3e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f007 fa3b 	bl	800bc02 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	4618      	mov	r0, r3
 8004794:	f007 fc92 	bl	800c0bc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_HCD_Stop+0x16>
 80047bc:	2302      	movs	r3, #2
 80047be:	e00d      	b.n	80047dc <HAL_HCD_Stop+0x32>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f008 f871 	bl	800c8b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f007 fc39 	bl	800c068 <USB_ResetPort>
 80047f6:	4603      	mov	r3, r0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	440b      	add	r3, r1
 800481a:	335c      	adds	r3, #92	; 0x5c
 800481c:	781b      	ldrb	r3, [r3, #0]
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	440b      	add	r3, r1
 8004844:	334c      	adds	r3, #76	; 0x4c
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f007 fc7b 	bl	800c15c <USB_GetCurrentFrame>
 8004866:	4603      	mov	r3, r0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f007 fc56 	bl	800c12e <USB_GetHostSpeed>
 8004882:	4603      	mov	r3, r0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d119      	bne.n	80048f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	461a      	mov	r2, r3
 80048ca:	2304      	movs	r3, #4
 80048cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048e8:	f043 0302 	orr.w	r3, r3, #2
 80048ec:	60d3      	str	r3, [r2, #12]
 80048ee:	e095      	b.n	8004a1c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b20      	cmp	r3, #32
 8004904:	d109      	bne.n	800491a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004912:	461a      	mov	r2, r3
 8004914:	2320      	movs	r3, #32
 8004916:	6093      	str	r3, [r2, #8]
 8004918:	e080      	b.n	8004a1c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b08      	cmp	r3, #8
 800492e:	d134      	bne.n	800499a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4413      	add	r3, r2
 8004938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	440a      	add	r2, r1
 8004946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800494a:	f043 0302 	orr.w	r3, r3, #2
 800494e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	335d      	adds	r3, #93	; 0x5d
 8004960:	2205      	movs	r2, #5
 8004962:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004970:	461a      	mov	r2, r3
 8004972:	2310      	movs	r3, #16
 8004974:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4413      	add	r3, r2
 800497e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004982:	461a      	mov	r2, r3
 8004984:	2308      	movs	r3, #8
 8004986:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f007 fe53 	bl	800c63e <USB_HC_Halt>
 8004998:	e040      	b.n	8004a1c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b0:	d134      	bne.n	8004a1c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049cc:	f043 0302 	orr.w	r3, r3, #2
 80049d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	4611      	mov	r1, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f007 fe2e 	bl	800c63e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ee:	461a      	mov	r2, r3
 80049f0:	2310      	movs	r3, #16
 80049f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	440b      	add	r3, r1
 8004a02:	335d      	adds	r3, #93	; 0x5d
 8004a04:	2208      	movs	r2, #8
 8004a06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	461a      	mov	r2, r3
 8004a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a1a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a32:	d122      	bne.n	8004a7a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a4e:	f043 0302 	orr.w	r3, r3, #2
 8004a52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f007 fded 	bl	800c63e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a70:	461a      	mov	r2, r3
 8004a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a76:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a78:	e29b      	b.n	8004fb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	f040 80c1 	bne.w	8004c14 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01b      	beq.n	8004ad2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3348      	adds	r3, #72	; 0x48
 8004aaa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	0159      	lsls	r1, r3, #5
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004abe:	1ad1      	subs	r1, r2, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4403      	add	r3, r0
 8004ace:	334c      	adds	r3, #76	; 0x4c
 8004ad0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	440b      	add	r3, r1
 8004ae0:	335d      	adds	r3, #93	; 0x5d
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	440b      	add	r3, r1
 8004af4:	3358      	adds	r3, #88	; 0x58
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b06:	461a      	mov	r2, r3
 8004b08:	2301      	movs	r3, #1
 8004b0a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	440b      	add	r3, r1
 8004b1a:	333f      	adds	r3, #63	; 0x3f
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	440b      	add	r3, r1
 8004b30:	333f      	adds	r3, #63	; 0x3f
 8004b32:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d121      	bne.n	8004b7c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b52:	f043 0302 	orr.w	r3, r3, #2
 8004b56:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f007 fd6b 	bl	800c63e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b74:	461a      	mov	r2, r3
 8004b76:	2310      	movs	r3, #16
 8004b78:	6093      	str	r3, [r2, #8]
 8004b7a:	e034      	b.n	8004be6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	440b      	add	r3, r1
 8004b8a:	333f      	adds	r3, #63	; 0x3f
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d129      	bne.n	8004be6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	440b      	add	r3, r1
 8004bc0:	335c      	adds	r3, #92	; 0x5c
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	b2d8      	uxtb	r0, r3
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	440b      	add	r3, r1
 8004bd8:	335c      	adds	r3, #92	; 0x5c
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4601      	mov	r1, r0
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f013 f981 	bl	8017ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3350      	adds	r3, #80	; 0x50
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f083 0301 	eor.w	r3, r3, #1
 8004bfc:	b2d8      	uxtb	r0, r3
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3350      	adds	r3, #80	; 0x50
 8004c0e:	4602      	mov	r2, r0
 8004c10:	701a      	strb	r2, [r3, #0]
}
 8004c12:	e1ce      	b.n	8004fb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	f040 80f1 	bne.w	8004e0e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c46:	f023 0302 	bic.w	r3, r3, #2
 8004c4a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	335d      	adds	r3, #93	; 0x5d
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d10a      	bne.n	8004c78 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	440b      	add	r3, r1
 8004c70:	335c      	adds	r3, #92	; 0x5c
 8004c72:	2201      	movs	r2, #1
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e0b0      	b.n	8004dda <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	440b      	add	r3, r1
 8004c86:	335d      	adds	r3, #93	; 0x5d
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	d10a      	bne.n	8004ca4 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	440b      	add	r3, r1
 8004c9c:	335c      	adds	r3, #92	; 0x5c
 8004c9e:	2205      	movs	r2, #5
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e09a      	b.n	8004dda <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	440b      	add	r3, r1
 8004cb2:	335d      	adds	r3, #93	; 0x5d
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d00a      	beq.n	8004cd0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	440b      	add	r3, r1
 8004cc8:	335d      	adds	r3, #93	; 0x5d
 8004cca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d156      	bne.n	8004d7e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	440b      	add	r3, r1
 8004cde:	3358      	adds	r3, #88	; 0x58
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4403      	add	r3, r0
 8004cf2:	3358      	adds	r3, #88	; 0x58
 8004cf4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	440b      	add	r3, r1
 8004d04:	3358      	adds	r3, #88	; 0x58
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d914      	bls.n	8004d36 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	440b      	add	r3, r1
 8004d1a:	3358      	adds	r3, #88	; 0x58
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	440b      	add	r3, r1
 8004d2e:	335c      	adds	r3, #92	; 0x5c
 8004d30:	2204      	movs	r2, #4
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e009      	b.n	8004d4a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	440b      	add	r3, r1
 8004d44:	335c      	adds	r3, #92	; 0x5c
 8004d46:	2202      	movs	r2, #2
 8004d48:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d60:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d68:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e02d      	b.n	8004dda <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	440b      	add	r3, r1
 8004d8c:	335d      	adds	r3, #93	; 0x5d
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d122      	bne.n	8004dda <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	440b      	add	r3, r1
 8004da2:	335c      	adds	r3, #92	; 0x5c
 8004da4:	2202      	movs	r2, #2
 8004da6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dbe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dc6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de6:	461a      	mov	r2, r3
 8004de8:	2302      	movs	r3, #2
 8004dea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	b2d8      	uxtb	r0, r3
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	440b      	add	r3, r1
 8004dfe:	335c      	adds	r3, #92	; 0x5c
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	4601      	mov	r1, r0
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f013 f86e 	bl	8017ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e0c:	e0d1      	b.n	8004fb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b80      	cmp	r3, #128	; 0x80
 8004e22:	d13e      	bne.n	8004ea2 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3e:	f043 0302 	orr.w	r3, r3, #2
 8004e42:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	440b      	add	r3, r1
 8004e52:	3358      	adds	r3, #88	; 0x58
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4403      	add	r3, r0
 8004e66:	3358      	adds	r3, #88	; 0x58
 8004e68:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	440b      	add	r3, r1
 8004e78:	335d      	adds	r3, #93	; 0x5d
 8004e7a:	2206      	movs	r2, #6
 8004e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f007 fbd8 	bl	800c63e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	6093      	str	r3, [r2, #8]
}
 8004ea0:	e087      	b.n	8004fb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d17c      	bne.n	8004fb2 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	440b      	add	r3, r1
 8004ec6:	333f      	adds	r3, #63	; 0x3f
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d122      	bne.n	8004f14 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	440b      	add	r3, r1
 8004edc:	3358      	adds	r3, #88	; 0x58
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004efc:	f043 0302 	orr.w	r3, r3, #2
 8004f00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f007 fb96 	bl	800c63e <USB_HC_Halt>
 8004f12:	e045      	b.n	8004fa0 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	440b      	add	r3, r1
 8004f22:	333f      	adds	r3, #63	; 0x3f
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	440b      	add	r3, r1
 8004f38:	333f      	adds	r3, #63	; 0x3f
 8004f3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d12f      	bne.n	8004fa0 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3358      	adds	r3, #88	; 0x58
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d121      	bne.n	8004fa0 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	440b      	add	r3, r1
 8004f6a:	335d      	adds	r3, #93	; 0x5d
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8a:	f043 0302 	orr.w	r3, r3, #2
 8004f8e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f007 fb4f 	bl	800c63e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fac:	461a      	mov	r2, r3
 8004fae:	2310      	movs	r3, #16
 8004fb0:	6093      	str	r3, [r2, #8]
}
 8004fb2:	bf00      	nop
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b086      	sub	sp, #24
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d119      	bne.n	800501e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4413      	add	r3, r2
 8005004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	440a      	add	r2, r1
 8005012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005016:	f043 0302 	orr.w	r3, r3, #2
 800501a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800501c:	e33e      	b.n	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b20      	cmp	r3, #32
 8005032:	d141      	bne.n	80050b8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005040:	461a      	mov	r2, r3
 8005042:	2320      	movs	r3, #32
 8005044:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	440b      	add	r3, r1
 8005054:	333d      	adds	r3, #61	; 0x3d
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b01      	cmp	r3, #1
 800505a:	f040 831f 	bne.w	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	333d      	adds	r3, #61	; 0x3d
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	440b      	add	r3, r1
 8005080:	335c      	adds	r3, #92	; 0x5c
 8005082:	2202      	movs	r2, #2
 8005084:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	440a      	add	r2, r1
 800509c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a0:	f043 0302 	orr.w	r3, r3, #2
 80050a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f007 fac4 	bl	800c63e <USB_HC_Halt>
}
 80050b6:	e2f1      	b.n	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d13f      	bne.n	800514e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	440b      	add	r3, r1
 80050dc:	335d      	adds	r3, #93	; 0x5d
 80050de:	2204      	movs	r2, #4
 80050e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	440b      	add	r3, r1
 80050f0:	333d      	adds	r3, #61	; 0x3d
 80050f2:	2201      	movs	r2, #1
 80050f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	440b      	add	r3, r1
 8005104:	3358      	adds	r3, #88	; 0x58
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	440a      	add	r2, r1
 8005120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005124:	f043 0302 	orr.w	r3, r3, #2
 8005128:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	4611      	mov	r1, r2
 8005134:	4618      	mov	r0, r3
 8005136:	f007 fa82 	bl	800c63e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005146:	461a      	mov	r2, r3
 8005148:	2340      	movs	r3, #64	; 0x40
 800514a:	6093      	str	r3, [r2, #8]
}
 800514c:	e2a6      	b.n	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4413      	add	r3, r2
 8005156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005164:	d122      	bne.n	80051ac <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	440a      	add	r2, r1
 800517c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f007 fa54 	bl	800c63e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a2:	461a      	mov	r2, r3
 80051a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a8:	6093      	str	r3, [r2, #8]
}
 80051aa:	e277      	b.n	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d135      	bne.n	800522e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	3358      	adds	r3, #88	; 0x58
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f007 fa1c 	bl	800c63e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4413      	add	r3, r2
 800520e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005212:	461a      	mov	r2, r3
 8005214:	2301      	movs	r3, #1
 8005216:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	335d      	adds	r3, #93	; 0x5d
 8005228:	2201      	movs	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]
}
 800522c:	e236      	b.n	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b08      	cmp	r3, #8
 8005242:	d12b      	bne.n	800529c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005250:	461a      	mov	r2, r3
 8005252:	2308      	movs	r3, #8
 8005254:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	440a      	add	r2, r1
 800526c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f007 f9dc 	bl	800c63e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	440b      	add	r3, r1
 8005294:	335d      	adds	r3, #93	; 0x5d
 8005296:	2205      	movs	r2, #5
 8005298:	701a      	strb	r2, [r3, #0]
}
 800529a:	e1ff      	b.n	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d155      	bne.n	800535e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	440b      	add	r3, r1
 80052c0:	3358      	adds	r3, #88	; 0x58
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	440b      	add	r3, r1
 80052d4:	335d      	adds	r3, #93	; 0x5d
 80052d6:	2203      	movs	r2, #3
 80052d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	333d      	adds	r3, #61	; 0x3d
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d114      	bne.n	800531a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	440b      	add	r3, r1
 80052fe:	333c      	adds	r3, #60	; 0x3c
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	440b      	add	r3, r1
 8005314:	333d      	adds	r3, #61	; 0x3d
 8005316:	2201      	movs	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	440a      	add	r2, r1
 8005330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005334:	f043 0302 	orr.w	r3, r3, #2
 8005338:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f007 f97a 	bl	800c63e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	461a      	mov	r2, r3
 8005358:	2310      	movs	r3, #16
 800535a:	6093      	str	r3, [r2, #8]
}
 800535c:	e19e      	b.n	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005370:	2b80      	cmp	r3, #128	; 0x80
 8005372:	d12b      	bne.n	80053cc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4413      	add	r3, r2
 800537c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	440a      	add	r2, r1
 800538a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538e:	f043 0302 	orr.w	r3, r3, #2
 8005392:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	4611      	mov	r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f007 f94d 	bl	800c63e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	440b      	add	r3, r1
 80053b2:	335d      	adds	r3, #93	; 0x5d
 80053b4:	2206      	movs	r2, #6
 80053b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c4:	461a      	mov	r2, r3
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	6093      	str	r3, [r2, #8]
}
 80053ca:	e167      	b.n	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e2:	d135      	bne.n	8005450 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	0151      	lsls	r1, r2, #5
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	440a      	add	r2, r1
 80053fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053fe:	f043 0302 	orr.w	r3, r3, #2
 8005402:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	4611      	mov	r1, r2
 800540e:	4618      	mov	r0, r3
 8005410:	f007 f915 	bl	800c63e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005420:	461a      	mov	r2, r3
 8005422:	2310      	movs	r3, #16
 8005424:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4413      	add	r3, r2
 800542e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005432:	461a      	mov	r2, r3
 8005434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005438:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	440b      	add	r3, r1
 8005448:	335d      	adds	r3, #93	; 0x5d
 800544a:	2208      	movs	r2, #8
 800544c:	701a      	strb	r2, [r3, #0]
}
 800544e:	e125      	b.n	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b02      	cmp	r3, #2
 8005464:	f040 811a 	bne.w	800569c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	440a      	add	r2, r1
 800547e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005482:	f023 0302 	bic.w	r3, r3, #2
 8005486:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	440b      	add	r3, r1
 8005496:	335d      	adds	r3, #93	; 0x5d
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d137      	bne.n	800550e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	440b      	add	r3, r1
 80054ac:	335c      	adds	r3, #92	; 0x5c
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	440b      	add	r3, r1
 80054c0:	333f      	adds	r3, #63	; 0x3f
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d00b      	beq.n	80054e0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	440b      	add	r3, r1
 80054d6:	333f      	adds	r3, #63	; 0x3f
 80054d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054da:	2b03      	cmp	r3, #3
 80054dc:	f040 80c5 	bne.w	800566a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	440b      	add	r3, r1
 80054ee:	3351      	adds	r3, #81	; 0x51
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f083 0301 	eor.w	r3, r3, #1
 80054f6:	b2d8      	uxtb	r0, r3
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	440b      	add	r3, r1
 8005506:	3351      	adds	r3, #81	; 0x51
 8005508:	4602      	mov	r2, r0
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	e0ad      	b.n	800566a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	440b      	add	r3, r1
 800551c:	335d      	adds	r3, #93	; 0x5d
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d10a      	bne.n	800553a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	440b      	add	r3, r1
 8005532:	335c      	adds	r3, #92	; 0x5c
 8005534:	2202      	movs	r2, #2
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e097      	b.n	800566a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	440b      	add	r3, r1
 8005548:	335d      	adds	r3, #93	; 0x5d
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b04      	cmp	r3, #4
 800554e:	d10a      	bne.n	8005566 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	440b      	add	r3, r1
 800555e:	335c      	adds	r3, #92	; 0x5c
 8005560:	2202      	movs	r2, #2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e081      	b.n	800566a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	440b      	add	r3, r1
 8005574:	335d      	adds	r3, #93	; 0x5d
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d10a      	bne.n	8005592 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	440b      	add	r3, r1
 800558a:	335c      	adds	r3, #92	; 0x5c
 800558c:	2205      	movs	r2, #5
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e06b      	b.n	800566a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	440b      	add	r3, r1
 80055a0:	335d      	adds	r3, #93	; 0x5d
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b06      	cmp	r3, #6
 80055a6:	d00a      	beq.n	80055be <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	440b      	add	r3, r1
 80055b6:	335d      	adds	r3, #93	; 0x5d
 80055b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d155      	bne.n	800566a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	440b      	add	r3, r1
 80055cc:	3358      	adds	r3, #88	; 0x58
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	1c59      	adds	r1, r3, #1
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4403      	add	r3, r0
 80055e0:	3358      	adds	r3, #88	; 0x58
 80055e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	440b      	add	r3, r1
 80055f2:	3358      	adds	r3, #88	; 0x58
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d914      	bls.n	8005624 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	440b      	add	r3, r1
 8005608:	3358      	adds	r3, #88	; 0x58
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	440b      	add	r3, r1
 800561c:	335c      	adds	r3, #92	; 0x5c
 800561e:	2204      	movs	r2, #4
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	e009      	b.n	8005638 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	440b      	add	r3, r1
 8005632:	335c      	adds	r3, #92	; 0x5c
 8005634:	2202      	movs	r2, #2
 8005636:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800564e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005656:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005664:	461a      	mov	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4413      	add	r3, r2
 8005672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005676:	461a      	mov	r2, r3
 8005678:	2302      	movs	r3, #2
 800567a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	b2d8      	uxtb	r0, r3
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	440b      	add	r3, r1
 800568e:	335c      	adds	r3, #92	; 0x5c
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	4601      	mov	r1, r0
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f012 fc26 	bl	8017ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800569c:	bf00      	nop
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	0c5b      	lsrs	r3, r3, #17
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d003      	beq.n	80056e8 <HCD_RXQLVL_IRQHandler+0x44>
 80056e0:	2b05      	cmp	r3, #5
 80056e2:	f000 8082 	beq.w	80057ea <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80056e6:	e083      	b.n	80057f0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d07f      	beq.n	80057ee <HCD_RXQLVL_IRQHandler+0x14a>
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	440b      	add	r3, r1
 80056fc:	3344      	adds	r3, #68	; 0x44
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d074      	beq.n	80057ee <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	440b      	add	r3, r1
 8005716:	3344      	adds	r3, #68	; 0x44
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	b292      	uxth	r2, r2
 800571e:	4619      	mov	r1, r3
 8005720:	f006 fb39 	bl	800bd96 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	440b      	add	r3, r1
 8005732:	3344      	adds	r3, #68	; 0x44
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	18d1      	adds	r1, r2, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4403      	add	r3, r0
 8005748:	3344      	adds	r3, #68	; 0x44
 800574a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	334c      	adds	r3, #76	; 0x4c
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	18d1      	adds	r1, r2, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4403      	add	r3, r0
 8005770:	334c      	adds	r3, #76	; 0x4c
 8005772:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <HCD_RXQLVL_IRQHandler+0x154>)
 8005784:	4013      	ands	r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d031      	beq.n	80057ee <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	3350      	adds	r3, #80	; 0x50
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	f083 0301 	eor.w	r3, r3, #1
 80057d2:	b2d8      	uxtb	r0, r3
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	3350      	adds	r3, #80	; 0x50
 80057e4:	4602      	mov	r2, r0
 80057e6:	701a      	strb	r2, [r3, #0]
      break;
 80057e8:	e001      	b.n	80057ee <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80057ee:	bf00      	nop
  }
}
 80057f0:	bf00      	nop
 80057f2:	3728      	adds	r7, #40	; 0x28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	1ff80000 	.word	0x1ff80000

080057fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005828:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b02      	cmp	r3, #2
 8005832:	d113      	bne.n	800585c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b01      	cmp	r3, #1
 800583c:	d10a      	bne.n	8005854 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800584c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f012 fb2e 	bl	8017eb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f043 0302 	orr.w	r3, r3, #2
 800585a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b08      	cmp	r3, #8
 8005864:	d147      	bne.n	80058f6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f043 0308 	orr.w	r3, r3, #8
 800586c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b04      	cmp	r3, #4
 8005876:	d129      	bne.n	80058cc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d113      	bne.n	80058a8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005886:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800588a:	d106      	bne.n	800589a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2102      	movs	r1, #2
 8005892:	4618      	mov	r0, r3
 8005894:	f006 fbae 	bl	800bff4 <USB_InitFSLSPClkSel>
 8005898:	e011      	b.n	80058be <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2101      	movs	r1, #1
 80058a0:	4618      	mov	r0, r3
 80058a2:	f006 fba7 	bl	800bff4 <USB_InitFSLSPClkSel>
 80058a6:	e00a      	b.n	80058be <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d106      	bne.n	80058be <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b6:	461a      	mov	r2, r3
 80058b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80058bc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f012 fb24 	bl	8017f0c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f012 faf3 	bl	8017eb0 <HAL_HCD_Connect_Callback>
 80058ca:	e014      	b.n	80058f6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f012 fb2b 	bl	8017f28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058e4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80058f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d103      	bne.n	8005908 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f043 0320 	orr.w	r3, r3, #32
 8005906:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800590e:	461a      	mov	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6013      	str	r3, [r2, #0]
}
 8005914:	bf00      	nop
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e11f      	b.n	8005b6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fb fb5c 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2224      	movs	r2, #36	; 0x24
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800596e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800597e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005980:	f001 fe9e 	bl	80076c0 <HAL_RCC_GetPCLK1Freq>
 8005984:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4a7b      	ldr	r2, [pc, #492]	; (8005b78 <HAL_I2C_Init+0x25c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d807      	bhi.n	80059a0 <HAL_I2C_Init+0x84>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4a7a      	ldr	r2, [pc, #488]	; (8005b7c <HAL_I2C_Init+0x260>)
 8005994:	4293      	cmp	r3, r2
 8005996:	bf94      	ite	ls
 8005998:	2301      	movls	r3, #1
 800599a:	2300      	movhi	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e006      	b.n	80059ae <HAL_I2C_Init+0x92>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a77      	ldr	r2, [pc, #476]	; (8005b80 <HAL_I2C_Init+0x264>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	bf94      	ite	ls
 80059a8:	2301      	movls	r3, #1
 80059aa:	2300      	movhi	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e0db      	b.n	8005b6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4a72      	ldr	r2, [pc, #456]	; (8005b84 <HAL_I2C_Init+0x268>)
 80059ba:	fba2 2303 	umull	r2, r3, r2, r3
 80059be:	0c9b      	lsrs	r3, r3, #18
 80059c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	4a64      	ldr	r2, [pc, #400]	; (8005b78 <HAL_I2C_Init+0x25c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d802      	bhi.n	80059f0 <HAL_I2C_Init+0xd4>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	3301      	adds	r3, #1
 80059ee:	e009      	b.n	8005a04 <HAL_I2C_Init+0xe8>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059f6:	fb02 f303 	mul.w	r3, r2, r3
 80059fa:	4a63      	ldr	r2, [pc, #396]	; (8005b88 <HAL_I2C_Init+0x26c>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	099b      	lsrs	r3, r3, #6
 8005a02:	3301      	adds	r3, #1
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4956      	ldr	r1, [pc, #344]	; (8005b78 <HAL_I2C_Init+0x25c>)
 8005a20:	428b      	cmp	r3, r1
 8005a22:	d80d      	bhi.n	8005a40 <HAL_I2C_Init+0x124>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1e59      	subs	r1, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a32:	3301      	adds	r3, #1
 8005a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	bf38      	it	cc
 8005a3c:	2304      	movcc	r3, #4
 8005a3e:	e04f      	b.n	8005ae0 <HAL_I2C_Init+0x1c4>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d111      	bne.n	8005a6c <HAL_I2C_Init+0x150>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	1e58      	subs	r0, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	440b      	add	r3, r1
 8005a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e012      	b.n	8005a92 <HAL_I2C_Init+0x176>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	1e58      	subs	r0, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6859      	ldr	r1, [r3, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	0099      	lsls	r1, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a82:	3301      	adds	r3, #1
 8005a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <HAL_I2C_Init+0x17e>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e022      	b.n	8005ae0 <HAL_I2C_Init+0x1c4>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_I2C_Init+0x1a4>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1e58      	subs	r0, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6859      	ldr	r1, [r3, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	440b      	add	r3, r1
 8005ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abe:	e00f      	b.n	8005ae0 <HAL_I2C_Init+0x1c4>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	1e58      	subs	r0, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6859      	ldr	r1, [r3, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	0099      	lsls	r1, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	6809      	ldr	r1, [r1, #0]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6911      	ldr	r1, [r2, #16]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68d2      	ldr	r2, [r2, #12]
 8005b1a:	4311      	orrs	r1, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	000186a0 	.word	0x000186a0
 8005b7c:	001e847f 	.word	0x001e847f
 8005b80:	003d08ff 	.word	0x003d08ff
 8005b84:	431bde83 	.word	0x431bde83
 8005b88:	10624dd3 	.word	0x10624dd3

08005b8c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e021      	b.n	8005be2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2224      	movs	r2, #36	; 0x24
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fb faa0 	bl	80010fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	817b      	strh	r3, [r7, #10]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	813b      	strh	r3, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c06:	f7fc fa6b 	bl	80020e0 <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	f040 80d9 	bne.w	8005dcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	2319      	movs	r3, #25
 8005c20:	2201      	movs	r2, #1
 8005c22:	496d      	ldr	r1, [pc, #436]	; (8005dd8 <HAL_I2C_Mem_Write+0x1ec>)
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fc89 	bl	800653c <I2C_WaitOnFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
 8005c32:	e0cc      	b.n	8005dce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_I2C_Mem_Write+0x56>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e0c5      	b.n	8005dce <HAL_I2C_Mem_Write+0x1e2>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d007      	beq.n	8005c68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2221      	movs	r2, #33	; 0x21
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2240      	movs	r2, #64	; 0x40
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4a4d      	ldr	r2, [pc, #308]	; (8005ddc <HAL_I2C_Mem_Write+0x1f0>)
 8005ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005caa:	88f8      	ldrh	r0, [r7, #6]
 8005cac:	893a      	ldrh	r2, [r7, #8]
 8005cae:	8979      	ldrh	r1, [r7, #10]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	4603      	mov	r3, r0
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fac4 	bl	8006248 <I2C_RequestMemoryWrite>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d052      	beq.n	8005d6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e081      	b.n	8005dce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fd0a 	bl	80066e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d107      	bne.n	8005cf2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e06b      	b.n	8005dce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	781a      	ldrb	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d11b      	bne.n	8005d6c <HAL_I2C_Mem_Write+0x180>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d017      	beq.n	8005d6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1aa      	bne.n	8005cca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fcf6 	bl	800676a <I2C_WaitOnBTFFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00d      	beq.n	8005da0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d107      	bne.n	8005d9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e016      	b.n	8005dce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
  }
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	00100002 	.word	0x00100002
 8005ddc:	ffff0000 	.word	0xffff0000

08005de0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	; 0x30
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	4608      	mov	r0, r1
 8005dea:	4611      	mov	r1, r2
 8005dec:	461a      	mov	r2, r3
 8005dee:	4603      	mov	r3, r0
 8005df0:	817b      	strh	r3, [r7, #10]
 8005df2:	460b      	mov	r3, r1
 8005df4:	813b      	strh	r3, [r7, #8]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dfa:	f7fc f971 	bl	80020e0 <HAL_GetTick>
 8005dfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	f040 8208 	bne.w	800621e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	2319      	movs	r3, #25
 8005e14:	2201      	movs	r2, #1
 8005e16:	497b      	ldr	r1, [pc, #492]	; (8006004 <HAL_I2C_Mem_Read+0x224>)
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fb8f 	bl	800653c <I2C_WaitOnFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e24:	2302      	movs	r3, #2
 8005e26:	e1fb      	b.n	8006220 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_I2C_Mem_Read+0x56>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e1f4      	b.n	8006220 <HAL_I2C_Mem_Read+0x440>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d007      	beq.n	8005e5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2222      	movs	r2, #34	; 0x22
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2240      	movs	r2, #64	; 0x40
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4a5b      	ldr	r2, [pc, #364]	; (8006008 <HAL_I2C_Mem_Read+0x228>)
 8005e9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e9e:	88f8      	ldrh	r0, [r7, #6]
 8005ea0:	893a      	ldrh	r2, [r7, #8]
 8005ea2:	8979      	ldrh	r1, [r7, #10]
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	4603      	mov	r3, r0
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fa5e 	bl	8006370 <I2C_RequestMemoryRead>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e1b0      	b.n	8006220 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d113      	bne.n	8005eee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	623b      	str	r3, [r7, #32]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	623b      	str	r3, [r7, #32]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	623b      	str	r3, [r7, #32]
 8005eda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	e184      	b.n	80061f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d11b      	bne.n	8005f2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e164      	b.n	80061f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d11b      	bne.n	8005f6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f56:	2300      	movs	r3, #0
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	e144      	b.n	80061f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	617b      	str	r3, [r7, #20]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f84:	e138      	b.n	80061f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	f200 80f1 	bhi.w	8006172 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d123      	bne.n	8005fe0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fc25 	bl	80067ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e139      	b.n	8006220 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fde:	e10b      	b.n	80061f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d14e      	bne.n	8006086 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4906      	ldr	r1, [pc, #24]	; (800600c <HAL_I2C_Mem_Read+0x22c>)
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 faa2 	bl	800653c <I2C_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e10e      	b.n	8006220 <HAL_I2C_Mem_Read+0x440>
 8006002:	bf00      	nop
 8006004:	00100002 	.word	0x00100002
 8006008:	ffff0000 	.word	0xffff0000
 800600c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006084:	e0b8      	b.n	80061f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	2200      	movs	r2, #0
 800608e:	4966      	ldr	r1, [pc, #408]	; (8006228 <HAL_I2C_Mem_Read+0x448>)
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 fa53 	bl	800653c <I2C_WaitOnFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e0bf      	b.n	8006220 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	2200      	movs	r2, #0
 80060ea:	494f      	ldr	r1, [pc, #316]	; (8006228 <HAL_I2C_Mem_Read+0x448>)
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fa25 	bl	800653c <I2C_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e091      	b.n	8006220 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800610a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006170:	e042      	b.n	80061f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006174:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fb38 	bl	80067ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e04c      	b.n	8006220 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d118      	bne.n	80061f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f47f aec2 	bne.w	8005f86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2220      	movs	r2, #32
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e000      	b.n	8006220 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800621e:	2302      	movs	r3, #2
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3728      	adds	r7, #40	; 0x28
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	00010004 	.word	0x00010004

0800622c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623a:	b2db      	uxtb	r3, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	4608      	mov	r0, r1
 8006252:	4611      	mov	r1, r2
 8006254:	461a      	mov	r2, r3
 8006256:	4603      	mov	r3, r0
 8006258:	817b      	strh	r3, [r7, #10]
 800625a:	460b      	mov	r3, r1
 800625c:	813b      	strh	r3, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	2200      	movs	r2, #0
 800627a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f95c 	bl	800653c <I2C_WaitOnFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00c      	beq.n	80062a4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800629e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e05f      	b.n	8006364 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062a4:	897b      	ldrh	r3, [r7, #10]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	492c      	ldr	r1, [pc, #176]	; (800636c <I2C_RequestMemoryWrite+0x124>)
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 f995 	bl	80065ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e04c      	b.n	8006364 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e2:	6a39      	ldr	r1, [r7, #32]
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f9ff 	bl	80066e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00d      	beq.n	800630c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d107      	bne.n	8006308 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006306:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e02b      	b.n	8006364 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d105      	bne.n	800631e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006312:	893b      	ldrh	r3, [r7, #8]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	611a      	str	r2, [r3, #16]
 800631c:	e021      	b.n	8006362 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800631e:	893b      	ldrh	r3, [r7, #8]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	b29b      	uxth	r3, r3
 8006324:	b2da      	uxtb	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800632c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632e:	6a39      	ldr	r1, [r7, #32]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f9d9 	bl	80066e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00d      	beq.n	8006358 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	2b04      	cmp	r3, #4
 8006342:	d107      	bne.n	8006354 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e005      	b.n	8006364 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006358:	893b      	ldrh	r3, [r7, #8]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	00010002 	.word	0x00010002

08006370 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af02      	add	r7, sp, #8
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	4608      	mov	r0, r1
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	4603      	mov	r3, r0
 8006380:	817b      	strh	r3, [r7, #10]
 8006382:	460b      	mov	r3, r1
 8006384:	813b      	strh	r3, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006398:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f8c0 	bl	800653c <I2C_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00c      	beq.n	80063dc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e0a9      	b.n	8006530 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063dc:	897b      	ldrh	r3, [r7, #10]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	4951      	ldr	r1, [pc, #324]	; (8006538 <I2C_RequestMemoryRead+0x1c8>)
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 f8f9 	bl	80065ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e096      	b.n	8006530 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641a:	6a39      	ldr	r1, [r7, #32]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f963 	bl	80066e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00d      	beq.n	8006444 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	2b04      	cmp	r3, #4
 800642e:	d107      	bne.n	8006440 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e075      	b.n	8006530 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006444:	88fb      	ldrh	r3, [r7, #6]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d105      	bne.n	8006456 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800644a:	893b      	ldrh	r3, [r7, #8]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	611a      	str	r2, [r3, #16]
 8006454:	e021      	b.n	800649a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006456:	893b      	ldrh	r3, [r7, #8]
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	b29b      	uxth	r3, r3
 800645c:	b2da      	uxtb	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006466:	6a39      	ldr	r1, [r7, #32]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f93d 	bl	80066e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00d      	beq.n	8006490 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	2b04      	cmp	r3, #4
 800647a:	d107      	bne.n	800648c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e04f      	b.n	8006530 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006490:	893b      	ldrh	r3, [r7, #8]
 8006492:	b2da      	uxtb	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800649a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649c:	6a39      	ldr	r1, [r7, #32]
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f922 	bl	80066e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00d      	beq.n	80064c6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d107      	bne.n	80064c2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e034      	b.n	8006530 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	2200      	movs	r2, #0
 80064de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f82a 	bl	800653c <I2C_WaitOnFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00c      	beq.n	8006508 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e013      	b.n	8006530 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006508:	897b      	ldrh	r3, [r7, #10]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	b2da      	uxtb	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	6a3a      	ldr	r2, [r7, #32]
 800651c:	4906      	ldr	r1, [pc, #24]	; (8006538 <I2C_RequestMemoryRead+0x1c8>)
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f863 	bl	80065ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	00010002 	.word	0x00010002

0800653c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800654c:	e025      	b.n	800659a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006554:	d021      	beq.n	800659a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006556:	f7fb fdc3 	bl	80020e0 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d116      	bne.n	800659a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f043 0220 	orr.w	r2, r3, #32
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e023      	b.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	0c1b      	lsrs	r3, r3, #16
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d10d      	bne.n	80065c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	43da      	mvns	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4013      	ands	r3, r2
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	e00c      	b.n	80065da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	43da      	mvns	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4013      	ands	r3, r2
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bf0c      	ite	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	2300      	movne	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d0b6      	beq.n	800654e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065f8:	e051      	b.n	800669e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006608:	d123      	bne.n	8006652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006618:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006622:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f043 0204 	orr.w	r2, r3, #4
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e046      	b.n	80066e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d021      	beq.n	800669e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665a:	f7fb fd41 	bl	80020e0 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d302      	bcc.n	8006670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d116      	bne.n	800669e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	f043 0220 	orr.w	r2, r3, #32
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e020      	b.n	80066e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	0c1b      	lsrs	r3, r3, #16
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d10c      	bne.n	80066c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	43da      	mvns	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bf14      	ite	ne
 80066ba:	2301      	movne	r3, #1
 80066bc:	2300      	moveq	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	e00b      	b.n	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	43da      	mvns	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4013      	ands	r3, r2
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bf14      	ite	ne
 80066d4:	2301      	movne	r3, #1
 80066d6:	2300      	moveq	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d18d      	bne.n	80065fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066f4:	e02d      	b.n	8006752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f8ce 	bl	8006898 <I2C_IsAcknowledgeFailed>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e02d      	b.n	8006762 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d021      	beq.n	8006752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670e:	f7fb fce7 	bl	80020e0 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	429a      	cmp	r2, r3
 800671c:	d302      	bcc.n	8006724 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d116      	bne.n	8006752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f043 0220 	orr.w	r2, r3, #32
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e007      	b.n	8006762 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675c:	2b80      	cmp	r3, #128	; 0x80
 800675e:	d1ca      	bne.n	80066f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006776:	e02d      	b.n	80067d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f88d 	bl	8006898 <I2C_IsAcknowledgeFailed>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e02d      	b.n	80067e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	d021      	beq.n	80067d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006790:	f7fb fca6 	bl	80020e0 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	429a      	cmp	r2, r3
 800679e:	d302      	bcc.n	80067a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d116      	bne.n	80067d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	f043 0220 	orr.w	r2, r3, #32
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e007      	b.n	80067e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d1ca      	bne.n	8006778 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067f8:	e042      	b.n	8006880 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b10      	cmp	r3, #16
 8006806:	d119      	bne.n	800683c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0210 	mvn.w	r2, #16
 8006810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e029      	b.n	8006890 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683c:	f7fb fc50 	bl	80020e0 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	429a      	cmp	r2, r3
 800684a:	d302      	bcc.n	8006852 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d116      	bne.n	8006880 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	f043 0220 	orr.w	r2, r3, #32
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e007      	b.n	8006890 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d1b5      	bne.n	80067fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ae:	d11b      	bne.n	80068e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	f043 0204 	orr.w	r2, r3, #4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e0bf      	b.n	8006a8a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f00f fdde 	bl	80164e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800693a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6999      	ldr	r1, [r3, #24]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006950:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6899      	ldr	r1, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4b4a      	ldr	r3, [pc, #296]	; (8006a94 <HAL_LTDC_Init+0x19c>)
 800696c:	400b      	ands	r3, r1
 800696e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	041b      	lsls	r3, r3, #16
 8006976:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6899      	ldr	r1, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68d9      	ldr	r1, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	4b3e      	ldr	r3, [pc, #248]	; (8006a94 <HAL_LTDC_Init+0x19c>)
 800699a:	400b      	ands	r3, r1
 800699c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	041b      	lsls	r3, r3, #16
 80069a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68d9      	ldr	r1, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6919      	ldr	r1, [r3, #16]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4b33      	ldr	r3, [pc, #204]	; (8006a94 <HAL_LTDC_Init+0x19c>)
 80069c8:	400b      	ands	r3, r1
 80069ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6919      	ldr	r1, [r3, #16]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6959      	ldr	r1, [r3, #20]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	4b27      	ldr	r3, [pc, #156]	; (8006a94 <HAL_LTDC_Init+0x19c>)
 80069f6:	400b      	ands	r3, r1
 80069f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	041b      	lsls	r3, r3, #16
 8006a00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6959      	ldr	r1, [r3, #20]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0206 	orr.w	r2, r2, #6
 8006a66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	f000f800 	.word	0xf000f800

08006a98 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f00f fd45 	bl	8016530 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ade:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d023      	beq.n	8006b32 <HAL_LTDC_IRQHandler+0x6a>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01e      	beq.n	8006b32 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0204 	bic.w	r2, r2, #4
 8006b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b12:	f043 0201 	orr.w	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2204      	movs	r2, #4
 8006b20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f86f 	bl	8006c10 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d023      	beq.n	8006b84 <HAL_LTDC_IRQHandler+0xbc>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01e      	beq.n	8006b84 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0202 	bic.w	r2, r2, #2
 8006b54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b64:	f043 0202 	orr.w	r2, r3, #2
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2204      	movs	r2, #4
 8006b72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f846 	bl	8006c10 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01b      	beq.n	8006bc6 <HAL_LTDC_IRQHandler+0xfe>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d016      	beq.n	8006bc6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2201      	movs	r2, #1
 8006bae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f82f 	bl	8006c24 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01b      	beq.n	8006c08 <HAL_LTDC_IRQHandler+0x140>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d016      	beq.n	8006c08 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0208 	bic.w	r2, r2, #8
 8006be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2208      	movs	r2, #8
 8006bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f818 	bl	8006c38 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c4c:	b5b0      	push	{r4, r5, r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_LTDC_ConfigLayer+0x1a>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e02c      	b.n	8006cc0 <HAL_LTDC_ConfigLayer+0x74>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2134      	movs	r1, #52	; 0x34
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	4413      	add	r3, r2
 8006c82:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4614      	mov	r4, r2
 8006c8a:	461d      	mov	r5, r3
 8006c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f897 	bl	8006dd4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2201      	movs	r2, #1
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bdb0      	pop	{r4, r5, r7, pc}

08006cc8 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b089      	sub	sp, #36	; 0x24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_LTDC_SetPitch+0x1a>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e06f      	b.n	8006dc2 <HAL_LTDC_SetPitch+0xfa>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2134      	movs	r1, #52	; 0x34
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3348      	adds	r3, #72	; 0x48
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8006d0a:	2304      	movs	r3, #4
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	e016      	b.n	8006d3e <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d102      	bne.n	8006d1c <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 8006d16:	2303      	movs	r3, #3
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	e010      	b.n	8006d3e <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d008      	beq.n	8006d34 <HAL_LTDC_SetPitch+0x6c>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d005      	beq.n	8006d34 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d002      	beq.n	8006d34 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	2b07      	cmp	r3, #7
 8006d32:	d102      	bne.n	8006d3a <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8006d34:	2302      	movs	r3, #2
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	e001      	b.n	8006d3e <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	01db      	lsls	r3, r3, #7
 8006d54:	4413      	add	r3, r2
 8006d56:	3384      	adds	r3, #132	; 0x84
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	01d2      	lsls	r2, r2, #7
 8006d64:	440a      	add	r2, r1
 8006d66:	3284      	adds	r2, #132	; 0x84
 8006d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d70:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8006d72:	4b17      	ldr	r3, [pc, #92]	; (8006dd0 <HAL_LTDC_SetPitch+0x108>)
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	4a16      	ldr	r2, [pc, #88]	; (8006dd0 <HAL_LTDC_SetPitch+0x108>)
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	01db      	lsls	r3, r3, #7
 8006d88:	4413      	add	r3, r2
 8006d8a:	3384      	adds	r3, #132	; 0x84
 8006d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4619      	mov	r1, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	01db      	lsls	r3, r3, #7
 8006d98:	440b      	add	r3, r1
 8006d9a:	3384      	adds	r3, #132	; 0x84
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8006da4:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <HAL_LTDC_SetPitch+0x108>)
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	4a09      	ldr	r2, [pc, #36]	; (8006dd0 <HAL_LTDC_SetPitch+0x108>)
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3724      	adds	r7, #36	; 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40016800 	.word	0x40016800

08006dd4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b089      	sub	sp, #36	; 0x24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	0c1b      	lsrs	r3, r3, #16
 8006dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006df0:	4413      	add	r3, r2
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	01db      	lsls	r3, r3, #7
 8006e00:	4413      	add	r3, r2
 8006e02:	3384      	adds	r3, #132	; 0x84
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	01d2      	lsls	r2, r2, #7
 8006e10:	440a      	add	r2, r1
 8006e12:	3284      	adds	r2, #132	; 0x84
 8006e14:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e2a:	4413      	add	r3, r2
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4619      	mov	r1, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	01db      	lsls	r3, r3, #7
 8006e38:	440b      	add	r3, r1
 8006e3a:	3384      	adds	r3, #132	; 0x84
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e52:	4413      	add	r3, r2
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	01db      	lsls	r3, r3, #7
 8006e62:	4413      	add	r3, r2
 8006e64:	3384      	adds	r3, #132	; 0x84
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	01d2      	lsls	r2, r2, #7
 8006e72:	440a      	add	r2, r1
 8006e74:	3284      	adds	r2, #132	; 0x84
 8006e76:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e8a:	4413      	add	r3, r2
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	01db      	lsls	r3, r3, #7
 8006e98:	440b      	add	r3, r1
 8006e9a:	3384      	adds	r3, #132	; 0x84
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	01db      	lsls	r3, r3, #7
 8006eae:	4413      	add	r3, r2
 8006eb0:	3384      	adds	r3, #132	; 0x84
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	6812      	ldr	r2, [r2, #0]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	01d2      	lsls	r2, r2, #7
 8006ebe:	440a      	add	r2, r1
 8006ec0:	3284      	adds	r2, #132	; 0x84
 8006ec2:	f023 0307 	bic.w	r3, r3, #7
 8006ec6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	01db      	lsls	r3, r3, #7
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3384      	adds	r3, #132	; 0x84
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	061b      	lsls	r3, r3, #24
 8006ef8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	01db      	lsls	r3, r3, #7
 8006f04:	4413      	add	r3, r2
 8006f06:	3384      	adds	r3, #132	; 0x84
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	01db      	lsls	r3, r3, #7
 8006f14:	4413      	add	r3, r2
 8006f16:	3384      	adds	r3, #132	; 0x84
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f24:	461a      	mov	r2, r3
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	01db      	lsls	r3, r3, #7
 8006f38:	440b      	add	r3, r1
 8006f3a:	3384      	adds	r3, #132	; 0x84
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	01db      	lsls	r3, r3, #7
 8006f4e:	4413      	add	r3, r2
 8006f50:	3384      	adds	r3, #132	; 0x84
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	6812      	ldr	r2, [r2, #0]
 8006f58:	4611      	mov	r1, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	01d2      	lsls	r2, r2, #7
 8006f5e:	440a      	add	r2, r1
 8006f60:	3284      	adds	r2, #132	; 0x84
 8006f62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	01db      	lsls	r3, r3, #7
 8006f72:	4413      	add	r3, r2
 8006f74:	3384      	adds	r3, #132	; 0x84
 8006f76:	461a      	mov	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	01db      	lsls	r3, r3, #7
 8006f88:	4413      	add	r3, r2
 8006f8a:	3384      	adds	r3, #132	; 0x84
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	4611      	mov	r1, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	01d2      	lsls	r2, r2, #7
 8006f98:	440a      	add	r2, r1
 8006f9a:	3284      	adds	r2, #132	; 0x84
 8006f9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006fa0:	f023 0307 	bic.w	r3, r3, #7
 8006fa4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	69da      	ldr	r2, [r3, #28]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	68f9      	ldr	r1, [r7, #12]
 8006fb0:	6809      	ldr	r1, [r1, #0]
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	01c9      	lsls	r1, r1, #7
 8006fb8:	4401      	add	r1, r0
 8006fba:	3184      	adds	r1, #132	; 0x84
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	01db      	lsls	r3, r3, #7
 8006fca:	4413      	add	r3, r2
 8006fcc:	3384      	adds	r3, #132	; 0x84
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	01db      	lsls	r3, r3, #7
 8006fda:	4413      	add	r3, r2
 8006fdc:	3384      	adds	r3, #132	; 0x84
 8006fde:	461a      	mov	r2, r3
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	01db      	lsls	r3, r3, #7
 8006fee:	4413      	add	r3, r2
 8006ff0:	3384      	adds	r3, #132	; 0x84
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d102      	bne.n	8007008 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007002:	2304      	movs	r3, #4
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	e01b      	b.n	8007040 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d102      	bne.n	8007016 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007010:	2303      	movs	r3, #3
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	e014      	b.n	8007040 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b04      	cmp	r3, #4
 800701c:	d00b      	beq.n	8007036 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007022:	2b02      	cmp	r3, #2
 8007024:	d007      	beq.n	8007036 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800702a:	2b03      	cmp	r3, #3
 800702c:	d003      	beq.n	8007036 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007032:	2b07      	cmp	r3, #7
 8007034:	d102      	bne.n	800703c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007036:	2302      	movs	r3, #2
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	e001      	b.n	8007040 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800703c:	2301      	movs	r3, #1
 800703e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	01db      	lsls	r3, r3, #7
 800704a:	4413      	add	r3, r2
 800704c:	3384      	adds	r3, #132	; 0x84
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	6812      	ldr	r2, [r2, #0]
 8007054:	4611      	mov	r1, r2
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	01d2      	lsls	r2, r2, #7
 800705a:	440a      	add	r2, r1
 800705c:	3284      	adds	r2, #132	; 0x84
 800705e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007062:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	69fa      	ldr	r2, [r7, #28]
 800706a:	fb02 f303 	mul.w	r3, r2, r3
 800706e:	041a      	lsls	r2, r3, #16
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6859      	ldr	r1, [r3, #4]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	1acb      	subs	r3, r1, r3
 800707a:	69f9      	ldr	r1, [r7, #28]
 800707c:	fb01 f303 	mul.w	r3, r1, r3
 8007080:	3303      	adds	r3, #3
 8007082:	68f9      	ldr	r1, [r7, #12]
 8007084:	6809      	ldr	r1, [r1, #0]
 8007086:	4608      	mov	r0, r1
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	01c9      	lsls	r1, r1, #7
 800708c:	4401      	add	r1, r0
 800708e:	3184      	adds	r1, #132	; 0x84
 8007090:	4313      	orrs	r3, r2
 8007092:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	01db      	lsls	r3, r3, #7
 800709e:	4413      	add	r3, r2
 80070a0:	3384      	adds	r3, #132	; 0x84
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	6812      	ldr	r2, [r2, #0]
 80070a8:	4611      	mov	r1, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	01d2      	lsls	r2, r2, #7
 80070ae:	440a      	add	r2, r1
 80070b0:	3284      	adds	r2, #132	; 0x84
 80070b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80070b6:	f023 0307 	bic.w	r3, r3, #7
 80070ba:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	01db      	lsls	r3, r3, #7
 80070c6:	4413      	add	r3, r2
 80070c8:	3384      	adds	r3, #132	; 0x84
 80070ca:	461a      	mov	r2, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	01db      	lsls	r3, r3, #7
 80070dc:	4413      	add	r3, r2
 80070de:	3384      	adds	r3, #132	; 0x84
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	4611      	mov	r1, r2
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	01d2      	lsls	r2, r2, #7
 80070ec:	440a      	add	r2, r1
 80070ee:	3284      	adds	r2, #132	; 0x84
 80070f0:	f043 0301 	orr.w	r3, r3, #1
 80070f4:	6013      	str	r3, [r2, #0]
}
 80070f6:	bf00      	nop
 80070f8:	3724      	adds	r7, #36	; 0x24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
	...

08007104 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800710e:	2300      	movs	r3, #0
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	4b20      	ldr	r3, [pc, #128]	; (8007194 <HAL_PWREx_EnableOverDrive+0x90>)
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <HAL_PWREx_EnableOverDrive+0x90>)
 8007118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711c:	6413      	str	r3, [r2, #64]	; 0x40
 800711e:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <HAL_PWREx_EnableOverDrive+0x90>)
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <HAL_PWREx_EnableOverDrive+0x94>)
 800712c:	2201      	movs	r2, #1
 800712e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007130:	f7fa ffd6 	bl	80020e0 <HAL_GetTick>
 8007134:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007136:	e009      	b.n	800714c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007138:	f7fa ffd2 	bl	80020e0 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007146:	d901      	bls.n	800714c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e01f      	b.n	800718c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800714c:	4b13      	ldr	r3, [pc, #76]	; (800719c <HAL_PWREx_EnableOverDrive+0x98>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007158:	d1ee      	bne.n	8007138 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800715a:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800715c:	2201      	movs	r2, #1
 800715e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007160:	f7fa ffbe 	bl	80020e0 <HAL_GetTick>
 8007164:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007166:	e009      	b.n	800717c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007168:	f7fa ffba 	bl	80020e0 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007176:	d901      	bls.n	800717c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e007      	b.n	800718c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <HAL_PWREx_EnableOverDrive+0x98>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007188:	d1ee      	bne.n	8007168 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40023800 	.word	0x40023800
 8007198:	420e0040 	.word	0x420e0040
 800719c:	40007000 	.word	0x40007000
 80071a0:	420e0044 	.word	0x420e0044

080071a4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80071b0:	f7fa ff96 	bl	80020e0 <HAL_GetTick>
 80071b4:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e069      	b.n	8007294 <HAL_QSPI_Init+0xf0>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <HAL_QSPI_Init+0x40>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7f9 ffc3 	bl	8001160 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80071da:	f241 3188 	movw	r1, #5000	; 0x1388
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f85e 	bl	80072a0 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	021a      	lsls	r2, r3, #8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2200      	movs	r2, #0
 8007208:	2120      	movs	r1, #32
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f856 	bl	80072bc <QSPI_WaitFlagStateUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d137      	bne.n	800728a <HAL_QSPI_Init+0xe6>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007224:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6852      	ldr	r2, [r2, #4]
 800722c:	0611      	lsls	r1, r2, #24
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	68d2      	ldr	r2, [r2, #12]
 8007232:	4311      	orrs	r1, r2
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	69d2      	ldr	r2, [r2, #28]
 8007238:	4311      	orrs	r1, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6a12      	ldr	r2, [r2, #32]
 800723e:	4311      	orrs	r1, r2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	430b      	orrs	r3, r1
 8007246:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <HAL_QSPI_Init+0xf8>)
 8007250:	4013      	ands	r3, r2
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6912      	ldr	r2, [r2, #16]
 8007256:	0411      	lsls	r1, r2, #16
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6952      	ldr	r2, [r2, #20]
 800725c:	4311      	orrs	r1, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6992      	ldr	r2, [r2, #24]
 8007262:	4311      	orrs	r1, r2
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	430b      	orrs	r3, r1
 800726a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16U) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	ffe0f8fe 	.word	0xffe0f8fe

080072a0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	649a      	str	r2, [r3, #72]	; 0x48
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	4613      	mov	r3, r2
 80072ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80072cc:	e01a      	b.n	8007304 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d016      	beq.n	8007304 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <QSPI_WaitFlagStateUntilTimeout+0x30>
 80072dc:	f7fa ff00 	bl	80020e0 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d20b      	bcs.n	8007304 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2204      	movs	r2, #4
 80072f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f8:	f043 0201 	orr.w	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e00e      	b.n	8007322 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	4013      	ands	r3, r2
 800730e:	2b00      	cmp	r3, #0
 8007310:	bf14      	ite	ne
 8007312:	2301      	movne	r3, #1
 8007314:	2300      	moveq	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	429a      	cmp	r2, r3
 800731e:	d1d6      	bne.n	80072ce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e0cc      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007340:	4b68      	ldr	r3, [pc, #416]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d90c      	bls.n	8007368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734e:	4b65      	ldr	r3, [pc, #404]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007356:	4b63      	ldr	r3, [pc, #396]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d001      	beq.n	8007368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0b8      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d020      	beq.n	80073b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007380:	4b59      	ldr	r3, [pc, #356]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4a58      	ldr	r2, [pc, #352]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800738a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007398:	4b53      	ldr	r3, [pc, #332]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	4a52      	ldr	r2, [pc, #328]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073a4:	4b50      	ldr	r3, [pc, #320]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	494d      	ldr	r1, [pc, #308]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d044      	beq.n	800744c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d107      	bne.n	80073da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ca:	4b47      	ldr	r3, [pc, #284]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d119      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e07f      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d003      	beq.n	80073ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d107      	bne.n	80073fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ea:	4b3f      	ldr	r3, [pc, #252]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e06f      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073fa:	4b3b      	ldr	r3, [pc, #236]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e067      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800740a:	4b37      	ldr	r3, [pc, #220]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f023 0203 	bic.w	r2, r3, #3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	4934      	ldr	r1, [pc, #208]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007418:	4313      	orrs	r3, r2
 800741a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800741c:	f7fa fe60 	bl	80020e0 <HAL_GetTick>
 8007420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007422:	e00a      	b.n	800743a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007424:	f7fa fe5c 	bl	80020e0 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007432:	4293      	cmp	r3, r2
 8007434:	d901      	bls.n	800743a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e04f      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743a:	4b2b      	ldr	r3, [pc, #172]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 020c 	and.w	r2, r3, #12
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	429a      	cmp	r2, r3
 800744a:	d1eb      	bne.n	8007424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800744c:	4b25      	ldr	r3, [pc, #148]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 030f 	and.w	r3, r3, #15
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d20c      	bcs.n	8007474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800745a:	4b22      	ldr	r3, [pc, #136]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007462:	4b20      	ldr	r3, [pc, #128]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 030f 	and.w	r3, r3, #15
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d001      	beq.n	8007474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e032      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d008      	beq.n	8007492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007480:	4b19      	ldr	r3, [pc, #100]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	4916      	ldr	r1, [pc, #88]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	4313      	orrs	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d009      	beq.n	80074b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800749e:	4b12      	ldr	r3, [pc, #72]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	490e      	ldr	r1, [pc, #56]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074b2:	f000 f821 	bl	80074f8 <HAL_RCC_GetSysClockFreq>
 80074b6:	4601      	mov	r1, r0
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	091b      	lsrs	r3, r3, #4
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <HAL_RCC_ClockConfig+0x1c0>)
 80074c4:	5cd3      	ldrb	r3, [r2, r3]
 80074c6:	fa21 f303 	lsr.w	r3, r1, r3
 80074ca:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <HAL_RCC_ClockConfig+0x1c4>)
 80074cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074ce:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <HAL_RCC_ClockConfig+0x1c8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fa f89e 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40023c00 	.word	0x40023c00
 80074e8:	40023800 	.word	0x40023800
 80074ec:	0801fff4 	.word	0x0801fff4
 80074f0:	20000000 	.word	0x20000000
 80074f4:	2000002c 	.word	0x2000002c

080074f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	607b      	str	r3, [r7, #4]
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	2300      	movs	r3, #0
 8007508:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800750e:	4b63      	ldr	r3, [pc, #396]	; (800769c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 030c 	and.w	r3, r3, #12
 8007516:	2b04      	cmp	r3, #4
 8007518:	d007      	beq.n	800752a <HAL_RCC_GetSysClockFreq+0x32>
 800751a:	2b08      	cmp	r3, #8
 800751c:	d008      	beq.n	8007530 <HAL_RCC_GetSysClockFreq+0x38>
 800751e:	2b00      	cmp	r3, #0
 8007520:	f040 80b4 	bne.w	800768c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007524:	4b5e      	ldr	r3, [pc, #376]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007526:	60bb      	str	r3, [r7, #8]
       break;
 8007528:	e0b3      	b.n	8007692 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800752a:	4b5e      	ldr	r3, [pc, #376]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800752c:	60bb      	str	r3, [r7, #8]
      break;
 800752e:	e0b0      	b.n	8007692 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007530:	4b5a      	ldr	r3, [pc, #360]	; (800769c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007538:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800753a:	4b58      	ldr	r3, [pc, #352]	; (800769c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d04a      	beq.n	80075dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007546:	4b55      	ldr	r3, [pc, #340]	; (800769c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	099b      	lsrs	r3, r3, #6
 800754c:	f04f 0400 	mov.w	r4, #0
 8007550:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	ea03 0501 	and.w	r5, r3, r1
 800755c:	ea04 0602 	and.w	r6, r4, r2
 8007560:	4629      	mov	r1, r5
 8007562:	4632      	mov	r2, r6
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	f04f 0400 	mov.w	r4, #0
 800756c:	0154      	lsls	r4, r2, #5
 800756e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007572:	014b      	lsls	r3, r1, #5
 8007574:	4619      	mov	r1, r3
 8007576:	4622      	mov	r2, r4
 8007578:	1b49      	subs	r1, r1, r5
 800757a:	eb62 0206 	sbc.w	r2, r2, r6
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	f04f 0400 	mov.w	r4, #0
 8007586:	0194      	lsls	r4, r2, #6
 8007588:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800758c:	018b      	lsls	r3, r1, #6
 800758e:	1a5b      	subs	r3, r3, r1
 8007590:	eb64 0402 	sbc.w	r4, r4, r2
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	00e2      	lsls	r2, r4, #3
 800759e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80075a2:	00d9      	lsls	r1, r3, #3
 80075a4:	460b      	mov	r3, r1
 80075a6:	4614      	mov	r4, r2
 80075a8:	195b      	adds	r3, r3, r5
 80075aa:	eb44 0406 	adc.w	r4, r4, r6
 80075ae:	f04f 0100 	mov.w	r1, #0
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	0262      	lsls	r2, r4, #9
 80075b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80075bc:	0259      	lsls	r1, r3, #9
 80075be:	460b      	mov	r3, r1
 80075c0:	4614      	mov	r4, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	4621      	mov	r1, r4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f04f 0400 	mov.w	r4, #0
 80075cc:	461a      	mov	r2, r3
 80075ce:	4623      	mov	r3, r4
 80075d0:	f7f8 fe66 	bl	80002a0 <__aeabi_uldivmod>
 80075d4:	4603      	mov	r3, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	e049      	b.n	8007670 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075dc:	4b2f      	ldr	r3, [pc, #188]	; (800769c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	099b      	lsrs	r3, r3, #6
 80075e2:	f04f 0400 	mov.w	r4, #0
 80075e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	ea03 0501 	and.w	r5, r3, r1
 80075f2:	ea04 0602 	and.w	r6, r4, r2
 80075f6:	4629      	mov	r1, r5
 80075f8:	4632      	mov	r2, r6
 80075fa:	f04f 0300 	mov.w	r3, #0
 80075fe:	f04f 0400 	mov.w	r4, #0
 8007602:	0154      	lsls	r4, r2, #5
 8007604:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007608:	014b      	lsls	r3, r1, #5
 800760a:	4619      	mov	r1, r3
 800760c:	4622      	mov	r2, r4
 800760e:	1b49      	subs	r1, r1, r5
 8007610:	eb62 0206 	sbc.w	r2, r2, r6
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	f04f 0400 	mov.w	r4, #0
 800761c:	0194      	lsls	r4, r2, #6
 800761e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007622:	018b      	lsls	r3, r1, #6
 8007624:	1a5b      	subs	r3, r3, r1
 8007626:	eb64 0402 	sbc.w	r4, r4, r2
 800762a:	f04f 0100 	mov.w	r1, #0
 800762e:	f04f 0200 	mov.w	r2, #0
 8007632:	00e2      	lsls	r2, r4, #3
 8007634:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007638:	00d9      	lsls	r1, r3, #3
 800763a:	460b      	mov	r3, r1
 800763c:	4614      	mov	r4, r2
 800763e:	195b      	adds	r3, r3, r5
 8007640:	eb44 0406 	adc.w	r4, r4, r6
 8007644:	f04f 0100 	mov.w	r1, #0
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	02a2      	lsls	r2, r4, #10
 800764e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007652:	0299      	lsls	r1, r3, #10
 8007654:	460b      	mov	r3, r1
 8007656:	4614      	mov	r4, r2
 8007658:	4618      	mov	r0, r3
 800765a:	4621      	mov	r1, r4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f04f 0400 	mov.w	r4, #0
 8007662:	461a      	mov	r2, r3
 8007664:	4623      	mov	r3, r4
 8007666:	f7f8 fe1b 	bl	80002a0 <__aeabi_uldivmod>
 800766a:	4603      	mov	r3, r0
 800766c:	460c      	mov	r4, r1
 800766e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007670:	4b0a      	ldr	r3, [pc, #40]	; (800769c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	0c1b      	lsrs	r3, r3, #16
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	3301      	adds	r3, #1
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	fbb2 f3f3 	udiv	r3, r2, r3
 8007688:	60bb      	str	r3, [r7, #8]
      break;
 800768a:	e002      	b.n	8007692 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800768e:	60bb      	str	r3, [r7, #8]
      break;
 8007690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007692:	68bb      	ldr	r3, [r7, #8]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769c:	40023800 	.word	0x40023800
 80076a0:	00f42400 	.word	0x00f42400
 80076a4:	007a1200 	.word	0x007a1200

080076a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076ac:	4b03      	ldr	r3, [pc, #12]	; (80076bc <HAL_RCC_GetHCLKFreq+0x14>)
 80076ae:	681b      	ldr	r3, [r3, #0]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20000000 	.word	0x20000000

080076c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076c4:	f7ff fff0 	bl	80076a8 <HAL_RCC_GetHCLKFreq>
 80076c8:	4601      	mov	r1, r0
 80076ca:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	0a9b      	lsrs	r3, r3, #10
 80076d0:	f003 0307 	and.w	r3, r3, #7
 80076d4:	4a03      	ldr	r2, [pc, #12]	; (80076e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076d6:	5cd3      	ldrb	r3, [r2, r3]
 80076d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80076dc:	4618      	mov	r0, r3
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	40023800 	.word	0x40023800
 80076e4:	08020004 	.word	0x08020004

080076e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076ec:	f7ff ffdc 	bl	80076a8 <HAL_RCC_GetHCLKFreq>
 80076f0:	4601      	mov	r1, r0
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	0b5b      	lsrs	r3, r3, #13
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	4a03      	ldr	r2, [pc, #12]	; (800770c <HAL_RCC_GetPCLK2Freq+0x24>)
 80076fe:	5cd3      	ldrb	r3, [r2, r3]
 8007700:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007704:	4618      	mov	r0, r3
 8007706:	bd80      	pop	{r7, pc}
 8007708:	40023800 	.word	0x40023800
 800770c:	08020004 	.word	0x08020004

08007710 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	220f      	movs	r2, #15
 800771e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007720:	4b12      	ldr	r3, [pc, #72]	; (800776c <HAL_RCC_GetClockConfig+0x5c>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f003 0203 	and.w	r2, r3, #3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <HAL_RCC_GetClockConfig+0x5c>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007738:	4b0c      	ldr	r3, [pc, #48]	; (800776c <HAL_RCC_GetClockConfig+0x5c>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007744:	4b09      	ldr	r3, [pc, #36]	; (800776c <HAL_RCC_GetClockConfig+0x5c>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	08db      	lsrs	r3, r3, #3
 800774a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <HAL_RCC_GetClockConfig+0x60>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 020f 	and.w	r2, r3, #15
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	601a      	str	r2, [r3, #0]
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40023800 	.word	0x40023800
 8007770:	40023c00 	.word	0x40023c00

08007774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800779c:	4b66      	ldr	r3, [pc, #408]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800779e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077a2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077aa:	4963      	ldr	r1, [pc, #396]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80077be:	4b5e      	ldr	r3, [pc, #376]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80077c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	495a      	ldr	r1, [pc, #360]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10b      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d105      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d075      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80077f8:	4b50      	ldr	r3, [pc, #320]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077fe:	f7fa fc6f 	bl	80020e0 <HAL_GetTick>
 8007802:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007804:	e008      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007806:	f7fa fc6b 	bl	80020e0 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d901      	bls.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e1dc      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007818:	4b47      	ldr	r3, [pc, #284]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1f0      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d009      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	019a      	lsls	r2, r3, #6
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	071b      	lsls	r3, r3, #28
 800783c:	493e      	ldr	r1, [pc, #248]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01f      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007850:	4b39      	ldr	r3, [pc, #228]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007856:	0f1b      	lsrs	r3, r3, #28
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	019a      	lsls	r2, r3, #6
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	061b      	lsls	r3, r3, #24
 800786a:	431a      	orrs	r2, r3
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	071b      	lsls	r3, r3, #28
 8007870:	4931      	ldr	r1, [pc, #196]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007872:	4313      	orrs	r3, r2
 8007874:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007878:	4b2f      	ldr	r3, [pc, #188]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800787a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800787e:	f023 021f 	bic.w	r2, r3, #31
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	3b01      	subs	r3, #1
 8007888:	492b      	ldr	r1, [pc, #172]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800788a:	4313      	orrs	r3, r2
 800788c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	019a      	lsls	r2, r3, #6
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	061b      	lsls	r3, r3, #24
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	071b      	lsls	r3, r3, #28
 80078b0:	4921      	ldr	r1, [pc, #132]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80078b8:	4b20      	ldr	r3, [pc, #128]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80078ba:	2201      	movs	r2, #1
 80078bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078be:	f7fa fc0f 	bl	80020e0 <HAL_GetTick>
 80078c2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078c4:	e008      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80078c6:	f7fa fc0b 	bl	80020e0 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d901      	bls.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e17c      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078d8:	4b17      	ldr	r3, [pc, #92]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0f0      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d112      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10c      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80ce 	beq.w	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800790e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007912:	f040 80c8 	bne.w	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007916:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800791c:	f7fa fbe0 	bl	80020e0 <HAL_GetTick>
 8007920:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007922:	e00f      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007924:	f7fa fbdc 	bl	80020e0 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d908      	bls.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e14d      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8007936:	bf00      	nop
 8007938:	40023800 	.word	0x40023800
 800793c:	42470068 	.word	0x42470068
 8007940:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007944:	4ba5      	ldr	r3, [pc, #660]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800794c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007950:	d0e8      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0304 	and.w	r3, r3, #4
 800795a:	2b00      	cmp	r3, #0
 800795c:	d02e      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800795e:	4b9f      	ldr	r3, [pc, #636]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007964:	0c1b      	lsrs	r3, r3, #16
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	3301      	adds	r3, #1
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007970:	4b9a      	ldr	r3, [pc, #616]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007976:	0f1b      	lsrs	r3, r3, #28
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	019a      	lsls	r2, r3, #6
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	085b      	lsrs	r3, r3, #1
 8007988:	3b01      	subs	r3, #1
 800798a:	041b      	lsls	r3, r3, #16
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	061b      	lsls	r3, r3, #24
 8007994:	431a      	orrs	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	071b      	lsls	r3, r3, #28
 800799a:	4990      	ldr	r1, [pc, #576]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800799c:	4313      	orrs	r3, r2
 800799e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80079a2:	4b8e      	ldr	r3, [pc, #568]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80079a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	3b01      	subs	r3, #1
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	4989      	ldr	r1, [pc, #548]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d02c      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80079c8:	4b84      	ldr	r3, [pc, #528]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ce:	0c1b      	lsrs	r3, r3, #16
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	3301      	adds	r3, #1
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079da:	4b80      	ldr	r3, [pc, #512]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80079dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e0:	0e1b      	lsrs	r3, r3, #24
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	019a      	lsls	r2, r3, #6
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	085b      	lsrs	r3, r3, #1
 80079f2:	3b01      	subs	r3, #1
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	431a      	orrs	r2, r3
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	061b      	lsls	r3, r3, #24
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	071b      	lsls	r3, r3, #28
 8007a04:	4975      	ldr	r1, [pc, #468]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a0c:	4b73      	ldr	r3, [pc, #460]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	4970      	ldr	r1, [pc, #448]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d024      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a36:	d11f      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a38:	4b68      	ldr	r3, [pc, #416]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3e:	0e1b      	lsrs	r3, r3, #24
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a46:	4b65      	ldr	r3, [pc, #404]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a4c:	0f1b      	lsrs	r3, r3, #28
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	019a      	lsls	r2, r3, #6
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	3b01      	subs	r3, #1
 8007a62:	041b      	lsls	r3, r3, #16
 8007a64:	431a      	orrs	r2, r3
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	061b      	lsls	r3, r3, #24
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	071b      	lsls	r3, r3, #28
 8007a70:	495a      	ldr	r1, [pc, #360]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a78:	4b59      	ldr	r3, [pc, #356]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a7e:	f7fa fb2f 	bl	80020e0 <HAL_GetTick>
 8007a82:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a84:	e008      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007a86:	f7fa fb2b 	bl	80020e0 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e09c      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a98:	4b50      	ldr	r3, [pc, #320]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa4:	d1ef      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 8083 	beq.w	8007bba <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60bb      	str	r3, [r7, #8]
 8007ab8:	4b48      	ldr	r3, [pc, #288]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	4a47      	ldr	r2, [pc, #284]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8007ac4:	4b45      	ldr	r3, [pc, #276]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007acc:	60bb      	str	r3, [r7, #8]
 8007ace:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ad0:	4b44      	ldr	r3, [pc, #272]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a43      	ldr	r2, [pc, #268]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ada:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007adc:	f7fa fb00 	bl	80020e0 <HAL_GetTick>
 8007ae0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ae4:	f7fa fafc 	bl	80020e0 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e06d      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007af6:	4b3b      	ldr	r3, [pc, #236]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f0      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b02:	4b36      	ldr	r3, [pc, #216]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b0a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d02f      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d028      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b20:	4b2e      	ldr	r3, [pc, #184]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b28:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b2a:	4b2f      	ldr	r3, [pc, #188]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b30:	4b2d      	ldr	r3, [pc, #180]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b36:	4a29      	ldr	r2, [pc, #164]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b3c:	4b27      	ldr	r3, [pc, #156]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d114      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b48:	f7fa faca 	bl	80020e0 <HAL_GetTick>
 8007b4c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b4e:	e00a      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b50:	f7fa fac6 	bl	80020e0 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e035      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b66:	4b1d      	ldr	r3, [pc, #116]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0ee      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b7e:	d10d      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007b80:	4b16      	ldr	r3, [pc, #88]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b94:	4911      	ldr	r1, [pc, #68]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	608b      	str	r3, [r1, #8]
 8007b9a:	e005      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007b9c:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	4a0e      	ldr	r2, [pc, #56]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007ba2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ba6:	6093      	str	r3, [r2, #8]
 8007ba8:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bb4:	4909      	ldr	r1, [pc, #36]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d004      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007bcc:	4b07      	ldr	r3, [pc, #28]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8007bce:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3720      	adds	r7, #32
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	40023800 	.word	0x40023800
 8007be0:	42470070 	.word	0x42470070
 8007be4:	40007000 	.word	0x40007000
 8007be8:	42470e40 	.word	0x42470e40
 8007bec:	424711e0 	.word	0x424711e0

08007bf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d075      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007c08:	4ba2      	ldr	r3, [pc, #648]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 030c 	and.w	r3, r3, #12
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d00c      	beq.n	8007c2e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c14:	4b9f      	ldr	r3, [pc, #636]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d112      	bne.n	8007c46 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c20:	4b9c      	ldr	r3, [pc, #624]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c2c:	d10b      	bne.n	8007c46 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c2e:	4b99      	ldr	r3, [pc, #612]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d05b      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x102>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d157      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e20b      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4e:	d106      	bne.n	8007c5e <HAL_RCC_OscConfig+0x6e>
 8007c50:	4b90      	ldr	r3, [pc, #576]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a8f      	ldr	r2, [pc, #572]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	e01d      	b.n	8007c9a <HAL_RCC_OscConfig+0xaa>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c66:	d10c      	bne.n	8007c82 <HAL_RCC_OscConfig+0x92>
 8007c68:	4b8a      	ldr	r3, [pc, #552]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a89      	ldr	r2, [pc, #548]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	4b87      	ldr	r3, [pc, #540]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a86      	ldr	r2, [pc, #536]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	e00b      	b.n	8007c9a <HAL_RCC_OscConfig+0xaa>
 8007c82:	4b84      	ldr	r3, [pc, #528]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a83      	ldr	r2, [pc, #524]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	4b81      	ldr	r3, [pc, #516]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a80      	ldr	r2, [pc, #512]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d013      	beq.n	8007cca <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca2:	f7fa fa1d 	bl	80020e0 <HAL_GetTick>
 8007ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ca8:	e008      	b.n	8007cbc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007caa:	f7fa fa19 	bl	80020e0 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b64      	cmp	r3, #100	; 0x64
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e1d0      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cbc:	4b75      	ldr	r3, [pc, #468]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0f0      	beq.n	8007caa <HAL_RCC_OscConfig+0xba>
 8007cc8:	e014      	b.n	8007cf4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cca:	f7fa fa09 	bl	80020e0 <HAL_GetTick>
 8007cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cd0:	e008      	b.n	8007ce4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cd2:	f7fa fa05 	bl	80020e0 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b64      	cmp	r3, #100	; 0x64
 8007cde:	d901      	bls.n	8007ce4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e1bc      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ce4:	4b6b      	ldr	r3, [pc, #428]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1f0      	bne.n	8007cd2 <HAL_RCC_OscConfig+0xe2>
 8007cf0:	e000      	b.n	8007cf4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d063      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007d00:	4b64      	ldr	r3, [pc, #400]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 030c 	and.w	r3, r3, #12
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d0c:	4b61      	ldr	r3, [pc, #388]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d11c      	bne.n	8007d52 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d18:	4b5e      	ldr	r3, [pc, #376]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d116      	bne.n	8007d52 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d24:	4b5b      	ldr	r3, [pc, #364]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_RCC_OscConfig+0x14c>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d001      	beq.n	8007d3c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e190      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d3c:	4b55      	ldr	r3, [pc, #340]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4952      	ldr	r1, [pc, #328]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d50:	e03a      	b.n	8007dc8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d020      	beq.n	8007d9c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d5a:	4b4f      	ldr	r3, [pc, #316]	; (8007e98 <HAL_RCC_OscConfig+0x2a8>)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d60:	f7fa f9be 	bl	80020e0 <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d68:	f7fa f9ba 	bl	80020e0 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e171      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d7a:	4b46      	ldr	r3, [pc, #280]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f0      	beq.n	8007d68 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d86:	4b43      	ldr	r3, [pc, #268]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	493f      	ldr	r1, [pc, #252]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	600b      	str	r3, [r1, #0]
 8007d9a:	e015      	b.n	8007dc8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d9c:	4b3e      	ldr	r3, [pc, #248]	; (8007e98 <HAL_RCC_OscConfig+0x2a8>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da2:	f7fa f99d 	bl	80020e0 <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007daa:	f7fa f999 	bl	80020e0 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e150      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dbc:	4b35      	ldr	r3, [pc, #212]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1f0      	bne.n	8007daa <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d030      	beq.n	8007e36 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d016      	beq.n	8007e0a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ddc:	4b2f      	ldr	r3, [pc, #188]	; (8007e9c <HAL_RCC_OscConfig+0x2ac>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de2:	f7fa f97d 	bl	80020e0 <HAL_GetTick>
 8007de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007de8:	e008      	b.n	8007dfc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dea:	f7fa f979 	bl	80020e0 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e130      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dfc:	4b25      	ldr	r3, [pc, #148]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0f0      	beq.n	8007dea <HAL_RCC_OscConfig+0x1fa>
 8007e08:	e015      	b.n	8007e36 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e0a:	4b24      	ldr	r3, [pc, #144]	; (8007e9c <HAL_RCC_OscConfig+0x2ac>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e10:	f7fa f966 	bl	80020e0 <HAL_GetTick>
 8007e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e18:	f7fa f962 	bl	80020e0 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e119      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e2a:	4b1a      	ldr	r3, [pc, #104]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f0      	bne.n	8007e18 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 809f 	beq.w	8007f82 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e44:	2300      	movs	r3, #0
 8007e46:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e48:	4b12      	ldr	r3, [pc, #72]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10f      	bne.n	8007e74 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	4b0e      	ldr	r3, [pc, #56]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	4a0d      	ldr	r2, [pc, #52]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e62:	6413      	str	r3, [r2, #64]	; 0x40
 8007e64:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <HAL_RCC_OscConfig+0x2a4>)
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e70:	2301      	movs	r3, #1
 8007e72:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_RCC_OscConfig+0x2b0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d120      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e80:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <HAL_RCC_OscConfig+0x2b0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a06      	ldr	r2, [pc, #24]	; (8007ea0 <HAL_RCC_OscConfig+0x2b0>)
 8007e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e8c:	f7fa f928 	bl	80020e0 <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e92:	e010      	b.n	8007eb6 <HAL_RCC_OscConfig+0x2c6>
 8007e94:	40023800 	.word	0x40023800
 8007e98:	42470000 	.word	0x42470000
 8007e9c:	42470e80 	.word	0x42470e80
 8007ea0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ea4:	f7fa f91c 	bl	80020e0 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e0d3      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb6:	4b6c      	ldr	r3, [pc, #432]	; (8008068 <HAL_RCC_OscConfig+0x478>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f0      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d106      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x2e8>
 8007eca:	4b68      	ldr	r3, [pc, #416]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ece:	4a67      	ldr	r2, [pc, #412]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ed6:	e01c      	b.n	8007f12 <HAL_RCC_OscConfig+0x322>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b05      	cmp	r3, #5
 8007ede:	d10c      	bne.n	8007efa <HAL_RCC_OscConfig+0x30a>
 8007ee0:	4b62      	ldr	r3, [pc, #392]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee4:	4a61      	ldr	r2, [pc, #388]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007ee6:	f043 0304 	orr.w	r3, r3, #4
 8007eea:	6713      	str	r3, [r2, #112]	; 0x70
 8007eec:	4b5f      	ldr	r3, [pc, #380]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef0:	4a5e      	ldr	r2, [pc, #376]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ef8:	e00b      	b.n	8007f12 <HAL_RCC_OscConfig+0x322>
 8007efa:	4b5c      	ldr	r3, [pc, #368]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	4a5b      	ldr	r2, [pc, #364]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007f00:	f023 0301 	bic.w	r3, r3, #1
 8007f04:	6713      	str	r3, [r2, #112]	; 0x70
 8007f06:	4b59      	ldr	r3, [pc, #356]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0a:	4a58      	ldr	r2, [pc, #352]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007f0c:	f023 0304 	bic.w	r3, r3, #4
 8007f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d015      	beq.n	8007f46 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f1a:	f7fa f8e1 	bl	80020e0 <HAL_GetTick>
 8007f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f20:	e00a      	b.n	8007f38 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f22:	f7fa f8dd 	bl	80020e0 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d901      	bls.n	8007f38 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e092      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f38:	4b4c      	ldr	r3, [pc, #304]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0ee      	beq.n	8007f22 <HAL_RCC_OscConfig+0x332>
 8007f44:	e014      	b.n	8007f70 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f46:	f7fa f8cb 	bl	80020e0 <HAL_GetTick>
 8007f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f4c:	e00a      	b.n	8007f64 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f4e:	f7fa f8c7 	bl	80020e0 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d901      	bls.n	8007f64 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e07c      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f64:	4b41      	ldr	r3, [pc, #260]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1ee      	bne.n	8007f4e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d105      	bne.n	8007f82 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f76:	4b3d      	ldr	r3, [pc, #244]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	4a3c      	ldr	r2, [pc, #240]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d068      	beq.n	800805c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f8a:	4b38      	ldr	r3, [pc, #224]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 030c 	and.w	r3, r3, #12
 8007f92:	2b08      	cmp	r3, #8
 8007f94:	d060      	beq.n	8008058 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d145      	bne.n	800802a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f9e:	4b34      	ldr	r3, [pc, #208]	; (8008070 <HAL_RCC_OscConfig+0x480>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa4:	f7fa f89c 	bl	80020e0 <HAL_GetTick>
 8007fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007faa:	e008      	b.n	8007fbe <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fac:	f7fa f898 	bl	80020e0 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e04f      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fbe:	4b2b      	ldr	r3, [pc, #172]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1f0      	bne.n	8007fac <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69da      	ldr	r2, [r3, #28]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	019b      	lsls	r3, r3, #6
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	085b      	lsrs	r3, r3, #1
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	041b      	lsls	r3, r3, #16
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	061b      	lsls	r3, r3, #24
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff4:	071b      	lsls	r3, r3, #28
 8007ff6:	491d      	ldr	r1, [pc, #116]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ffc:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <HAL_RCC_OscConfig+0x480>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008002:	f7fa f86d 	bl	80020e0 <HAL_GetTick>
 8008006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008008:	e008      	b.n	800801c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800800a:	f7fa f869 	bl	80020e0 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b02      	cmp	r3, #2
 8008016:	d901      	bls.n	800801c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e020      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800801c:	4b13      	ldr	r3, [pc, #76]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0f0      	beq.n	800800a <HAL_RCC_OscConfig+0x41a>
 8008028:	e018      	b.n	800805c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800802a:	4b11      	ldr	r3, [pc, #68]	; (8008070 <HAL_RCC_OscConfig+0x480>)
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008030:	f7fa f856 	bl	80020e0 <HAL_GetTick>
 8008034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008036:	e008      	b.n	800804a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008038:	f7fa f852 	bl	80020e0 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e009      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800804a:	4b08      	ldr	r3, [pc, #32]	; (800806c <HAL_RCC_OscConfig+0x47c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f0      	bne.n	8008038 <HAL_RCC_OscConfig+0x448>
 8008056:	e001      	b.n	800805c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	40007000 	.word	0x40007000
 800806c:	40023800 	.word	0x40023800
 8008070:	42470060 	.word	0x42470060

08008074 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e107      	b.n	80082a6 <HAL_SAI_Init+0x232>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7f9 fa52 	bl	8001554 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f8ff 	bl	80082bc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f932 	bl	8008328 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d027      	beq.n	800811c <HAL_SAI_Init+0xa8>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f94f 	bl	8008370 <SAI_GetInputClock>
 80080d2:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	461a      	mov	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	025b      	lsls	r3, r3, #9
 80080e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ea:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4a70      	ldr	r2, [pc, #448]	; (80082b0 <HAL_SAI_Init+0x23c>)
 80080f0:	fba2 2303 	umull	r2, r3, r2, r3
 80080f4:	08da      	lsrs	r2, r3, #3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if((tmpregisterGCR % 10U) > 8U)
 80080fa:	68f9      	ldr	r1, [r7, #12]
 80080fc:	4b6c      	ldr	r3, [pc, #432]	; (80082b0 <HAL_SAI_Init+0x23c>)
 80080fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008102:	08da      	lsrs	r2, r3, #3
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	1aca      	subs	r2, r1, r3
 800810e:	2a08      	cmp	r2, #8
 8008110:	d904      	bls.n	800811c <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv+= 1U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_SAI_Init+0xb8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d109      	bne.n	8008140 <HAL_SAI_Init+0xcc>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U: SAI_xCR1_CKSTR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_SAI_Init+0xc4>
 8008134:	2300      	movs	r3, #0
 8008136:	e001      	b.n	800813c <HAL_SAI_Init+0xc8>
 8008138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	e008      	b.n	8008152 <HAL_SAI_Init+0xde>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR: 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	2b01      	cmp	r3, #1
 8008146:	d102      	bne.n	800814e <HAL_SAI_Init+0xda>
 8008148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800814c:	e000      	b.n	8008150 <HAL_SAI_Init+0xdc>
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch(hsai->Init.Synchro)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d815      	bhi.n	8008186 <HAL_SAI_Init+0x112>
 800815a:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <HAL_SAI_Init+0xec>)
 800815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008160:	08008171 	.word	0x08008171
 8008164:	08008177 	.word	0x08008177
 8008168:	0800817f 	.word	0x0800817f
 800816c:	0800817f 	.word	0x0800817f
  {
  case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	613b      	str	r3, [r7, #16]
    }
    break;
 8008174:	e008      	b.n	8008188 <HAL_SAI_Init+0x114>
  case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800817a:	613b      	str	r3, [r7, #16]
    }
    break;
 800817c:	e004      	b.n	8008188 <HAL_SAI_Init+0x114>
  case SAI_SYNCHRONOUS_EXT_SAI1 :
  case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800817e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008182:	613b      	str	r3, [r7, #16]
    }
    break;
 8008184:	e000      	b.n	8008188 <HAL_SAI_Init+0x114>
  default:
    break;
 8008186:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6819      	ldr	r1, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	4b48      	ldr	r3, [pc, #288]	; (80082b4 <HAL_SAI_Init+0x240>)
 8008194:	400b      	ands	r3, r1
 8008196:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6819      	ldr	r1, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081ac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	431a      	orrs	r2, r3
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80081c0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80081cc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	051b      	lsls	r3, r3, #20
 80081d4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6812      	ldr	r2, [r2, #0]
 80081e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80081ec:	f023 030f 	bic.w	r3, r3, #15
 80081f0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6859      	ldr	r1, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	431a      	orrs	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	431a      	orrs	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6899      	ldr	r1, [r3, #8]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	4b27      	ldr	r3, [pc, #156]	; (80082b8 <HAL_SAI_Init+0x244>)
 800821c:	400b      	ands	r3, r1
 800821e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6899      	ldr	r1, [r3, #8]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset     |
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8008230:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSOffset     |
 8008236:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                          hsai->FrameInit.FSDefinition |
 800823c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008242:	3b01      	subs	r3, #1
 8008244:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008246:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68d9      	ldr	r1, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800825e:	400b      	ands	r3, r1
 8008260:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN );

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68d9      	ldr	r1, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008270:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008276:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8008278:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827e:	3b01      	subs	r3, #1
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	cccccccd 	.word	0xcccccccd
 80082b4:	ff05c010 	.word	0xff05c010
 80082b8:	fff88000 	.word	0xfff88000

080082bc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80082bc:	b490      	push	{r4, r7}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7U/1000U);
 80082c4:	4b16      	ldr	r3, [pc, #88]	; (8008320 <SAI_Disable+0x64>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a16      	ldr	r2, [pc, #88]	; (8008324 <SAI_Disable+0x68>)
 80082ca:	fba2 2303 	umull	r2, r3, r2, r3
 80082ce:	0b1b      	lsrs	r3, r3, #12
 80082d0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082e4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 80082e6:	4623      	mov	r3, r4
 80082e8:	1e5c      	subs	r4, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	73fb      	strb	r3, [r7, #15]
      break;
 8008302:	e006      	b.n	8008312 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e9      	bne.n	80082e6 <SAI_Disable+0x2a>

  return status;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bc90      	pop	{r4, r7}
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	20000000 	.word	0x20000000
 8008324:	95cbec1b 	.word	0x95cbec1b

08008328 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d007      	beq.n	8008348 <SAI_BlockSynchroConfig+0x20>
 8008338:	2b01      	cmp	r3, #1
 800833a:	d302      	bcc.n	8008342 <SAI_BlockSynchroConfig+0x1a>
 800833c:	2b02      	cmp	r3, #2
 800833e:	d006      	beq.n	800834e <SAI_BlockSynchroConfig+0x26>
 8008340:	e008      	b.n	8008354 <SAI_BlockSynchroConfig+0x2c>
  {
  case SAI_SYNCEXT_DISABLE :
    tmpregisterGCR = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
    break;
 8008346:	e008      	b.n	800835a <SAI_BlockSynchroConfig+0x32>
  case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
    tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008348:	2310      	movs	r3, #16
 800834a:	60fb      	str	r3, [r7, #12]
    break;
 800834c:	e005      	b.n	800835a <SAI_BlockSynchroConfig+0x32>
  case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
    tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800834e:	2320      	movs	r3, #32
 8008350:	60fb      	str	r3, [r7, #12]
    break;
 8008352:	e002      	b.n	800835a <SAI_BlockSynchroConfig+0x32>
  default:
    tmpregisterGCR = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]
    break;
 8008358:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 800835a:	4a04      	ldr	r2, [pc, #16]	; (800836c <SAI_BlockSynchroConfig+0x44>)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */ 
}
 8008360:	bf00      	nop
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	40015800 	.word	0x40015800

08008370 <SAI_GetInputClock>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)   
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2); 
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	613b      	str	r3, [r7, #16]
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]
  
  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));
 
  /* SAI Block clock source selection */
  if(hsai->Instance == SAI1_Block_A)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a44      	ldr	r2, [pc, #272]	; (800849c <SAI_GetInputClock+0x12c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d10b      	bne.n	80083a6 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800838e:	4b44      	ldr	r3, [pc, #272]	; (80084a0 <SAI_GetInputClock+0x130>)
 8008390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	4940      	ldr	r1, [pc, #256]	; (80084a0 <SAI_GetInputClock+0x130>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80083a4:	e00b      	b.n	80083be <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 80083a6:	4b3e      	ldr	r3, [pc, #248]	; (80084a0 <SAI_GetInputClock+0x130>)
 80083a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	493a      	ldr	r1, [pc, #232]	; (80084a0 <SAI_GetInputClock+0x130>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /* VCO Input Clock value calculation */
  if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80083be:	4b38      	ldr	r3, [pc, #224]	; (80084a0 <SAI_GetInputClock+0x130>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d108      	bne.n	80083dc <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80083ca:	4b35      	ldr	r3, [pc, #212]	; (80084a0 <SAI_GetInputClock+0x130>)
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083d2:	4a34      	ldr	r2, [pc, #208]	; (80084a4 <SAI_GetInputClock+0x134>)
 80083d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d8:	613b      	str	r3, [r7, #16]
 80083da:	e007      	b.n	80083ec <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80083dc:	4b30      	ldr	r3, [pc, #192]	; (80084a0 <SAI_GetInputClock+0x130>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083e4:	4a30      	ldr	r2, [pc, #192]	; (80084a8 <SAI_GetInputClock+0x138>)
 80083e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ea:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d121      	bne.n	8008438 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80083f4:	4b2a      	ldr	r3, [pc, #168]	; (80084a0 <SAI_GetInputClock+0x130>)
 80083f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fa:	0e1b      	lsrs	r3, r3, #24
 80083fc:	f003 030f 	and.w	r3, r3, #15
 8008400:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg);
 8008402:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <SAI_GetInputClock+0x130>)
 8008404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008408:	099b      	lsrs	r3, r3, #6
 800840a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	fb02 f203 	mul.w	r2, r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	fbb2 f3f3 	udiv	r3, r2, r3
 800841a:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800841c:	4b20      	ldr	r3, [pc, #128]	; (80084a0 <SAI_GetInputClock+0x130>)
 800841e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	f003 031f 	and.w	r3, r3, #31
 8008428:	3301      	adds	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource/(tmpreg); 
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	fbb2 f3f3 	udiv	r3, r2, r3
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	e02a      	b.n	800848e <SAI_GetInputClock+0x11e>

  }
  else if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008440:	d120      	bne.n	8008484 <SAI_GetInputClock+0x114>
  {        
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8008442:	4b17      	ldr	r3, [pc, #92]	; (80084a0 <SAI_GetInputClock+0x130>)
 8008444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008448:	0e1b      	lsrs	r3, r3, #24
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg);
 8008450:	4b13      	ldr	r3, [pc, #76]	; (80084a0 <SAI_GetInputClock+0x130>)
 8008452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008456:	099b      	lsrs	r3, r3, #6
 8008458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	fb02 f203 	mul.w	r2, r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	617b      	str	r3, [r7, #20]
    
    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U); 
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <SAI_GetInputClock+0x130>)
 800846c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource/(tmpreg);
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e004      	b.n	800848e <SAI_GetInputClock+0x11e>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8008484:	4b09      	ldr	r3, [pc, #36]	; (80084ac <SAI_GetInputClock+0x13c>)
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
    
    saiclocksource = EXTERNAL_CLOCK_VALUE;
 800848a:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <SAI_GetInputClock+0x140>)
 800848c:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */  
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
       /* the return result is the value of SAI clock */
  return saiclocksource;
 800848e:	697b      	ldr	r3, [r7, #20]
}
 8008490:	4618      	mov	r0, r3
 8008492:	371c      	adds	r7, #28
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	40015804 	.word	0x40015804
 80084a0:	40023800 	.word	0x40023800
 80084a4:	00f42400 	.word	0x00f42400
 80084a8:	007a1200 	.word	0x007a1200
 80084ac:	4247015c 	.word	0x4247015c
 80084b0:	00bb8000 	.word	0x00bb8000

080084b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e022      	b.n	800850c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7f8 febb 	bl	8001254 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2203      	movs	r2, #3
 80084e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f814 	bl	8008514 <HAL_SD_InitCard>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e00a      	b.n	800850c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008514:	b5b0      	push	{r4, r5, r7, lr}
 8008516:	b08e      	sub	sp, #56	; 0x38
 8008518:	af04      	add	r7, sp, #16
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800851c:	2300      	movs	r3, #0
 800851e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008524:	2300      	movs	r3, #0
 8008526:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800852c:	2300      	movs	r3, #0
 800852e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008530:	2376      	movs	r3, #118	; 0x76
 8008532:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681d      	ldr	r5, [r3, #0]
 8008538:	466c      	mov	r4, sp
 800853a:	f107 0314 	add.w	r3, r7, #20
 800853e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008542:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008546:	f107 0308 	add.w	r3, r7, #8
 800854a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800854c:	4628      	mov	r0, r5
 800854e:	f002 fda4 	bl	800b09a <SDIO_Init>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e031      	b.n	80085c8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008564:	4b1a      	ldr	r3, [pc, #104]	; (80085d0 <HAL_SD_InitCard+0xbc>)
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4618      	mov	r0, r3
 8008570:	f002 fdcb 	bl	800b10a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008574:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <HAL_SD_InitCard+0xbc>)
 8008576:	2201      	movs	r2, #1
 8008578:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fde2 	bl	8009144 <SD_PowerON>
 8008580:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	431a      	orrs	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e013      	b.n	80085c8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fd01 	bl	8008fa8 <SD_InitCard>
 80085a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3728      	adds	r7, #40	; 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bdb0      	pop	{r4, r5, r7, pc}
 80085d0:	422580a0 	.word	0x422580a0

080085d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08c      	sub	sp, #48	; 0x30
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d107      	bne.n	80085fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0c7      	b.n	800878c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b01      	cmp	r3, #1
 8008606:	f040 80c0 	bne.w	800878a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800861a:	429a      	cmp	r2, r3
 800861c:	d907      	bls.n	800862e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e0ae      	b.n	800878c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2203      	movs	r2, #3
 8008632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2200      	movs	r2, #0
 800863c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800864c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	4a50      	ldr	r2, [pc, #320]	; (8008794 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	4a4f      	ldr	r2, [pc, #316]	; (8008798 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800865c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	2200      	movs	r2, #0
 8008664:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3380      	adds	r3, #128	; 0x80
 8008670:	4619      	mov	r1, r3
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	025b      	lsls	r3, r3, #9
 8008678:	089b      	lsrs	r3, r3, #2
 800867a:	f7f9 fe8d 	bl	8002398 <HAL_DMA_Start_IT>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d017      	beq.n	80086b4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008692:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a40      	ldr	r2, [pc, #256]	; (800879c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800869a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e06b      	b.n	800878c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80086b4:	4b3a      	ldr	r3, [pc, #232]	; (80087a0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d002      	beq.n	80086c8 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 80086c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c4:	025b      	lsls	r3, r3, #9
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086d0:	4618      	mov	r0, r3
 80086d2:	f002 fdad 	bl	800b230 <SDMMC_CmdBlockLength>
 80086d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00f      	beq.n	80086fe <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a2e      	ldr	r2, [pc, #184]	; (800879c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80086e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	431a      	orrs	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e046      	b.n	800878c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008702:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	025b      	lsls	r3, r3, #9
 8008708:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800870a:	2390      	movs	r3, #144	; 0x90
 800870c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800870e:	2302      	movs	r3, #2
 8008710:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008712:	2300      	movs	r3, #0
 8008714:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008716:	2301      	movs	r3, #1
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f107 0210 	add.w	r2, r7, #16
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f002 fd57 	bl	800b1d8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d90a      	bls.n	8008746 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2282      	movs	r2, #130	; 0x82
 8008734:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800873c:	4618      	mov	r0, r3
 800873e:	f002 fdbb 	bl	800b2b8 <SDMMC_CmdReadMultiBlock>
 8008742:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008744:	e009      	b.n	800875a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2281      	movs	r2, #129	; 0x81
 800874a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008752:	4618      	mov	r0, r3
 8008754:	f002 fd8e 	bl	800b274 <SDMMC_CmdReadSingleBlock>
 8008758:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d012      	beq.n	8008786 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a0d      	ldr	r2, [pc, #52]	; (800879c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	431a      	orrs	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e002      	b.n	800878c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	e000      	b.n	800878c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800878a:	2302      	movs	r3, #2
  }
}
 800878c:	4618      	mov	r0, r3
 800878e:	3730      	adds	r7, #48	; 0x30
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	08008e93 	.word	0x08008e93
 8008798:	08008f05 	.word	0x08008f05
 800879c:	004005ff 	.word	0x004005ff
 80087a0:	4225858c 	.word	0x4225858c

080087a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08c      	sub	sp, #48	; 0x30
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d107      	bne.n	80087cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e0ca      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	f040 80c3 	bne.w	8008960 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	441a      	add	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d907      	bls.n	80087fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e0b1      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2203      	movs	r2, #3
 8008802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f042 021a 	orr.w	r2, r2, #26
 800881c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008822:	4a52      	ldr	r2, [pc, #328]	; (800896c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882a:	4a51      	ldr	r2, [pc, #324]	; (8008970 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800882c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008832:	2200      	movs	r2, #0
 8008834:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883a:	2b01      	cmp	r3, #1
 800883c:	d002      	beq.n	8008844 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	025b      	lsls	r3, r3, #9
 8008842:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800884c:	4618      	mov	r0, r3
 800884e:	f002 fcef 	bl	800b230 <SDMMC_CmdBlockLength>
 8008852:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00f      	beq.n	800887a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a45      	ldr	r2, [pc, #276]	; (8008974 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008860:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008868:	431a      	orrs	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e073      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d90a      	bls.n	8008896 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	22a0      	movs	r2, #160	; 0xa0
 8008884:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800888c:	4618      	mov	r0, r3
 800888e:	f002 fd57 	bl	800b340 <SDMMC_CmdWriteMultiBlock>
 8008892:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008894:	e009      	b.n	80088aa <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2290      	movs	r2, #144	; 0x90
 800889a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088a2:	4618      	mov	r0, r3
 80088a4:	f002 fd2a 	bl	800b2fc <SDMMC_CmdWriteSingleBlock>
 80088a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d012      	beq.n	80088d6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a2f      	ldr	r2, [pc, #188]	; (8008974 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088be:	431a      	orrs	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e045      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80088d6:	4b28      	ldr	r3, [pc, #160]	; (8008978 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80088d8:	2201      	movs	r2, #1
 80088da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3380      	adds	r3, #128	; 0x80
 80088e8:	461a      	mov	r2, r3
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	025b      	lsls	r3, r3, #9
 80088ee:	089b      	lsrs	r3, r3, #2
 80088f0:	f7f9 fd52 	bl	8002398 <HAL_DMA_Start_IT>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01a      	beq.n	8008930 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 021a 	bic.w	r2, r2, #26
 8008908:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a19      	ldr	r2, [pc, #100]	; (8008974 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008910:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e018      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008930:	f04f 33ff 	mov.w	r3, #4294967295
 8008934:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	025b      	lsls	r3, r3, #9
 800893a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800893c:	2390      	movs	r3, #144	; 0x90
 800893e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008944:	2300      	movs	r3, #0
 8008946:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008948:	2301      	movs	r3, #1
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f107 0210 	add.w	r2, r7, #16
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f002 fc3e 	bl	800b1d8 <SDIO_ConfigData>

      return HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	e000      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8008960:	2302      	movs	r3, #2
  }
}
 8008962:	4618      	mov	r0, r3
 8008964:	3730      	adds	r7, #48	; 0x30
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	08008e69 	.word	0x08008e69
 8008970:	08008f05 	.word	0x08008f05
 8008974:	004005ff 	.word	0x004005ff
 8008978:	4225858c 	.word	0x4225858c

0800897c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899e:	0f9b      	lsrs	r3, r3, #30
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089aa:	0e9b      	lsrs	r3, r3, #26
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	f003 030f 	and.w	r3, r3, #15
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089bc:	0e1b      	lsrs	r3, r3, #24
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 0303 	and.w	r3, r3, #3
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ce:	0c1b      	lsrs	r3, r3, #16
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089da:	0a1b      	lsrs	r3, r3, #8
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f0:	0d1b      	lsrs	r3, r3, #20
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089fc:	0c1b      	lsrs	r3, r3, #16
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a0e:	0bdb      	lsrs	r3, r3, #15
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a20:	0b9b      	lsrs	r3, r3, #14
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a32:	0b5b      	lsrs	r3, r3, #13
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a44:	0b1b      	lsrs	r3, r3, #12
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2200      	movs	r2, #0
 8008a56:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d163      	bne.n	8008b28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a64:	009a      	lsls	r2, r3, #2
 8008a66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008a70:	0f92      	lsrs	r2, r2, #30
 8008a72:	431a      	orrs	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7c:	0edb      	lsrs	r3, r3, #27
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a8e:	0e1b      	lsrs	r3, r3, #24
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa0:	0d5b      	lsrs	r3, r3, #21
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab2:	0c9b      	lsrs	r3, r3, #18
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac4:	0bdb      	lsrs	r3, r3, #15
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	7e1b      	ldrb	r3, [r3, #24]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	3302      	adds	r3, #2
 8008ae8:	2201      	movs	r2, #1
 8008aea:	fa02 f303 	lsl.w	r3, r2, r3
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008af2:	fb02 f203 	mul.w	r2, r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	7a1b      	ldrb	r3, [r3, #8]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	2201      	movs	r2, #1
 8008b06:	409a      	lsls	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b14:	0a52      	lsrs	r2, r2, #9
 8008b16:	fb02 f203 	mul.w	r2, r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b24:	661a      	str	r2, [r3, #96]	; 0x60
 8008b26:	e031      	b.n	8008b8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d11d      	bne.n	8008b6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b34:	041b      	lsls	r3, r3, #16
 8008b36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b3e:	0c1b      	lsrs	r3, r3, #16
 8008b40:	431a      	orrs	r2, r3
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	029a      	lsls	r2, r3, #10
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	661a      	str	r2, [r3, #96]	; 0x60
 8008b6a:	e00f      	b.n	8008b8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a58      	ldr	r2, [pc, #352]	; (8008cd4 <HAL_SD_GetCardCSD+0x344>)
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e09d      	b.n	8008cc8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b90:	0b9b      	lsrs	r3, r3, #14
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba2:	09db      	lsrs	r3, r3, #7
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc4:	0fdb      	lsrs	r3, r3, #31
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd0:	0f5b      	lsrs	r3, r3, #29
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be2:	0e9b      	lsrs	r3, r3, #26
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf4:	0d9b      	lsrs	r3, r3, #22
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	f003 030f 	and.w	r3, r3, #15
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c06:	0d5b      	lsrs	r3, r3, #21
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	0c1b      	lsrs	r3, r3, #16
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c36:	0bdb      	lsrs	r3, r3, #15
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4a:	0b9b      	lsrs	r3, r3, #14
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5e:	0b5b      	lsrs	r3, r3, #13
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	0b1b      	lsrs	r3, r3, #12
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c86:	0a9b      	lsrs	r3, r3, #10
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9a:	0a1b      	lsrs	r3, r3, #8
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cae:	085b      	lsrs	r3, r3, #1
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	004005ff 	.word	0x004005ff

08008cd8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d30:	b5b0      	push	{r4, r5, r7, lr}
 8008d32:	b08e      	sub	sp, #56	; 0x38
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d02e      	beq.n	8008da8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d50:	d106      	bne.n	8008d60 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8008d5e:	e029      	b.n	8008db4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d66:	d10a      	bne.n	8008d7e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 faa1 	bl	80092b0 <SD_WideBus_Enable>
 8008d6e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	431a      	orrs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8008d7c:	e01a      	b.n	8008db4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10a      	bne.n	8008d9a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fade 	bl	8009346 <SD_WideBus_Disable>
 8008d8a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	431a      	orrs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
 8008d98:	e00c      	b.n	8008db4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38
 8008da6:	e005      	b.n	8008db4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d009      	beq.n	8008dd0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a18      	ldr	r2, [pc, #96]	; (8008e24 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008dc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e024      	b.n	8008e1a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	466c      	mov	r4, sp
 8008df8:	f107 0318 	add.w	r3, r7, #24
 8008dfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e04:	f107 030c 	add.w	r3, r7, #12
 8008e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f002 f945 	bl	800b09a <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3728      	adds	r7, #40	; 0x28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bdb0      	pop	{r4, r5, r7, pc}
 8008e22:	bf00      	nop
 8008e24:	004005ff 	.word	0x004005ff

08008e28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e34:	f107 030c 	add.w	r3, r7, #12
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa10 	bl	8009260 <SD_SendStatus>
 8008e40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	0a5b      	lsrs	r3, r3, #9
 8008e58:	f003 030f 	and.w	r3, r3, #15
 8008e5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e5e:	693b      	ldr	r3, [r7, #16]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea4:	2b82      	cmp	r3, #130	; 0x82
 8008ea6:	d111      	bne.n	8008ecc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f002 fa69 	bl	800b384 <SDMMC_CmdStopTransfer>
 8008eb2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d008      	beq.n	8008ecc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f7ff fd58 	bl	800897c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0208 	bic.w	r2, r2, #8
 8008eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f003 fded 	bl	800cad4 <HAL_SD_RxCpltCallback>
#endif
}
 8008efa:	bf00      	nop
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f10:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7f9 fa98 	bl	8002448 <HAL_DMA_GetError>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d03e      	beq.n	8008f9c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f24:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d002      	beq.n	8008f3a <SD_DMAError+0x36>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d12d      	bne.n	8008f96 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a19      	ldr	r2, [pc, #100]	; (8008fa4 <SD_DMAError+0xa0>)
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008f50:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008f5e:	6978      	ldr	r0, [r7, #20]
 8008f60:	f7ff ff62 	bl	8008e28 <HAL_SD_GetCardState>
 8008f64:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b06      	cmp	r3, #6
 8008f6a:	d002      	beq.n	8008f72 <SD_DMAError+0x6e>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b05      	cmp	r3, #5
 8008f70:	d10a      	bne.n	8008f88 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f002 fa04 	bl	800b384 <SDMMC_CmdStopTransfer>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f82:	431a      	orrs	r2, r3
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	2200      	movs	r2, #0
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008f96:	6978      	ldr	r0, [r7, #20]
 8008f98:	f7ff fcf0 	bl	800897c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	004005ff 	.word	0x004005ff

08008fa8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fa8:	b5b0      	push	{r4, r5, r7, lr}
 8008faa:	b094      	sub	sp, #80	; 0x50
 8008fac:	af04      	add	r7, sp, #16
 8008fae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f002 f8b5 	bl	800b128 <SDIO_GetPowerState>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d102      	bne.n	8008fca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008fc8:	e0b7      	b.n	800913a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d02f      	beq.n	8009032 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f002 fade 	bl	800b598 <SDMMC_CmdSendCID>
 8008fdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <SD_InitCard+0x40>
    {
      return errorstate;
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe6:	e0a8      	b.n	800913a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2100      	movs	r1, #0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f002 f8df 	bl	800b1b2 <SDIO_GetResponse>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2104      	movs	r1, #4
 8009000:	4618      	mov	r0, r3
 8009002:	f002 f8d6 	bl	800b1b2 <SDIO_GetResponse>
 8009006:	4602      	mov	r2, r0
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2108      	movs	r1, #8
 8009012:	4618      	mov	r0, r3
 8009014:	f002 f8cd 	bl	800b1b2 <SDIO_GetResponse>
 8009018:	4602      	mov	r2, r0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	210c      	movs	r1, #12
 8009024:	4618      	mov	r0, r3
 8009026:	f002 f8c4 	bl	800b1b2 <SDIO_GetResponse>
 800902a:	4602      	mov	r2, r0
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009036:	2b03      	cmp	r3, #3
 8009038:	d00d      	beq.n	8009056 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f107 020e 	add.w	r2, r7, #14
 8009042:	4611      	mov	r1, r2
 8009044:	4618      	mov	r0, r3
 8009046:	f002 fae4 	bl	800b612 <SDMMC_CmdSetRelAdd>
 800904a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800904c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <SD_InitCard+0xae>
    {
      return errorstate;
 8009052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009054:	e071      	b.n	800913a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905a:	2b03      	cmp	r3, #3
 800905c:	d036      	beq.n	80090cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800905e:	89fb      	ldrh	r3, [r7, #14]
 8009060:	461a      	mov	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906e:	041b      	lsls	r3, r3, #16
 8009070:	4619      	mov	r1, r3
 8009072:	4610      	mov	r0, r2
 8009074:	f002 faae 	bl	800b5d4 <SDMMC_CmdSendCSD>
 8009078:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800907a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009082:	e05a      	b.n	800913a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f002 f891 	bl	800b1b2 <SDIO_GetResponse>
 8009090:	4602      	mov	r2, r0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2104      	movs	r1, #4
 800909c:	4618      	mov	r0, r3
 800909e:	f002 f888 	bl	800b1b2 <SDIO_GetResponse>
 80090a2:	4602      	mov	r2, r0
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2108      	movs	r1, #8
 80090ae:	4618      	mov	r0, r3
 80090b0:	f002 f87f 	bl	800b1b2 <SDIO_GetResponse>
 80090b4:	4602      	mov	r2, r0
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	210c      	movs	r1, #12
 80090c0:	4618      	mov	r0, r3
 80090c2:	f002 f876 	bl	800b1b2 <SDIO_GetResponse>
 80090c6:	4602      	mov	r2, r0
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2104      	movs	r1, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f002 f86d 	bl	800b1b2 <SDIO_GetResponse>
 80090d8:	4603      	mov	r3, r0
 80090da:	0d1a      	lsrs	r2, r3, #20
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80090e0:	f107 0310 	add.w	r3, r7, #16
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fc52 	bl	8008990 <HAL_SD_GetCardCSD>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090f6:	e020      	b.n	800913a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6819      	ldr	r1, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009100:	041b      	lsls	r3, r3, #16
 8009102:	f04f 0400 	mov.w	r4, #0
 8009106:	461a      	mov	r2, r3
 8009108:	4623      	mov	r3, r4
 800910a:	4608      	mov	r0, r1
 800910c:	f002 f95c 	bl	800b3c8 <SDMMC_CmdSelDesel>
 8009110:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <SD_InitCard+0x174>
  {
    return errorstate;
 8009118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911a:	e00e      	b.n	800913a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681d      	ldr	r5, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	466c      	mov	r4, sp
 8009124:	f103 0210 	add.w	r2, r3, #16
 8009128:	ca07      	ldmia	r2, {r0, r1, r2}
 800912a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800912e:	3304      	adds	r3, #4
 8009130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009132:	4628      	mov	r0, r5
 8009134:	f001 ffb1 	bl	800b09a <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3740      	adds	r7, #64	; 0x40
 800913e:	46bd      	mov	sp, r7
 8009140:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009144 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	2300      	movs	r3, #0
 8009156:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	f002 f956 	bl	800b40e <SDMMC_CmdGoIdleState>
 8009162:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <SD_PowerON+0x2a>
  {
    return errorstate;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	e072      	b.n	8009254 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f002 f969 	bl	800b44a <SDMMC_CmdOperCond>
 8009178:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00d      	beq.n	800919c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f002 f93f 	bl	800b40e <SDMMC_CmdGoIdleState>
 8009190:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d004      	beq.n	80091a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	e05b      	b.n	8009254 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d137      	bne.n	800921a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f002 f969 	bl	800b488 <SDMMC_CmdAppCommand>
 80091b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d02d      	beq.n	800921a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091c2:	e047      	b.n	8009254 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f002 f95c 	bl	800b488 <SDMMC_CmdAppCommand>
 80091d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <SD_PowerON+0x98>
    {
      return errorstate;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	e03b      	b.n	8009254 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	491e      	ldr	r1, [pc, #120]	; (800925c <SD_PowerON+0x118>)
 80091e2:	4618      	mov	r0, r3
 80091e4:	f002 f972 	bl	800b4cc <SDMMC_CmdAppOperCommand>
 80091e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091f4:	e02e      	b.n	8009254 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 ffd8 	bl	800b1b2 <SDIO_GetResponse>
 8009202:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	0fdb      	lsrs	r3, r3, #31
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <SD_PowerON+0xcc>
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <SD_PowerON+0xce>
 8009210:	2300      	movs	r3, #0
 8009212:	613b      	str	r3, [r7, #16]

    count++;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	3301      	adds	r3, #1
 8009218:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009220:	4293      	cmp	r3, r2
 8009222:	d802      	bhi.n	800922a <SD_PowerON+0xe6>
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0cc      	beq.n	80091c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009230:	4293      	cmp	r3, r2
 8009232:	d902      	bls.n	800923a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009238:	e00c      	b.n	8009254 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	645a      	str	r2, [r3, #68]	; 0x44
 800924a:	e002      	b.n	8009252 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	c1100000 	.word	0xc1100000

08009260 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009274:	e018      	b.n	80092a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927e:	041b      	lsls	r3, r3, #16
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f002 f9e6 	bl	800b654 <SDMMC_CmdSendStatus>
 8009288:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	e009      	b.n	80092a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2100      	movs	r1, #0
 800929a:	4618      	mov	r0, r3
 800929c:	f001 ff89 	bl	800b1b2 <SDIO_GetResponse>
 80092a0:	4602      	mov	r2, r0
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 ff73 	bl	800b1b2 <SDIO_GetResponse>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d6:	d102      	bne.n	80092de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092dc:	e02f      	b.n	800933e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092de:	f107 030c 	add.w	r3, r7, #12
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f879 	bl	80093dc <SD_FindSCR>
 80092ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	e023      	b.n	800933e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01c      	beq.n	800933a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009308:	041b      	lsls	r3, r3, #16
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f002 f8bb 	bl	800b488 <SDMMC_CmdAppCommand>
 8009312:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	e00f      	b.n	800933e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2102      	movs	r1, #2
 8009324:	4618      	mov	r0, r3
 8009326:	f002 f8f4 	bl	800b512 <SDMMC_CmdBusWidth>
 800932a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	e003      	b.n	800933e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009336:	2300      	movs	r3, #0
 8009338:	e001      	b.n	800933e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800933a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b086      	sub	sp, #24
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	2300      	movs	r3, #0
 8009354:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2100      	movs	r1, #0
 800935c:	4618      	mov	r0, r3
 800935e:	f001 ff28 	bl	800b1b2 <SDIO_GetResponse>
 8009362:	4603      	mov	r3, r0
 8009364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800936c:	d102      	bne.n	8009374 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800936e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009372:	e02f      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f82e 	bl	80093dc <SD_FindSCR>
 8009380:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	e023      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01c      	beq.n	80093d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800939e:	041b      	lsls	r3, r3, #16
 80093a0:	4619      	mov	r1, r3
 80093a2:	4610      	mov	r0, r2
 80093a4:	f002 f870 	bl	800b488 <SDMMC_CmdAppCommand>
 80093a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	e00f      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2100      	movs	r1, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f002 f8a9 	bl	800b512 <SDMMC_CmdBusWidth>
 80093c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	e003      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	e001      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093dc:	b590      	push	{r4, r7, lr}
 80093de:	b08f      	sub	sp, #60	; 0x3c
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093e6:	f7f8 fe7b 	bl	80020e0 <HAL_GetTick>
 80093ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80093f0:	2300      	movs	r3, #0
 80093f2:	60bb      	str	r3, [r7, #8]
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2108      	movs	r1, #8
 8009402:	4618      	mov	r0, r3
 8009404:	f001 ff14 	bl	800b230 <SDMMC_CmdBlockLength>
 8009408:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	e0a9      	b.n	8009568 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800941c:	041b      	lsls	r3, r3, #16
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f002 f831 	bl	800b488 <SDMMC_CmdAppCommand>
 8009426:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <SD_FindSCR+0x56>
  {
    return errorstate;
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	e09a      	b.n	8009568 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009432:	f04f 33ff 	mov.w	r3, #4294967295
 8009436:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009438:	2308      	movs	r3, #8
 800943a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800943c:	2330      	movs	r3, #48	; 0x30
 800943e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009440:	2302      	movs	r3, #2
 8009442:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009444:	2300      	movs	r3, #0
 8009446:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009448:	2301      	movs	r3, #1
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f107 0210 	add.w	r2, r7, #16
 8009454:	4611      	mov	r1, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f001 febe 	bl	800b1d8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4618      	mov	r0, r3
 8009462:	f002 f878 	bl	800b556 <SDMMC_CmdSendSCR>
 8009466:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	2b00      	cmp	r3, #0
 800946c:	d022      	beq.n	80094b4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	e07a      	b.n	8009568 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00e      	beq.n	800949e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6819      	ldr	r1, [r3, #0]
 8009484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	f107 0208 	add.w	r2, r7, #8
 800948c:	18d4      	adds	r4, r2, r3
 800948e:	4608      	mov	r0, r1
 8009490:	f001 fe2e 	bl	800b0f0 <SDIO_ReadFIFO>
 8009494:	4603      	mov	r3, r0
 8009496:	6023      	str	r3, [r4, #0]
      index++;
 8009498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949a:	3301      	adds	r3, #1
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800949e:	f7f8 fe1f 	bl	80020e0 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d102      	bne.n	80094b4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094b2:	e059      	b.n	8009568 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ba:	f240 432a 	movw	r3, #1066	; 0x42a
 80094be:	4013      	ands	r3, r2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0d6      	beq.n	8009472 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ca:	f003 0308 	and.w	r3, r3, #8
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d005      	beq.n	80094de <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2208      	movs	r2, #8
 80094d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094da:	2308      	movs	r3, #8
 80094dc:	e044      	b.n	8009568 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	f003 0302 	and.w	r3, r3, #2
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d005      	beq.n	80094f8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2202      	movs	r2, #2
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094f4:	2302      	movs	r3, #2
 80094f6:	e037      	b.n	8009568 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d005      	beq.n	8009512 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2220      	movs	r2, #32
 800950c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800950e:	2320      	movs	r3, #32
 8009510:	e02a      	b.n	8009568 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f240 523a 	movw	r2, #1338	; 0x53a
 800951a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	061a      	lsls	r2, r3, #24
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009528:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	0a1b      	lsrs	r3, r3, #8
 800952e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009532:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	0e1b      	lsrs	r3, r3, #24
 8009538:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	601a      	str	r2, [r3, #0]
    scr++;
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	3304      	adds	r3, #4
 8009542:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	061a      	lsls	r2, r3, #24
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009550:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	0a1b      	lsrs	r3, r3, #8
 8009556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800955a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	0e1b      	lsrs	r3, r3, #24
 8009560:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	373c      	adds	r7, #60	; 0x3c
 800956c:	46bd      	mov	sp, r7
 800956e:	bd90      	pop	{r4, r7, pc}

08009570 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e025      	b.n	80095d0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d106      	bne.n	800959e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f00d f91b 	bl	80167d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2202      	movs	r2, #2
 80095a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f001 fc31 	bl	800ae18 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	461a      	mov	r2, r3
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	f001 fc9c 	bl	800aefe <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d101      	bne.n	80095f4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80095f0:	2302      	movs	r3, #2
 80095f2:	e018      	b.n	8009626 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	4618      	mov	r0, r3
 8009606:	f001 fcf9 	bl	800affc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b02      	cmp	r3, #2
 8009610:	d104      	bne.n	800961c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2205      	movs	r2, #5
 8009616:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800961a:	e003      	b.n	8009624 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b082      	sub	sp, #8
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b02      	cmp	r3, #2
 8009642:	d101      	bne.n	8009648 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009644:	2302      	movs	r3, #2
 8009646:	e00e      	b.n	8009666 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f001 fd0c 	bl	800b074 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e056      	b.n	800972e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7f7 fe42 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2202      	movs	r2, #2
 80096a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096dc:	431a      	orrs	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	ea42 0103 	orr.w	r1, r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	430a      	orrs	r2, r1
 80096f6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	0c1b      	lsrs	r3, r3, #16
 80096fe:	f003 0104 	and.w	r1, r3, #4
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69da      	ldr	r2, [r3, #28]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800971c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b088      	sub	sp, #32
 800973a:	af00      	add	r7, sp, #0
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	603b      	str	r3, [r7, #0]
 8009742:	4613      	mov	r3, r2
 8009744:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_SPI_Transmit+0x22>
 8009754:	2302      	movs	r3, #2
 8009756:	e11e      	b.n	8009996 <HAL_SPI_Transmit+0x260>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009760:	f7f8 fcbe 	bl	80020e0 <HAL_GetTick>
 8009764:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009766:	88fb      	ldrh	r3, [r7, #6]
 8009768:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b01      	cmp	r3, #1
 8009774:	d002      	beq.n	800977c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009776:	2302      	movs	r3, #2
 8009778:	77fb      	strb	r3, [r7, #31]
    goto error;
 800977a:	e103      	b.n	8009984 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <HAL_SPI_Transmit+0x52>
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800978c:	e0fa      	b.n	8009984 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2203      	movs	r2, #3
 8009792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	88fa      	ldrh	r2, [r7, #6]
 80097a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	88fa      	ldrh	r2, [r7, #6]
 80097ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097d4:	d107      	bne.n	80097e6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f0:	2b40      	cmp	r3, #64	; 0x40
 80097f2:	d007      	beq.n	8009804 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800980c:	d14b      	bne.n	80098a6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <HAL_SPI_Transmit+0xe6>
 8009816:	8afb      	ldrh	r3, [r7, #22]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d13e      	bne.n	800989a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009820:	881a      	ldrh	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982c:	1c9a      	adds	r2, r3, #2
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009836:	b29b      	uxth	r3, r3
 8009838:	3b01      	subs	r3, #1
 800983a:	b29a      	uxth	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009840:	e02b      	b.n	800989a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b02      	cmp	r3, #2
 800984e:	d112      	bne.n	8009876 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009854:	881a      	ldrh	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	1c9a      	adds	r2, r3, #2
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800986a:	b29b      	uxth	r3, r3
 800986c:	3b01      	subs	r3, #1
 800986e:	b29a      	uxth	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	86da      	strh	r2, [r3, #54]	; 0x36
 8009874:	e011      	b.n	800989a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009876:	f7f8 fc33 	bl	80020e0 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d803      	bhi.n	800988e <HAL_SPI_Transmit+0x158>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988c:	d102      	bne.n	8009894 <HAL_SPI_Transmit+0x15e>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009898:	e074      	b.n	8009984 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800989e:	b29b      	uxth	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1ce      	bne.n	8009842 <HAL_SPI_Transmit+0x10c>
 80098a4:	e04c      	b.n	8009940 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <HAL_SPI_Transmit+0x17e>
 80098ae:	8afb      	ldrh	r3, [r7, #22]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d140      	bne.n	8009936 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	330c      	adds	r3, #12
 80098be:	7812      	ldrb	r2, [r2, #0]
 80098c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80098da:	e02c      	b.n	8009936 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f003 0302 	and.w	r3, r3, #2
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d113      	bne.n	8009912 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	330c      	adds	r3, #12
 80098f4:	7812      	ldrb	r2, [r2, #0]
 80098f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009910:	e011      	b.n	8009936 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009912:	f7f8 fbe5 	bl	80020e0 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d803      	bhi.n	800992a <HAL_SPI_Transmit+0x1f4>
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d102      	bne.n	8009930 <HAL_SPI_Transmit+0x1fa>
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d102      	bne.n	8009936 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009934:	e026      	b.n	8009984 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800993a:	b29b      	uxth	r3, r3
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1cd      	bne.n	80098dc <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 fa37 	bl	8009db8 <SPI_EndRxTxTransaction>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2220      	movs	r2, #32
 8009954:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800995e:	2300      	movs	r3, #0
 8009960:	613b      	str	r3, [r7, #16]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	613b      	str	r3, [r7, #16]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	613b      	str	r3, [r7, #16]
 8009972:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	77fb      	strb	r3, [r7, #31]
 8009980:	e000      	b.n	8009984 <HAL_SPI_Transmit+0x24e>
  }

error:
 8009982:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009994:	7ffb      	ldrb	r3, [r7, #31]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3720      	adds	r7, #32
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b08c      	sub	sp, #48	; 0x30
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
 80099aa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099ac:	2301      	movs	r3, #1
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d101      	bne.n	80099c4 <HAL_SPI_TransmitReceive+0x26>
 80099c0:	2302      	movs	r3, #2
 80099c2:	e18a      	b.n	8009cda <HAL_SPI_TransmitReceive+0x33c>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099cc:	f7f8 fb88 	bl	80020e0 <HAL_GetTick>
 80099d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80099e2:	887b      	ldrh	r3, [r7, #2]
 80099e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d00f      	beq.n	8009a0e <HAL_SPI_TransmitReceive+0x70>
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f4:	d107      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d103      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x68>
 80099fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	d003      	beq.n	8009a0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009a06:	2302      	movs	r3, #2
 8009a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a0c:	e15b      	b.n	8009cc6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d005      	beq.n	8009a20 <HAL_SPI_TransmitReceive+0x82>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <HAL_SPI_TransmitReceive+0x82>
 8009a1a:	887b      	ldrh	r3, [r7, #2]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d103      	bne.n	8009a28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a26:	e14e      	b.n	8009cc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d003      	beq.n	8009a3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2205      	movs	r2, #5
 8009a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	887a      	ldrh	r2, [r7, #2]
 8009a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	887a      	ldrh	r2, [r7, #2]
 8009a52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	887a      	ldrh	r2, [r7, #2]
 8009a5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	887a      	ldrh	r2, [r7, #2]
 8009a64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7c:	2b40      	cmp	r3, #64	; 0x40
 8009a7e:	d007      	beq.n	8009a90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a98:	d178      	bne.n	8009b8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <HAL_SPI_TransmitReceive+0x10a>
 8009aa2:	8b7b      	ldrh	r3, [r7, #26]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d166      	bne.n	8009b76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aac:	881a      	ldrh	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab8:	1c9a      	adds	r2, r3, #2
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009acc:	e053      	b.n	8009b76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d11b      	bne.n	8009b14 <HAL_SPI_TransmitReceive+0x176>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d016      	beq.n	8009b14 <HAL_SPI_TransmitReceive+0x176>
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d113      	bne.n	8009b14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af0:	881a      	ldrh	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afc:	1c9a      	adds	r2, r3, #2
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d119      	bne.n	8009b56 <HAL_SPI_TransmitReceive+0x1b8>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d014      	beq.n	8009b56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	b292      	uxth	r2, r2
 8009b38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3e:	1c9a      	adds	r2, r3, #2
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b52:	2301      	movs	r3, #1
 8009b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b56:	f7f8 fac3 	bl	80020e0 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d807      	bhi.n	8009b76 <HAL_SPI_TransmitReceive+0x1d8>
 8009b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6c:	d003      	beq.n	8009b76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b74:	e0a7      	b.n	8009cc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1a6      	bne.n	8009ace <HAL_SPI_TransmitReceive+0x130>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1a1      	bne.n	8009ace <HAL_SPI_TransmitReceive+0x130>
 8009b8a:	e07c      	b.n	8009c86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <HAL_SPI_TransmitReceive+0x1fc>
 8009b94:	8b7b      	ldrh	r3, [r7, #26]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d16b      	bne.n	8009c72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	330c      	adds	r3, #12
 8009ba4:	7812      	ldrb	r2, [r2, #0]
 8009ba6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bc0:	e057      	b.n	8009c72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d11c      	bne.n	8009c0a <HAL_SPI_TransmitReceive+0x26c>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d017      	beq.n	8009c0a <HAL_SPI_TransmitReceive+0x26c>
 8009bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d114      	bne.n	8009c0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	330c      	adds	r3, #12
 8009bea:	7812      	ldrb	r2, [r2, #0]
 8009bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d119      	bne.n	8009c4c <HAL_SPI_TransmitReceive+0x2ae>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d014      	beq.n	8009c4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2c:	b2d2      	uxtb	r2, r2
 8009c2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	3b01      	subs	r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c4c:	f7f8 fa48 	bl	80020e0 <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d803      	bhi.n	8009c64 <HAL_SPI_TransmitReceive+0x2c6>
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c62:	d102      	bne.n	8009c6a <HAL_SPI_TransmitReceive+0x2cc>
 8009c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d103      	bne.n	8009c72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c70:	e029      	b.n	8009cc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1a2      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x224>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d19d      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 f894 	bl	8009db8 <SPI_EndRxTxTransaction>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d006      	beq.n	8009ca4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009ca2:	e010      	b.n	8009cc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10b      	bne.n	8009cc4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cac:	2300      	movs	r3, #0
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	617b      	str	r3, [r7, #20]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	e000      	b.n	8009cc6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009cc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3730      	adds	r7, #48	; 0x30
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	603b      	str	r3, [r7, #0]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cf2:	e04c      	b.n	8009d8e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d048      	beq.n	8009d8e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009cfc:	f7f8 f9f0 	bl	80020e0 <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d902      	bls.n	8009d12 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d13d      	bne.n	8009d8e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d2a:	d111      	bne.n	8009d50 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d34:	d004      	beq.n	8009d40 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d3e:	d107      	bne.n	8009d50 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d58:	d10f      	bne.n	8009d7a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d68:	601a      	str	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e00f      	b.n	8009dae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	4013      	ands	r3, r2
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	bf0c      	ite	eq
 8009d9e:	2301      	moveq	r3, #1
 8009da0:	2300      	movne	r3, #0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	461a      	mov	r2, r3
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d1a3      	bne.n	8009cf4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af02      	add	r7, sp, #8
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009dc4:	4b1b      	ldr	r3, [pc, #108]	; (8009e34 <SPI_EndRxTxTransaction+0x7c>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a1b      	ldr	r2, [pc, #108]	; (8009e38 <SPI_EndRxTxTransaction+0x80>)
 8009dca:	fba2 2303 	umull	r2, r3, r2, r3
 8009dce:	0d5b      	lsrs	r3, r3, #21
 8009dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dd4:	fb02 f303 	mul.w	r3, r2, r3
 8009dd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009de2:	d112      	bne.n	8009e0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2200      	movs	r2, #0
 8009dec:	2180      	movs	r1, #128	; 0x80
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff ff77 	bl	8009ce2 <SPI_WaitFlagStateUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d016      	beq.n	8009e28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfe:	f043 0220 	orr.w	r2, r3, #32
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e00f      	b.n	8009e2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00a      	beq.n	8009e26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e20:	2b80      	cmp	r3, #128	; 0x80
 8009e22:	d0f2      	beq.n	8009e0a <SPI_EndRxTxTransaction+0x52>
 8009e24:	e000      	b.n	8009e28 <SPI_EndRxTxTransaction+0x70>
        break;
 8009e26:	bf00      	nop
  }

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000000 	.word	0x20000000
 8009e38:	165e9f81 	.word	0x165e9f81

08009e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e01d      	b.n	8009e8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7f7 fad4 	bl	8001410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	3304      	adds	r3, #4
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	f000 fa38 	bl	800a2f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b085      	sub	sp, #20
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b06      	cmp	r3, #6
 8009eb2:	d007      	beq.n	8009ec4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0201 	orr.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b085      	sub	sp, #20
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f042 0201 	orr.w	r2, r2, #1
 8009ef0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f003 0307 	and.w	r3, r3, #7
 8009efc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b06      	cmp	r3, #6
 8009f02:	d007      	beq.n	8009f14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0201 	orr.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	f003 0302 	and.w	r3, r3, #2
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d122      	bne.n	8009f7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d11b      	bne.n	8009f7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f06f 0202 	mvn.w	r2, #2
 8009f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	f003 0303 	and.w	r3, r3, #3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9a5 	bl	800a2b4 <HAL_TIM_IC_CaptureCallback>
 8009f6a:	e005      	b.n	8009f78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f997 	bl	800a2a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f9a8 	bl	800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	f003 0304 	and.w	r3, r3, #4
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	d122      	bne.n	8009fd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d11b      	bne.n	8009fd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f06f 0204 	mvn.w	r2, #4
 8009fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f97b 	bl	800a2b4 <HAL_TIM_IC_CaptureCallback>
 8009fbe:	e005      	b.n	8009fcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f96d 	bl	800a2a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f97e 	bl	800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	f003 0308 	and.w	r3, r3, #8
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	d122      	bne.n	800a026 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	f003 0308 	and.w	r3, r3, #8
 8009fea:	2b08      	cmp	r3, #8
 8009fec:	d11b      	bne.n	800a026 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f06f 0208 	mvn.w	r2, #8
 8009ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2204      	movs	r2, #4
 8009ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f951 	bl	800a2b4 <HAL_TIM_IC_CaptureCallback>
 800a012:	e005      	b.n	800a020 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 f943 	bl	800a2a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f954 	bl	800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	f003 0310 	and.w	r3, r3, #16
 800a030:	2b10      	cmp	r3, #16
 800a032:	d122      	bne.n	800a07a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	f003 0310 	and.w	r3, r3, #16
 800a03e:	2b10      	cmp	r3, #16
 800a040:	d11b      	bne.n	800a07a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f06f 0210 	mvn.w	r2, #16
 800a04a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2208      	movs	r2, #8
 800a050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69db      	ldr	r3, [r3, #28]
 800a058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f927 	bl	800a2b4 <HAL_TIM_IC_CaptureCallback>
 800a066:	e005      	b.n	800a074 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f919 	bl	800a2a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f92a 	bl	800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b01      	cmp	r3, #1
 800a086:	d10e      	bne.n	800a0a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	2b01      	cmp	r3, #1
 800a094:	d107      	bne.n	800a0a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f06f 0201 	mvn.w	r2, #1
 800a09e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7f6 ff49 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b0:	2b80      	cmp	r3, #128	; 0x80
 800a0b2:	d10e      	bne.n	800a0d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0be:	2b80      	cmp	r3, #128	; 0x80
 800a0c0:	d107      	bne.n	800a0d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 facf 	bl	800a670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0dc:	2b40      	cmp	r3, #64	; 0x40
 800a0de:	d10e      	bne.n	800a0fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ea:	2b40      	cmp	r3, #64	; 0x40
 800a0ec:	d107      	bne.n	800a0fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f8ef 	bl	800a2dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	f003 0320 	and.w	r3, r3, #32
 800a108:	2b20      	cmp	r3, #32
 800a10a:	d10e      	bne.n	800a12a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b20      	cmp	r3, #32
 800a118:	d107      	bne.n	800a12a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f06f 0220 	mvn.w	r2, #32
 800a122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fa99 	bl	800a65c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_TIM_ConfigClockSource+0x18>
 800a146:	2302      	movs	r3, #2
 800a148:	e0a6      	b.n	800a298 <HAL_TIM_ConfigClockSource+0x166>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2202      	movs	r2, #2
 800a156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a168:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a170:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b40      	cmp	r3, #64	; 0x40
 800a180:	d067      	beq.n	800a252 <HAL_TIM_ConfigClockSource+0x120>
 800a182:	2b40      	cmp	r3, #64	; 0x40
 800a184:	d80b      	bhi.n	800a19e <HAL_TIM_ConfigClockSource+0x6c>
 800a186:	2b10      	cmp	r3, #16
 800a188:	d073      	beq.n	800a272 <HAL_TIM_ConfigClockSource+0x140>
 800a18a:	2b10      	cmp	r3, #16
 800a18c:	d802      	bhi.n	800a194 <HAL_TIM_ConfigClockSource+0x62>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d06f      	beq.n	800a272 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a192:	e078      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a194:	2b20      	cmp	r3, #32
 800a196:	d06c      	beq.n	800a272 <HAL_TIM_ConfigClockSource+0x140>
 800a198:	2b30      	cmp	r3, #48	; 0x30
 800a19a:	d06a      	beq.n	800a272 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a19c:	e073      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a19e:	2b70      	cmp	r3, #112	; 0x70
 800a1a0:	d00d      	beq.n	800a1be <HAL_TIM_ConfigClockSource+0x8c>
 800a1a2:	2b70      	cmp	r3, #112	; 0x70
 800a1a4:	d804      	bhi.n	800a1b0 <HAL_TIM_ConfigClockSource+0x7e>
 800a1a6:	2b50      	cmp	r3, #80	; 0x50
 800a1a8:	d033      	beq.n	800a212 <HAL_TIM_ConfigClockSource+0xe0>
 800a1aa:	2b60      	cmp	r3, #96	; 0x60
 800a1ac:	d041      	beq.n	800a232 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a1ae:	e06a      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a1b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b4:	d066      	beq.n	800a284 <HAL_TIM_ConfigClockSource+0x152>
 800a1b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1ba:	d017      	beq.n	800a1ec <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a1bc:	e063      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	6899      	ldr	r1, [r3, #8]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	685a      	ldr	r2, [r3, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f000 f9a9 	bl	800a524 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	609a      	str	r2, [r3, #8]
      break;
 800a1ea:	e04c      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6818      	ldr	r0, [r3, #0]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	6899      	ldr	r1, [r3, #8]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	f000 f992 	bl	800a524 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689a      	ldr	r2, [r3, #8]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a20e:	609a      	str	r2, [r3, #8]
      break;
 800a210:	e039      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6818      	ldr	r0, [r3, #0]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	6859      	ldr	r1, [r3, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	461a      	mov	r2, r3
 800a220:	f000 f906 	bl	800a430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2150      	movs	r1, #80	; 0x50
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f95f 	bl	800a4ee <TIM_ITRx_SetConfig>
      break;
 800a230:	e029      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6818      	ldr	r0, [r3, #0]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	6859      	ldr	r1, [r3, #4]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	461a      	mov	r2, r3
 800a240:	f000 f925 	bl	800a48e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2160      	movs	r1, #96	; 0x60
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 f94f 	bl	800a4ee <TIM_ITRx_SetConfig>
      break;
 800a250:	e019      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	6859      	ldr	r1, [r3, #4]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	461a      	mov	r2, r3
 800a260:	f000 f8e6 	bl	800a430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2140      	movs	r1, #64	; 0x40
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 f93f 	bl	800a4ee <TIM_ITRx_SetConfig>
      break;
 800a270:	e009      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4619      	mov	r1, r3
 800a27c:	4610      	mov	r0, r2
 800a27e:	f000 f936 	bl	800a4ee <TIM_ITRx_SetConfig>
      break;
 800a282:	e000      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a284:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a40      	ldr	r2, [pc, #256]	; (800a404 <TIM_Base_SetConfig+0x114>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d013      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a30e:	d00f      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a3d      	ldr	r2, [pc, #244]	; (800a408 <TIM_Base_SetConfig+0x118>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d00b      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a3c      	ldr	r2, [pc, #240]	; (800a40c <TIM_Base_SetConfig+0x11c>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d007      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a3b      	ldr	r2, [pc, #236]	; (800a410 <TIM_Base_SetConfig+0x120>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d003      	beq.n	800a330 <TIM_Base_SetConfig+0x40>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a3a      	ldr	r2, [pc, #232]	; (800a414 <TIM_Base_SetConfig+0x124>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d108      	bne.n	800a342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a2f      	ldr	r2, [pc, #188]	; (800a404 <TIM_Base_SetConfig+0x114>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d02b      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a350:	d027      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a2c      	ldr	r2, [pc, #176]	; (800a408 <TIM_Base_SetConfig+0x118>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d023      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a2b      	ldr	r2, [pc, #172]	; (800a40c <TIM_Base_SetConfig+0x11c>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d01f      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a2a      	ldr	r2, [pc, #168]	; (800a410 <TIM_Base_SetConfig+0x120>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d01b      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a29      	ldr	r2, [pc, #164]	; (800a414 <TIM_Base_SetConfig+0x124>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d017      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a28      	ldr	r2, [pc, #160]	; (800a418 <TIM_Base_SetConfig+0x128>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d013      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a27      	ldr	r2, [pc, #156]	; (800a41c <TIM_Base_SetConfig+0x12c>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d00f      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a26      	ldr	r2, [pc, #152]	; (800a420 <TIM_Base_SetConfig+0x130>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d00b      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a25      	ldr	r2, [pc, #148]	; (800a424 <TIM_Base_SetConfig+0x134>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d007      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a24      	ldr	r2, [pc, #144]	; (800a428 <TIM_Base_SetConfig+0x138>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d003      	beq.n	800a3a2 <TIM_Base_SetConfig+0xb2>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a23      	ldr	r2, [pc, #140]	; (800a42c <TIM_Base_SetConfig+0x13c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d108      	bne.n	800a3b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a0a      	ldr	r2, [pc, #40]	; (800a404 <TIM_Base_SetConfig+0x114>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d003      	beq.n	800a3e8 <TIM_Base_SetConfig+0xf8>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a0c      	ldr	r2, [pc, #48]	; (800a414 <TIM_Base_SetConfig+0x124>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d103      	bne.n	800a3f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	615a      	str	r2, [r3, #20]
}
 800a3f6:	bf00      	nop
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40010000 	.word	0x40010000
 800a408:	40000400 	.word	0x40000400
 800a40c:	40000800 	.word	0x40000800
 800a410:	40000c00 	.word	0x40000c00
 800a414:	40010400 	.word	0x40010400
 800a418:	40014000 	.word	0x40014000
 800a41c:	40014400 	.word	0x40014400
 800a420:	40014800 	.word	0x40014800
 800a424:	40001800 	.word	0x40001800
 800a428:	40001c00 	.word	0x40001c00
 800a42c:	40002000 	.word	0x40002000

0800a430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	f023 0201 	bic.w	r2, r3, #1
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a45a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	4313      	orrs	r3, r2
 800a464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f023 030a 	bic.w	r3, r3, #10
 800a46c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	4313      	orrs	r3, r2
 800a474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	621a      	str	r2, [r3, #32]
}
 800a482:	bf00      	nop
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a48e:	b480      	push	{r7}
 800a490:	b087      	sub	sp, #28
 800a492:	af00      	add	r7, sp, #0
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	f023 0210 	bic.w	r2, r3, #16
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6a1b      	ldr	r3, [r3, #32]
 800a4b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	031b      	lsls	r3, r3, #12
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	011b      	lsls	r3, r3, #4
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	621a      	str	r2, [r3, #32]
}
 800a4e2:	bf00      	nop
 800a4e4:	371c      	adds	r7, #28
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b085      	sub	sp, #20
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	f043 0307 	orr.w	r3, r3, #7
 800a510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	609a      	str	r2, [r3, #8]
}
 800a518:	bf00      	nop
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a53e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	021a      	lsls	r2, r3, #8
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	431a      	orrs	r2, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	4313      	orrs	r3, r2
 800a550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	609a      	str	r2, [r3, #8]
}
 800a558:	bf00      	nop
 800a55a:	371c      	adds	r7, #28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a574:	2b01      	cmp	r3, #1
 800a576:	d101      	bne.n	800a57c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a578:	2302      	movs	r3, #2
 800a57a:	e05a      	b.n	800a632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2202      	movs	r2, #2
 800a588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a21      	ldr	r2, [pc, #132]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d022      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c8:	d01d      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a1d      	ldr	r2, [pc, #116]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d018      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a1b      	ldr	r2, [pc, #108]	; (800a648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d013      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a1a      	ldr	r2, [pc, #104]	; (800a64c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d00e      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a18      	ldr	r2, [pc, #96]	; (800a650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d009      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a17      	ldr	r2, [pc, #92]	; (800a654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d004      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a15      	ldr	r2, [pc, #84]	; (800a658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d10c      	bne.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a60c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	4313      	orrs	r3, r2
 800a616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	40010000 	.word	0x40010000
 800a644:	40000400 	.word	0x40000400
 800a648:	40000800 	.word	0x40000800
 800a64c:	40000c00 	.word	0x40000c00
 800a650:	40010400 	.word	0x40010400
 800a654:	40014000 	.word	0x40014000
 800a658:	40001800 	.word	0x40001800

0800a65c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e03f      	b.n	800a716 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d106      	bne.n	800a6b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7f6 fed2 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2224      	movs	r2, #36	; 0x24
 800a6b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f829 	bl	800a720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	691a      	ldr	r2, [r3, #16]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	695a      	ldr	r2, [r3, #20]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68da      	ldr	r2, [r3, #12]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2220      	movs	r2, #32
 800a710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	430a      	orrs	r2, r1
 800a73e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	689a      	ldr	r2, [r3, #8]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	431a      	orrs	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	431a      	orrs	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	4313      	orrs	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a762:	f023 030c 	bic.w	r3, r3, #12
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6812      	ldr	r2, [r2, #0]
 800a76a:	68f9      	ldr	r1, [r7, #12]
 800a76c:	430b      	orrs	r3, r1
 800a76e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	699a      	ldr	r2, [r3, #24]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a78e:	f040 818b 	bne.w	800aaa8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4ac1      	ldr	r2, [pc, #772]	; (800aa9c <UART_SetConfig+0x37c>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d005      	beq.n	800a7a8 <UART_SetConfig+0x88>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4abf      	ldr	r2, [pc, #764]	; (800aaa0 <UART_SetConfig+0x380>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	f040 80bd 	bne.w	800a922 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7a8:	f7fc ff9e 	bl	80076e8 <HAL_RCC_GetPCLK2Freq>
 800a7ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	461d      	mov	r5, r3
 800a7b2:	f04f 0600 	mov.w	r6, #0
 800a7b6:	46a8      	mov	r8, r5
 800a7b8:	46b1      	mov	r9, r6
 800a7ba:	eb18 0308 	adds.w	r3, r8, r8
 800a7be:	eb49 0409 	adc.w	r4, r9, r9
 800a7c2:	4698      	mov	r8, r3
 800a7c4:	46a1      	mov	r9, r4
 800a7c6:	eb18 0805 	adds.w	r8, r8, r5
 800a7ca:	eb49 0906 	adc.w	r9, r9, r6
 800a7ce:	f04f 0100 	mov.w	r1, #0
 800a7d2:	f04f 0200 	mov.w	r2, #0
 800a7d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a7da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a7de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a7e2:	4688      	mov	r8, r1
 800a7e4:	4691      	mov	r9, r2
 800a7e6:	eb18 0005 	adds.w	r0, r8, r5
 800a7ea:	eb49 0106 	adc.w	r1, r9, r6
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	461d      	mov	r5, r3
 800a7f4:	f04f 0600 	mov.w	r6, #0
 800a7f8:	196b      	adds	r3, r5, r5
 800a7fa:	eb46 0406 	adc.w	r4, r6, r6
 800a7fe:	461a      	mov	r2, r3
 800a800:	4623      	mov	r3, r4
 800a802:	f7f5 fd4d 	bl	80002a0 <__aeabi_uldivmod>
 800a806:	4603      	mov	r3, r0
 800a808:	460c      	mov	r4, r1
 800a80a:	461a      	mov	r2, r3
 800a80c:	4ba5      	ldr	r3, [pc, #660]	; (800aaa4 <UART_SetConfig+0x384>)
 800a80e:	fba3 2302 	umull	r2, r3, r3, r2
 800a812:	095b      	lsrs	r3, r3, #5
 800a814:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	461d      	mov	r5, r3
 800a81c:	f04f 0600 	mov.w	r6, #0
 800a820:	46a9      	mov	r9, r5
 800a822:	46b2      	mov	sl, r6
 800a824:	eb19 0309 	adds.w	r3, r9, r9
 800a828:	eb4a 040a 	adc.w	r4, sl, sl
 800a82c:	4699      	mov	r9, r3
 800a82e:	46a2      	mov	sl, r4
 800a830:	eb19 0905 	adds.w	r9, r9, r5
 800a834:	eb4a 0a06 	adc.w	sl, sl, r6
 800a838:	f04f 0100 	mov.w	r1, #0
 800a83c:	f04f 0200 	mov.w	r2, #0
 800a840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a844:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a848:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a84c:	4689      	mov	r9, r1
 800a84e:	4692      	mov	sl, r2
 800a850:	eb19 0005 	adds.w	r0, r9, r5
 800a854:	eb4a 0106 	adc.w	r1, sl, r6
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	461d      	mov	r5, r3
 800a85e:	f04f 0600 	mov.w	r6, #0
 800a862:	196b      	adds	r3, r5, r5
 800a864:	eb46 0406 	adc.w	r4, r6, r6
 800a868:	461a      	mov	r2, r3
 800a86a:	4623      	mov	r3, r4
 800a86c:	f7f5 fd18 	bl	80002a0 <__aeabi_uldivmod>
 800a870:	4603      	mov	r3, r0
 800a872:	460c      	mov	r4, r1
 800a874:	461a      	mov	r2, r3
 800a876:	4b8b      	ldr	r3, [pc, #556]	; (800aaa4 <UART_SetConfig+0x384>)
 800a878:	fba3 1302 	umull	r1, r3, r3, r2
 800a87c:	095b      	lsrs	r3, r3, #5
 800a87e:	2164      	movs	r1, #100	; 0x64
 800a880:	fb01 f303 	mul.w	r3, r1, r3
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	3332      	adds	r3, #50	; 0x32
 800a88a:	4a86      	ldr	r2, [pc, #536]	; (800aaa4 <UART_SetConfig+0x384>)
 800a88c:	fba2 2303 	umull	r2, r3, r2, r3
 800a890:	095b      	lsrs	r3, r3, #5
 800a892:	005b      	lsls	r3, r3, #1
 800a894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a898:	4498      	add	r8, r3
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	461d      	mov	r5, r3
 800a89e:	f04f 0600 	mov.w	r6, #0
 800a8a2:	46a9      	mov	r9, r5
 800a8a4:	46b2      	mov	sl, r6
 800a8a6:	eb19 0309 	adds.w	r3, r9, r9
 800a8aa:	eb4a 040a 	adc.w	r4, sl, sl
 800a8ae:	4699      	mov	r9, r3
 800a8b0:	46a2      	mov	sl, r4
 800a8b2:	eb19 0905 	adds.w	r9, r9, r5
 800a8b6:	eb4a 0a06 	adc.w	sl, sl, r6
 800a8ba:	f04f 0100 	mov.w	r1, #0
 800a8be:	f04f 0200 	mov.w	r2, #0
 800a8c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8ce:	4689      	mov	r9, r1
 800a8d0:	4692      	mov	sl, r2
 800a8d2:	eb19 0005 	adds.w	r0, r9, r5
 800a8d6:	eb4a 0106 	adc.w	r1, sl, r6
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	461d      	mov	r5, r3
 800a8e0:	f04f 0600 	mov.w	r6, #0
 800a8e4:	196b      	adds	r3, r5, r5
 800a8e6:	eb46 0406 	adc.w	r4, r6, r6
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	f7f5 fcd7 	bl	80002a0 <__aeabi_uldivmod>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	4b6a      	ldr	r3, [pc, #424]	; (800aaa4 <UART_SetConfig+0x384>)
 800a8fa:	fba3 1302 	umull	r1, r3, r3, r2
 800a8fe:	095b      	lsrs	r3, r3, #5
 800a900:	2164      	movs	r1, #100	; 0x64
 800a902:	fb01 f303 	mul.w	r3, r1, r3
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	00db      	lsls	r3, r3, #3
 800a90a:	3332      	adds	r3, #50	; 0x32
 800a90c:	4a65      	ldr	r2, [pc, #404]	; (800aaa4 <UART_SetConfig+0x384>)
 800a90e:	fba2 2303 	umull	r2, r3, r2, r3
 800a912:	095b      	lsrs	r3, r3, #5
 800a914:	f003 0207 	and.w	r2, r3, #7
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4442      	add	r2, r8
 800a91e:	609a      	str	r2, [r3, #8]
 800a920:	e26f      	b.n	800ae02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a922:	f7fc fecd 	bl	80076c0 <HAL_RCC_GetPCLK1Freq>
 800a926:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	461d      	mov	r5, r3
 800a92c:	f04f 0600 	mov.w	r6, #0
 800a930:	46a8      	mov	r8, r5
 800a932:	46b1      	mov	r9, r6
 800a934:	eb18 0308 	adds.w	r3, r8, r8
 800a938:	eb49 0409 	adc.w	r4, r9, r9
 800a93c:	4698      	mov	r8, r3
 800a93e:	46a1      	mov	r9, r4
 800a940:	eb18 0805 	adds.w	r8, r8, r5
 800a944:	eb49 0906 	adc.w	r9, r9, r6
 800a948:	f04f 0100 	mov.w	r1, #0
 800a94c:	f04f 0200 	mov.w	r2, #0
 800a950:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a954:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a958:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a95c:	4688      	mov	r8, r1
 800a95e:	4691      	mov	r9, r2
 800a960:	eb18 0005 	adds.w	r0, r8, r5
 800a964:	eb49 0106 	adc.w	r1, r9, r6
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	461d      	mov	r5, r3
 800a96e:	f04f 0600 	mov.w	r6, #0
 800a972:	196b      	adds	r3, r5, r5
 800a974:	eb46 0406 	adc.w	r4, r6, r6
 800a978:	461a      	mov	r2, r3
 800a97a:	4623      	mov	r3, r4
 800a97c:	f7f5 fc90 	bl	80002a0 <__aeabi_uldivmod>
 800a980:	4603      	mov	r3, r0
 800a982:	460c      	mov	r4, r1
 800a984:	461a      	mov	r2, r3
 800a986:	4b47      	ldr	r3, [pc, #284]	; (800aaa4 <UART_SetConfig+0x384>)
 800a988:	fba3 2302 	umull	r2, r3, r3, r2
 800a98c:	095b      	lsrs	r3, r3, #5
 800a98e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	461d      	mov	r5, r3
 800a996:	f04f 0600 	mov.w	r6, #0
 800a99a:	46a9      	mov	r9, r5
 800a99c:	46b2      	mov	sl, r6
 800a99e:	eb19 0309 	adds.w	r3, r9, r9
 800a9a2:	eb4a 040a 	adc.w	r4, sl, sl
 800a9a6:	4699      	mov	r9, r3
 800a9a8:	46a2      	mov	sl, r4
 800a9aa:	eb19 0905 	adds.w	r9, r9, r5
 800a9ae:	eb4a 0a06 	adc.w	sl, sl, r6
 800a9b2:	f04f 0100 	mov.w	r1, #0
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9c6:	4689      	mov	r9, r1
 800a9c8:	4692      	mov	sl, r2
 800a9ca:	eb19 0005 	adds.w	r0, r9, r5
 800a9ce:	eb4a 0106 	adc.w	r1, sl, r6
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	461d      	mov	r5, r3
 800a9d8:	f04f 0600 	mov.w	r6, #0
 800a9dc:	196b      	adds	r3, r5, r5
 800a9de:	eb46 0406 	adc.w	r4, r6, r6
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	4623      	mov	r3, r4
 800a9e6:	f7f5 fc5b 	bl	80002a0 <__aeabi_uldivmod>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	4b2c      	ldr	r3, [pc, #176]	; (800aaa4 <UART_SetConfig+0x384>)
 800a9f2:	fba3 1302 	umull	r1, r3, r3, r2
 800a9f6:	095b      	lsrs	r3, r3, #5
 800a9f8:	2164      	movs	r1, #100	; 0x64
 800a9fa:	fb01 f303 	mul.w	r3, r1, r3
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	3332      	adds	r3, #50	; 0x32
 800aa04:	4a27      	ldr	r2, [pc, #156]	; (800aaa4 <UART_SetConfig+0x384>)
 800aa06:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0a:	095b      	lsrs	r3, r3, #5
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa12:	4498      	add	r8, r3
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	461d      	mov	r5, r3
 800aa18:	f04f 0600 	mov.w	r6, #0
 800aa1c:	46a9      	mov	r9, r5
 800aa1e:	46b2      	mov	sl, r6
 800aa20:	eb19 0309 	adds.w	r3, r9, r9
 800aa24:	eb4a 040a 	adc.w	r4, sl, sl
 800aa28:	4699      	mov	r9, r3
 800aa2a:	46a2      	mov	sl, r4
 800aa2c:	eb19 0905 	adds.w	r9, r9, r5
 800aa30:	eb4a 0a06 	adc.w	sl, sl, r6
 800aa34:	f04f 0100 	mov.w	r1, #0
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa48:	4689      	mov	r9, r1
 800aa4a:	4692      	mov	sl, r2
 800aa4c:	eb19 0005 	adds.w	r0, r9, r5
 800aa50:	eb4a 0106 	adc.w	r1, sl, r6
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	461d      	mov	r5, r3
 800aa5a:	f04f 0600 	mov.w	r6, #0
 800aa5e:	196b      	adds	r3, r5, r5
 800aa60:	eb46 0406 	adc.w	r4, r6, r6
 800aa64:	461a      	mov	r2, r3
 800aa66:	4623      	mov	r3, r4
 800aa68:	f7f5 fc1a 	bl	80002a0 <__aeabi_uldivmod>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	461a      	mov	r2, r3
 800aa72:	4b0c      	ldr	r3, [pc, #48]	; (800aaa4 <UART_SetConfig+0x384>)
 800aa74:	fba3 1302 	umull	r1, r3, r3, r2
 800aa78:	095b      	lsrs	r3, r3, #5
 800aa7a:	2164      	movs	r1, #100	; 0x64
 800aa7c:	fb01 f303 	mul.w	r3, r1, r3
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	00db      	lsls	r3, r3, #3
 800aa84:	3332      	adds	r3, #50	; 0x32
 800aa86:	4a07      	ldr	r2, [pc, #28]	; (800aaa4 <UART_SetConfig+0x384>)
 800aa88:	fba2 2303 	umull	r2, r3, r2, r3
 800aa8c:	095b      	lsrs	r3, r3, #5
 800aa8e:	f003 0207 	and.w	r2, r3, #7
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4442      	add	r2, r8
 800aa98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aa9a:	e1b2      	b.n	800ae02 <UART_SetConfig+0x6e2>
 800aa9c:	40011000 	.word	0x40011000
 800aaa0:	40011400 	.word	0x40011400
 800aaa4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4ad7      	ldr	r2, [pc, #860]	; (800ae0c <UART_SetConfig+0x6ec>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d005      	beq.n	800aabe <UART_SetConfig+0x39e>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4ad6      	ldr	r2, [pc, #856]	; (800ae10 <UART_SetConfig+0x6f0>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	f040 80d1 	bne.w	800ac60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aabe:	f7fc fe13 	bl	80076e8 <HAL_RCC_GetPCLK2Freq>
 800aac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	469a      	mov	sl, r3
 800aac8:	f04f 0b00 	mov.w	fp, #0
 800aacc:	46d0      	mov	r8, sl
 800aace:	46d9      	mov	r9, fp
 800aad0:	eb18 0308 	adds.w	r3, r8, r8
 800aad4:	eb49 0409 	adc.w	r4, r9, r9
 800aad8:	4698      	mov	r8, r3
 800aada:	46a1      	mov	r9, r4
 800aadc:	eb18 080a 	adds.w	r8, r8, sl
 800aae0:	eb49 090b 	adc.w	r9, r9, fp
 800aae4:	f04f 0100 	mov.w	r1, #0
 800aae8:	f04f 0200 	mov.w	r2, #0
 800aaec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aaf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aaf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aaf8:	4688      	mov	r8, r1
 800aafa:	4691      	mov	r9, r2
 800aafc:	eb1a 0508 	adds.w	r5, sl, r8
 800ab00:	eb4b 0609 	adc.w	r6, fp, r9
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	4619      	mov	r1, r3
 800ab0a:	f04f 0200 	mov.w	r2, #0
 800ab0e:	f04f 0300 	mov.w	r3, #0
 800ab12:	f04f 0400 	mov.w	r4, #0
 800ab16:	0094      	lsls	r4, r2, #2
 800ab18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab1c:	008b      	lsls	r3, r1, #2
 800ab1e:	461a      	mov	r2, r3
 800ab20:	4623      	mov	r3, r4
 800ab22:	4628      	mov	r0, r5
 800ab24:	4631      	mov	r1, r6
 800ab26:	f7f5 fbbb 	bl	80002a0 <__aeabi_uldivmod>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	461a      	mov	r2, r3
 800ab30:	4bb8      	ldr	r3, [pc, #736]	; (800ae14 <UART_SetConfig+0x6f4>)
 800ab32:	fba3 2302 	umull	r2, r3, r3, r2
 800ab36:	095b      	lsrs	r3, r3, #5
 800ab38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	469b      	mov	fp, r3
 800ab40:	f04f 0c00 	mov.w	ip, #0
 800ab44:	46d9      	mov	r9, fp
 800ab46:	46e2      	mov	sl, ip
 800ab48:	eb19 0309 	adds.w	r3, r9, r9
 800ab4c:	eb4a 040a 	adc.w	r4, sl, sl
 800ab50:	4699      	mov	r9, r3
 800ab52:	46a2      	mov	sl, r4
 800ab54:	eb19 090b 	adds.w	r9, r9, fp
 800ab58:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab5c:	f04f 0100 	mov.w	r1, #0
 800ab60:	f04f 0200 	mov.w	r2, #0
 800ab64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab70:	4689      	mov	r9, r1
 800ab72:	4692      	mov	sl, r2
 800ab74:	eb1b 0509 	adds.w	r5, fp, r9
 800ab78:	eb4c 060a 	adc.w	r6, ip, sl
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	4619      	mov	r1, r3
 800ab82:	f04f 0200 	mov.w	r2, #0
 800ab86:	f04f 0300 	mov.w	r3, #0
 800ab8a:	f04f 0400 	mov.w	r4, #0
 800ab8e:	0094      	lsls	r4, r2, #2
 800ab90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab94:	008b      	lsls	r3, r1, #2
 800ab96:	461a      	mov	r2, r3
 800ab98:	4623      	mov	r3, r4
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	f7f5 fb7f 	bl	80002a0 <__aeabi_uldivmod>
 800aba2:	4603      	mov	r3, r0
 800aba4:	460c      	mov	r4, r1
 800aba6:	461a      	mov	r2, r3
 800aba8:	4b9a      	ldr	r3, [pc, #616]	; (800ae14 <UART_SetConfig+0x6f4>)
 800abaa:	fba3 1302 	umull	r1, r3, r3, r2
 800abae:	095b      	lsrs	r3, r3, #5
 800abb0:	2164      	movs	r1, #100	; 0x64
 800abb2:	fb01 f303 	mul.w	r3, r1, r3
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	011b      	lsls	r3, r3, #4
 800abba:	3332      	adds	r3, #50	; 0x32
 800abbc:	4a95      	ldr	r2, [pc, #596]	; (800ae14 <UART_SetConfig+0x6f4>)
 800abbe:	fba2 2303 	umull	r2, r3, r2, r3
 800abc2:	095b      	lsrs	r3, r3, #5
 800abc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abc8:	4498      	add	r8, r3
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	469b      	mov	fp, r3
 800abce:	f04f 0c00 	mov.w	ip, #0
 800abd2:	46d9      	mov	r9, fp
 800abd4:	46e2      	mov	sl, ip
 800abd6:	eb19 0309 	adds.w	r3, r9, r9
 800abda:	eb4a 040a 	adc.w	r4, sl, sl
 800abde:	4699      	mov	r9, r3
 800abe0:	46a2      	mov	sl, r4
 800abe2:	eb19 090b 	adds.w	r9, r9, fp
 800abe6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800abea:	f04f 0100 	mov.w	r1, #0
 800abee:	f04f 0200 	mov.w	r2, #0
 800abf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800abfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800abfe:	4689      	mov	r9, r1
 800ac00:	4692      	mov	sl, r2
 800ac02:	eb1b 0509 	adds.w	r5, fp, r9
 800ac06:	eb4c 060a 	adc.w	r6, ip, sl
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	f04f 0200 	mov.w	r2, #0
 800ac14:	f04f 0300 	mov.w	r3, #0
 800ac18:	f04f 0400 	mov.w	r4, #0
 800ac1c:	0094      	lsls	r4, r2, #2
 800ac1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac22:	008b      	lsls	r3, r1, #2
 800ac24:	461a      	mov	r2, r3
 800ac26:	4623      	mov	r3, r4
 800ac28:	4628      	mov	r0, r5
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	f7f5 fb38 	bl	80002a0 <__aeabi_uldivmod>
 800ac30:	4603      	mov	r3, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	461a      	mov	r2, r3
 800ac36:	4b77      	ldr	r3, [pc, #476]	; (800ae14 <UART_SetConfig+0x6f4>)
 800ac38:	fba3 1302 	umull	r1, r3, r3, r2
 800ac3c:	095b      	lsrs	r3, r3, #5
 800ac3e:	2164      	movs	r1, #100	; 0x64
 800ac40:	fb01 f303 	mul.w	r3, r1, r3
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	3332      	adds	r3, #50	; 0x32
 800ac4a:	4a72      	ldr	r2, [pc, #456]	; (800ae14 <UART_SetConfig+0x6f4>)
 800ac4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac50:	095b      	lsrs	r3, r3, #5
 800ac52:	f003 020f 	and.w	r2, r3, #15
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4442      	add	r2, r8
 800ac5c:	609a      	str	r2, [r3, #8]
 800ac5e:	e0d0      	b.n	800ae02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac60:	f7fc fd2e 	bl	80076c0 <HAL_RCC_GetPCLK1Freq>
 800ac64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	469a      	mov	sl, r3
 800ac6a:	f04f 0b00 	mov.w	fp, #0
 800ac6e:	46d0      	mov	r8, sl
 800ac70:	46d9      	mov	r9, fp
 800ac72:	eb18 0308 	adds.w	r3, r8, r8
 800ac76:	eb49 0409 	adc.w	r4, r9, r9
 800ac7a:	4698      	mov	r8, r3
 800ac7c:	46a1      	mov	r9, r4
 800ac7e:	eb18 080a 	adds.w	r8, r8, sl
 800ac82:	eb49 090b 	adc.w	r9, r9, fp
 800ac86:	f04f 0100 	mov.w	r1, #0
 800ac8a:	f04f 0200 	mov.w	r2, #0
 800ac8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac9a:	4688      	mov	r8, r1
 800ac9c:	4691      	mov	r9, r2
 800ac9e:	eb1a 0508 	adds.w	r5, sl, r8
 800aca2:	eb4b 0609 	adc.w	r6, fp, r9
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	4619      	mov	r1, r3
 800acac:	f04f 0200 	mov.w	r2, #0
 800acb0:	f04f 0300 	mov.w	r3, #0
 800acb4:	f04f 0400 	mov.w	r4, #0
 800acb8:	0094      	lsls	r4, r2, #2
 800acba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800acbe:	008b      	lsls	r3, r1, #2
 800acc0:	461a      	mov	r2, r3
 800acc2:	4623      	mov	r3, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	4631      	mov	r1, r6
 800acc8:	f7f5 faea 	bl	80002a0 <__aeabi_uldivmod>
 800accc:	4603      	mov	r3, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	461a      	mov	r2, r3
 800acd2:	4b50      	ldr	r3, [pc, #320]	; (800ae14 <UART_SetConfig+0x6f4>)
 800acd4:	fba3 2302 	umull	r2, r3, r3, r2
 800acd8:	095b      	lsrs	r3, r3, #5
 800acda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	469b      	mov	fp, r3
 800ace2:	f04f 0c00 	mov.w	ip, #0
 800ace6:	46d9      	mov	r9, fp
 800ace8:	46e2      	mov	sl, ip
 800acea:	eb19 0309 	adds.w	r3, r9, r9
 800acee:	eb4a 040a 	adc.w	r4, sl, sl
 800acf2:	4699      	mov	r9, r3
 800acf4:	46a2      	mov	sl, r4
 800acf6:	eb19 090b 	adds.w	r9, r9, fp
 800acfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800acfe:	f04f 0100 	mov.w	r1, #0
 800ad02:	f04f 0200 	mov.w	r2, #0
 800ad06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad12:	4689      	mov	r9, r1
 800ad14:	4692      	mov	sl, r2
 800ad16:	eb1b 0509 	adds.w	r5, fp, r9
 800ad1a:	eb4c 060a 	adc.w	r6, ip, sl
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	4619      	mov	r1, r3
 800ad24:	f04f 0200 	mov.w	r2, #0
 800ad28:	f04f 0300 	mov.w	r3, #0
 800ad2c:	f04f 0400 	mov.w	r4, #0
 800ad30:	0094      	lsls	r4, r2, #2
 800ad32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad36:	008b      	lsls	r3, r1, #2
 800ad38:	461a      	mov	r2, r3
 800ad3a:	4623      	mov	r3, r4
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	4631      	mov	r1, r6
 800ad40:	f7f5 faae 	bl	80002a0 <__aeabi_uldivmod>
 800ad44:	4603      	mov	r3, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	461a      	mov	r2, r3
 800ad4a:	4b32      	ldr	r3, [pc, #200]	; (800ae14 <UART_SetConfig+0x6f4>)
 800ad4c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad50:	095b      	lsrs	r3, r3, #5
 800ad52:	2164      	movs	r1, #100	; 0x64
 800ad54:	fb01 f303 	mul.w	r3, r1, r3
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	011b      	lsls	r3, r3, #4
 800ad5c:	3332      	adds	r3, #50	; 0x32
 800ad5e:	4a2d      	ldr	r2, [pc, #180]	; (800ae14 <UART_SetConfig+0x6f4>)
 800ad60:	fba2 2303 	umull	r2, r3, r2, r3
 800ad64:	095b      	lsrs	r3, r3, #5
 800ad66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad6a:	4498      	add	r8, r3
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	469b      	mov	fp, r3
 800ad70:	f04f 0c00 	mov.w	ip, #0
 800ad74:	46d9      	mov	r9, fp
 800ad76:	46e2      	mov	sl, ip
 800ad78:	eb19 0309 	adds.w	r3, r9, r9
 800ad7c:	eb4a 040a 	adc.w	r4, sl, sl
 800ad80:	4699      	mov	r9, r3
 800ad82:	46a2      	mov	sl, r4
 800ad84:	eb19 090b 	adds.w	r9, r9, fp
 800ad88:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ad8c:	f04f 0100 	mov.w	r1, #0
 800ad90:	f04f 0200 	mov.w	r2, #0
 800ad94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ada0:	4689      	mov	r9, r1
 800ada2:	4692      	mov	sl, r2
 800ada4:	eb1b 0509 	adds.w	r5, fp, r9
 800ada8:	eb4c 060a 	adc.w	r6, ip, sl
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	4619      	mov	r1, r3
 800adb2:	f04f 0200 	mov.w	r2, #0
 800adb6:	f04f 0300 	mov.w	r3, #0
 800adba:	f04f 0400 	mov.w	r4, #0
 800adbe:	0094      	lsls	r4, r2, #2
 800adc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800adc4:	008b      	lsls	r3, r1, #2
 800adc6:	461a      	mov	r2, r3
 800adc8:	4623      	mov	r3, r4
 800adca:	4628      	mov	r0, r5
 800adcc:	4631      	mov	r1, r6
 800adce:	f7f5 fa67 	bl	80002a0 <__aeabi_uldivmod>
 800add2:	4603      	mov	r3, r0
 800add4:	460c      	mov	r4, r1
 800add6:	461a      	mov	r2, r3
 800add8:	4b0e      	ldr	r3, [pc, #56]	; (800ae14 <UART_SetConfig+0x6f4>)
 800adda:	fba3 1302 	umull	r1, r3, r3, r2
 800adde:	095b      	lsrs	r3, r3, #5
 800ade0:	2164      	movs	r1, #100	; 0x64
 800ade2:	fb01 f303 	mul.w	r3, r1, r3
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	011b      	lsls	r3, r3, #4
 800adea:	3332      	adds	r3, #50	; 0x32
 800adec:	4a09      	ldr	r2, [pc, #36]	; (800ae14 <UART_SetConfig+0x6f4>)
 800adee:	fba2 2303 	umull	r2, r3, r2, r3
 800adf2:	095b      	lsrs	r3, r3, #5
 800adf4:	f003 020f 	and.w	r2, r3, #15
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4442      	add	r2, r8
 800adfe:	609a      	str	r2, [r3, #8]
}
 800ae00:	e7ff      	b.n	800ae02 <UART_SetConfig+0x6e2>
 800ae02:	bf00      	nop
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0c:	40011000 	.word	0x40011000
 800ae10:	40011400 	.word	0x40011400
 800ae14:	51eb851f 	.word	0x51eb851f

0800ae18 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d029      	beq.n	800ae86 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae42:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae4c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800ae52:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800ae58:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800ae5e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800ae64:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800ae6a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800ae70:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800ae76:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	e034      	b.n	800aef0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae92:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae9c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800aea2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800aeb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aeba:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aec4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800aeca:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800aed0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800aed6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800aedc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aefe:	b480      	push	{r7}
 800af00:	b087      	sub	sp, #28
 800af02:	af00      	add	r7, sp, #0
 800af04:	60f8      	str	r0, [r7, #12]
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800af0e:	2300      	movs	r3, #0
 800af10:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d02e      	beq.n	800af76 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af24:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	3b01      	subs	r3, #1
 800af32:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af34:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800af3e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	3b01      	subs	r3, #1
 800af46:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800af48:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	3b01      	subs	r3, #1
 800af50:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af52:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	695b      	ldr	r3, [r3, #20]
 800af58:	3b01      	subs	r3, #1
 800af5a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800af5c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	3b01      	subs	r3, #1
 800af64:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800af66:	4313      	orrs	r3, r2
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	609a      	str	r2, [r3, #8]
 800af74:	e03b      	b.n	800afee <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af86:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	3b01      	subs	r3, #1
 800af96:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af98:	4313      	orrs	r3, r2
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800afac:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	3b01      	subs	r3, #1
 800afba:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800afbc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800afc6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	3b01      	subs	r3, #1
 800afce:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800afd0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800afda:	4313      	orrs	r3, r2
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	4313      	orrs	r3, r2
 800afe0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	371c      	adds	r7, #28
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800b008:	2300      	movs	r3, #0
 800b00a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b018:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	3b01      	subs	r3, #1
 800b020:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b022:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b02a:	4313      	orrs	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800b034:	f7f7 f854 	bl	80020e0 <HAL_GetTick>
 800b038:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b03a:	e010      	b.n	800b05e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b042:	d00c      	beq.n	800b05e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d007      	beq.n	800b05a <FMC_SDRAM_SendCommand+0x5e>
 800b04a:	f7f7 f849 	bl	80020e0 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	429a      	cmp	r2, r3
 800b058:	d201      	bcs.n	800b05e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e006      	b.n	800b06c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	f003 0320 	and.w	r3, r3, #32
 800b066:	2b20      	cmp	r3, #32
 800b068:	d0e8      	beq.n	800b03c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	695a      	ldr	r2, [r3, #20]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	431a      	orrs	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b09a:	b084      	sub	sp, #16
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	f107 001c 	add.w	r0, r7, #28
 800b0a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b0b0:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b0b4:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b0b8:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b0bc:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b0c0:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b0c4:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b0d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	b004      	add	sp, #16
 800b0ee:	4770      	bx	lr

0800b0f0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2203      	movs	r2, #3
 800b116:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b118:	2002      	movs	r0, #2
 800b11a:	f7f6 ffed 	bl	80020f8 <HAL_Delay>
  
  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0303 	and.w	r3, r3, #3
}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b162:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b168:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b16e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b17e:	f023 030f 	bic.w	r3, r3, #15
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	431a      	orrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	b2db      	uxtb	r3, r3
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b085      	sub	sp, #20
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3314      	adds	r3, #20
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
}  
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1fe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b204:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b20a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	431a      	orrs	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b222:	2300      	movs	r3, #0

}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b23e:	2310      	movs	r3, #16
 800b240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b242:	2340      	movs	r3, #64	; 0x40
 800b244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b250:	f107 0308 	add.w	r3, r7, #8
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff ff74 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b260:	2110      	movs	r1, #16
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa40 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b26a:	69fb      	ldr	r3, [r7, #28]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3720      	adds	r7, #32
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b282:	2311      	movs	r3, #17
 800b284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b286:	2340      	movs	r3, #64	; 0x40
 800b288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b294:	f107 0308 	add.w	r3, r7, #8
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7ff ff52 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a4:	2111      	movs	r1, #17
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 fa1e 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b2c6:	2312      	movs	r3, #18
 800b2c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2ca:	2340      	movs	r3, #64	; 0x40
 800b2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2d8:	f107 0308 	add.w	r3, r7, #8
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7ff ff30 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e8:	2112      	movs	r1, #18
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f9fc 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b2f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2f2:	69fb      	ldr	r3, [r7, #28]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3720      	adds	r7, #32
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b30a:	2318      	movs	r3, #24
 800b30c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b30e:	2340      	movs	r3, #64	; 0x40
 800b310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b312:	2300      	movs	r3, #0
 800b314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b31a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b31c:	f107 0308 	add.w	r3, r7, #8
 800b320:	4619      	mov	r1, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff ff0e 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b328:	f241 3288 	movw	r2, #5000	; 0x1388
 800b32c:	2118      	movs	r1, #24
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f9da 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b336:	69fb      	ldr	r3, [r7, #28]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3720      	adds	r7, #32
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b34e:	2319      	movs	r3, #25
 800b350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b352:	2340      	movs	r3, #64	; 0x40
 800b354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b356:	2300      	movs	r3, #0
 800b358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b35e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b360:	f107 0308 	add.w	r3, r7, #8
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff feec 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b370:	2119      	movs	r1, #25
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f9b8 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b37a:	69fb      	ldr	r3, [r7, #28]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3720      	adds	r7, #32
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b390:	230c      	movs	r3, #12
 800b392:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b394:	2340      	movs	r3, #64	; 0x40
 800b396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b398:	2300      	movs	r3, #0
 800b39a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b39c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3a2:	f107 0308 	add.w	r3, r7, #8
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7ff fecb 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b3ae:	4a05      	ldr	r2, [pc, #20]	; (800b3c4 <SDMMC_CmdStopTransfer+0x40>)
 800b3b0:	210c      	movs	r1, #12
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f998 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b3b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ba:	69fb      	ldr	r3, [r7, #28]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3720      	adds	r7, #32
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	05f5e100 	.word	0x05f5e100

0800b3c8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08a      	sub	sp, #40	; 0x28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b3d8:	2307      	movs	r3, #7
 800b3da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3dc:	2340      	movs	r3, #64	; 0x40
 800b3de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3e8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3ea:	f107 0310 	add.w	r3, r7, #16
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f7ff fea7 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b3f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3fa:	2107      	movs	r1, #7
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f000 f973 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b402:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b406:	4618      	mov	r0, r3
 800b408:	3728      	adds	r7, #40	; 0x28
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b088      	sub	sp, #32
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b41e:	2300      	movs	r3, #0
 800b420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b422:	2300      	movs	r3, #0
 800b424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b42a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b42c:	f107 0308 	add.w	r3, r7, #8
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7ff fe86 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f92d 	bl	800b698 <SDMMC_GetCmdError>
 800b43e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b440:	69fb      	ldr	r3, [r7, #28]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3720      	adds	r7, #32
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b088      	sub	sp, #32
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b452:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b456:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b458:	2308      	movs	r3, #8
 800b45a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b45c:	2340      	movs	r3, #64	; 0x40
 800b45e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b460:	2300      	movs	r3, #0
 800b462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b468:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b46a:	f107 0308 	add.w	r3, r7, #8
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fe67 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fb16 	bl	800baa8 <SDMMC_GetCmdResp7>
 800b47c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b47e:	69fb      	ldr	r3, [r7, #28]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3720      	adds	r7, #32
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b496:	2337      	movs	r3, #55	; 0x37
 800b498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b49a:	2340      	movs	r3, #64	; 0x40
 800b49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4a8:	f107 0308 	add.w	r3, r7, #8
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7ff fe48 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b8:	2137      	movs	r1, #55	; 0x37
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f914 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b4c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c2:	69fb      	ldr	r3, [r7, #28]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3720      	adds	r7, #32
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b4e2:	2329      	movs	r3, #41	; 0x29
 800b4e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4e6:	2340      	movs	r3, #64	; 0x40
 800b4e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4f4:	f107 0308 	add.w	r3, r7, #8
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7ff fe22 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 fa23 	bl	800b94c <SDMMC_GetCmdResp3>
 800b506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b508:	69fb      	ldr	r3, [r7, #28]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3720      	adds	r7, #32
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b088      	sub	sp, #32
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b520:	2306      	movs	r3, #6
 800b522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b524:	2340      	movs	r3, #64	; 0x40
 800b526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b528:	2300      	movs	r3, #0
 800b52a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b52c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b530:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b532:	f107 0308 	add.w	r3, r7, #8
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fe03 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b53e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b542:	2106      	movs	r1, #6
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f8cf 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b54a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b54c:	69fb      	ldr	r3, [r7, #28]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b088      	sub	sp, #32
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b55e:	2300      	movs	r3, #0
 800b560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b562:	2333      	movs	r3, #51	; 0x33
 800b564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b566:	2340      	movs	r3, #64	; 0x40
 800b568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b56a:	2300      	movs	r3, #0
 800b56c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b572:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b574:	f107 0308 	add.w	r3, r7, #8
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7ff fde2 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b580:	f241 3288 	movw	r2, #5000	; 0x1388
 800b584:	2133      	movs	r1, #51	; 0x33
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f8ae 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b58c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b58e:	69fb      	ldr	r3, [r7, #28]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3720      	adds	r7, #32
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b5a8:	23c0      	movs	r3, #192	; 0xc0
 800b5aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5b6:	f107 0308 	add.w	r3, r7, #8
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7ff fdc1 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f97c 	bl	800b8c0 <SDMMC_GetCmdResp2>
 800b5c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ca:	69fb      	ldr	r3, [r7, #28]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3720      	adds	r7, #32
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b088      	sub	sp, #32
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b5e2:	2309      	movs	r3, #9
 800b5e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b5e6:	23c0      	movs	r3, #192	; 0xc0
 800b5e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5f4:	f107 0308 	add.w	r3, r7, #8
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff fda2 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f95d 	bl	800b8c0 <SDMMC_GetCmdResp2>
 800b606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b608:	69fb      	ldr	r3, [r7, #28]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3720      	adds	r7, #32
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b088      	sub	sp, #32
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b620:	2303      	movs	r3, #3
 800b622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b624:	2340      	movs	r3, #64	; 0x40
 800b626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b628:	2300      	movs	r3, #0
 800b62a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b630:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b632:	f107 0308 	add.w	r3, r7, #8
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7ff fd83 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	2103      	movs	r1, #3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f9bc 	bl	800b9c0 <SDMMC_GetCmdResp6>
 800b648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b64a:	69fb      	ldr	r3, [r7, #28]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3720      	adds	r7, #32
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b088      	sub	sp, #32
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b662:	230d      	movs	r3, #13
 800b664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b666:	2340      	movs	r3, #64	; 0x40
 800b668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b66a:	2300      	movs	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b672:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b674:	f107 0308 	add.w	r3, r7, #8
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fd62 	bl	800b144 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b680:	f241 3288 	movw	r2, #5000	; 0x1388
 800b684:	210d      	movs	r1, #13
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f82e 	bl	800b6e8 <SDMMC_GetCmdResp1>
 800b68c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b68e:	69fb      	ldr	r3, [r7, #28]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3720      	adds	r7, #32
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b698:	b490      	push	{r4, r7}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6a0:	4b0f      	ldr	r3, [pc, #60]	; (800b6e0 <SDMMC_GetCmdError+0x48>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a0f      	ldr	r2, [pc, #60]	; (800b6e4 <SDMMC_GetCmdError+0x4c>)
 800b6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6aa:	0a5b      	lsrs	r3, r3, #9
 800b6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	1e5c      	subs	r4, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d102      	bne.n	800b6c2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6c0:	e009      	b.n	800b6d6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0f2      	beq.n	800b6b4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	22c5      	movs	r2, #197	; 0xc5
 800b6d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bc90      	pop	{r4, r7}
 800b6de:	4770      	bx	lr
 800b6e0:	20000000 	.word	0x20000000
 800b6e4:	10624dd3 	.word	0x10624dd3

0800b6e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b6e8:	b590      	push	{r4, r7, lr}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	607a      	str	r2, [r7, #4]
 800b6f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b6f6:	4b6f      	ldr	r3, [pc, #444]	; (800b8b4 <SDMMC_GetCmdResp1+0x1cc>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a6f      	ldr	r2, [pc, #444]	; (800b8b8 <SDMMC_GetCmdResp1+0x1d0>)
 800b6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b700:	0a5b      	lsrs	r3, r3, #9
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b708:	4623      	mov	r3, r4
 800b70a:	1e5c      	subs	r4, r3, #1
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d102      	bne.n	800b716 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b714:	e0c9      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b71a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b722:	2b00      	cmp	r3, #0
 800b724:	d0f0      	beq.n	800b708 <SDMMC_GetCmdResp1+0x20>
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1eb      	bne.n	800b708 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b734:	f003 0304 	and.w	r3, r3, #4
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d004      	beq.n	800b746 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2204      	movs	r2, #4
 800b740:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b742:	2304      	movs	r3, #4
 800b744:	e0b1      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74a:	f003 0301 	and.w	r3, r3, #1
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d004      	beq.n	800b75c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2201      	movs	r2, #1
 800b756:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b758:	2301      	movs	r3, #1
 800b75a:	e0a6      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	22c5      	movs	r2, #197	; 0xc5
 800b760:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7ff fd18 	bl	800b198 <SDIO_GetCommandResponse>
 800b768:	4603      	mov	r3, r0
 800b76a:	461a      	mov	r2, r3
 800b76c:	7afb      	ldrb	r3, [r7, #11]
 800b76e:	4293      	cmp	r3, r2
 800b770:	d001      	beq.n	800b776 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b772:	2301      	movs	r3, #1
 800b774:	e099      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b776:	2100      	movs	r1, #0
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f7ff fd1a 	bl	800b1b2 <SDIO_GetResponse>
 800b77e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	4b4e      	ldr	r3, [pc, #312]	; (800b8bc <SDMMC_GetCmdResp1+0x1d4>)
 800b784:	4013      	ands	r3, r2
 800b786:	2b00      	cmp	r3, #0
 800b788:	d101      	bne.n	800b78e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b78a:	2300      	movs	r3, #0
 800b78c:	e08d      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	da02      	bge.n	800b79a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b798:	e087      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b7a4:	2340      	movs	r3, #64	; 0x40
 800b7a6:	e080      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b7b2:	2380      	movs	r3, #128	; 0x80
 800b7b4:	e079      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b7c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7c4:	e071      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b7d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7d4:	e069      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b7e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7e4:	e061      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b7f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7f4:	e059      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b804:	e051      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b814:	e049      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b820:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b824:	e041      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b834:	e039      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b844:	e031      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b850:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b854:	e029      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b860:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b864:	e021      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b870:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b874:	e019      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b884:	e011      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b890:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b894:	e009      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	f003 0308 	and.w	r3, r3, #8
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b8a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b8a4:	e001      	b.n	800b8aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b8a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd90      	pop	{r4, r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000000 	.word	0x20000000
 800b8b8:	10624dd3 	.word	0x10624dd3
 800b8bc:	fdffe008 	.word	0xfdffe008

0800b8c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b8c0:	b490      	push	{r4, r7}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8c8:	4b1e      	ldr	r3, [pc, #120]	; (800b944 <SDMMC_GetCmdResp2+0x84>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a1e      	ldr	r2, [pc, #120]	; (800b948 <SDMMC_GetCmdResp2+0x88>)
 800b8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d2:	0a5b      	lsrs	r3, r3, #9
 800b8d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b8dc:	4623      	mov	r3, r4
 800b8de:	1e5c      	subs	r4, r3, #1
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8e8:	e026      	b.n	800b938 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0f0      	beq.n	800b8dc <SDMMC_GetCmdResp2+0x1c>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1eb      	bne.n	800b8dc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d004      	beq.n	800b91a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2204      	movs	r2, #4
 800b914:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b916:	2304      	movs	r3, #4
 800b918:	e00e      	b.n	800b938 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	2b00      	cmp	r3, #0
 800b924:	d004      	beq.n	800b930 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e003      	b.n	800b938 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	22c5      	movs	r2, #197	; 0xc5
 800b934:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bc90      	pop	{r4, r7}
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20000000 	.word	0x20000000
 800b948:	10624dd3 	.word	0x10624dd3

0800b94c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b94c:	b490      	push	{r4, r7}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b954:	4b18      	ldr	r3, [pc, #96]	; (800b9b8 <SDMMC_GetCmdResp3+0x6c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a18      	ldr	r2, [pc, #96]	; (800b9bc <SDMMC_GetCmdResp3+0x70>)
 800b95a:	fba2 2303 	umull	r2, r3, r2, r3
 800b95e:	0a5b      	lsrs	r3, r3, #9
 800b960:	f241 3288 	movw	r2, #5000	; 0x1388
 800b964:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b968:	4623      	mov	r3, r4
 800b96a:	1e5c      	subs	r4, r3, #1
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d102      	bne.n	800b976 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b970:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b974:	e01b      	b.n	800b9ae <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b982:	2b00      	cmp	r3, #0
 800b984:	d0f0      	beq.n	800b968 <SDMMC_GetCmdResp3+0x1c>
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1eb      	bne.n	800b968 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d004      	beq.n	800b9a6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2204      	movs	r2, #4
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9a2:	2304      	movs	r3, #4
 800b9a4:	e003      	b.n	800b9ae <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	22c5      	movs	r2, #197	; 0xc5
 800b9aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bc90      	pop	{r4, r7}
 800b9b6:	4770      	bx	lr
 800b9b8:	20000000 	.word	0x20000000
 800b9bc:	10624dd3 	.word	0x10624dd3

0800b9c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b9c0:	b590      	push	{r4, r7, lr}
 800b9c2:	b087      	sub	sp, #28
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9ce:	4b34      	ldr	r3, [pc, #208]	; (800baa0 <SDMMC_GetCmdResp6+0xe0>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a34      	ldr	r2, [pc, #208]	; (800baa4 <SDMMC_GetCmdResp6+0xe4>)
 800b9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d8:	0a5b      	lsrs	r3, r3, #9
 800b9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9de:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b9e2:	4623      	mov	r3, r4
 800b9e4:	1e5c      	subs	r4, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d102      	bne.n	800b9f0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9ee:	e052      	b.n	800ba96 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d0f0      	beq.n	800b9e2 <SDMMC_GetCmdResp6+0x22>
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1eb      	bne.n	800b9e2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0e:	f003 0304 	and.w	r3, r3, #4
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d004      	beq.n	800ba20 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2204      	movs	r2, #4
 800ba1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba1c:	2304      	movs	r3, #4
 800ba1e:	e03a      	b.n	800ba96 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d004      	beq.n	800ba36 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e02f      	b.n	800ba96 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f7ff fbae 	bl	800b198 <SDIO_GetCommandResponse>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	461a      	mov	r2, r3
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d001      	beq.n	800ba4a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e025      	b.n	800ba96 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	22c5      	movs	r2, #197	; 0xc5
 800ba4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ba50:	2100      	movs	r1, #0
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff fbad 	bl	800b1b2 <SDIO_GetResponse>
 800ba58:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d106      	bne.n	800ba72 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	0c1b      	lsrs	r3, r3, #16
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e011      	b.n	800ba96 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba80:	e009      	b.n	800ba96 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba90:	e001      	b.n	800ba96 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	371c      	adds	r7, #28
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd90      	pop	{r4, r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	20000000 	.word	0x20000000
 800baa4:	10624dd3 	.word	0x10624dd3

0800baa8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800baa8:	b490      	push	{r4, r7}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bab0:	4b21      	ldr	r3, [pc, #132]	; (800bb38 <SDMMC_GetCmdResp7+0x90>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a21      	ldr	r2, [pc, #132]	; (800bb3c <SDMMC_GetCmdResp7+0x94>)
 800bab6:	fba2 2303 	umull	r2, r3, r2, r3
 800baba:	0a5b      	lsrs	r3, r3, #9
 800babc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bac4:	4623      	mov	r3, r4
 800bac6:	1e5c      	subs	r4, r3, #1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bacc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bad0:	e02c      	b.n	800bb2c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0f0      	beq.n	800bac4 <SDMMC_GetCmdResp7+0x1c>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1eb      	bne.n	800bac4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf0:	f003 0304 	and.w	r3, r3, #4
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d004      	beq.n	800bb02 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2204      	movs	r2, #4
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bafe:	2304      	movs	r3, #4
 800bb00:	e014      	b.n	800bb2c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d004      	beq.n	800bb18 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2201      	movs	r2, #1
 800bb12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e009      	b.n	800bb2c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2240      	movs	r2, #64	; 0x40
 800bb28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bb2a:	2300      	movs	r3, #0
  
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bc90      	pop	{r4, r7}
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	20000000 	.word	0x20000000
 800bb3c:	10624dd3 	.word	0x10624dd3

0800bb40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb40:	b084      	sub	sp, #16
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	f107 001c 	add.w	r0, r7, #28
 800bb4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d122      	bne.n	800bb9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bb6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bb80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d105      	bne.n	800bb92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f94a 	bl	800be2c <USB_CoreReset>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]
 800bb9c:	e01a      	b.n	800bbd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f93e 	bl	800be2c <USB_CoreReset>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bbb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	639a      	str	r2, [r3, #56]	; 0x38
 800bbc6:	e005      	b.n	800bbd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d10b      	bne.n	800bbf2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f043 0206 	orr.w	r2, r3, #6
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	f043 0220 	orr.w	r2, r3, #32
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbfe:	b004      	add	sp, #16
 800bc00:	4770      	bx	lr

0800bc02 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc02:	b480      	push	{r7}
 800bc04:	b083      	sub	sp, #12
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	f043 0201 	orr.w	r2, r3, #1
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f023 0201 	bic.w	r2, r3, #1
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	370c      	adds	r7, #12
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr

0800bc46 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b082      	sub	sp, #8
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bc5e:	78fb      	ldrb	r3, [r7, #3]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d106      	bne.n	800bc72 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	60da      	str	r2, [r3, #12]
 800bc70:	e00b      	b.n	800bc8a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bc72:	78fb      	ldrb	r3, [r7, #3]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d106      	bne.n	800bc86 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60da      	str	r2, [r3, #12]
 800bc84:	e001      	b.n	800bc8a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e003      	b.n	800bc92 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bc8a:	2032      	movs	r0, #50	; 0x32
 800bc8c:	f7f6 fa34 	bl	80020f8 <HAL_Delay>

  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
	...

0800bc9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	019b      	lsls	r3, r3, #6
 800bcae:	f043 0220 	orr.w	r2, r3, #32
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	60fb      	str	r3, [r7, #12]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4a09      	ldr	r2, [pc, #36]	; (800bce4 <USB_FlushTxFifo+0x48>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d901      	bls.n	800bcc8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	e006      	b.n	800bcd6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	f003 0320 	and.w	r3, r3, #32
 800bcd0:	2b20      	cmp	r3, #32
 800bcd2:	d0f0      	beq.n	800bcb6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	00030d40 	.word	0x00030d40

0800bce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2210      	movs	r2, #16
 800bcf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4a09      	ldr	r2, [pc, #36]	; (800bd28 <USB_FlushRxFifo+0x40>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d901      	bls.n	800bd0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e006      	b.n	800bd1a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	f003 0310 	and.w	r3, r3, #16
 800bd14:	2b10      	cmp	r3, #16
 800bd16:	d0f0      	beq.n	800bcfa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	00030d40 	.word	0x00030d40

0800bd2c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b089      	sub	sp, #36	; 0x24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4611      	mov	r1, r2
 800bd38:	461a      	mov	r2, r3
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	71fb      	strb	r3, [r7, #7]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bd4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d11a      	bne.n	800bd88 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bd52:	88bb      	ldrh	r3, [r7, #4]
 800bd54:	3303      	adds	r3, #3
 800bd56:	089b      	lsrs	r3, r3, #2
 800bd58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	61bb      	str	r3, [r7, #24]
 800bd5e:	e00f      	b.n	800bd80 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bd60:	79fb      	ldrb	r3, [r7, #7]
 800bd62:	031a      	lsls	r2, r3, #12
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	4413      	add	r3, r2
 800bd68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	3304      	adds	r3, #4
 800bd78:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	61bb      	str	r3, [r7, #24]
 800bd80:	69ba      	ldr	r2, [r7, #24]
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d3eb      	bcc.n	800bd60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3724      	adds	r7, #36	; 0x24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b089      	sub	sp, #36	; 0x24
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	60f8      	str	r0, [r7, #12]
 800bd9e:	60b9      	str	r1, [r7, #8]
 800bda0:	4613      	mov	r3, r2
 800bda2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bdac:	88fb      	ldrh	r3, [r7, #6]
 800bdae:	3303      	adds	r3, #3
 800bdb0:	089b      	lsrs	r3, r3, #2
 800bdb2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	61bb      	str	r3, [r7, #24]
 800bdb8:	e00b      	b.n	800bdd2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	601a      	str	r2, [r3, #0]
    pDest++;
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	3304      	adds	r3, #4
 800bdca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	61bb      	str	r3, [r7, #24]
 800bdd2:	69ba      	ldr	r2, [r7, #24]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d3ef      	bcc.n	800bdba <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bdda:	69fb      	ldr	r3, [r7, #28]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3724      	adds	r7, #36	; 0x24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	699b      	ldr	r3, [r3, #24]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800be00:	68fb      	ldr	r3, [r7, #12]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800be0e:	b480      	push	{r7}
 800be10:	b083      	sub	sp, #12
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	695b      	ldr	r3, [r3, #20]
 800be1a:	f003 0301 	and.w	r3, r3, #1
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
	...

0800be2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800be34:	2300      	movs	r3, #0
 800be36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	3301      	adds	r3, #1
 800be3c:	60fb      	str	r3, [r7, #12]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	4a13      	ldr	r2, [pc, #76]	; (800be90 <USB_CoreReset+0x64>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d901      	bls.n	800be4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e01b      	b.n	800be82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	daf2      	bge.n	800be38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	f043 0201 	orr.w	r2, r3, #1
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	3301      	adds	r3, #1
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	4a09      	ldr	r2, [pc, #36]	; (800be90 <USB_CoreReset+0x64>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d901      	bls.n	800be74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	e006      	b.n	800be82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d0f0      	beq.n	800be62 <USB_CoreReset+0x36>

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	00030d40 	.word	0x00030d40

0800be94 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be94:	b084      	sub	sp, #16
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	f107 001c 	add.w	r0, r7, #28
 800bea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800beb0:	461a      	mov	r2, r3
 800beb2:	2300      	movs	r3, #0
 800beb4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beca:	2b00      	cmp	r3, #0
 800becc:	d018      	beq.n	800bf00 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	2b03      	cmp	r3, #3
 800bed2:	d10a      	bne.n	800beea <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bee2:	f043 0304 	orr.w	r3, r3, #4
 800bee6:	6013      	str	r3, [r2, #0]
 800bee8:	e014      	b.n	800bf14 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bef8:	f023 0304 	bic.w	r3, r3, #4
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	e009      	b.n	800bf14 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf0e:	f023 0304 	bic.w	r3, r3, #4
 800bf12:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800bf14:	2110      	movs	r1, #16
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff fec0 	bl	800bc9c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7ff fee3 	bl	800bce8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bf22:	2300      	movs	r3, #0
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	e015      	b.n	800bf54 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf34:	461a      	mov	r2, r3
 800bf36:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	015a      	lsls	r2, r3, #5
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	4413      	add	r3, r2
 800bf44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf48:	461a      	mov	r2, r3
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3301      	adds	r3, #1
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d3e5      	bcc.n	800bf28 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800bf5c:	2101      	movs	r1, #1
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f8ac 	bl	800c0bc <USB_DriveVbus>

  HAL_Delay(200U);
 800bf64:	20c8      	movs	r0, #200	; 0xc8
 800bf66:	f7f6 f8c7 	bl	80020f8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f04f 32ff 	mov.w	r2, #4294967295
 800bf76:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00b      	beq.n	800bf9c <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf8a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a14      	ldr	r2, [pc, #80]	; (800bfe0 <USB_HostInit+0x14c>)
 800bf90:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a13      	ldr	r2, [pc, #76]	; (800bfe4 <USB_HostInit+0x150>)
 800bf96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bf9a:	e009      	b.n	800bfb0 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2280      	movs	r2, #128	; 0x80
 800bfa0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4a10      	ldr	r2, [pc, #64]	; (800bfe8 <USB_HostInit+0x154>)
 800bfa6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4a10      	ldr	r2, [pc, #64]	; (800bfec <USB_HostInit+0x158>)
 800bfac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d105      	bne.n	800bfc2 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	f043 0210 	orr.w	r2, r3, #16
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	699a      	ldr	r2, [r3, #24]
 800bfc6:	4b0a      	ldr	r3, [pc, #40]	; (800bff0 <USB_HostInit+0x15c>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfda:	b004      	add	sp, #16
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	01000200 	.word	0x01000200
 800bfe4:	00e00300 	.word	0x00e00300
 800bfe8:	00600080 	.word	0x00600080
 800bfec:	004000e0 	.word	0x004000e0
 800bff0:	a3200008 	.word	0xa3200008

0800bff4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c012:	f023 0303 	bic.w	r3, r3, #3
 800c016:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	78fb      	ldrb	r3, [r7, #3]
 800c022:	f003 0303 	and.w	r3, r3, #3
 800c026:	68f9      	ldr	r1, [r7, #12]
 800c028:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c02c:	4313      	orrs	r3, r2
 800c02e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c030:	78fb      	ldrb	r3, [r7, #3]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d107      	bne.n	800c046 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c03c:	461a      	mov	r2, r3
 800c03e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c042:	6053      	str	r3, [r2, #4]
 800c044:	e009      	b.n	800c05a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c046:	78fb      	ldrb	r3, [r7, #3]
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d106      	bne.n	800c05a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c052:	461a      	mov	r2, r3
 800c054:	f241 7370 	movw	r3, #6000	; 0x1770
 800c058:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c074:	2300      	movs	r3, #0
 800c076:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c088:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c096:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c098:	2064      	movs	r0, #100	; 0x64
 800c09a:	f7f6 f82d 	bl	80020f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c0a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c0ac:	200a      	movs	r0, #10
 800c0ae:	f7f6 f823 	bl	80020f8 <HAL_Delay>

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c0e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d109      	bne.n	800c100 <USB_DriveVbus+0x44>
 800c0ec:	78fb      	ldrb	r3, [r7, #3]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d106      	bne.n	800c100 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c0fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c0fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c10a:	d109      	bne.n	800c120 <USB_DriveVbus+0x64>
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c11e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3714      	adds	r7, #20
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr

0800c12e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c12e:	b480      	push	{r7}
 800c130:	b085      	sub	sp, #20
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	0c5b      	lsrs	r3, r3, #17
 800c14c:	f003 0303 	and.w	r3, r3, #3
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	b29b      	uxth	r3, r3
}
 800c172:	4618      	mov	r0, r3
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
	...

0800c180 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800c180:	b480      	push	{r7}
 800c182:	b087      	sub	sp, #28
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	4608      	mov	r0, r1
 800c18a:	4611      	mov	r1, r2
 800c18c:	461a      	mov	r2, r3
 800c18e:	4603      	mov	r3, r0
 800c190:	70fb      	strb	r3, [r7, #3]
 800c192:	460b      	mov	r3, r1
 800c194:	70bb      	strb	r3, [r7, #2]
 800c196:	4613      	mov	r3, r2
 800c198:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c1a2:	78fb      	ldrb	r3, [r7, #3]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c1b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d87e      	bhi.n	800c2bc <USB_HC_Init+0x13c>
 800c1be:	a201      	add	r2, pc, #4	; (adr r2, 800c1c4 <USB_HC_Init+0x44>)
 800c1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c4:	0800c1d5 	.word	0x0800c1d5
 800c1c8:	0800c27f 	.word	0x0800c27f
 800c1cc:	0800c1d5 	.word	0x0800c1d5
 800c1d0:	0800c241 	.word	0x0800c241
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c1d4:	78fb      	ldrb	r3, [r7, #3]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	f240 439d 	movw	r3, #1181	; 0x49d
 800c1e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c1e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	da10      	bge.n	800c212 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	78fa      	ldrb	r2, [r7, #3]
 800c200:	0151      	lsls	r1, r2, #5
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	440a      	add	r2, r1
 800c206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c20a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c20e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800c210:	e057      	b.n	800c2c2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d051      	beq.n	800c2c2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c21e:	78fb      	ldrb	r3, [r7, #3]
 800c220:	015a      	lsls	r2, r3, #5
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	4413      	add	r3, r2
 800c226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	78fa      	ldrb	r2, [r7, #3]
 800c22e:	0151      	lsls	r1, r2, #5
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	440a      	add	r2, r1
 800c234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c238:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c23c:	60d3      	str	r3, [r2, #12]
      break;
 800c23e:	e040      	b.n	800c2c2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	015a      	lsls	r2, r3, #5
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	4413      	add	r3, r2
 800c248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c24c:	461a      	mov	r2, r3
 800c24e:	f240 639d 	movw	r3, #1693	; 0x69d
 800c252:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c254:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	da34      	bge.n	800c2c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c25c:	78fb      	ldrb	r3, [r7, #3]
 800c25e:	015a      	lsls	r2, r3, #5
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	4413      	add	r3, r2
 800c264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	78fa      	ldrb	r2, [r7, #3]
 800c26c:	0151      	lsls	r1, r2, #5
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	440a      	add	r2, r1
 800c272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c27a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c27c:	e023      	b.n	800c2c6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c27e:	78fb      	ldrb	r3, [r7, #3]
 800c280:	015a      	lsls	r2, r3, #5
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	4413      	add	r3, r2
 800c286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c28a:	461a      	mov	r2, r3
 800c28c:	f240 2325 	movw	r3, #549	; 0x225
 800c290:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c292:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c296:	2b00      	cmp	r3, #0
 800c298:	da17      	bge.n	800c2ca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c29a:	78fb      	ldrb	r3, [r7, #3]
 800c29c:	015a      	lsls	r2, r3, #5
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	78fa      	ldrb	r2, [r7, #3]
 800c2aa:	0151      	lsls	r1, r2, #5
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	440a      	add	r2, r1
 800c2b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2b4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c2b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c2ba:	e006      	b.n	800c2ca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	75fb      	strb	r3, [r7, #23]
      break;
 800c2c0:	e004      	b.n	800c2cc <USB_HC_Init+0x14c>
      break;
 800c2c2:	bf00      	nop
 800c2c4:	e002      	b.n	800c2cc <USB_HC_Init+0x14c>
      break;
 800c2c6:	bf00      	nop
 800c2c8:	e000      	b.n	800c2cc <USB_HC_Init+0x14c>
      break;
 800c2ca:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2d2:	699a      	ldr	r2, [r3, #24]
 800c2d4:	78fb      	ldrb	r3, [r7, #3]
 800c2d6:	f003 030f 	and.w	r3, r3, #15
 800c2da:	2101      	movs	r1, #1
 800c2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c2e0:	68b9      	ldr	r1, [r7, #8]
 800c2e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c2f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	da03      	bge.n	800c306 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c2fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c302:	613b      	str	r3, [r7, #16]
 800c304:	e001      	b.n	800c30a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c306:	2300      	movs	r3, #0
 800c308:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800c30a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d103      	bne.n	800c31a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	e001      	b.n	800c31e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c31e:	787b      	ldrb	r3, [r7, #1]
 800c320:	059b      	lsls	r3, r3, #22
 800c322:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c326:	78bb      	ldrb	r3, [r7, #2]
 800c328:	02db      	lsls	r3, r3, #11
 800c32a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c32e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c330:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c334:	049b      	lsls	r3, r3, #18
 800c336:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c33a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c33c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c33e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c342:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c348:	78fb      	ldrb	r3, [r7, #3]
 800c34a:	0159      	lsls	r1, r3, #5
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	440b      	add	r3, r1
 800c350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c354:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c35a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c35c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c360:	2b03      	cmp	r3, #3
 800c362:	d10f      	bne.n	800c384 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c364:	78fb      	ldrb	r3, [r7, #3]
 800c366:	015a      	lsls	r2, r3, #5
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	4413      	add	r3, r2
 800c36c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	78fa      	ldrb	r2, [r7, #3]
 800c374:	0151      	lsls	r1, r2, #5
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	440a      	add	r2, r1
 800c37a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c37e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c382:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c384:	7dfb      	ldrb	r3, [r7, #23]
}
 800c386:	4618      	mov	r0, r3
 800c388:	371c      	adds	r7, #28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop

0800c394 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b08c      	sub	sp, #48	; 0x30
 800c398:	af02      	add	r7, sp, #8
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	785b      	ldrb	r3, [r3, #1]
 800c3aa:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c3ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3b0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d028      	beq.n	800c410 <USB_HC_StartXfer+0x7c>
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	791b      	ldrb	r3, [r3, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d124      	bne.n	800c410 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800c3c6:	79fb      	ldrb	r3, [r7, #7]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10b      	bne.n	800c3e4 <USB_HC_StartXfer+0x50>
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	795b      	ldrb	r3, [r3, #5]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d107      	bne.n	800c3e4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	785b      	ldrb	r3, [r3, #1]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f000 fa2e 	bl	800c83c <USB_DoPing>
      return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e112      	b.n	800c60a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800c3e4:	79fb      	ldrb	r3, [r7, #7]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d112      	bne.n	800c410 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	015a      	lsls	r2, r3, #5
 800c3ee:	6a3b      	ldr	r3, [r7, #32]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	0151      	lsls	r1, r2, #5
 800c3fc:	6a3a      	ldr	r2, [r7, #32]
 800c3fe:	440a      	add	r2, r1
 800c400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c404:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800c408:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2200      	movs	r2, #0
 800c40e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d018      	beq.n	800c44a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	8912      	ldrh	r2, [r2, #8]
 800c420:	4413      	add	r3, r2
 800c422:	3b01      	subs	r3, #1
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	8912      	ldrh	r2, [r2, #8]
 800c428:	fbb3 f3f2 	udiv	r3, r3, r2
 800c42c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c42e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c430:	8b7b      	ldrh	r3, [r7, #26]
 800c432:	429a      	cmp	r2, r3
 800c434:	d90b      	bls.n	800c44e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800c436:	8b7b      	ldrh	r3, [r7, #26]
 800c438:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c43a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	8912      	ldrh	r2, [r2, #8]
 800c440:	fb02 f203 	mul.w	r2, r2, r3
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	611a      	str	r2, [r3, #16]
 800c448:	e001      	b.n	800c44e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800c44a:	2301      	movs	r3, #1
 800c44c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	78db      	ldrb	r3, [r3, #3]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d006      	beq.n	800c464 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c456:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	8912      	ldrh	r2, [r2, #8]
 800c45c:	fb02 f203 	mul.w	r2, r2, r3
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c46c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c46e:	04d9      	lsls	r1, r3, #19
 800c470:	4b68      	ldr	r3, [pc, #416]	; (800c614 <USB_HC_StartXfer+0x280>)
 800c472:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c474:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	7a9b      	ldrb	r3, [r3, #10]
 800c47a:	075b      	lsls	r3, r3, #29
 800c47c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c480:	69f9      	ldr	r1, [r7, #28]
 800c482:	0148      	lsls	r0, r1, #5
 800c484:	6a39      	ldr	r1, [r7, #32]
 800c486:	4401      	add	r1, r0
 800c488:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c48c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c48e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c490:	79fb      	ldrb	r3, [r7, #7]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d009      	beq.n	800c4aa <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	68d9      	ldr	r1, [r3, #12]
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	015a      	lsls	r2, r3, #5
 800c49e:	6a3b      	ldr	r3, [r7, #32]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4a6:	460a      	mov	r2, r1
 800c4a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c4aa:	6a3b      	ldr	r3, [r7, #32]
 800c4ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	bf0c      	ite	eq
 800c4ba:	2301      	moveq	r3, #1
 800c4bc:	2300      	movne	r3, #0
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	015a      	lsls	r2, r3, #5
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	0151      	lsls	r1, r2, #5
 800c4d4:	6a3a      	ldr	r2, [r7, #32]
 800c4d6:	440a      	add	r2, r1
 800c4d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c4e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	015a      	lsls	r2, r3, #5
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	7e7b      	ldrb	r3, [r7, #25]
 800c4f2:	075b      	lsls	r3, r3, #29
 800c4f4:	69f9      	ldr	r1, [r7, #28]
 800c4f6:	0148      	lsls	r0, r1, #5
 800c4f8:	6a39      	ldr	r1, [r7, #32]
 800c4fa:	4401      	add	r1, r0
 800c4fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c500:	4313      	orrs	r3, r2
 800c502:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	015a      	lsls	r2, r3, #5
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	4413      	add	r3, r2
 800c50c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a41      	ldr	r2, [pc, #260]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c514:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c516:	4b40      	ldr	r3, [pc, #256]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c51e:	4a3e      	ldr	r2, [pc, #248]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c520:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	78db      	ldrb	r3, [r3, #3]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d006      	beq.n	800c538 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c52a:	4b3b      	ldr	r3, [pc, #236]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c532:	4a39      	ldr	r2, [pc, #228]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c534:	6013      	str	r3, [r2, #0]
 800c536:	e005      	b.n	800c544 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c538:	4b37      	ldr	r3, [pc, #220]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c540:	4a35      	ldr	r2, [pc, #212]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c542:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c544:	4b34      	ldr	r3, [pc, #208]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c54c:	4a32      	ldr	r2, [pc, #200]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c54e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	015a      	lsls	r2, r3, #5
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	4413      	add	r3, r2
 800c558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c55c:	461a      	mov	r2, r3
 800c55e:	4b2e      	ldr	r3, [pc, #184]	; (800c618 <USB_HC_StartXfer+0x284>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d14e      	bne.n	800c608 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	78db      	ldrb	r3, [r3, #3]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d14a      	bne.n	800c608 <USB_HC_StartXfer+0x274>
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d046      	beq.n	800c608 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	79db      	ldrb	r3, [r3, #7]
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d830      	bhi.n	800c5e4 <USB_HC_StartXfer+0x250>
 800c582:	a201      	add	r2, pc, #4	; (adr r2, 800c588 <USB_HC_StartXfer+0x1f4>)
 800c584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c588:	0800c599 	.word	0x0800c599
 800c58c:	0800c5bd 	.word	0x0800c5bd
 800c590:	0800c599 	.word	0x0800c599
 800c594:	0800c5bd 	.word	0x0800c5bd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	3303      	adds	r3, #3
 800c59e:	089b      	lsrs	r3, r3, #2
 800c5a0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c5a2:	8afa      	ldrh	r2, [r7, #22]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d91c      	bls.n	800c5e8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	699b      	ldr	r3, [r3, #24]
 800c5b2:	f043 0220 	orr.w	r2, r3, #32
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	619a      	str	r2, [r3, #24]
          }
          break;
 800c5ba:	e015      	b.n	800c5e8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	3303      	adds	r3, #3
 800c5c2:	089b      	lsrs	r3, r3, #2
 800c5c4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c5c6:	8afa      	ldrh	r2, [r7, #22]
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d90a      	bls.n	800c5ec <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	699b      	ldr	r3, [r3, #24]
 800c5da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	619a      	str	r2, [r3, #24]
          }
          break;
 800c5e2:	e003      	b.n	800c5ec <USB_HC_StartXfer+0x258>

        default:
          break;
 800c5e4:	bf00      	nop
 800c5e6:	e002      	b.n	800c5ee <USB_HC_StartXfer+0x25a>
          break;
 800c5e8:	bf00      	nop
 800c5ea:	e000      	b.n	800c5ee <USB_HC_StartXfer+0x25a>
          break;
 800c5ec:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	68d9      	ldr	r1, [r3, #12]
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	785a      	ldrb	r2, [r3, #1]
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	b298      	uxth	r0, r3
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	4603      	mov	r3, r0
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f7ff fb92 	bl	800bd2c <USB_WritePacket>
    }
  }

  return HAL_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3728      	adds	r7, #40	; 0x28
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	1ff80000 	.word	0x1ff80000
 800c618:	20000658 	.word	0x20000658

0800c61c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c62e:	695b      	ldr	r3, [r3, #20]
 800c630:	b29b      	uxth	r3, r3
}
 800c632:	4618      	mov	r0, r3
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c63e:	b480      	push	{r7}
 800c640:	b087      	sub	sp, #28
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	460b      	mov	r3, r1
 800c648:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c64e:	78fb      	ldrb	r3, [r7, #3]
 800c650:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c652:	2300      	movs	r3, #0
 800c654:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	015a      	lsls	r2, r3, #5
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	4413      	add	r3, r2
 800c65e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	0c9b      	lsrs	r3, r3, #18
 800c666:	f003 0303 	and.w	r3, r3, #3
 800c66a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d002      	beq.n	800c678 <USB_HC_Halt+0x3a>
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2b02      	cmp	r3, #2
 800c676:	d16c      	bne.n	800c752 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	015a      	lsls	r2, r3, #5
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	4413      	add	r3, r2
 800c680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	0151      	lsls	r1, r2, #5
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	440a      	add	r2, r1
 800c68e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c696:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d143      	bne.n	800c72c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	0151      	lsls	r1, r2, #5
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	440a      	add	r2, r1
 800c6ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	0151      	lsls	r1, r2, #5
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	440a      	add	r2, r1
 800c6da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	015a      	lsls	r2, r3, #5
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	0151      	lsls	r1, r2, #5
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	440a      	add	r2, r1
 800c6fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c702:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	3301      	adds	r3, #1
 800c708:	617b      	str	r3, [r7, #20]
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c710:	d81d      	bhi.n	800c74e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	015a      	lsls	r2, r3, #5
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	4413      	add	r3, r2
 800c71a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c728:	d0ec      	beq.n	800c704 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c72a:	e080      	b.n	800c82e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	015a      	lsls	r2, r3, #5
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	4413      	add	r3, r2
 800c734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	0151      	lsls	r1, r2, #5
 800c73e:	693a      	ldr	r2, [r7, #16]
 800c740:	440a      	add	r2, r1
 800c742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c74a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c74c:	e06f      	b.n	800c82e <USB_HC_Halt+0x1f0>
          break;
 800c74e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c750:	e06d      	b.n	800c82e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	015a      	lsls	r2, r3, #5
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	4413      	add	r3, r2
 800c75a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	0151      	lsls	r1, r2, #5
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	440a      	add	r2, r1
 800c768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c76c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c770:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d143      	bne.n	800c80a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	015a      	lsls	r2, r3, #5
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	4413      	add	r3, r2
 800c78a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	0151      	lsls	r1, r2, #5
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	440a      	add	r2, r1
 800c798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c79c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7a0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	0151      	lsls	r1, r2, #5
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	440a      	add	r2, r1
 800c7b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c7c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	0151      	lsls	r1, r2, #5
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	440a      	add	r2, r1
 800c7d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7e0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	617b      	str	r3, [r7, #20]
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7ee:	d81d      	bhi.n	800c82c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	015a      	lsls	r2, r3, #5
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c806:	d0ec      	beq.n	800c7e2 <USB_HC_Halt+0x1a4>
 800c808:	e011      	b.n	800c82e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	015a      	lsls	r2, r3, #5
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	4413      	add	r3, r2
 800c812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	0151      	lsls	r1, r2, #5
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	440a      	add	r2, r1
 800c820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c828:	6013      	str	r3, [r2, #0]
 800c82a:	e000      	b.n	800c82e <USB_HC_Halt+0x1f0>
          break;
 800c82c:	bf00      	nop
    }
  }

  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	371c      	adds	r7, #28
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c84c:	78fb      	ldrb	r3, [r7, #3]
 800c84e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c850:	2301      	movs	r3, #1
 800c852:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	04da      	lsls	r2, r3, #19
 800c858:	4b15      	ldr	r3, [pc, #84]	; (800c8b0 <USB_DoPing+0x74>)
 800c85a:	4013      	ands	r3, r2
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	0151      	lsls	r1, r2, #5
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	440a      	add	r2, r1
 800c864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c86c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	015a      	lsls	r2, r3, #5
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	4413      	add	r3, r2
 800c876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c884:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c88c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	4413      	add	r3, r2
 800c896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c89a:	461a      	mov	r2, r3
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	371c      	adds	r7, #28
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	1ff80000 	.word	0x1ff80000

0800c8b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7ff f9ad 	bl	800bc24 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c8ca:	2110      	movs	r1, #16
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7ff f9e5 	bl	800bc9c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7ff fa08 	bl	800bce8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	613b      	str	r3, [r7, #16]
 800c8dc:	e01f      	b.n	800c91e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	015a      	lsls	r2, r3, #5
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c904:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	015a      	lsls	r2, r3, #5
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	4413      	add	r3, r2
 800c90e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c912:	461a      	mov	r2, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	3301      	adds	r3, #1
 800c91c:	613b      	str	r3, [r7, #16]
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	2b0f      	cmp	r3, #15
 800c922:	d9dc      	bls.n	800c8de <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c924:	2300      	movs	r3, #0
 800c926:	613b      	str	r3, [r7, #16]
 800c928:	e034      	b.n	800c994 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	015a      	lsls	r2, r3, #5
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	4413      	add	r3, r2
 800c932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c940:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c948:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c950:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	015a      	lsls	r2, r3, #5
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	4413      	add	r3, r2
 800c95a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c95e:	461a      	mov	r2, r3
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	3301      	adds	r3, #1
 800c968:	617b      	str	r3, [r7, #20]
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c970:	d80c      	bhi.n	800c98c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	015a      	lsls	r2, r3, #5
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4413      	add	r3, r2
 800c97a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c988:	d0ec      	beq.n	800c964 <USB_StopHost+0xb0>
 800c98a:	e000      	b.n	800c98e <USB_StopHost+0xda>
        break;
 800c98c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	3301      	adds	r3, #1
 800c992:	613b      	str	r3, [r7, #16]
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	2b0f      	cmp	r3, #15
 800c998:	d9c7      	bls.n	800c92a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ae:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff f926 	bl	800bc02 <USB_EnableGlobalInt>

  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c9c4:	4904      	ldr	r1, [pc, #16]	; (800c9d8 <MX_FATFS_Init+0x18>)
 800c9c6:	4805      	ldr	r0, [pc, #20]	; (800c9dc <MX_FATFS_Init+0x1c>)
 800c9c8:	f003 fe72 	bl	80106b0 <FATFS_LinkDriver>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	4b03      	ldr	r3, [pc, #12]	; (800c9e0 <MX_FATFS_Init+0x20>)
 800c9d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c9d4:	bf00      	nop
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	2000a350 	.word	0x2000a350
 800c9dc:	08020220 	.word	0x08020220
 800c9e0:	2000a354 	.word	0x2000a354

0800c9e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c9ee:	f000 f87b 	bl	800cae8 <BSP_SD_IsDetected>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d001      	beq.n	800c9fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e012      	b.n	800ca22 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c9fc:	480b      	ldr	r0, [pc, #44]	; (800ca2c <BSP_SD_Init+0x48>)
 800c9fe:	f7fb fd59 	bl	80084b4 <HAL_SD_Init>
 800ca02:	4603      	mov	r3, r0
 800ca04:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ca06:	79fb      	ldrb	r3, [r7, #7]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d109      	bne.n	800ca20 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ca0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca10:	4806      	ldr	r0, [pc, #24]	; (800ca2c <BSP_SD_Init+0x48>)
 800ca12:	f7fc f98d 	bl	8008d30 <HAL_SD_ConfigWideBusOperation>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ca20:	79fb      	ldrb	r3, [r7, #7]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200004ec 	.word	0x200004ec

0800ca30 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	68f9      	ldr	r1, [r7, #12]
 800ca46:	4806      	ldr	r0, [pc, #24]	; (800ca60 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ca48:	f7fb fdc4 	bl	80085d4 <HAL_SD_ReadBlocks_DMA>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800ca56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	200004ec 	.word	0x200004ec

0800ca64 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68ba      	ldr	r2, [r7, #8]
 800ca78:	68f9      	ldr	r1, [r7, #12]
 800ca7a:	4806      	ldr	r0, [pc, #24]	; (800ca94 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ca7c:	f7fb fe92 	bl	80087a4 <HAL_SD_WriteBlocks_DMA>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ca86:	2301      	movs	r3, #1
 800ca88:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800ca8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	200004ec 	.word	0x200004ec

0800ca98 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca9c:	4805      	ldr	r0, [pc, #20]	; (800cab4 <BSP_SD_GetCardState+0x1c>)
 800ca9e:	f7fc f9c3 	bl	8008e28 <HAL_SD_GetCardState>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b04      	cmp	r3, #4
 800caa6:	bf14      	ite	ne
 800caa8:	2301      	movne	r3, #1
 800caaa:	2300      	moveq	r3, #0
 800caac:	b2db      	uxtb	r3, r3
}
 800caae:	4618      	mov	r0, r3
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	200004ec 	.word	0x200004ec

0800cab8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4803      	ldr	r0, [pc, #12]	; (800cad0 <BSP_SD_GetCardInfo+0x18>)
 800cac4:	f7fc f908 	bl	8008cd8 <HAL_SD_GetCardInfo>
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	200004ec 	.word	0x200004ec

0800cad4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cadc:	f000 fa32 	bl	800cf44 <BSP_SD_ReadCpltCallback>
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800caee:	2301      	movs	r3, #1
 800caf0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800caf2:	f000 f80b 	bl	800cb0c <BSP_PlatformIsDetected>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d101      	bne.n	800cb00 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cafc:	2300      	movs	r3, #0
 800cafe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cb00:	79fb      	ldrb	r3, [r7, #7]
 800cb02:	b2db      	uxtb	r3, r3
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cb12:	2301      	movs	r3, #1
 800cb14:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cb16:	2104      	movs	r1, #4
 800cb18:	4806      	ldr	r0, [pc, #24]	; (800cb34 <BSP_PlatformIsDetected+0x28>)
 800cb1a:	f7f7 fa67 	bl	8003fec <HAL_GPIO_ReadPin>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800cb24:	2300      	movs	r3, #0
 800cb26:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800cb28:	79fb      	ldrb	r3, [r7, #7]
}  
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	40021800 	.word	0x40021800

0800cb38 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 800cb40:	f003 fdfb 	bl	801073a <osKernelSysTick>
 800cb44:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 800cb46:	e006      	b.n	800cb56 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb48:	f7ff ffa6 	bl	800ca98 <BSP_SD_GetCardState>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d101      	bne.n	800cb56 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	e009      	b.n	800cb6a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800cb56:	f003 fdf0 	bl	801073a <osKernelSysTick>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d8f0      	bhi.n	800cb48 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cb66:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cb7e:	4b0b      	ldr	r3, [pc, #44]	; (800cbac <SD_CheckStatus+0x38>)
 800cb80:	2201      	movs	r2, #1
 800cb82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb84:	f7ff ff88 	bl	800ca98 <BSP_SD_GetCardState>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d107      	bne.n	800cb9e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cb8e:	4b07      	ldr	r3, [pc, #28]	; (800cbac <SD_CheckStatus+0x38>)
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	f023 0301 	bic.w	r3, r3, #1
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	4b04      	ldr	r3, [pc, #16]	; (800cbac <SD_CheckStatus+0x38>)
 800cb9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cb9e:	4b03      	ldr	r3, [pc, #12]	; (800cbac <SD_CheckStatus+0x38>)
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	b2db      	uxtb	r3, r3
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	20000031 	.word	0x20000031

0800cbb0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cbb0:	b590      	push	{r4, r7, lr}
 800cbb2:	b087      	sub	sp, #28
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800cbba:	4b1a      	ldr	r3, [pc, #104]	; (800cc24 <SD_initialize+0x74>)
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 800cbc0:	f003 fdaf 	bl	8010722 <osKernelRunning>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d024      	beq.n	800cc14 <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cbca:	f7ff ff0b 	bl	800c9e4 <BSP_SD_Init>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d107      	bne.n	800cbe4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7ff ffcc 	bl	800cb74 <SD_CheckStatus>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	461a      	mov	r2, r3
 800cbe0:	4b10      	ldr	r3, [pc, #64]	; (800cc24 <SD_initialize+0x74>)
 800cbe2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 800cbe4:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <SD_initialize+0x74>)
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d012      	beq.n	800cc14 <SD_initialize+0x64>
 800cbee:	4b0e      	ldr	r3, [pc, #56]	; (800cc28 <SD_initialize+0x78>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10e      	bne.n	800cc14 <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800cbf6:	4b0d      	ldr	r3, [pc, #52]	; (800cc2c <SD_initialize+0x7c>)
 800cbf8:	f107 0408 	add.w	r4, r7, #8
 800cbfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cbfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800cc02:	f107 0308 	add.w	r3, r7, #8
 800cc06:	2100      	movs	r1, #0
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f003 fe06 	bl	801081a <osMessageCreate>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	4b05      	ldr	r3, [pc, #20]	; (800cc28 <SD_initialize+0x78>)
 800cc12:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 800cc14:	4b03      	ldr	r3, [pc, #12]	; (800cc24 <SD_initialize+0x74>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	b2db      	uxtb	r3, r3
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	371c      	adds	r7, #28
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd90      	pop	{r4, r7, pc}
 800cc22:	bf00      	nop
 800cc24:	20000031 	.word	0x20000031
 800cc28:	2000085c 	.word	0x2000085c
 800cc2c:	0801f900 	.word	0x0801f900

0800cc30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff ff99 	bl	800cb74 <SD_CheckStatus>
 800cc42:	4603      	mov	r3, r0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b08e      	sub	sp, #56	; 0x38
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	61b9      	str	r1, [r7, #24]
 800cc54:	617a      	str	r2, [r7, #20]
 800cc56:	613b      	str	r3, [r7, #16]
 800cc58:	4603      	mov	r3, r0
 800cc5a:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cc62:	f247 5030 	movw	r0, #30000	; 0x7530
 800cc66:	f7ff ff67 	bl	800cb38 <SD_CheckStatusWithTimeout>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	da02      	bge.n	800cc76 <SD_read+0x2a>
  {
    return res;
 800cc70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc74:	e06c      	b.n	800cd50 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	f003 0303 	and.w	r3, r3, #3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d11e      	bne.n	800ccbe <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800cc80:	693a      	ldr	r2, [r7, #16]
 800cc82:	6979      	ldr	r1, [r7, #20]
 800cc84:	69b8      	ldr	r0, [r7, #24]
 800cc86:	f7ff fed3 	bl	800ca30 <BSP_SD_ReadBlocks_DMA>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 800cc90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d159      	bne.n	800cd4c <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cc98:	4b2f      	ldr	r3, [pc, #188]	; (800cd58 <SD_read+0x10c>)
 800cc9a:	6819      	ldr	r1, [r3, #0]
 800cc9c:	f107 0320 	add.w	r3, r7, #32
 800cca0:	f247 5230 	movw	r2, #30000	; 0x7530
 800cca4:	4618      	mov	r0, r3
 800cca6:	f003 fe21 	bl	80108ec <osMessageGet>
      if (event.status == osEventMessage) {
 800ccaa:	6a3b      	ldr	r3, [r7, #32]
 800ccac:	2b10      	cmp	r3, #16
 800ccae:	d14d      	bne.n	800cd4c <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d14a      	bne.n	800cd4c <SD_read+0x100>
          res = RES_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ccbc:	e046      	b.n	800cd4c <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	633b      	str	r3, [r7, #48]	; 0x30
 800ccc2:	e032      	b.n	800cd2a <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	1c5a      	adds	r2, r3, #1
 800ccc8:	617a      	str	r2, [r7, #20]
 800ccca:	2201      	movs	r2, #1
 800cccc:	4619      	mov	r1, r3
 800ccce:	4823      	ldr	r0, [pc, #140]	; (800cd5c <SD_read+0x110>)
 800ccd0:	f7ff feae 	bl	800ca30 <BSP_SD_ReadBlocks_DMA>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 800ccda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d128      	bne.n	800cd34 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cce2:	4b1d      	ldr	r3, [pc, #116]	; (800cd58 <SD_read+0x10c>)
 800cce4:	6819      	ldr	r1, [r3, #0]
 800cce6:	463b      	mov	r3, r7
 800cce8:	f247 5230 	movw	r2, #30000	; 0x7530
 800ccec:	4618      	mov	r0, r3
 800ccee:	f003 fdfd 	bl	80108ec <osMessageGet>
 800ccf2:	f107 0320 	add.w	r3, r7, #32
 800ccf6:	463a      	mov	r2, r7
 800ccf8:	ca07      	ldmia	r2, {r0, r1, r2}
 800ccfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	2b10      	cmp	r3, #16
 800cd02:	d10f      	bne.n	800cd24 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d10c      	bne.n	800cd24 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	4a13      	ldr	r2, [pc, #76]	; (800cd5c <SD_read+0x110>)
 800cd0e:	4618      	mov	r0, r3
 800cd10:	4611      	mov	r1, r2
 800cd12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd16:	461a      	mov	r2, r3
 800cd18:	f011 fe48 	bl	801e9ac <memcpy>
            buff += BLOCKSIZE;
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cd22:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800cd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd26:	3301      	adds	r3, #1
 800cd28:	633b      	str	r3, [r7, #48]	; 0x30
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d8c8      	bhi.n	800ccc4 <SD_read+0x78>
 800cd32:	e000      	b.n	800cd36 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 800cd34:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d106      	bne.n	800cd4c <SD_read+0x100>
 800cd3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d102      	bne.n	800cd4c <SD_read+0x100>
      res = RES_OK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 800cd4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 800cd50:	4618      	mov	r0, r3
 800cd52:	3738      	adds	r7, #56	; 0x38
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	2000085c 	.word	0x2000085c
 800cd5c:	2000065c 	.word	0x2000065c

0800cd60 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b090      	sub	sp, #64	; 0x40
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	61b9      	str	r1, [r7, #24]
 800cd68:	617a      	str	r2, [r7, #20]
 800cd6a:	613b      	str	r3, [r7, #16]
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cd76:	f247 5030 	movw	r0, #30000	; 0x7530
 800cd7a:	f7ff fedd 	bl	800cb38 <SD_CheckStatusWithTimeout>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	da02      	bge.n	800cd8a <SD_write+0x2a>
  {
    return res;
 800cd84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd88:	e07c      	b.n	800ce84 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	f003 0303 	and.w	r3, r3, #3
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d12e      	bne.n	800cdf2 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cd94:	693a      	ldr	r2, [r7, #16]
 800cd96:	6979      	ldr	r1, [r7, #20]
 800cd98:	69b8      	ldr	r0, [r7, #24]
 800cd9a:	f7ff fe63 	bl	800ca64 <BSP_SD_WriteBlocks_DMA>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d16d      	bne.n	800ce80 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cda4:	4b39      	ldr	r3, [pc, #228]	; (800ce8c <SD_write+0x12c>)
 800cda6:	6819      	ldr	r1, [r3, #0]
 800cda8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdac:	f247 5230 	movw	r2, #30000	; 0x7530
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f003 fd9b 	bl	80108ec <osMessageGet>

      if (event.status == osEventMessage)
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb8:	2b10      	cmp	r3, #16
 800cdba:	d161      	bne.n	800ce80 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	d15e      	bne.n	800ce80 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 800cdc2:	f003 fcba 	bl	801073a <osKernelSysTick>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800cdcc:	3330      	adds	r3, #48	; 0x30
 800cdce:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 800cdd0:	e008      	b.n	800cde4 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cdd2:	f7ff fe61 	bl	800ca98 <BSP_SD_GetCardState>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d103      	bne.n	800cde4 <SD_write+0x84>
            {
              res = RES_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 800cde2:	e04d      	b.n	800ce80 <SD_write+0x120>
          while(timer > osKernelSysTick())
 800cde4:	f003 fca9 	bl	801073a <osKernelSysTick>
 800cde8:	4602      	mov	r2, r0
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d8f0      	bhi.n	800cdd2 <SD_write+0x72>
 800cdf0:	e046      	b.n	800ce80 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdf6:	e032      	b.n	800ce5e <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	617a      	str	r2, [r7, #20]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	4619      	mov	r1, r3
 800ce02:	4823      	ldr	r0, [pc, #140]	; (800ce90 <SD_write+0x130>)
 800ce04:	f7ff fe2e 	bl	800ca64 <BSP_SD_WriteBlocks_DMA>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 800ce0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d128      	bne.n	800ce68 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ce16:	4b1d      	ldr	r3, [pc, #116]	; (800ce8c <SD_write+0x12c>)
 800ce18:	6819      	ldr	r1, [r3, #0]
 800ce1a:	463b      	mov	r3, r7
 800ce1c:	f247 5230 	movw	r2, #30000	; 0x7530
 800ce20:	4618      	mov	r0, r3
 800ce22:	f003 fd63 	bl	80108ec <osMessageGet>
 800ce26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce2a:	463a      	mov	r2, r7
 800ce2c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800ce32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce34:	2b10      	cmp	r3, #16
 800ce36:	d10f      	bne.n	800ce58 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	2b02      	cmp	r3, #2
 800ce3c:	d10c      	bne.n	800ce58 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	4a13      	ldr	r2, [pc, #76]	; (800ce90 <SD_write+0x130>)
 800ce42:	4618      	mov	r0, r3
 800ce44:	4611      	mov	r1, r2
 800ce46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f011 fdae 	bl	801e9ac <memcpy>
            buff += BLOCKSIZE;
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ce56:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800ce58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce60:	693a      	ldr	r2, [r7, #16]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d8c8      	bhi.n	800cdf8 <SD_write+0x98>
 800ce66:	e000      	b.n	800ce6a <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 800ce68:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6c:	693a      	ldr	r2, [r7, #16]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d106      	bne.n	800ce80 <SD_write+0x120>
 800ce72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d102      	bne.n	800ce80 <SD_write+0x120>
      res = RES_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 800ce80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800ce84:	4618      	mov	r0, r3
 800ce86:	3740      	adds	r7, #64	; 0x40
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	2000085c 	.word	0x2000085c
 800ce90:	2000065c 	.word	0x2000065c

0800ce94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b08c      	sub	sp, #48	; 0x30
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	603a      	str	r2, [r7, #0]
 800ce9e:	71fb      	strb	r3, [r7, #7]
 800cea0:	460b      	mov	r3, r1
 800cea2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cea4:	2301      	movs	r3, #1
 800cea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ceaa:	4b25      	ldr	r3, [pc, #148]	; (800cf40 <SD_ioctl+0xac>)
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <SD_ioctl+0x28>
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e03c      	b.n	800cf36 <SD_ioctl+0xa2>

  switch (cmd)
 800cebc:	79bb      	ldrb	r3, [r7, #6]
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d834      	bhi.n	800cf2c <SD_ioctl+0x98>
 800cec2:	a201      	add	r2, pc, #4	; (adr r2, 800cec8 <SD_ioctl+0x34>)
 800cec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec8:	0800ced9 	.word	0x0800ced9
 800cecc:	0800cee1 	.word	0x0800cee1
 800ced0:	0800cef9 	.word	0x0800cef9
 800ced4:	0800cf13 	.word	0x0800cf13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ced8:	2300      	movs	r3, #0
 800ceda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cede:	e028      	b.n	800cf32 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cee0:	f107 030c 	add.w	r3, r7, #12
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7ff fde7 	bl	800cab8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ceea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cef0:	2300      	movs	r3, #0
 800cef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cef6:	e01c      	b.n	800cf32 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cef8:	f107 030c 	add.w	r3, r7, #12
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7ff fddb 	bl	800cab8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf10:	e00f      	b.n	800cf32 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf12:	f107 030c 	add.w	r3, r7, #12
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff fdce 	bl	800cab8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1e:	0a5a      	lsrs	r2, r3, #9
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf24:	2300      	movs	r3, #0
 800cf26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf2a:	e002      	b.n	800cf32 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cf2c:	2304      	movs	r3, #4
 800cf2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cf32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3730      	adds	r7, #48	; 0x30
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	20000031 	.word	0x20000031

0800cf44 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 800cf48:	4b04      	ldr	r3, [pc, #16]	; (800cf5c <BSP_SD_ReadCpltCallback+0x18>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf50:	2101      	movs	r1, #1
 800cf52:	4618      	mov	r0, r3
 800cf54:	f003 fc8a 	bl	801086c <osMessagePut>
}
 800cf58:	bf00      	nop
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	2000085c 	.word	0x2000085c

0800cf60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800cf60:	b590      	push	{r4, r7, lr}
 800cf62:	b089      	sub	sp, #36	; 0x24
 800cf64:	af04      	add	r7, sp, #16
 800cf66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800cf68:	2302      	movs	r3, #2
 800cf6a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	2202      	movs	r2, #2
 800cf70:	2102      	movs	r1, #2
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fc8c 	bl	800d890 <USBH_FindInterface>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800cf7c:	7bbb      	ldrb	r3, [r7, #14]
 800cf7e:	2bff      	cmp	r3, #255	; 0xff
 800cf80:	f000 812a 	beq.w	800d1d8 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800cf84:	7bbb      	ldrb	r3, [r7, #14]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fc65 	bl	800d858 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800cf94:	2050      	movs	r0, #80	; 0x50
 800cf96:	f011 fcf9 	bl	801e98c <malloc>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfa4:	69db      	ldr	r3, [r3, #28]
 800cfa6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800cfa8:	7bbb      	ldrb	r3, [r7, #14]
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	211a      	movs	r1, #26
 800cfae:	fb01 f303 	mul.w	r3, r1, r3
 800cfb2:	4413      	add	r3, r2
 800cfb4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	b25b      	sxtb	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	da15      	bge.n	800cfec <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	211a      	movs	r1, #26
 800cfc6:	fb01 f303 	mul.w	r3, r1, r3
 800cfca:	4413      	add	r3, r2
 800cfcc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800cfd0:	781a      	ldrb	r2, [r3, #0]
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cfd6:	7bbb      	ldrb	r3, [r7, #14]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	211a      	movs	r1, #26
 800cfdc:	fb01 f303 	mul.w	r3, r1, r3
 800cfe0:	4413      	add	r3, r2
 800cfe2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800cfe6:	881a      	ldrh	r2, [r3, #0]
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	785b      	ldrb	r3, [r3, #1]
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f001 ff2f 	bl	800ee56 <USBH_AllocPipe>
 800cff8:	4603      	mov	r3, r0
 800cffa:	461a      	mov	r2, r3
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	7819      	ldrb	r1, [r3, #0]
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	7858      	ldrb	r0, [r3, #1]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d014:	68ba      	ldr	r2, [r7, #8]
 800d016:	8952      	ldrh	r2, [r2, #10]
 800d018:	9202      	str	r2, [sp, #8]
 800d01a:	2203      	movs	r2, #3
 800d01c:	9201      	str	r2, [sp, #4]
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	4623      	mov	r3, r4
 800d022:	4602      	mov	r2, r0
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f001 fee7 	bl	800edf8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	2200      	movs	r2, #0
 800d030:	4619      	mov	r1, r3
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f00b f8f4 	bl	8018220 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800d038:	2300      	movs	r3, #0
 800d03a:	2200      	movs	r2, #0
 800d03c:	210a      	movs	r1, #10
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fc26 	bl	800d890 <USBH_FindInterface>
 800d044:	4603      	mov	r3, r0
 800d046:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800d048:	7bbb      	ldrb	r3, [r7, #14]
 800d04a:	2bff      	cmp	r3, #255	; 0xff
 800d04c:	f000 80c4 	beq.w	800d1d8 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d050:	7bbb      	ldrb	r3, [r7, #14]
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	211a      	movs	r1, #26
 800d056:	fb01 f303 	mul.w	r3, r1, r3
 800d05a:	4413      	add	r3, r2
 800d05c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	b25b      	sxtb	r3, r3
 800d064:	2b00      	cmp	r3, #0
 800d066:	da16      	bge.n	800d096 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d068:	7bbb      	ldrb	r3, [r7, #14]
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	211a      	movs	r1, #26
 800d06e:	fb01 f303 	mul.w	r3, r1, r3
 800d072:	4413      	add	r3, r2
 800d074:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800d078:	781a      	ldrb	r2, [r3, #0]
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d07e:	7bbb      	ldrb	r3, [r7, #14]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	211a      	movs	r1, #26
 800d084:	fb01 f303 	mul.w	r3, r1, r3
 800d088:	4413      	add	r3, r2
 800d08a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800d08e:	881a      	ldrh	r2, [r3, #0]
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	835a      	strh	r2, [r3, #26]
 800d094:	e015      	b.n	800d0c2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d096:	7bbb      	ldrb	r3, [r7, #14]
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	211a      	movs	r1, #26
 800d09c:	fb01 f303 	mul.w	r3, r1, r3
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800d0a6:	781a      	ldrb	r2, [r3, #0]
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d0ac:	7bbb      	ldrb	r3, [r7, #14]
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	211a      	movs	r1, #26
 800d0b2:	fb01 f303 	mul.w	r3, r1, r3
 800d0b6:	4413      	add	r3, r2
 800d0b8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800d0bc:	881a      	ldrh	r2, [r3, #0]
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800d0c2:	7bbb      	ldrb	r3, [r7, #14]
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	211a      	movs	r1, #26
 800d0c8:	fb01 f303 	mul.w	r3, r1, r3
 800d0cc:	4413      	add	r3, r2
 800d0ce:	f203 3352 	addw	r3, r3, #850	; 0x352
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	b25b      	sxtb	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da16      	bge.n	800d108 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d0da:	7bbb      	ldrb	r3, [r7, #14]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	211a      	movs	r1, #26
 800d0e0:	fb01 f303 	mul.w	r3, r1, r3
 800d0e4:	4413      	add	r3, r2
 800d0e6:	f203 3352 	addw	r3, r3, #850	; 0x352
 800d0ea:	781a      	ldrb	r2, [r3, #0]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	211a      	movs	r1, #26
 800d0f6:	fb01 f303 	mul.w	r3, r1, r3
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800d100:	881a      	ldrh	r2, [r3, #0]
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	835a      	strh	r2, [r3, #26]
 800d106:	e015      	b.n	800d134 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d108:	7bbb      	ldrb	r3, [r7, #14]
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	211a      	movs	r1, #26
 800d10e:	fb01 f303 	mul.w	r3, r1, r3
 800d112:	4413      	add	r3, r2
 800d114:	f203 3352 	addw	r3, r3, #850	; 0x352
 800d118:	781a      	ldrb	r2, [r3, #0]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d11e:	7bbb      	ldrb	r3, [r7, #14]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	211a      	movs	r1, #26
 800d124:	fb01 f303 	mul.w	r3, r1, r3
 800d128:	4413      	add	r3, r2
 800d12a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800d12e:	881a      	ldrh	r2, [r3, #0]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	7b9b      	ldrb	r3, [r3, #14]
 800d138:	4619      	mov	r1, r3
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f001 fe8b 	bl	800ee56 <USBH_AllocPipe>
 800d140:	4603      	mov	r3, r0
 800d142:	461a      	mov	r2, r3
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	7bdb      	ldrb	r3, [r3, #15]
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f001 fe81 	bl	800ee56 <USBH_AllocPipe>
 800d154:	4603      	mov	r3, r0
 800d156:	461a      	mov	r2, r3
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	7b59      	ldrb	r1, [r3, #13]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	7b98      	ldrb	r0, [r3, #14]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d170:	68ba      	ldr	r2, [r7, #8]
 800d172:	8b12      	ldrh	r2, [r2, #24]
 800d174:	9202      	str	r2, [sp, #8]
 800d176:	2202      	movs	r2, #2
 800d178:	9201      	str	r2, [sp, #4]
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	4623      	mov	r3, r4
 800d17e:	4602      	mov	r2, r0
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f001 fe39 	bl	800edf8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	7b19      	ldrb	r1, [r3, #12]
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	7bd8      	ldrb	r0, [r3, #15]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d19a:	68ba      	ldr	r2, [r7, #8]
 800d19c:	8b52      	ldrh	r2, [r2, #26]
 800d19e:	9202      	str	r2, [sp, #8]
 800d1a0:	2202      	movs	r2, #2
 800d1a2:	9201      	str	r2, [sp, #4]
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	4623      	mov	r3, r4
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f001 fe24 	bl	800edf8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	7b5b      	ldrb	r3, [r3, #13]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f00b f82d 	bl	8018220 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	7b1b      	ldrb	r3, [r3, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f00b f826 	bl	8018220 <USBH_LL_SetToggle>
      status = USBH_OK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3714      	adds	r7, #20
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd90      	pop	{r4, r7, pc}

0800d1e2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d1f0:	69db      	ldr	r3, [r3, #28]
 800d1f2:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00e      	beq.n	800d21a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f001 fe17 	bl	800ee36 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	4619      	mov	r1, r3
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f001 fe3f 	bl	800ee92 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	7b1b      	ldrb	r3, [r3, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00e      	beq.n	800d240 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	7b1b      	ldrb	r3, [r3, #12]
 800d226:	4619      	mov	r1, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f001 fe04 	bl	800ee36 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	7b1b      	ldrb	r3, [r3, #12]
 800d232:	4619      	mov	r1, r3
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f001 fe2c 	bl	800ee92 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2200      	movs	r2, #0
 800d23e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	7b5b      	ldrb	r3, [r3, #13]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00e      	beq.n	800d266 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	7b5b      	ldrb	r3, [r3, #13]
 800d24c:	4619      	mov	r1, r3
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f001 fdf1 	bl	800ee36 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	7b5b      	ldrb	r3, [r3, #13]
 800d258:	4619      	mov	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f001 fe19 	bl	800ee92 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d26c:	69db      	ldr	r3, [r3, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00b      	beq.n	800d28a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d278:	69db      	ldr	r3, [r3, #28]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f011 fb8e 	bl	801e99c <free>
    phost->pActiveClass->pData = 0U;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d286:	2200      	movs	r2, #0
 800d288:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800d29c:	2302      	movs	r3, #2
 800d29e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d2a6:	69db      	ldr	r3, [r3, #28]
 800d2a8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	3340      	adds	r3, #64	; 0x40
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 f8b2 	bl	800d41a <GetLineCoding>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800d2ba:	7bfb      	ldrb	r3, [r7, #15]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d105      	bne.n	800d2cc <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2c6:	2102      	movs	r1, #2
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	4798      	blx	r3
  }
  return status;
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
	...

0800d2d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d2ee:	69db      	ldr	r3, [r3, #28]
 800d2f0:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d2f8:	2b04      	cmp	r3, #4
 800d2fa:	d877      	bhi.n	800d3ec <USBH_CDC_Process+0x114>
 800d2fc:	a201      	add	r2, pc, #4	; (adr r2, 800d304 <USBH_CDC_Process+0x2c>)
 800d2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d302:	bf00      	nop
 800d304:	0800d319 	.word	0x0800d319
 800d308:	0800d31f 	.word	0x0800d31f
 800d30c:	0800d34f 	.word	0x0800d34f
 800d310:	0800d3c3 	.word	0x0800d3c3
 800d314:	0800d3d1 	.word	0x0800d3d1
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800d318:	2300      	movs	r3, #0
 800d31a:	73fb      	strb	r3, [r7, #15]
    break;
 800d31c:	e06d      	b.n	800d3fa <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d322:	4619      	mov	r1, r3
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 f897 	bl	800d458 <SetLineCoding>
 800d32a:	4603      	mov	r3, r0
 800d32c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800d32e:	7bbb      	ldrb	r3, [r7, #14]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d104      	bne.n	800d33e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	2202      	movs	r2, #2
 800d338:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800d33c:	e058      	b.n	800d3f0 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800d33e:	7bbb      	ldrb	r3, [r7, #14]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d055      	beq.n	800d3f0 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2204      	movs	r2, #4
 800d348:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800d34c:	e050      	b.n	800d3f0 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	3340      	adds	r3, #64	; 0x40
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f860 	bl	800d41a <GetLineCoding>
 800d35a:	4603      	mov	r3, r0
 800d35c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800d35e:	7bbb      	ldrb	r3, [r7, #14]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d126      	bne.n	800d3b2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d376:	791b      	ldrb	r3, [r3, #4]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d13b      	bne.n	800d3f4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d386:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d388:	429a      	cmp	r2, r3
 800d38a:	d133      	bne.n	800d3f4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d396:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d398:	429a      	cmp	r2, r3
 800d39a:	d12b      	bne.n	800d3f4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d124      	bne.n	800d3f4 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f984 	bl	800d6b8 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800d3b0:	e020      	b.n	800d3f4 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800d3b2:	7bbb      	ldrb	r3, [r7, #14]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d01d      	beq.n	800d3f4 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2204      	movs	r2, #4
 800d3bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800d3c0:	e018      	b.n	800d3f4 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f867 	bl	800d496 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 f8f8 	bl	800d5be <CDC_ProcessReception>
    break;
 800d3ce:	e014      	b.n	800d3fa <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 fffa 	bl	800e3cc <USBH_ClrFeature>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800d3dc:	7bbb      	ldrb	r3, [r7, #14]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10a      	bne.n	800d3f8 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800d3ea:	e005      	b.n	800d3f8 <USBH_CDC_Process+0x120>

  default:
    break;
 800d3ec:	bf00      	nop
 800d3ee:	e004      	b.n	800d3fa <USBH_CDC_Process+0x122>
    break;
 800d3f0:	bf00      	nop
 800d3f2:	e002      	b.n	800d3fa <USBH_CDC_Process+0x122>
    break;
 800d3f4:	bf00      	nop
 800d3f6:	e000      	b.n	800d3fa <USBH_CDC_Process+0x122>
    break;
 800d3f8:	bf00      	nop

  }

  return status;
 800d3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr

0800d41a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b082      	sub	sp, #8
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	22a1      	movs	r2, #161	; 0xa1
 800d428:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2221      	movs	r2, #33	; 0x21
 800d42e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2200      	movs	r2, #0
 800d434:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2207      	movs	r2, #7
 800d440:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2207      	movs	r2, #7
 800d446:	4619      	mov	r1, r3
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f001 f99f 	bl	800e78c <USBH_CtlReq>
 800d44e:	4603      	mov	r3, r0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2221      	movs	r2, #33	; 0x21
 800d466:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2220      	movs	r2, #32
 800d46c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2207      	movs	r2, #7
 800d47e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2207      	movs	r2, #7
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f001 f980 	bl	800e78c <USBH_CtlReq>
 800d48c:	4603      	mov	r3, r0
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b086      	sub	sp, #24
 800d49a:	af02      	add	r7, sp, #8
 800d49c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d4a4:	69db      	ldr	r3, [r3, #28]
 800d4a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d002      	beq.n	800d4bc <CDC_ProcessTransmission+0x26>
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	d025      	beq.n	800d506 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800d4ba:	e07c      	b.n	800d5b6 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	8b12      	ldrh	r2, [r2, #24]
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d90c      	bls.n	800d4e2 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	69d9      	ldr	r1, [r3, #28]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	8b1a      	ldrh	r2, [r3, #24]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	7b58      	ldrb	r0, [r3, #13]
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	4603      	mov	r3, r0
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f001 fc49 	bl	800ed72 <USBH_BulkSendData>
 800d4e0:	e00c      	b.n	800d4fc <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	7b58      	ldrb	r0, [r3, #13]
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f001 fc3b 	bl	800ed72 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2202      	movs	r2, #2
 800d500:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800d504:	e057      	b.n	800d5b6 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	7b5b      	ldrb	r3, [r3, #13]
 800d50a:	4619      	mov	r1, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f00a fe5d 	bl	80181cc <USBH_LL_GetURBState>
 800d512:	4603      	mov	r3, r0
 800d514:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800d516:	7afb      	ldrb	r3, [r7, #11]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d136      	bne.n	800d58a <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	8b12      	ldrh	r2, [r2, #24]
 800d524:	4293      	cmp	r3, r2
 800d526:	d90e      	bls.n	800d546 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	8b12      	ldrh	r2, [r2, #24]
 800d530:	1a9a      	subs	r2, r3, r2
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	69db      	ldr	r3, [r3, #28]
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	8b12      	ldrh	r2, [r2, #24]
 800d53e:	441a      	add	r2, r3
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	61da      	str	r2, [r3, #28]
 800d544:	e002      	b.n	800d54c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	2b00      	cmp	r3, #0
 800d552:	d004      	beq.n	800d55e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d55c:	e006      	b.n	800d56c <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 f892 	bl	800d690 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2204      	movs	r2, #4
 800d570:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d580:	2200      	movs	r2, #0
 800d582:	4619      	mov	r1, r3
 800d584:	f003 f972 	bl	801086c <osMessagePut>
    break;
 800d588:	e014      	b.n	800d5b4 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800d58a:	7afb      	ldrb	r3, [r7, #11]
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d111      	bne.n	800d5b4 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2204      	movs	r2, #4
 800d59c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	f003 f95c 	bl	801086c <osMessagePut>
    break;
 800d5b4:	bf00      	nop
  }
}
 800d5b6:	bf00      	nop
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b086      	sub	sp, #24
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d5cc:	69db      	ldr	r3, [r3, #28]
 800d5ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	d002      	beq.n	800d5e4 <CDC_ProcessReception+0x26>
 800d5de:	2b04      	cmp	r3, #4
 800d5e0:	d00e      	beq.n	800d600 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800d5e2:	e051      	b.n	800d688 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	6a19      	ldr	r1, [r3, #32]
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	8b5a      	ldrh	r2, [r3, #26]
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	7b1b      	ldrb	r3, [r3, #12]
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f001 fbe3 	bl	800edbc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	2204      	movs	r2, #4
 800d5fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800d5fe:	e043      	b.n	800d688 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	7b1b      	ldrb	r3, [r3, #12]
 800d604:	4619      	mov	r1, r3
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f00a fde0 	bl	80181cc <USBH_LL_GetURBState>
 800d60c:	4603      	mov	r3, r0
 800d60e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800d610:	7cfb      	ldrb	r3, [r7, #19]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d137      	bne.n	800d686 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	7b1b      	ldrb	r3, [r3, #12]
 800d61a:	4619      	mov	r1, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f00a fd43 	bl	80180a8 <USBH_LL_GetLastXferSize>
 800d622:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d016      	beq.n	800d65c <CDC_ProcessReception+0x9e>
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	8b5b      	ldrh	r3, [r3, #26]
 800d632:	461a      	mov	r2, r3
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	4293      	cmp	r3, r2
 800d638:	d910      	bls.n	800d65c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	1ad2      	subs	r2, r2, r3
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	6a1a      	ldr	r2, [r3, #32]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	441a      	add	r2, r3
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	2203      	movs	r2, #3
 800d656:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d65a:	e006      	b.n	800d66a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	2200      	movs	r2, #0
 800d660:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 f81d 	bl	800d6a4 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2204      	movs	r2, #4
 800d66e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d67e:	2200      	movs	r2, #0
 800d680:	4619      	mov	r1, r3
 800d682:	f003 f8f3 	bl	801086c <osMessagePut>
    break;
 800d686:	bf00      	nop
  }
}
 800d688:	bf00      	nop
 800d68a:	3718      	adds	r7, #24
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]

}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]

}
 800d6ac:	bf00      	nop
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b083      	sub	sp, #12
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]

}
 800d6c0:	bf00      	nop
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800d6cc:	b5b0      	push	{r4, r5, r7, lr}
 800d6ce:	b090      	sub	sp, #64	; 0x40
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	e03d      	b.n	800d760 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	79fa      	ldrb	r2, [r7, #7]
 800d6e8:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f000 f837 	bl	800d770 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800d710:	4b15      	ldr	r3, [pc, #84]	; (800d768 <USBH_Init+0x9c>)
 800d712:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800d71c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d720:	2100      	movs	r1, #0
 800d722:	4618      	mov	r0, r3
 800d724:	f003 f879 	bl	801081a <osMessageCreate>
 800d728:	4602      	mov	r2, r0
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800d730:	4b0e      	ldr	r3, [pc, #56]	; (800d76c <USBH_Init+0xa0>)
 800d732:	f107 0414 	add.w	r4, r7, #20
 800d736:	461d      	mov	r5, r3
 800d738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d73a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d73c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800d744:	f107 0314 	add.w	r3, r7, #20
 800d748:	68f9      	ldr	r1, [r7, #12]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f003 f805 	bl	801075a <osThreadCreate>
 800d750:	4602      	mov	r2, r0
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f00a fbf3 	bl	8017f44 <USBH_LL_Init>

  return USBH_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3740      	adds	r7, #64	; 0x40
 800d764:	46bd      	mov	sp, r7
 800d766:	bdb0      	pop	{r4, r5, r7, pc}
 800d768:	0801f914 	.word	0x0801f914
 800d76c:	0801f930 	.word	0x0801f930

0800d770 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d770:	b480      	push	{r7}
 800d772:	b085      	sub	sp, #20
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d778:	2300      	movs	r3, #0
 800d77a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800d77c:	e008      	b.n	800d790 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	32e0      	adds	r2, #224	; 0xe0
 800d784:	2100      	movs	r1, #0
 800d786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3301      	adds	r3, #1
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b0e      	cmp	r3, #14
 800d794:	d9f3      	bls.n	800d77e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800d796:	2300      	movs	r3, #0
 800d798:	60fb      	str	r3, [r7, #12]
 800d79a:	e009      	b.n	800d7b0 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	60fb      	str	r3, [r7, #12]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7b6:	d3f1      	bcc.n	800d79c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2240      	movs	r2, #64	; 0x40
 800d7dc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d802:	b480      	push	{r7}
 800d804:	b085      	sub	sp, #20
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d017      	beq.n	800d846 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10f      	bne.n	800d840 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d826:	1c59      	adds	r1, r3, #1
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	33dc      	adds	r3, #220	; 0xdc
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4413      	add	r3, r2
 800d836:	683a      	ldr	r2, [r7, #0]
 800d838:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	73fb      	strb	r3, [r7, #15]
 800d83e:	e004      	b.n	800d84a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d840:	2302      	movs	r3, #2
 800d842:	73fb      	strb	r3, [r7, #15]
 800d844:	e001      	b.n	800d84a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d846:	2302      	movs	r3, #2
 800d848:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3714      	adds	r7, #20
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800d86e:	78fa      	ldrb	r2, [r7, #3]
 800d870:	429a      	cmp	r2, r3
 800d872:	d204      	bcs.n	800d87e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	78fa      	ldrb	r2, [r7, #3]
 800d878:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800d87c:	e001      	b.n	800d882 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d87e:	2302      	movs	r3, #2
 800d880:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800d882:	7bfb      	ldrb	r3, [r7, #15]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d890:	b480      	push	{r7}
 800d892:	b087      	sub	sp, #28
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	4608      	mov	r0, r1
 800d89a:	4611      	mov	r1, r2
 800d89c:	461a      	mov	r2, r3
 800d89e:	4603      	mov	r3, r0
 800d8a0:	70fb      	strb	r3, [r7, #3]
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	70bb      	strb	r3, [r7, #2]
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800d8b8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d8ba:	e025      	b.n	800d908 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d8bc:	7dfb      	ldrb	r3, [r7, #23]
 800d8be:	221a      	movs	r2, #26
 800d8c0:	fb02 f303 	mul.w	r3, r2, r3
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	3302      	adds	r3, #2
 800d8cc:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	795b      	ldrb	r3, [r3, #5]
 800d8d2:	78fa      	ldrb	r2, [r7, #3]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d002      	beq.n	800d8de <USBH_FindInterface+0x4e>
 800d8d8:	78fb      	ldrb	r3, [r7, #3]
 800d8da:	2bff      	cmp	r3, #255	; 0xff
 800d8dc:	d111      	bne.n	800d902 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800d8e2:	78ba      	ldrb	r2, [r7, #2]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d002      	beq.n	800d8ee <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800d8e8:	78bb      	ldrb	r3, [r7, #2]
 800d8ea:	2bff      	cmp	r3, #255	; 0xff
 800d8ec:	d109      	bne.n	800d902 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800d8f2:	787a      	ldrb	r2, [r7, #1]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d002      	beq.n	800d8fe <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d8f8:	787b      	ldrb	r3, [r7, #1]
 800d8fa:	2bff      	cmp	r3, #255	; 0xff
 800d8fc:	d101      	bne.n	800d902 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d8fe:	7dfb      	ldrb	r3, [r7, #23]
 800d900:	e006      	b.n	800d910 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d902:	7dfb      	ldrb	r3, [r7, #23]
 800d904:	3301      	adds	r3, #1
 800d906:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d908:	7dfb      	ldrb	r3, [r7, #23]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d9d6      	bls.n	800d8bc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d90e:	23ff      	movs	r3, #255	; 0xff
}
 800d910:	4618      	mov	r0, r3
 800d912:	371c      	adds	r7, #28
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f00a fb49 	bl	8017fbc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800d92a:	2101      	movs	r1, #1
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f00a fc60 	bl	80181f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	af04      	add	r7, sp, #16
 800d942:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d944:	2302      	movs	r3, #2
 800d946:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d948:	2300      	movs	r3, #0
 800d94a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fb7e 	bl	800e04e <USBH_IsPortEnabled>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10c      	bne.n	800d972 <USBH_Process+0x36>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d007      	beq.n	800d972 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b03      	cmp	r3, #3
 800d96a:	d002      	beq.n	800d972 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2203      	movs	r2, #3
 800d970:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	b2db      	uxtb	r3, r3
 800d978:	2b0b      	cmp	r3, #11
 800d97a:	f200 81ab 	bhi.w	800dcd4 <USBH_Process+0x398>
 800d97e:	a201      	add	r2, pc, #4	; (adr r2, 800d984 <USBH_Process+0x48>)
 800d980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d984:	0800d9b5 	.word	0x0800d9b5
 800d988:	0800d9f3 	.word	0x0800d9f3
 800d98c:	0800da07 	.word	0x0800da07
 800d990:	0800dcaf 	.word	0x0800dcaf
 800d994:	0800dcd5 	.word	0x0800dcd5
 800d998:	0800dab1 	.word	0x0800dab1
 800d99c:	0800dc49 	.word	0x0800dc49
 800d9a0:	0800dae1 	.word	0x0800dae1
 800d9a4:	0800db1d 	.word	0x0800db1d
 800d9a8:	0800db57 	.word	0x0800db57
 800d9ac:	0800db9f 	.word	0x0800db9f
 800d9b0:	0800dc97 	.word	0x0800dc97
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f000 818b 	beq.w	800dcd8 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800d9c8:	20c8      	movs	r0, #200	; 0xc8
 800d9ca:	f00a fc5c 	bl	8018286 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f00a fb4f 	bl	8018072 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	f002 ff3e 	bl	801086c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d9f0:	e172      	b.n	800dcd8 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	f040 816f 	bne.w	800dcdc <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2202      	movs	r2, #2
 800da02:	701a      	strb	r2, [r3, #0]
    }
    break;
 800da04:	e16a      	b.n	800dcdc <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800da06:	2064      	movs	r0, #100	; 0x64
 800da08:	f00a fc3d 	bl	8018286 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f00a fb0b 	bl	8018028 <USBH_LL_GetSpeed>
 800da12:	4603      	mov	r3, r0
 800da14:	461a      	mov	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2205      	movs	r2, #5
 800da20:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800da22:	2100      	movs	r1, #0
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f001 fa16 	bl	800ee56 <USBH_AllocPipe>
 800da2a:	4603      	mov	r3, r0
 800da2c:	461a      	mov	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800da32:	2180      	movs	r1, #128	; 0x80
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f001 fa0e 	bl	800ee56 <USBH_AllocPipe>
 800da3a:	4603      	mov	r3, r0
 800da3c:	461a      	mov	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	7919      	ldrb	r1, [r3, #4]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800da56:	b292      	uxth	r2, r2
 800da58:	9202      	str	r2, [sp, #8]
 800da5a:	2200      	movs	r2, #0
 800da5c:	9201      	str	r2, [sp, #4]
 800da5e:	9300      	str	r3, [sp, #0]
 800da60:	4603      	mov	r3, r0
 800da62:	2280      	movs	r2, #128	; 0x80
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f001 f9c7 	bl	800edf8 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	7959      	ldrb	r1, [r3, #5]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800da7e:	b292      	uxth	r2, r2
 800da80:	9202      	str	r2, [sp, #8]
 800da82:	2200      	movs	r2, #0
 800da84:	9201      	str	r2, [sp, #4]
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	4603      	mov	r3, r0
 800da8a:	2200      	movs	r2, #0
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f001 f9b3 	bl	800edf8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2201      	movs	r2, #1
 800da96:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800daa6:	2200      	movs	r2, #0
 800daa8:	4619      	mov	r1, r3
 800daaa:	f002 fedf 	bl	801086c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800daae:	e120      	b.n	800dcf2 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 f923 	bl	800dcfc <USBH_HandleEnum>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f040 8111 	bne.w	800dce0 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d103      	bne.n	800dad8 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2208      	movs	r2, #8
 800dad4:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800dad6:	e103      	b.n	800dce0 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2207      	movs	r2, #7
 800dadc:	701a      	strb	r2, [r3, #0]
    break;
 800dade:	e0ff      	b.n	800dce0 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f000 80fc 	beq.w	800dce4 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800daf2:	2101      	movs	r1, #1
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2208      	movs	r2, #8
 800dafc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2205      	movs	r2, #5
 800db02:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db12:	2200      	movs	r2, #0
 800db14:	4619      	mov	r1, r3
 800db16:	f002 fea9 	bl	801086c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800db1a:	e0e3      	b.n	800dce4 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800db22:	b29b      	uxth	r3, r3
 800db24:	4619      	mov	r1, r3
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fc09 	bl	800e33e <USBH_SetCfg>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d102      	bne.n	800db38 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2209      	movs	r2, #9
 800db36:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db4c:	2200      	movs	r2, #0
 800db4e:	4619      	mov	r1, r3
 800db50:	f002 fe8c 	bl	801086c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800db54:	e0cd      	b.n	800dcf2 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800db5c:	f003 0320 	and.w	r3, r3, #32
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00a      	beq.n	800db7a <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800db64:	2101      	movs	r1, #1
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fc0c 	bl	800e384 <USBH_SetFeature>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d106      	bne.n	800db80 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	220a      	movs	r2, #10
 800db76:	701a      	strb	r2, [r3, #0]
 800db78:	e002      	b.n	800db80 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	220a      	movs	r2, #10
 800db7e:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2201      	movs	r2, #1
 800db84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db94:	2200      	movs	r2, #0
 800db96:	4619      	mov	r1, r3
 800db98:	f002 fe68 	bl	801086c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800db9c:	e0a9      	b.n	800dcf2 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d040      	beq.n	800dc2a <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	73fb      	strb	r3, [r7, #15]
 800dbb4:	e017      	b.n	800dbe6 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800dbb6:	7bfb      	ldrb	r3, [r7, #15]
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	33dc      	adds	r3, #220	; 0xdc
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	4413      	add	r3, r2
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	791a      	ldrb	r2, [r3, #4]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d108      	bne.n	800dbe0 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800dbce:	7bfb      	ldrb	r3, [r7, #15]
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	33dc      	adds	r3, #220	; 0xdc
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	4413      	add	r3, r2
 800dbd8:	685a      	ldr	r2, [r3, #4]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	73fb      	strb	r3, [r7, #15]
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d0e4      	beq.n	800dbb6 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d016      	beq.n	800dc24 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	4798      	blx	r3
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d109      	bne.n	800dc1c <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2206      	movs	r2, #6
 800dc0c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dc14:	2103      	movs	r1, #3
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	4798      	blx	r3
 800dc1a:	e006      	b.n	800dc2a <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	220d      	movs	r2, #13
 800dc20:	701a      	strb	r2, [r3, #0]
 800dc22:	e002      	b.n	800dc2a <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	220d      	movs	r2, #13
 800dc28:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2205      	movs	r2, #5
 800dc2e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc3e:	2200      	movs	r2, #0
 800dc40:	4619      	mov	r1, r3
 800dc42:	f002 fe13 	bl	801086c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800dc46:	e054      	b.n	800dcf2 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00f      	beq.n	800dc72 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dc58:	691b      	ldr	r3, [r3, #16]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	4798      	blx	r3
 800dc5e:	4603      	mov	r3, r0
 800dc60:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d13e      	bne.n	800dce8 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	220b      	movs	r2, #11
 800dc6e:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800dc70:	e03a      	b.n	800dce8 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	220d      	movs	r2, #13
 800dc76:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2205      	movs	r2, #5
 800dc7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4619      	mov	r1, r3
 800dc90:	f002 fdec 	bl	801086c <osMessagePut>
    break;
 800dc94:	e028      	b.n	800dce8 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d025      	beq.n	800dcec <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dca6:	695b      	ldr	r3, [r3, #20]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	4798      	blx	r3
    }
    break;
 800dcac:	e01e      	b.n	800dcec <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7ff fd5e 	bl	800d770 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d018      	beq.n	800dcf0 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2200      	movs	r2, #0
 800dcce:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800dcd2:	e00d      	b.n	800dcf0 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800dcd4:	bf00      	nop
 800dcd6:	e00c      	b.n	800dcf2 <USBH_Process+0x3b6>
    break;
 800dcd8:	bf00      	nop
 800dcda:	e00a      	b.n	800dcf2 <USBH_Process+0x3b6>
    break;
 800dcdc:	bf00      	nop
 800dcde:	e008      	b.n	800dcf2 <USBH_Process+0x3b6>
    break;
 800dce0:	bf00      	nop
 800dce2:	e006      	b.n	800dcf2 <USBH_Process+0x3b6>
    break;
 800dce4:	bf00      	nop
 800dce6:	e004      	b.n	800dcf2 <USBH_Process+0x3b6>
    break;
 800dce8:	bf00      	nop
 800dcea:	e002      	b.n	800dcf2 <USBH_Process+0x3b6>
    break;
 800dcec:	bf00      	nop
 800dcee:	e000      	b.n	800dcf2 <USBH_Process+0x3b6>
    break;
 800dcf0:	bf00      	nop
  }
 return USBH_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b088      	sub	sp, #32
 800dd00:	af04      	add	r7, sp, #16
 800dd02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800dd04:	2301      	movs	r3, #1
 800dd06:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	785b      	ldrb	r3, [r3, #1]
 800dd0c:	2b07      	cmp	r3, #7
 800dd0e:	f200 8132 	bhi.w	800df76 <USBH_HandleEnum+0x27a>
 800dd12:	a201      	add	r2, pc, #4	; (adr r2, 800dd18 <USBH_HandleEnum+0x1c>)
 800dd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd18:	0800dd39 	.word	0x0800dd39
 800dd1c:	0800ddab 	.word	0x0800ddab
 800dd20:	0800ddc3 	.word	0x0800ddc3
 800dd24:	0800de39 	.word	0x0800de39
 800dd28:	0800de51 	.word	0x0800de51
 800dd2c:	0800de6f 	.word	0x0800de6f
 800dd30:	0800dedb 	.word	0x0800dedb
 800dd34:	0800df2b 	.word	0x0800df2b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800dd38:	2108      	movs	r1, #8
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 fa2f 	bl	800e19e <USBH_Get_DevDesc>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f040 8119 	bne.w	800df7a <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2201      	movs	r2, #1
 800dd56:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	7919      	ldrb	r1, [r3, #4]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800dd6c:	b292      	uxth	r2, r2
 800dd6e:	9202      	str	r2, [sp, #8]
 800dd70:	2200      	movs	r2, #0
 800dd72:	9201      	str	r2, [sp, #4]
 800dd74:	9300      	str	r3, [sp, #0]
 800dd76:	4603      	mov	r3, r0
 800dd78:	2280      	movs	r2, #128	; 0x80
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f001 f83c 	bl	800edf8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	7959      	ldrb	r1, [r3, #5]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800dd94:	b292      	uxth	r2, r2
 800dd96:	9202      	str	r2, [sp, #8]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	9201      	str	r2, [sp, #4]
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2200      	movs	r2, #0
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f001 f828 	bl	800edf8 <USBH_OpenPipe>

    }
    break;
 800dda8:	e0e7      	b.n	800df7a <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800ddaa:	2112      	movs	r1, #18
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 f9f6 	bl	800e19e <USBH_Get_DevDesc>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f040 80e2 	bne.w	800df7e <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2202      	movs	r2, #2
 800ddbe:	705a      	strb	r2, [r3, #1]

    }
    break;
 800ddc0:	e0dd      	b.n	800df7e <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800ddc2:	2101      	movs	r1, #1
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 fa96 	bl	800e2f6 <USBH_SetAddress>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f040 80d8 	bne.w	800df82 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800ddd2:	2002      	movs	r0, #2
 800ddd4:	f00a fa57 	bl	8018286 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2203      	movs	r2, #3
 800dde4:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	7919      	ldrb	r1, [r3, #4]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800ddfa:	b292      	uxth	r2, r2
 800ddfc:	9202      	str	r2, [sp, #8]
 800ddfe:	2200      	movs	r2, #0
 800de00:	9201      	str	r2, [sp, #4]
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	4603      	mov	r3, r0
 800de06:	2280      	movs	r2, #128	; 0x80
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 fff5 	bl	800edf8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	7959      	ldrb	r1, [r3, #5]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800de22:	b292      	uxth	r2, r2
 800de24:	9202      	str	r2, [sp, #8]
 800de26:	2200      	movs	r2, #0
 800de28:	9201      	str	r2, [sp, #4]
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	4603      	mov	r3, r0
 800de2e:	2200      	movs	r2, #0
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 ffe1 	bl	800edf8 <USBH_OpenPipe>
    }
    break;
 800de36:	e0a4      	b.n	800df82 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800de38:	2109      	movs	r1, #9
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f9d7 	bl	800e1ee <USBH_Get_CfgDesc>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	f040 809f 	bne.w	800df86 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2204      	movs	r2, #4
 800de4c:	705a      	strb	r2, [r3, #1]
    }
    break;
 800de4e:	e09a      	b.n	800df86 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800de56:	4619      	mov	r1, r3
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 f9c8 	bl	800e1ee <USBH_Get_CfgDesc>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	f040 8092 	bne.w	800df8a <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2205      	movs	r2, #5
 800de6a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800de6c:	e08d      	b.n	800df8a <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800de74:	2b00      	cmp	r3, #0
 800de76:	d01e      	beq.n	800deb6 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800de84:	23ff      	movs	r3, #255	; 0xff
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f9d5 	bl	800e236 <USBH_Get_StringDesc>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d17d      	bne.n	800df8e <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2206      	movs	r2, #6
 800de96:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2205      	movs	r2, #5
 800de9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800deac:	2200      	movs	r2, #0
 800deae:	4619      	mov	r1, r3
 800deb0:	f002 fcdc 	bl	801086c <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800deb4:	e06b      	b.n	800df8e <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2206      	movs	r2, #6
 800deba:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2205      	movs	r2, #5
 800dec0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ded0:	2200      	movs	r2, #0
 800ded2:	4619      	mov	r1, r3
 800ded4:	f002 fcca 	bl	801086c <osMessagePut>
    break;
 800ded8:	e059      	b.n	800df8e <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d010      	beq.n	800df06 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800def0:	23ff      	movs	r3, #255	; 0xff
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 f99f 	bl	800e236 <USBH_Get_StringDesc>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d149      	bne.n	800df92 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2207      	movs	r2, #7
 800df02:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800df04:	e045      	b.n	800df92 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2207      	movs	r2, #7
 800df0a:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2205      	movs	r2, #5
 800df10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df20:	2200      	movs	r2, #0
 800df22:	4619      	mov	r1, r3
 800df24:	f002 fca2 	bl	801086c <osMessagePut>
    break;
 800df28:	e033      	b.n	800df92 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00f      	beq.n	800df54 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800df40:	23ff      	movs	r3, #255	; 0xff
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f977 	bl	800e236 <USBH_Get_StringDesc>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d123      	bne.n	800df96 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800df52:	e020      	b.n	800df96 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800df54:	2300      	movs	r3, #0
 800df56:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2205      	movs	r2, #5
 800df5c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df6c:	2200      	movs	r2, #0
 800df6e:	4619      	mov	r1, r3
 800df70:	f002 fc7c 	bl	801086c <osMessagePut>
    break;
 800df74:	e00f      	b.n	800df96 <USBH_HandleEnum+0x29a>

  default:
    break;
 800df76:	bf00      	nop
 800df78:	e00e      	b.n	800df98 <USBH_HandleEnum+0x29c>
    break;
 800df7a:	bf00      	nop
 800df7c:	e00c      	b.n	800df98 <USBH_HandleEnum+0x29c>
    break;
 800df7e:	bf00      	nop
 800df80:	e00a      	b.n	800df98 <USBH_HandleEnum+0x29c>
    break;
 800df82:	bf00      	nop
 800df84:	e008      	b.n	800df98 <USBH_HandleEnum+0x29c>
    break;
 800df86:	bf00      	nop
 800df88:	e006      	b.n	800df98 <USBH_HandleEnum+0x29c>
    break;
 800df8a:	bf00      	nop
 800df8c:	e004      	b.n	800df98 <USBH_HandleEnum+0x29c>
    break;
 800df8e:	bf00      	nop
 800df90:	e002      	b.n	800df98 <USBH_HandleEnum+0x29c>
    break;
 800df92:	bf00      	nop
 800df94:	e000      	b.n	800df98 <USBH_HandleEnum+0x29c>
    break;
 800df96:	bf00      	nop
  }
  return Status;
 800df98:	7bfb      	ldrb	r3, [r7, #15]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop

0800dfa4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800dfb6:	bf00      	nop
 800dfb8:	370c      	adds	r7, #12
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr

0800dfc2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b082      	sub	sp, #8
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dfd0:	1c5a      	adds	r2, r3, #1
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 f804 	bl	800dfe6 <USBH_HandleSof>
}
 800dfde:	bf00      	nop
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b082      	sub	sp, #8
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	2b0b      	cmp	r3, #11
 800dff6:	d10a      	bne.n	800e00e <USBH_HandleSof+0x28>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d005      	beq.n	800e00e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e008:	699b      	ldr	r3, [r3, #24]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	4798      	blx	r3
  }
}
 800e00e:	bf00      	nop
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800e016:	b480      	push	{r7}
 800e018:	b083      	sub	sp, #12
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2201      	movs	r2, #1
 800e022:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800e026:	bf00      	nop
}
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800e032:	b480      	push	{r7}
 800e034:	b083      	sub	sp, #12
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800e042:	bf00      	nop
}
 800e044:	370c      	adds	r7, #12
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr

0800e04e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800e04e:	b480      	push	{r7}
 800e050:	b083      	sub	sp, #12
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	b2db      	uxtb	r3, r3
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10f      	bne.n	800e09a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00e      	beq.n	800e0aa <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e092:	2104      	movs	r1, #4
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	4798      	blx	r3
 800e098:	e007      	b.n	800e0aa <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d102      	bne.n	800e0aa <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e0be:	2200      	movs	r2, #0
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	f002 fbd3 	bl	801086c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f009 ff8a 	bl	8017ff2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	791b      	ldrb	r3, [r3, #4]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 fed4 	bl	800ee92 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	795b      	ldrb	r3, [r3, #5]
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 fece 	bl	800ee92 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e104:	2b00      	cmp	r3, #0
 800e106:	d005      	beq.n	800e114 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e10e:	2105      	movs	r1, #5
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f009 ff51 	bl	8017fbc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2203      	movs	r2, #3
 800e11e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e134:	2200      	movs	r2, #0
 800e136:	4619      	mov	r1, r3
 800e138:	f002 fb98 	bl	801086c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e13c:	2300      	movs	r3, #0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800e146:	b580      	push	{r7, lr}
 800e148:	b086      	sub	sp, #24
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800e154:	f107 030c 	add.w	r3, r7, #12
 800e158:	f04f 32ff 	mov.w	r2, #4294967295
 800e15c:	4618      	mov	r0, r3
 800e15e:	f002 fbc5 	bl	80108ec <osMessageGet>
    if(event.status == osEventMessage)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2b10      	cmp	r3, #16
 800e166:	d1f2      	bne.n	800e14e <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7ff fbe7 	bl	800d93c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e16e:	e7ee      	b.n	800e14e <USBH_Process_OS+0x8>

0800e170 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e18c:	2200      	movs	r2, #0
 800e18e:	4619      	mov	r1, r3
 800e190:	f002 fb6c 	bl	801086c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b086      	sub	sp, #24
 800e1a2:	af02      	add	r7, sp, #8
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800e1b0:	78fb      	ldrb	r3, [r7, #3]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1bc:	2100      	movs	r1, #0
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 f864 	bl	800e28c <USBH_GetDescriptor>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	73fb      	strb	r3, [r7, #15]
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10a      	bne.n	800e1e4 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f203 3022 	addw	r0, r3, #802	; 0x322
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e1da:	78fa      	ldrb	r2, [r7, #3]
 800e1dc:	b292      	uxth	r2, r2
 800e1de:	4619      	mov	r1, r3
 800e1e0:	f000 f918 	bl	800e414 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b086      	sub	sp, #24
 800e1f2:	af02      	add	r7, sp, #8
 800e1f4:	6078      	str	r0, [r7, #4]
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	331c      	adds	r3, #28
 800e1fe:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800e200:	887b      	ldrh	r3, [r7, #2]
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e20a:	2100      	movs	r1, #0
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 f83d 	bl	800e28c <USBH_GetDescriptor>
 800e212:	4603      	mov	r3, r0
 800e214:	72fb      	strb	r3, [r7, #11]
 800e216:	7afb      	ldrb	r3, [r7, #11]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d107      	bne.n	800e22c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e222:	887a      	ldrh	r2, [r7, #2]
 800e224:	68f9      	ldr	r1, [r7, #12]
 800e226:	4618      	mov	r0, r3
 800e228:	f000 f964 	bl	800e4f4 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800e22c:	7afb      	ldrb	r3, [r7, #11]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b088      	sub	sp, #32
 800e23a:	af02      	add	r7, sp, #8
 800e23c:	60f8      	str	r0, [r7, #12]
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	461a      	mov	r2, r3
 800e242:	460b      	mov	r3, r1
 800e244:	72fb      	strb	r3, [r7, #11]
 800e246:	4613      	mov	r3, r2
 800e248:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800e24a:	7afb      	ldrb	r3, [r7, #11]
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e252:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800e25a:	893b      	ldrh	r3, [r7, #8]
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	460b      	mov	r3, r1
 800e260:	2100      	movs	r1, #0
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f000 f812 	bl	800e28c <USBH_GetDescriptor>
 800e268:	4603      	mov	r3, r0
 800e26a:	75fb      	strb	r3, [r7, #23]
 800e26c:	7dfb      	ldrb	r3, [r7, #23]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d107      	bne.n	800e282 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e278:	893a      	ldrh	r2, [r7, #8]
 800e27a:	6879      	ldr	r1, [r7, #4]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f000 fa37 	bl	800e6f0 <USBH_ParseStringDesc>
  }
  return status;
 800e282:	7dfb      	ldrb	r3, [r7, #23]
}
 800e284:	4618      	mov	r0, r3
 800e286:	3718      	adds	r7, #24
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	607b      	str	r3, [r7, #4]
 800e296:	460b      	mov	r3, r1
 800e298:	72fb      	strb	r3, [r7, #11]
 800e29a:	4613      	mov	r3, r2
 800e29c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	789b      	ldrb	r3, [r3, #2]
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d11c      	bne.n	800e2e0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e2a6:	7afb      	ldrb	r3, [r7, #11]
 800e2a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2206      	movs	r2, #6
 800e2b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	893a      	ldrh	r2, [r7, #8]
 800e2bc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e2be:	893b      	ldrh	r3, [r7, #8]
 800e2c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e2c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2c8:	d104      	bne.n	800e2d4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f240 4209 	movw	r2, #1033	; 0x409
 800e2d0:	829a      	strh	r2, [r3, #20]
 800e2d2:	e002      	b.n	800e2da <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	8b3a      	ldrh	r2, [r7, #24]
 800e2de:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800e2e0:	8b3b      	ldrh	r3, [r7, #24]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	6879      	ldr	r1, [r7, #4]
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f000 fa50 	bl	800e78c <USBH_CtlReq>
 800e2ec:	4603      	mov	r3, r0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	460b      	mov	r3, r1
 800e300:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	789b      	ldrb	r3, [r3, #2]
 800e306:	2b01      	cmp	r3, #1
 800e308:	d10f      	bne.n	800e32a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2200      	movs	r2, #0
 800e30e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2205      	movs	r2, #5
 800e314:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e316:	78fb      	ldrb	r3, [r7, #3]
 800e318:	b29a      	uxth	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e32a:	2200      	movs	r2, #0
 800e32c:	2100      	movs	r1, #0
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 fa2c 	bl	800e78c <USBH_CtlReq>
 800e334:	4603      	mov	r3, r0
}
 800e336:	4618      	mov	r0, r3
 800e338:	3708      	adds	r7, #8
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b082      	sub	sp, #8
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	789b      	ldrb	r3, [r3, #2]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d10e      	bne.n	800e370 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2209      	movs	r2, #9
 800e35c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	887a      	ldrh	r2, [r7, #2]
 800e362:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800e370:	2200      	movs	r2, #0
 800e372:	2100      	movs	r1, #0
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fa09 	bl	800e78c <USBH_CtlReq>
 800e37a:	4603      	mov	r3, r0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	460b      	mov	r3, r1
 800e38e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	789b      	ldrb	r3, [r3, #2]
 800e394:	2b01      	cmp	r3, #1
 800e396:	d10f      	bne.n	800e3b8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2200      	movs	r2, #0
 800e39c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2203      	movs	r2, #3
 800e3a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e3a4:	78fb      	ldrb	r3, [r7, #3]
 800e3a6:	b29a      	uxth	r2, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f9e5 	bl	800e78c <USBH_CtlReq>
 800e3c2:	4603      	mov	r3, r0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	789b      	ldrb	r3, [r3, #2]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d10f      	bne.n	800e400 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e3f2:	78fb      	ldrb	r3, [r7, #3]
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800e400:	2200      	movs	r2, #0
 800e402:	2100      	movs	r1, #0
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f9c1 	bl	800e78c <USBH_CtlReq>
 800e40a:	4603      	mov	r3, r0
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3708      	adds	r7, #8
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	4613      	mov	r3, r2
 800e420:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	781a      	ldrb	r2, [r3, #0]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	785a      	ldrb	r2, [r3, #1]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	3302      	adds	r3, #2
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	b29a      	uxth	r2, r3
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	3303      	adds	r3, #3
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	b29b      	uxth	r3, r3
 800e442:	021b      	lsls	r3, r3, #8
 800e444:	b29b      	uxth	r3, r3
 800e446:	4313      	orrs	r3, r2
 800e448:	b29a      	uxth	r2, r3
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	791a      	ldrb	r2, [r3, #4]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	795a      	ldrb	r2, [r3, #5]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	799a      	ldrb	r2, [r3, #6]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	79da      	ldrb	r2, [r3, #7]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800e46e:	88fb      	ldrh	r3, [r7, #6]
 800e470:	2b08      	cmp	r3, #8
 800e472:	d939      	bls.n	800e4e8 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	3308      	adds	r3, #8
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	3309      	adds	r3, #9
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	b29b      	uxth	r3, r3
 800e484:	021b      	lsls	r3, r3, #8
 800e486:	b29b      	uxth	r3, r3
 800e488:	4313      	orrs	r3, r2
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	330a      	adds	r3, #10
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	b29a      	uxth	r2, r3
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	330b      	adds	r3, #11
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	021b      	lsls	r3, r3, #8
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	330c      	adds	r3, #12
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	330d      	adds	r3, #13
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	021b      	lsls	r3, r3, #8
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	7b9a      	ldrb	r2, [r3, #14]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	7bda      	ldrb	r2, [r3, #15]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	7c1a      	ldrb	r2, [r3, #16]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	7c5a      	ldrb	r2, [r3, #17]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	745a      	strb	r2, [r3, #17]
  }
}
 800e4e8:	bf00      	nop
 800e4ea:	3714      	adds	r7, #20
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b08a      	sub	sp, #40	; 0x28
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	4613      	mov	r3, r2
 800e500:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e506:	2300      	movs	r3, #0
 800e508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800e50c:	2300      	movs	r3, #0
 800e50e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	781a      	ldrb	r2, [r3, #0]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	785a      	ldrb	r2, [r3, #1]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	3302      	adds	r3, #2
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	3303      	adds	r3, #3
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	b29b      	uxth	r3, r3
 800e536:	021b      	lsls	r3, r3, #8
 800e538:	b29b      	uxth	r3, r3
 800e53a:	4313      	orrs	r3, r2
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	791a      	ldrb	r2, [r3, #4]
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	795a      	ldrb	r2, [r3, #5]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	799a      	ldrb	r2, [r3, #6]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	79da      	ldrb	r2, [r3, #7]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	7a1a      	ldrb	r2, [r3, #8]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e56a:	88fb      	ldrh	r3, [r7, #6]
 800e56c:	2b09      	cmp	r3, #9
 800e56e:	d95f      	bls.n	800e630 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e570:	2309      	movs	r3, #9
 800e572:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e574:	2300      	movs	r3, #0
 800e576:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e578:	e051      	b.n	800e61e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e57a:	f107 0316 	add.w	r3, r7, #22
 800e57e:	4619      	mov	r1, r3
 800e580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e582:	f000 f8e8 	bl	800e756 <USBH_GetNextDesc>
 800e586:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	785b      	ldrb	r3, [r3, #1]
 800e58c:	2b04      	cmp	r3, #4
 800e58e:	d146      	bne.n	800e61e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e594:	221a      	movs	r2, #26
 800e596:	fb02 f303 	mul.w	r3, r2, r3
 800e59a:	3308      	adds	r3, #8
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	4413      	add	r3, r2
 800e5a0:	3302      	adds	r3, #2
 800e5a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800e5a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5a6:	69f8      	ldr	r0, [r7, #28]
 800e5a8:	f000 f846 	bl	800e638 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e5b6:	e022      	b.n	800e5fe <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800e5b8:	f107 0316 	add.w	r3, r7, #22
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5c0:	f000 f8c9 	bl	800e756 <USBH_GetNextDesc>
 800e5c4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	785b      	ldrb	r3, [r3, #1]
 800e5ca:	2b05      	cmp	r3, #5
 800e5cc:	d117      	bne.n	800e5fe <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e5ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5d2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e5d6:	3201      	adds	r2, #1
 800e5d8:	00d2      	lsls	r2, r2, #3
 800e5da:	211a      	movs	r1, #26
 800e5dc:	fb01 f303 	mul.w	r3, r1, r3
 800e5e0:	4413      	add	r3, r2
 800e5e2:	3308      	adds	r3, #8
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800e5ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5ee:	69b8      	ldr	r0, [r7, #24]
 800e5f0:	f000 f851 	bl	800e696 <USBH_ParseEPDesc>
            ep_ix++;
 800e5f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	791b      	ldrb	r3, [r3, #4]
 800e602:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e606:	429a      	cmp	r2, r3
 800e608:	d204      	bcs.n	800e614 <USBH_ParseCfgDesc+0x120>
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	885a      	ldrh	r2, [r3, #2]
 800e60e:	8afb      	ldrh	r3, [r7, #22]
 800e610:	429a      	cmp	r2, r3
 800e612:	d8d1      	bhi.n	800e5b8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e618:	3301      	adds	r3, #1
 800e61a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e61e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e622:	2b01      	cmp	r3, #1
 800e624:	d804      	bhi.n	800e630 <USBH_ParseCfgDesc+0x13c>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	885a      	ldrh	r2, [r3, #2]
 800e62a:	8afb      	ldrh	r3, [r7, #22]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d8a4      	bhi.n	800e57a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e630:	bf00      	nop
 800e632:	3728      	adds	r7, #40	; 0x28
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800e638:	b480      	push	{r7}
 800e63a:	b083      	sub	sp, #12
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	781a      	ldrb	r2, [r3, #0]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	785a      	ldrb	r2, [r3, #1]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	789a      	ldrb	r2, [r3, #2]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	78da      	ldrb	r2, [r3, #3]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	791a      	ldrb	r2, [r3, #4]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	795a      	ldrb	r2, [r3, #5]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	799a      	ldrb	r2, [r3, #6]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	79da      	ldrb	r2, [r3, #7]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	7a1a      	ldrb	r2, [r3, #8]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	721a      	strb	r2, [r3, #8]
}
 800e68a:	bf00      	nop
 800e68c:	370c      	adds	r7, #12
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr

0800e696 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800e696:	b480      	push	{r7}
 800e698:	b083      	sub	sp, #12
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
 800e69e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	781a      	ldrb	r2, [r3, #0]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	785a      	ldrb	r2, [r3, #1]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	789a      	ldrb	r2, [r3, #2]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	78da      	ldrb	r2, [r3, #3]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	3305      	adds	r3, #5
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	021b      	lsls	r3, r3, #8
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	799a      	ldrb	r2, [r3, #6]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	719a      	strb	r2, [r3, #6]
}
 800e6e4:	bf00      	nop
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b087      	sub	sp, #28
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3301      	adds	r3, #1
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2b03      	cmp	r3, #3
 800e706:	d120      	bne.n	800e74a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	1e9a      	subs	r2, r3, #2
 800e70e:	88fb      	ldrh	r3, [r7, #6]
 800e710:	4293      	cmp	r3, r2
 800e712:	bf28      	it	cs
 800e714:	4613      	movcs	r3, r2
 800e716:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	3302      	adds	r3, #2
 800e71c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e71e:	2300      	movs	r3, #0
 800e720:	82fb      	strh	r3, [r7, #22]
 800e722:	e00b      	b.n	800e73c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e724:	8afb      	ldrh	r3, [r7, #22]
 800e726:	68fa      	ldr	r2, [r7, #12]
 800e728:	4413      	add	r3, r2
 800e72a:	781a      	ldrb	r2, [r3, #0]
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	3301      	adds	r3, #1
 800e734:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e736:	8afb      	ldrh	r3, [r7, #22]
 800e738:	3302      	adds	r3, #2
 800e73a:	82fb      	strh	r3, [r7, #22]
 800e73c:	8afa      	ldrh	r2, [r7, #22]
 800e73e:	8abb      	ldrh	r3, [r7, #20]
 800e740:	429a      	cmp	r2, r3
 800e742:	d3ef      	bcc.n	800e724 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	2200      	movs	r2, #0
 800e748:	701a      	strb	r2, [r3, #0]
  }
}
 800e74a:	bf00      	nop
 800e74c:	371c      	adds	r7, #28
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800e756:	b480      	push	{r7}
 800e758:	b085      	sub	sp, #20
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	881a      	ldrh	r2, [r3, #0]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	b29b      	uxth	r3, r3
 800e76a:	4413      	add	r3, r2
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	4413      	add	r3, r2
 800e77c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800e77e:	68fb      	ldr	r3, [r7, #12]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b086      	sub	sp, #24
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	4613      	mov	r3, r2
 800e798:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e79a:	2301      	movs	r3, #1
 800e79c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	789b      	ldrb	r3, [r3, #2]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d002      	beq.n	800e7ac <USBH_CtlReq+0x20>
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	d01d      	beq.n	800e7e6 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800e7aa:	e042      	b.n	800e832 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	88fa      	ldrh	r2, [r7, #6]
 800e7b6:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2202      	movs	r2, #2
 800e7c2:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2203      	movs	r2, #3
 800e7cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7dc:	2200      	movs	r2, #0
 800e7de:	4619      	mov	r1, r3
 800e7e0:	f002 f844 	bl	801086c <osMessagePut>
    break;
 800e7e4:	e025      	b.n	800e832 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f000 f828 	bl	800e83c <USBH_HandleControl>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800e7f0:	7dfb      	ldrb	r3, [r7, #23]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d108      	bne.n	800e808 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	75fb      	strb	r3, [r7, #23]
    break;
 800e806:	e013      	b.n	800e830 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800e808:	7dfb      	ldrb	r3, [r7, #23]
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	d108      	bne.n	800e820 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2201      	movs	r2, #1
 800e812:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800e81a:	2303      	movs	r3, #3
 800e81c:	75fb      	strb	r3, [r7, #23]
    break;
 800e81e:	e007      	b.n	800e830 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800e820:	7dfb      	ldrb	r3, [r7, #23]
 800e822:	2b02      	cmp	r3, #2
 800e824:	d104      	bne.n	800e830 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2201      	movs	r2, #1
 800e82a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800e82c:	2302      	movs	r3, #2
 800e82e:	75fb      	strb	r3, [r7, #23]
    break;
 800e830:	bf00      	nop
  }
  return status;
 800e832:	7dfb      	ldrb	r3, [r7, #23]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3718      	adds	r7, #24
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af02      	add	r7, sp, #8
 800e842:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e844:	2301      	movs	r3, #1
 800e846:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e848:	2300      	movs	r3, #0
 800e84a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	7e1b      	ldrb	r3, [r3, #24]
 800e850:	3b01      	subs	r3, #1
 800e852:	2b0a      	cmp	r3, #10
 800e854:	f200 821f 	bhi.w	800ec96 <USBH_HandleControl+0x45a>
 800e858:	a201      	add	r2, pc, #4	; (adr r2, 800e860 <USBH_HandleControl+0x24>)
 800e85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e85e:	bf00      	nop
 800e860:	0800e88d 	.word	0x0800e88d
 800e864:	0800e8a7 	.word	0x0800e8a7
 800e868:	0800e949 	.word	0x0800e949
 800e86c:	0800e96f 	.word	0x0800e96f
 800e870:	0800e9fb 	.word	0x0800e9fb
 800e874:	0800ea27 	.word	0x0800ea27
 800e878:	0800eae9 	.word	0x0800eae9
 800e87c:	0800eb0b 	.word	0x0800eb0b
 800e880:	0800eb9d 	.word	0x0800eb9d
 800e884:	0800ebc5 	.word	0x0800ebc5
 800e888:	0800ec57 	.word	0x0800ec57
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f103 0110 	add.w	r1, r3, #16
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	795b      	ldrb	r3, [r3, #5]
 800e896:	461a      	mov	r2, r3
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 fa0d 	bl	800ecb8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2202      	movs	r2, #2
 800e8a2:	761a      	strb	r2, [r3, #24]
    break;
 800e8a4:	e202      	b.n	800ecac <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	795b      	ldrb	r3, [r3, #5]
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f009 fc8d 	bl	80181cc <USBH_LL_GetURBState>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800e8b6:	7bbb      	ldrb	r3, [r7, #14]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d12c      	bne.n	800e916 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	7c1b      	ldrb	r3, [r3, #16]
 800e8c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8c4:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	8adb      	ldrh	r3, [r3, #22]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00a      	beq.n	800e8e4 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800e8ce:	7b7b      	ldrb	r3, [r7, #13]
 800e8d0:	2b80      	cmp	r3, #128	; 0x80
 800e8d2:	d103      	bne.n	800e8dc <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2203      	movs	r2, #3
 800e8d8:	761a      	strb	r2, [r3, #24]
 800e8da:	e00d      	b.n	800e8f8 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2205      	movs	r2, #5
 800e8e0:	761a      	strb	r2, [r3, #24]
 800e8e2:	e009      	b.n	800e8f8 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800e8e4:	7b7b      	ldrb	r3, [r7, #13]
 800e8e6:	2b80      	cmp	r3, #128	; 0x80
 800e8e8:	d103      	bne.n	800e8f2 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2209      	movs	r2, #9
 800e8ee:	761a      	strb	r2, [r3, #24]
 800e8f0:	e002      	b.n	800e8f8 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2207      	movs	r2, #7
 800e8f6:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2203      	movs	r2, #3
 800e8fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e90c:	2200      	movs	r2, #0
 800e90e:	4619      	mov	r1, r3
 800e910:	f001 ffac 	bl	801086c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e914:	e1c1      	b.n	800ec9a <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e916:	7bbb      	ldrb	r3, [r7, #14]
 800e918:	2b04      	cmp	r3, #4
 800e91a:	d003      	beq.n	800e924 <USBH_HandleControl+0xe8>
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
 800e91e:	2b02      	cmp	r3, #2
 800e920:	f040 81bb 	bne.w	800ec9a <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	220b      	movs	r2, #11
 800e928:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2203      	movs	r2, #3
 800e92e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e93e:	2200      	movs	r2, #0
 800e940:	4619      	mov	r1, r3
 800e942:	f001 ff93 	bl	801086c <osMessagePut>
    break;
 800e946:	e1a8      	b.n	800ec9a <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800e94e:	b29a      	uxth	r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6899      	ldr	r1, [r3, #8]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	899a      	ldrh	r2, [r3, #12]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	791b      	ldrb	r3, [r3, #4]
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 f9e8 	bl	800ed36 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2204      	movs	r2, #4
 800e96a:	761a      	strb	r2, [r3, #24]
    break;
 800e96c:	e19e      	b.n	800ecac <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	791b      	ldrb	r3, [r3, #4]
 800e972:	4619      	mov	r1, r3
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f009 fc29 	bl	80181cc <USBH_LL_GetURBState>
 800e97a:	4603      	mov	r3, r0
 800e97c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800e97e:	7bbb      	ldrb	r3, [r7, #14]
 800e980:	2b01      	cmp	r3, #1
 800e982:	d110      	bne.n	800e9a6 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2209      	movs	r2, #9
 800e988:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2203      	movs	r2, #3
 800e98e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e99e:	2200      	movs	r2, #0
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	f001 ff63 	bl	801086c <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800e9a6:	7bbb      	ldrb	r3, [r7, #14]
 800e9a8:	2b05      	cmp	r3, #5
 800e9aa:	d110      	bne.n	800e9ce <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800e9ac:	2303      	movs	r3, #3
 800e9ae:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2203      	movs	r2, #3
 800e9b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	f001 ff50 	bl	801086c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e9cc:	e167      	b.n	800ec9e <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800e9ce:	7bbb      	ldrb	r3, [r7, #14]
 800e9d0:	2b04      	cmp	r3, #4
 800e9d2:	f040 8164 	bne.w	800ec9e <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	220b      	movs	r2, #11
 800e9da:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2203      	movs	r2, #3
 800e9e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	f001 ff3a 	bl	801086c <osMessagePut>
    break;
 800e9f8:	e151      	b.n	800ec9e <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6899      	ldr	r1, [r3, #8]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	899a      	ldrh	r2, [r3, #12]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	7958      	ldrb	r0, [r3, #5]
 800ea06:	2301      	movs	r3, #1
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 f96d 	bl	800ecec <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ea18:	b29a      	uxth	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2206      	movs	r2, #6
 800ea22:	761a      	strb	r2, [r3, #24]
    break;
 800ea24:	e142      	b.n	800ecac <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	795b      	ldrb	r3, [r3, #5]
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f009 fbcd 	bl	80181cc <USBH_LL_GetURBState>
 800ea32:	4603      	mov	r3, r0
 800ea34:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800ea36:	7bbb      	ldrb	r3, [r7, #14]
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d111      	bne.n	800ea60 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2207      	movs	r2, #7
 800ea40:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2203      	movs	r2, #3
 800ea46:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea56:	2200      	movs	r2, #0
 800ea58:	4619      	mov	r1, r3
 800ea5a:	f001 ff07 	bl	801086c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ea5e:	e120      	b.n	800eca2 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800ea60:	7bbb      	ldrb	r3, [r7, #14]
 800ea62:	2b05      	cmp	r3, #5
 800ea64:	d113      	bne.n	800ea8e <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	220c      	movs	r2, #12
 800ea6a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800ea6c:	2303      	movs	r3, #3
 800ea6e:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2203      	movs	r2, #3
 800ea74:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea84:	2200      	movs	r2, #0
 800ea86:	4619      	mov	r1, r3
 800ea88:	f001 fef0 	bl	801086c <osMessagePut>
    break;
 800ea8c:	e109      	b.n	800eca2 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800ea8e:	7bbb      	ldrb	r3, [r7, #14]
 800ea90:	2b02      	cmp	r3, #2
 800ea92:	d111      	bne.n	800eab8 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2205      	movs	r2, #5
 800ea98:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2203      	movs	r2, #3
 800ea9e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eaae:	2200      	movs	r2, #0
 800eab0:	4619      	mov	r1, r3
 800eab2:	f001 fedb 	bl	801086c <osMessagePut>
    break;
 800eab6:	e0f4      	b.n	800eca2 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800eab8:	7bbb      	ldrb	r3, [r7, #14]
 800eaba:	2b04      	cmp	r3, #4
 800eabc:	f040 80f1 	bne.w	800eca2 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	220b      	movs	r2, #11
 800eac4:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800eac6:	2302      	movs	r3, #2
 800eac8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2203      	movs	r2, #3
 800eace:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eade:	2200      	movs	r2, #0
 800eae0:	4619      	mov	r1, r3
 800eae2:	f001 fec3 	bl	801086c <osMessagePut>
    break;
 800eae6:	e0dc      	b.n	800eca2 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	791b      	ldrb	r3, [r3, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	2100      	movs	r1, #0
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 f920 	bl	800ed36 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2208      	movs	r2, #8
 800eb06:	761a      	strb	r2, [r3, #24]

    break;
 800eb08:	e0d0      	b.n	800ecac <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	791b      	ldrb	r3, [r3, #4]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f009 fb5b 	bl	80181cc <USBH_LL_GetURBState>
 800eb16:	4603      	mov	r3, r0
 800eb18:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800eb1a:	7bbb      	ldrb	r3, [r7, #14]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d113      	bne.n	800eb48 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	220d      	movs	r2, #13
 800eb24:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2203      	movs	r2, #3
 800eb2e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb3e:	2200      	movs	r2, #0
 800eb40:	4619      	mov	r1, r3
 800eb42:	f001 fe93 	bl	801086c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800eb46:	e0ae      	b.n	800eca6 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800eb48:	7bbb      	ldrb	r3, [r7, #14]
 800eb4a:	2b04      	cmp	r3, #4
 800eb4c:	d111      	bne.n	800eb72 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	220b      	movs	r2, #11
 800eb52:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2203      	movs	r2, #3
 800eb58:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb68:	2200      	movs	r2, #0
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	f001 fe7e 	bl	801086c <osMessagePut>
    break;
 800eb70:	e099      	b.n	800eca6 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800eb72:	7bbb      	ldrb	r3, [r7, #14]
 800eb74:	2b05      	cmp	r3, #5
 800eb76:	f040 8096 	bne.w	800eca6 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2203      	movs	r2, #3
 800eb82:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb92:	2200      	movs	r2, #0
 800eb94:	4619      	mov	r1, r3
 800eb96:	f001 fe69 	bl	801086c <osMessagePut>
    break;
 800eb9a:	e084      	b.n	800eca6 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	795a      	ldrb	r2, [r3, #5]
 800eba0:	2301      	movs	r3, #1
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	4613      	mov	r3, r2
 800eba6:	2200      	movs	r2, #0
 800eba8:	2100      	movs	r1, #0
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f89e 	bl	800ecec <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	220a      	movs	r2, #10
 800ebc0:	761a      	strb	r2, [r3, #24]
    break;
 800ebc2:	e073      	b.n	800ecac <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	795b      	ldrb	r3, [r3, #5]
 800ebc8:	4619      	mov	r1, r3
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f009 fafe 	bl	80181cc <USBH_LL_GetURBState>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800ebd4:	7bbb      	ldrb	r3, [r7, #14]
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	d113      	bne.n	800ec02 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	220d      	movs	r2, #13
 800ebe2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2203      	movs	r2, #3
 800ebe8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	f001 fe36 	bl	801086c <osMessagePut>
#endif
#endif
      }

    }
    break;
 800ec00:	e053      	b.n	800ecaa <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800ec02:	7bbb      	ldrb	r3, [r7, #14]
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d111      	bne.n	800ec2c <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2209      	movs	r2, #9
 800ec0c:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2203      	movs	r2, #3
 800ec12:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec22:	2200      	movs	r2, #0
 800ec24:	4619      	mov	r1, r3
 800ec26:	f001 fe21 	bl	801086c <osMessagePut>
    break;
 800ec2a:	e03e      	b.n	800ecaa <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800ec2c:	7bbb      	ldrb	r3, [r7, #14]
 800ec2e:	2b04      	cmp	r3, #4
 800ec30:	d13b      	bne.n	800ecaa <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	220b      	movs	r2, #11
 800ec36:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2203      	movs	r2, #3
 800ec3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	4619      	mov	r1, r3
 800ec50:	f001 fe0c 	bl	801086c <osMessagePut>
    break;
 800ec54:	e029      	b.n	800ecaa <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	7e5b      	ldrb	r3, [r3, #25]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	b2da      	uxtb	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	765a      	strb	r2, [r3, #25]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	7e5b      	ldrb	r3, [r3, #25]
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d809      	bhi.n	800ec7e <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f009 f9c1 	bl	8017ff2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2201      	movs	r2, #1
 800ec74:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2201      	movs	r2, #1
 800ec7a:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800ec7c:	e016      	b.n	800ecac <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec84:	2106      	movs	r1, #6
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800ec90:	2302      	movs	r3, #2
 800ec92:	73fb      	strb	r3, [r7, #15]
    break;
 800ec94:	e00a      	b.n	800ecac <USBH_HandleControl+0x470>

  default:
    break;
 800ec96:	bf00      	nop
 800ec98:	e008      	b.n	800ecac <USBH_HandleControl+0x470>
    break;
 800ec9a:	bf00      	nop
 800ec9c:	e006      	b.n	800ecac <USBH_HandleControl+0x470>
    break;
 800ec9e:	bf00      	nop
 800eca0:	e004      	b.n	800ecac <USBH_HandleControl+0x470>
    break;
 800eca2:	bf00      	nop
 800eca4:	e002      	b.n	800ecac <USBH_HandleControl+0x470>
    break;
 800eca6:	bf00      	nop
 800eca8:	e000      	b.n	800ecac <USBH_HandleControl+0x470>
    break;
 800ecaa:	bf00      	nop
  }
  return status;
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop

0800ecb8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b088      	sub	sp, #32
 800ecbc:	af04      	add	r7, sp, #16
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ecc6:	79f9      	ldrb	r1, [r7, #7]
 800ecc8:	2300      	movs	r3, #0
 800ecca:	9303      	str	r3, [sp, #12]
 800eccc:	2308      	movs	r3, #8
 800ecce:	9302      	str	r3, [sp, #8]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	9301      	str	r3, [sp, #4]
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	2300      	movs	r3, #0
 800ecda:	2200      	movs	r2, #0
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f009 fa44 	bl	801816a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b088      	sub	sp, #32
 800ecf0:	af04      	add	r7, sp, #16
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	80fb      	strh	r3, [r7, #6]
 800ecfe:	4613      	mov	r3, r2
 800ed00:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d001      	beq.n	800ed10 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ed10:	7979      	ldrb	r1, [r7, #5]
 800ed12:	7e3b      	ldrb	r3, [r7, #24]
 800ed14:	9303      	str	r3, [sp, #12]
 800ed16:	88fb      	ldrh	r3, [r7, #6]
 800ed18:	9302      	str	r3, [sp, #8]
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	2301      	movs	r3, #1
 800ed20:	9300      	str	r3, [sp, #0]
 800ed22:	2300      	movs	r3, #0
 800ed24:	2200      	movs	r2, #0
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	f009 fa1f 	bl	801816a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ed2c:	2300      	movs	r3, #0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b088      	sub	sp, #32
 800ed3a:	af04      	add	r7, sp, #16
 800ed3c:	60f8      	str	r0, [r7, #12]
 800ed3e:	60b9      	str	r1, [r7, #8]
 800ed40:	4611      	mov	r1, r2
 800ed42:	461a      	mov	r2, r3
 800ed44:	460b      	mov	r3, r1
 800ed46:	80fb      	strh	r3, [r7, #6]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ed4c:	7979      	ldrb	r1, [r7, #5]
 800ed4e:	2300      	movs	r3, #0
 800ed50:	9303      	str	r3, [sp, #12]
 800ed52:	88fb      	ldrh	r3, [r7, #6]
 800ed54:	9302      	str	r3, [sp, #8]
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	9301      	str	r3, [sp, #4]
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	2300      	movs	r3, #0
 800ed60:	2201      	movs	r2, #1
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f009 fa01 	bl	801816a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ed68:	2300      	movs	r3, #0

}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b088      	sub	sp, #32
 800ed76:	af04      	add	r7, sp, #16
 800ed78:	60f8      	str	r0, [r7, #12]
 800ed7a:	60b9      	str	r1, [r7, #8]
 800ed7c:	4611      	mov	r1, r2
 800ed7e:	461a      	mov	r2, r3
 800ed80:	460b      	mov	r3, r1
 800ed82:	80fb      	strh	r3, [r7, #6]
 800ed84:	4613      	mov	r3, r2
 800ed86:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ed92:	2300      	movs	r3, #0
 800ed94:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ed96:	7979      	ldrb	r1, [r7, #5]
 800ed98:	7e3b      	ldrb	r3, [r7, #24]
 800ed9a:	9303      	str	r3, [sp, #12]
 800ed9c:	88fb      	ldrh	r3, [r7, #6]
 800ed9e:	9302      	str	r3, [sp, #8]
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	9301      	str	r3, [sp, #4]
 800eda4:	2301      	movs	r3, #1
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	2302      	movs	r3, #2
 800edaa:	2200      	movs	r2, #0
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f009 f9dc 	bl	801816a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b088      	sub	sp, #32
 800edc0:	af04      	add	r7, sp, #16
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	4611      	mov	r1, r2
 800edc8:	461a      	mov	r2, r3
 800edca:	460b      	mov	r3, r1
 800edcc:	80fb      	strh	r3, [r7, #6]
 800edce:	4613      	mov	r3, r2
 800edd0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800edd2:	7979      	ldrb	r1, [r7, #5]
 800edd4:	2300      	movs	r3, #0
 800edd6:	9303      	str	r3, [sp, #12]
 800edd8:	88fb      	ldrh	r3, [r7, #6]
 800edda:	9302      	str	r3, [sp, #8]
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	2301      	movs	r3, #1
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	2302      	movs	r3, #2
 800ede6:	2201      	movs	r2, #1
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f009 f9be 	bl	801816a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af04      	add	r7, sp, #16
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	4608      	mov	r0, r1
 800ee02:	4611      	mov	r1, r2
 800ee04:	461a      	mov	r2, r3
 800ee06:	4603      	mov	r3, r0
 800ee08:	70fb      	strb	r3, [r7, #3]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	70bb      	strb	r3, [r7, #2]
 800ee0e:	4613      	mov	r3, r2
 800ee10:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800ee12:	7878      	ldrb	r0, [r7, #1]
 800ee14:	78ba      	ldrb	r2, [r7, #2]
 800ee16:	78f9      	ldrb	r1, [r7, #3]
 800ee18:	8b3b      	ldrh	r3, [r7, #24]
 800ee1a:	9302      	str	r3, [sp, #8]
 800ee1c:	7d3b      	ldrb	r3, [r7, #20]
 800ee1e:	9301      	str	r3, [sp, #4]
 800ee20:	7c3b      	ldrb	r3, [r7, #16]
 800ee22:	9300      	str	r3, [sp, #0]
 800ee24:	4603      	mov	r3, r0
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f009 f951 	bl	80180ce <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800ee2c:	2300      	movs	r3, #0

}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b082      	sub	sp, #8
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
 800ee3e:	460b      	mov	r3, r1
 800ee40:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800ee42:	78fb      	ldrb	r3, [r7, #3]
 800ee44:	4619      	mov	r1, r3
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f009 f970 	bl	801812c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ee4c:	2300      	movs	r3, #0

}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3708      	adds	r7, #8
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	460b      	mov	r3, r1
 800ee60:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 f831 	bl	800eeca <USBH_GetFreePipe>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ee6c:	89fb      	ldrh	r3, [r7, #14]
 800ee6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d007      	beq.n	800ee86 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800ee76:	78fb      	ldrb	r3, [r7, #3]
 800ee78:	89fa      	ldrh	r2, [r7, #14]
 800ee7a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	32e0      	adds	r2, #224	; 0xe0
 800ee82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800ee86:	89fb      	ldrh	r3, [r7, #14]
 800ee88:	b2db      	uxtb	r3, r3
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ee92:	b480      	push	{r7}
 800ee94:	b083      	sub	sp, #12
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800ee9e:	78fb      	ldrb	r3, [r7, #3]
 800eea0:	2b0a      	cmp	r3, #10
 800eea2:	d80b      	bhi.n	800eebc <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800eea4:	78fa      	ldrb	r2, [r7, #3]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	32e0      	adds	r2, #224	; 0xe0
 800eeaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeae:	78fa      	ldrb	r2, [r7, #3]
 800eeb0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	32e0      	adds	r2, #224	; 0xe0
 800eeb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	370c      	adds	r7, #12
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr

0800eeca <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800eeca:	b480      	push	{r7}
 800eecc:	b085      	sub	sp, #20
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800eed2:	2300      	movs	r3, #0
 800eed4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800eed6:	2300      	movs	r3, #0
 800eed8:	73fb      	strb	r3, [r7, #15]
 800eeda:	e00e      	b.n	800eefa <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800eedc:	7bfa      	ldrb	r2, [r7, #15]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	32e0      	adds	r2, #224	; 0xe0
 800eee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d102      	bne.n	800eef4 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800eeee:	7bfb      	ldrb	r3, [r7, #15]
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	e007      	b.n	800ef04 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
 800eef6:	3301      	adds	r3, #1
 800eef8:	73fb      	strb	r3, [r7, #15]
 800eefa:	7bfb      	ldrb	r3, [r7, #15]
 800eefc:	2b0a      	cmp	r3, #10
 800eefe:	d9ed      	bls.n	800eedc <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800ef00:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
    {
 800ef18:	4a04      	ldr	r2, [pc, #16]	; (800ef2c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	601a      	str	r2, [r3, #0]
    }
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4618      	mov	r0, r3
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr
 800ef2c:	0802023c 	.word	0x0802023c

0800ef30 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
    }
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f7ff ffe9 	bl	800ef10 <_ZN8touchgfx15TouchControllerD1Ev>
 800ef3e:	2104      	movs	r1, #4
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f00f fca6 	bl	801e892 <_ZdlPvj>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	80da      	strh	r2, [r3, #6]
    }
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4618      	mov	r0, r3
 800ef74:	370c      	adds	r7, #12
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr

0800ef7e <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800ef7e:	b480      	push	{r7}
 800ef80:	b083      	sub	sp, #12
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
 800ef86:	460b      	mov	r3, r1
 800ef88:	807b      	strh	r3, [r7, #2]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	887a      	ldrh	r2, [r7, #2]
 800ef8e:	801a      	strh	r2, [r3, #0]
    {
    }
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4618      	mov	r0, r3
 800ef94:	370c      	adds	r7, #12
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
	...

0800efa0 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	4a04      	ldr	r2, [pc, #16]	; (800efbc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4618      	mov	r0, r3
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr
 800efbc:	080217fc 	.word	0x080217fc

0800efc0 <_ZN8touchgfx8DrawableD0Ev>:
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f7ff ffe9 	bl	800efa0 <_ZN8touchgfx8DrawableD1Ev>
 800efce:	2128      	movs	r1, #40	; 0x28
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f00f fc5e 	bl	801e892 <_ZdlPvj>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4618      	mov	r0, r3
 800efda:	3708      	adds	r7, #8
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	4608      	mov	r0, r1
 800efea:	4611      	mov	r1, r2
 800efec:	461a      	mov	r2, r3
 800efee:	4603      	mov	r3, r0
 800eff0:	817b      	strh	r3, [r7, #10]
 800eff2:	460b      	mov	r3, r1
 800eff4:	813b      	strh	r3, [r7, #8]
 800eff6:	4613      	mov	r3, r2
 800eff8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	3334      	adds	r3, #52	; 0x34
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f006:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	4798      	blx	r3
        setWidth(width);
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	3338      	adds	r3, #56	; 0x38
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f01a:	4611      	mov	r1, r2
 800f01c:	68f8      	ldr	r0, [r7, #12]
 800f01e:	4798      	blx	r3
        setHeight(height);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	333c      	adds	r3, #60	; 0x3c
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f02c:	4611      	mov	r1, r2
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	4798      	blx	r3
    };
 800f032:	bf00      	nop
 800f034:	3710      	adds	r7, #16
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800f03a:	b480      	push	{r7}
 800f03c:	b083      	sub	sp, #12
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	460b      	mov	r3, r1
 800f044:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	887a      	ldrh	r2, [r7, #2]
 800f04a:	809a      	strh	r2, [r3, #4]
    }
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	460b      	mov	r3, r1
 800f062:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	887a      	ldrh	r2, [r7, #2]
 800f068:	80da      	strh	r2, [r3, #6]
    }
 800f06a:	bf00      	nop
 800f06c:	370c      	adds	r7, #12
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr

0800f076 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800f076:	b580      	push	{r7, lr}
 800f078:	b082      	sub	sp, #8
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
 800f07e:	460b      	mov	r3, r1
 800f080:	807b      	strh	r3, [r7, #2]
 800f082:	4613      	mov	r3, r2
 800f084:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	332c      	adds	r3, #44	; 0x2c
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f092:	4611      	mov	r1, r2
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	4798      	blx	r3
        setY(y);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3330      	adds	r3, #48	; 0x30
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	4798      	blx	r3
    }
 800f0aa:	bf00      	nop
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800f0b2:	b480      	push	{r7}
 800f0b4:	b083      	sub	sp, #12
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	887a      	ldrh	r2, [r7, #2]
 800f0c2:	811a      	strh	r2, [r3, #8]
    }
 800f0c4:	bf00      	nop
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	460b      	mov	r3, r1
 800f0da:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	887a      	ldrh	r2, [r7, #2]
 800f0e0:	815a      	strh	r2, [r3, #10]
    }
 800f0e2:	bf00      	nop
 800f0e4:	370c      	adds	r7, #12
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr

0800f0ee <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800f0ee:	b480      	push	{r7}
 800f0f0:	b083      	sub	sp, #12
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
 800f0f6:	bf00      	nop
 800f0f8:	370c      	adds	r7, #12
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr

0800f102 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800f102:	b480      	push	{r7}
 800f104:	b083      	sub	sp, #12
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	6039      	str	r1, [r7, #0]
 800f10c:	bf00      	nop
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800f118:	b480      	push	{r7}
 800f11a:	b083      	sub	sp, #12
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
 800f122:	bf00      	nop
 800f124:	370c      	adds	r7, #12
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr

0800f12e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800f12e:	b480      	push	{r7}
 800f130:	b083      	sub	sp, #12
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	6039      	str	r1, [r7, #0]
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	bf00      	nop
 800f14e:	370c      	adds	r7, #12
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr

0800f158 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800f166:	4618      	mov	r0, r3
 800f168:	370c      	adds	r7, #12
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr

0800f172 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800f172:	b480      	push	{r7}
 800f174:	b083      	sub	sp, #12
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800f180:	4618      	mov	r0, r3
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	460b      	mov	r3, r1
 800f196:	807b      	strh	r3, [r7, #2]
 800f198:	4613      	mov	r3, r2
 800f19a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	3354      	adds	r3, #84	; 0x54
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	8879      	ldrh	r1, [r7, #2]
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f1ac:	b292      	uxth	r2, r2
 800f1ae:	1a8a      	subs	r2, r1, r2
 800f1b0:	b292      	uxth	r2, r2
 800f1b2:	b210      	sxth	r0, r2
 800f1b4:	8839      	ldrh	r1, [r7, #0]
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f1bc:	b292      	uxth	r2, r2
 800f1be:	1a8a      	subs	r2, r1, r2
 800f1c0:	b292      	uxth	r2, r2
 800f1c2:	b212      	sxth	r2, r2
 800f1c4:	4601      	mov	r1, r0
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	4798      	blx	r3
    }
 800f1ca:	bf00      	nop
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f1d2:	b480      	push	{r7}
 800f1d4:	b083      	sub	sp, #12
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1e0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1e8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1f0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f1f2:	bf00      	nop
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b084      	sub	sp, #16
 800f202:	af00      	add	r7, sp, #0
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	60b9      	str	r1, [r7, #8]
 800f208:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f20a:	68f8      	ldr	r0, [r7, #12]
 800f20c:	f7ff ffe1 	bl	800f1d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	68fa      	ldr	r2, [r7, #12]
 800f21c:	601a      	str	r2, [r3, #0]
    }
 800f21e:	bf00      	nop
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
	...

0800f228 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	4a05      	ldr	r2, [pc, #20]	; (800f248 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff feb1 	bl	800efa0 <_ZN8touchgfx8DrawableD1Ev>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4618      	mov	r0, r3
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	08020254 	.word	0x08020254

0800f24c <_ZN8touchgfx6WidgetD0Ev>:
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f7ff ffe7 	bl	800f228 <_ZN8touchgfx6WidgetD1Ev>
 800f25a:	2128      	movs	r1, #40	; 0x28
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f00f fb18 	bl	801e892 <_ZdlPvj>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	4618      	mov	r0, r3
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	607b      	str	r3, [r7, #4]
 800f276:	460b      	mov	r3, r1
 800f278:	817b      	strh	r3, [r7, #10]
 800f27a:	4613      	mov	r3, r2
 800f27c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	4618      	mov	r0, r3
 800f282:	f7ff ff69 	bl	800f158 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d008      	beq.n	800f29e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	4618      	mov	r0, r3
 800f290:	f7ff ff6f 	bl	800f172 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d001      	beq.n	800f29e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f29a:	2301      	movs	r3, #1
 800f29c:	e000      	b.n	800f2a0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d002      	beq.n	800f2aa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f2a4:	68fa      	ldr	r2, [r7, #12]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	601a      	str	r2, [r3, #0]
        }
    }
 800f2aa:	bf00      	nop
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 800f2b2:	b480      	push	{r7}
 800f2b4:	b083      	sub	sp, #12
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 800f2ba:	2301      	movs	r3, #1
    }
 800f2bc:	4618      	mov	r0, r3
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	4a05      	ldr	r2, [pc, #20]	; (800f2e8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	601a      	str	r2, [r3, #0]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7ff fe61 	bl	800efa0 <_ZN8touchgfx8DrawableD1Ev>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	080202c0 	.word	0x080202c0

0800f2ec <_ZN8touchgfx9ContainerD0Ev>:
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff ffe7 	bl	800f2c8 <_ZN8touchgfx9ContainerD1Ev>
 800f2fa:	212c      	movs	r1, #44	; 0x2c
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f00f fac8 	bl	801e892 <_ZdlPvj>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4618      	mov	r0, r3
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 800f314:	2312      	movs	r3, #18
    }
 800f316:	4618      	mov	r0, r3
 800f318:	370c      	adds	r7, #12
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
	...

0800f324 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f324:	b480      	push	{r7}
 800f326:	af00      	add	r7, sp, #0
    {
        return instance;
 800f328:	4b03      	ldr	r3, [pc, #12]	; (800f338 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f32a:	681b      	ldr	r3, [r3, #0]
    }
 800f32c:	4618      	mov	r0, r3
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	20009d70 	.word	0x20009d70

0800f33c <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f33c:	b480      	push	{r7}
 800f33e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f340:	4b0b      	ldr	r3, [pc, #44]	; (800f370 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d008      	beq.n	800f35e <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f34c:	4b08      	ldr	r3, [pc, #32]	; (800f370 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f352:	2b00      	cmp	r3, #0
 800f354:	d003      	beq.n	800f35e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f356:	4b06      	ldr	r3, [pc, #24]	; (800f370 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f35c:	e002      	b.n	800f364 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f35e:	4b04      	ldr	r3, [pc, #16]	; (800f370 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f364:	4618      	mov	r0, r3
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	20009d70 	.word	0x20009d70

0800f374 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800f374:	b480      	push	{r7}
 800f376:	b085      	sub	sp, #20
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	4608      	mov	r0, r1
 800f37e:	4611      	mov	r1, r2
 800f380:	461a      	mov	r2, r3
 800f382:	4603      	mov	r3, r0
 800f384:	817b      	strh	r3, [r7, #10]
 800f386:	460b      	mov	r3, r1
 800f388:	813b      	strh	r3, [r7, #8]
 800f38a:	4613      	mov	r3, r2
 800f38c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	897a      	ldrh	r2, [r7, #10]
 800f392:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	893a      	ldrh	r2, [r7, #8]
 800f398:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	88fa      	ldrh	r2, [r7, #6]
 800f39e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	8b3a      	ldrh	r2, [r7, #24]
 800f3a4:	80da      	strh	r2, [r3, #6]
    }
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3714      	adds	r7, #20
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	4413      	add	r3, r2
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	b21b      	sxth	r3, r3
    }
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr

0800f3de <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 800f3de:	b480      	push	{r7}
 800f3e0:	b083      	sub	sp, #12
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f3ec:	b29a      	uxth	r2, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	4413      	add	r3, r2
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	b21b      	sxth	r3, r3
    }
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	460b      	mov	r3, r1
 800f412:	807b      	strh	r3, [r7, #2]
 800f414:	4613      	mov	r3, r2
 800f416:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 800f41e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f422:	429a      	cmp	r2, r3
 800f424:	db1a      	blt.n	800f45c <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7ff ffc4 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f42c:	4603      	mov	r3, r0
 800f42e:	461a      	mov	r2, r3
 800f430:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f434:	4293      	cmp	r3, r2
 800f436:	da11      	bge.n	800f45c <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 800f43e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f442:	429a      	cmp	r2, r3
 800f444:	db0a      	blt.n	800f45c <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f7ff ffc9 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f44c:	4603      	mov	r3, r0
 800f44e:	461a      	mov	r2, r3
 800f450:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f454:	4293      	cmp	r3, r2
 800f456:	da01      	bge.n	800f45c <_ZNK8touchgfx4Rect9intersectEss+0x54>
 800f458:	2301      	movs	r3, #1
 800f45a:	e000      	b.n	800f45e <_ZNK8touchgfx4Rect9intersectEss+0x56>
 800f45c:	2300      	movs	r3, #0
    }
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 800f466:	b590      	push	{r4, r7, lr}
 800f468:	b083      	sub	sp, #12
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f9b3 4000 	ldrsh.w	r4, [r3]
 800f476:	6838      	ldr	r0, [r7, #0]
 800f478:	f7ff ff9c 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f47c:	4603      	mov	r3, r0
 800f47e:	429c      	cmp	r4, r3
 800f480:	da1e      	bge.n	800f4c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f7ff ff96 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f488:	4603      	mov	r3, r0
 800f48a:	461a      	mov	r2, r3
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f492:	429a      	cmp	r2, r3
 800f494:	dd14      	ble.n	800f4c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800f49c:	6838      	ldr	r0, [r7, #0]
 800f49e:	f7ff ff9e 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f4a2:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 800f4a4:	429c      	cmp	r4, r3
 800f4a6:	da0b      	bge.n	800f4c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f7ff ff98 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	dd01      	ble.n	800f4c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e000      	b.n	800f4c2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 800f4c0:	2300      	movs	r3, #0
    }
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd90      	pop	{r4, r7, pc}

0800f4ca <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b084      	sub	sp, #16
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	60f8      	str	r0, [r7, #12]
 800f4d2:	60b9      	str	r1, [r7, #8]
 800f4d4:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	6811      	ldr	r1, [r2, #0]
 800f4dc:	6852      	ldr	r2, [r2, #4]
 800f4de:	6019      	str	r1, [r3, #0]
 800f4e0:	605a      	str	r2, [r3, #4]
        r &= other;
 800f4e2:	6879      	ldr	r1, [r7, #4]
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f000 f805 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
        return r;
 800f4ea:	bf00      	nop
    }
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	3710      	adds	r7, #16
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 800f4f4:	b590      	push	{r4, r7, lr}
 800f4f6:	b085      	sub	sp, #20
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 800f4fe:	6839      	ldr	r1, [r7, #0]
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff ffb0 	bl	800f466 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d05f      	beq.n	800f5cc <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f518:	429a      	cmp	r2, r3
 800f51a:	dd03      	ble.n	800f524 <_ZN8touchgfx4RectaNERKS0_+0x30>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f522:	e002      	b.n	800f52a <_ZN8touchgfx4RectaNERKS0_+0x36>
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f52a:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f538:	429a      	cmp	r2, r3
 800f53a:	dd04      	ble.n	800f546 <_ZN8touchgfx4RectaNERKS0_+0x52>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	3302      	adds	r3, #2
 800f540:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f544:	e002      	b.n	800f54c <_ZN8touchgfx4RectaNERKS0_+0x58>
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f54c:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f7ff ff30 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f554:	4603      	mov	r3, r0
 800f556:	461c      	mov	r4, r3
 800f558:	6838      	ldr	r0, [r7, #0]
 800f55a:	f7ff ff2b 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f55e:	4603      	mov	r3, r0
 800f560:	429c      	cmp	r4, r3
 800f562:	da05      	bge.n	800f570 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f7ff ff25 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f56a:	4603      	mov	r3, r0
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	e004      	b.n	800f57a <_ZN8touchgfx4RectaNERKS0_+0x86>
 800f570:	6838      	ldr	r0, [r7, #0]
 800f572:	f7ff ff1f 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f576:	4603      	mov	r3, r0
 800f578:	b29b      	uxth	r3, r3
 800f57a:	89fa      	ldrh	r2, [r7, #14]
 800f57c:	1a9b      	subs	r3, r3, r2
 800f57e:	b29b      	uxth	r3, r3
 800f580:	b21a      	sxth	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7ff ff29 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f58c:	4603      	mov	r3, r0
 800f58e:	461c      	mov	r4, r3
 800f590:	6838      	ldr	r0, [r7, #0]
 800f592:	f7ff ff24 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f596:	4603      	mov	r3, r0
 800f598:	429c      	cmp	r4, r3
 800f59a:	da05      	bge.n	800f5a8 <_ZN8touchgfx4RectaNERKS0_+0xb4>
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7ff ff1e 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	e004      	b.n	800f5b2 <_ZN8touchgfx4RectaNERKS0_+0xbe>
 800f5a8:	6838      	ldr	r0, [r7, #0]
 800f5aa:	f7ff ff18 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	89ba      	ldrh	r2, [r7, #12]
 800f5b4:	1a9b      	subs	r3, r3, r2
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	b21a      	sxth	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	80da      	strh	r2, [r3, #6]
            x = newX;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	89fa      	ldrh	r2, [r7, #14]
 800f5c2:	801a      	strh	r2, [r3, #0]
            y = newY;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	89ba      	ldrh	r2, [r7, #12]
 800f5c8:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 800f5ca:	e00b      	b.n	800f5e4 <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	801a      	strh	r2, [r3, #0]
            y = 0;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	805a      	strh	r2, [r3, #2]
            width = 0;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	809a      	strh	r2, [r3, #4]
            height = 0;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	80da      	strh	r2, [r3, #6]
    }
 800f5e4:	bf00      	nop
 800f5e6:	3714      	adds	r7, #20
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd90      	pop	{r4, r7, pc}

0800f5ec <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 800f5ec:	b590      	push	{r4, r7, lr}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 800f5f6:	6838      	ldr	r0, [r7, #0]
 800f5f8:	f000 f884 	bl	800f704 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	f083 0301 	eor.w	r3, r3, #1
 800f602:	b2db      	uxtb	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d079      	beq.n	800f6fc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 f87b 	bl	800f704 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d014      	beq.n	800f63e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	801a      	strh	r2, [r3, #0]
                y = other.y;
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	805a      	strh	r2, [r3, #2]
                width = other.width;
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	809a      	strh	r2, [r3, #4]
                height = other.height;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 800f63c:	e05e      	b.n	800f6fc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	da03      	bge.n	800f656 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f654:	e002      	b.n	800f65c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f65c:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	da04      	bge.n	800f678 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	3302      	adds	r3, #2
 800f672:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f676:	e002      	b.n	800f67e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f67e:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7ff fe97 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f686:	4603      	mov	r3, r0
 800f688:	461c      	mov	r4, r3
 800f68a:	6838      	ldr	r0, [r7, #0]
 800f68c:	f7ff fe92 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f690:	4603      	mov	r3, r0
 800f692:	429c      	cmp	r4, r3
 800f694:	dd04      	ble.n	800f6a0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f7ff fe8c 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f69c:	4603      	mov	r3, r0
 800f69e:	e003      	b.n	800f6a8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 800f6a0:	6838      	ldr	r0, [r7, #0]
 800f6a2:	f7ff fe87 	bl	800f3b4 <_ZNK8touchgfx4Rect5rightEv>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7ff fe97 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	461c      	mov	r4, r3
 800f6b4:	6838      	ldr	r0, [r7, #0]
 800f6b6:	f7ff fe92 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	429c      	cmp	r4, r3
 800f6be:	dd04      	ble.n	800f6ca <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f7ff fe8c 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	e003      	b.n	800f6d2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 800f6ca:	6838      	ldr	r0, [r7, #0]
 800f6cc:	f7ff fe87 	bl	800f3de <_ZNK8touchgfx4Rect6bottomEv>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	813b      	strh	r3, [r7, #8]
                x = newX;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	89fa      	ldrh	r2, [r7, #14]
 800f6d8:	801a      	strh	r2, [r3, #0]
                y = newY;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	89ba      	ldrh	r2, [r7, #12]
 800f6de:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 800f6e0:	897a      	ldrh	r2, [r7, #10]
 800f6e2:	89fb      	ldrh	r3, [r7, #14]
 800f6e4:	1ad3      	subs	r3, r2, r3
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	b21a      	sxth	r2, r3
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 800f6ee:	893a      	ldrh	r2, [r7, #8]
 800f6f0:	89bb      	ldrh	r3, [r7, #12]
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	b21a      	sxth	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	80da      	strh	r2, [r3, #6]
    }
 800f6fc:	bf00      	nop
 800f6fe:	3714      	adds	r7, #20
 800f700:	46bd      	mov	sp, r7
 800f702:	bd90      	pop	{r4, r7, pc}

0800f704 <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d004      	beq.n	800f720 <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d101      	bne.n	800f724 <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 800f720:	2301      	movs	r3, #1
 800f722:	e000      	b.n	800f726 <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 800f724:	2300      	movs	r3, #0
    }
 800f726:	4618      	mov	r0, r3
 800f728:	370c      	adds	r7, #12
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <_ZNK8touchgfx8Drawable7getRectEv>:
    const Rect& getRect() const
 800f732:	b480      	push	{r7}
 800f734:	b083      	sub	sp, #12
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
        return rect;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	3304      	adds	r3, #4
    }
 800f73e:	4618      	mov	r0, r3
 800f740:	370c      	adds	r7, #12
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr

0800f74a <_ZNK8touchgfx8Drawable4getXEv>:
    int16_t getX() const
 800f74a:	b480      	push	{r7}
 800f74c:	b083      	sub	sp, #12
 800f74e:	af00      	add	r7, sp, #0
 800f750:	6078      	str	r0, [r7, #4]
        return rect.x;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800f758:	4618      	mov	r0, r3
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <_ZNK8touchgfx8Drawable4getYEv>:
    int16_t getY() const
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
        return rect.y;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800f772:	4618      	mov	r0, r3
 800f774:	370c      	adds	r7, #12
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr

0800f77e <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 800f77e:	b480      	push	{r7}
 800f780:	b085      	sub	sp, #20
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	6039      	str	r1, [r7, #0]
    bool found = false;
 800f788:	2300      	movs	r3, #0
 800f78a:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f790:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d00d      	beq.n	800f7b4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 800f798:	7bfb      	ldrb	r3, [r7, #15]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d10a      	bne.n	800f7b4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	bf0c      	ite	eq
 800f7a6:	2301      	moveq	r3, #1
 800f7a8:	2300      	movne	r3, #0
 800f7aa:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	699b      	ldr	r3, [r3, #24]
 800f7b0:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800f7b2:	e7ee      	b.n	800f792 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 800f7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3714      	adds	r7, #20
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr
	...

0800f7c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d105      	bne.n	800f7e2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800f7d6:	4b22      	ldr	r3, [pc, #136]	; (800f860 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 800f7d8:	4a22      	ldr	r2, [pc, #136]	; (800f864 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800f7da:	2123      	movs	r1, #35	; 0x23
 800f7dc:	4822      	ldr	r0, [pc, #136]	; (800f868 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800f7de:	f00f f875 	bl	801e8cc <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	695b      	ldr	r3, [r3, #20]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d005      	beq.n	800f7f6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 800f7ea:	4b20      	ldr	r3, [pc, #128]	; (800f86c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 800f7ec:	4a1d      	ldr	r2, [pc, #116]	; (800f864 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800f7ee:	2124      	movs	r1, #36	; 0x24
 800f7f0:	481d      	ldr	r0, [pc, #116]	; (800f868 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800f7f2:	f00f f86b 	bl	801e8cc <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	2200      	movs	r2, #0
 800f800:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f806:	2b00      	cmp	r3, #0
 800f808:	d103      	bne.n	800f812 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	683a      	ldr	r2, [r7, #0]
 800f80e:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 800f810:	e021      	b.n	800f856 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f816:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00d      	beq.n	800f83c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	429a      	cmp	r2, r3
 800f826:	d105      	bne.n	800f834 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 800f828:	4b11      	ldr	r3, [pc, #68]	; (800f870 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800f82a:	4a0e      	ldr	r2, [pc, #56]	; (800f864 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800f82c:	2135      	movs	r1, #53	; 0x35
 800f82e:	480e      	ldr	r0, [pc, #56]	; (800f868 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800f830:	f00f f84c 	bl	801e8cc <__assert_func>
            head = head->nextSibling;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	699b      	ldr	r3, [r3, #24]
 800f838:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800f83a:	e7ed      	b.n	800f818 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 800f83c:	68fa      	ldr	r2, [r7, #12]
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	429a      	cmp	r2, r3
 800f842:	d105      	bne.n	800f850 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 800f844:	4b0a      	ldr	r3, [pc, #40]	; (800f870 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800f846:	4a07      	ldr	r2, [pc, #28]	; (800f864 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800f848:	2138      	movs	r1, #56	; 0x38
 800f84a:	4807      	ldr	r0, [pc, #28]	; (800f868 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800f84c:	f00f f83e 	bl	801e8cc <__assert_func>
        head->nextSibling = &d;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	683a      	ldr	r2, [r7, #0]
 800f854:	619a      	str	r2, [r3, #24]
}
 800f856:	bf00      	nop
 800f858:	3710      	adds	r7, #16
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	0801f94c 	.word	0x0801f94c
 800f864:	08020348 	.word	0x08020348
 800f868:	0801f978 	.word	0x0801f978
 800f86c:	0801f9d0 	.word	0x0801f9d0
 800f870:	0801fa08 	.word	0x0801fa08

0800f874 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 800f874:	b480      	push	{r7}
 800f876:	b085      	sub	sp, #20
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f882:	2b00      	cmp	r3, #0
 800f884:	d031      	beq.n	800f8ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f88a:	683a      	ldr	r2, [r7, #0]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d112      	bne.n	800f8b6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	2200      	movs	r2, #0
 800f894:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	699b      	ldr	r3, [r3, #24]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d103      	bne.n	800f8a6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 800f8a4:	e022      	b.n	800f8ec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	699a      	ldr	r2, [r3, #24]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	619a      	str	r2, [r3, #24]
        return;
 800f8b4:	e01a      	b.n	800f8ec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ba:	60fb      	str	r3, [r7, #12]

    while (tmp)
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d014      	beq.n	800f8ec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	699b      	ldr	r3, [r3, #24]
 800f8c6:	683a      	ldr	r2, [r7, #0]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d10a      	bne.n	800f8e2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	699a      	ldr	r2, [r3, #24]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	619a      	str	r2, [r3, #24]
            return;
 800f8e0:	e004      	b.n	800f8ec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	60fb      	str	r3, [r7, #12]
    while (tmp)
 800f8e8:	e7e8      	b.n	800f8bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 800f8ea:	bf00      	nop
        }
    }
}
 800f8ec:	3714      	adds	r7, #20
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr

0800f8f6 <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 800f8f6:	b480      	push	{r7}
 800f8f8:	b085      	sub	sp, #20
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
    while (firstChild)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00e      	beq.n	800f924 <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f90a:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f910:	699a      	ldr	r2, [r3, #24]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2200      	movs	r2, #0
 800f920:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800f922:	e7ec      	b.n	800f8fe <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 800f924:	bf00      	nop
 800f926:	3714      	adds	r7, #20
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr

0800f930 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2200      	movs	r2, #0
 800f93c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f93e:	bf00      	nop
 800f940:	370c      	adds	r7, #12
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr

0800f94a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b088      	sub	sp, #32
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
 800f952:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4618      	mov	r0, r3
 800f958:	f7ff fbfe 	bl	800f158 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f95c:	4603      	mov	r3, r0
 800f95e:	f083 0301 	eor.w	r3, r3, #1
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d103      	bne.n	800f970 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d101      	bne.n	800f974 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 800f970:	2301      	movs	r3, #1
 800f972:	e000      	b.n	800f976 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 800f974:	2300      	movs	r3, #0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d14e      	bne.n	800fa18 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800f97a:	683a      	ldr	r2, [r7, #0]
 800f97c:	f107 0314 	add.w	r3, r7, #20
 800f980:	6810      	ldr	r0, [r2, #0]
 800f982:	6851      	ldr	r1, [r2, #4]
 800f984:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f98a:	61fb      	str	r3, [r7, #28]
    while (d)
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d043      	beq.n	800fa1a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 800f992:	69f8      	ldr	r0, [r7, #28]
 800f994:	f7ff fbe0 	bl	800f158 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d038      	beq.n	800fa10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 800f99e:	69f8      	ldr	r0, [r7, #28]
 800f9a0:	f7ff fec7 	bl	800f732 <_ZNK8touchgfx8Drawable7getRectEv>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	f107 030c 	add.w	r3, r7, #12
 800f9aa:	f107 0114 	add.w	r1, r7, #20
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7ff fd8b 	bl	800f4ca <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800f9b4:	f107 030c 	add.w	r3, r7, #12
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff fea3 	bl	800f704 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	f083 0301 	eor.w	r3, r3, #1
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d022      	beq.n	800fa10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 800f9ca:	69f8      	ldr	r0, [r7, #28]
 800f9cc:	f7ff febd 	bl	800f74a <_ZNK8touchgfx8Drawable4getXEv>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	b28b      	uxth	r3, r1
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	b21b      	sxth	r3, r3
 800f9e2:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 800f9e4:	69f8      	ldr	r0, [r7, #28]
 800f9e6:	f7ff febd 	bl	800f764 <_ZNK8touchgfx8Drawable4getYEv>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	b28b      	uxth	r3, r1
 800f9f6:	1ad3      	subs	r3, r2, r3
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	b21b      	sxth	r3, r3
 800f9fc:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	3308      	adds	r3, #8
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f107 020c 	add.w	r2, r7, #12
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	69f8      	ldr	r0, [r7, #28]
 800fa0e:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	699b      	ldr	r3, [r3, #24]
 800fa14:	61fb      	str	r3, [r7, #28]
    while (d)
 800fa16:	e7b9      	b.n	800f98c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 800fa18:	bf00      	nop
    }
}
 800fa1a:	3720      	adds	r7, #32
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800fa20:	b590      	push	{r4, r7, lr}
 800fa22:	b087      	sub	sp, #28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	607b      	str	r3, [r7, #4]
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	817b      	strh	r3, [r7, #10]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7ff fb9c 	bl	800f172 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa4a:	617b      	str	r3, [r7, #20]
    while (d)
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d038      	beq.n	800fac4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 800fa52:	6978      	ldr	r0, [r7, #20]
 800fa54:	f7ff fb80 	bl	800f158 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00e      	beq.n	800fa7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800fa5e:	6978      	ldr	r0, [r7, #20]
 800fa60:	f7ff fe67 	bl	800f732 <_ZNK8touchgfx8Drawable7getRectEv>
 800fa64:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800fa68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	f7ff fccb 	bl	800f408 <_ZNK8touchgfx4Rect9intersectEss>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d001      	beq.n	800fa7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800fa78:	2301      	movs	r3, #1
 800fa7a:	e000      	b.n	800fa7e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d01c      	beq.n	800fabc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 800fa82:	897c      	ldrh	r4, [r7, #10]
 800fa84:	6978      	ldr	r0, [r7, #20]
 800fa86:	f7ff fe60 	bl	800f74a <_ZNK8touchgfx8Drawable4getXEv>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	1ae3      	subs	r3, r4, r3
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 800fa94:	893c      	ldrh	r4, [r7, #8]
 800fa96:	6978      	ldr	r0, [r7, #20]
 800fa98:	f7ff fe64 	bl	800f764 <_ZNK8touchgfx8Drawable4getYEv>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	1ae3      	subs	r3, r4, r3
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	331c      	adds	r3, #28
 800faac:	681c      	ldr	r4, [r3, #0]
 800faae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800fab2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6978      	ldr	r0, [r7, #20]
 800faba:	47a0      	blx	r4
        }
        d = d->nextSibling;
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	699b      	ldr	r3, [r3, #24]
 800fac0:	617b      	str	r3, [r7, #20]
    while (d)
 800fac2:	e7c3      	b.n	800fa4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 800fac4:	bf00      	nop
 800fac6:	371c      	adds	r7, #28
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd90      	pop	{r4, r7, pc}

0800facc <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af02      	add	r7, sp, #8
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 800fad6:	2300      	movs	r3, #0
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	2300      	movs	r3, #0
 800fadc:	2200      	movs	r2, #0
 800fade:	2100      	movs	r1, #0
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7ff fc47 	bl	800f374 <_ZN8touchgfx4RectC1Essss>
}
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	3708      	adds	r7, #8
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b086      	sub	sp, #24
 800faf2:	af02      	add	r7, sp, #8
 800faf4:	6078      	str	r0, [r7, #4]
 800faf6:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fafc:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 800fafe:	2300      	movs	r3, #0
 800fb00:	9300      	str	r3, [sp, #0]
 800fb02:	2300      	movs	r3, #0
 800fb04:	2200      	movs	r2, #0
 800fb06:	2100      	movs	r1, #0
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff fc33 	bl	800f374 <_ZN8touchgfx4RectC1Essss>
    while (d)
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00b      	beq.n	800fb2c <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f7ff fe0c 	bl	800f732 <_ZNK8touchgfx8Drawable7getRectEv>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f7ff fd64 	bl	800f5ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	699b      	ldr	r3, [r3, #24]
 800fb28:	60fb      	str	r3, [r7, #12]
    while (d)
 800fb2a:	e7f0      	b.n	800fb0e <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 800fb2c:	bf00      	nop
}
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	3710      	adds	r7, #16
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b084      	sub	sp, #16
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	460b      	mov	r3, r1
 800fb40:	807b      	strh	r3, [r7, #2]
 800fb42:	4613      	mov	r3, r2
 800fb44:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb4a:	60fb      	str	r3, [r7, #12]
    while (d)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00d      	beq.n	800fb6e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	3354      	adds	r3, #84	; 0x54
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fb5e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800fb62:	68f8      	ldr	r0, [r7, #12]
 800fb64:	4798      	blx	r3
        d = d->nextSibling;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	699b      	ldr	r3, [r3, #24]
 800fb6a:	60fb      	str	r3, [r7, #12]
    while (d)
 800fb6c:	e7ee      	b.n	800fb4c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 800fb6e:	bf00      	nop
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b084      	sub	sp, #16
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb84:	60fb      	str	r3, [r7, #12]
    while (d)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00a      	beq.n	800fba2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	3308      	adds	r3, #8
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68f9      	ldr	r1, [r7, #12]
 800fb96:	6838      	ldr	r0, [r7, #0]
 800fb98:	4798      	blx	r3
        d = d->nextSibling;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	699b      	ldr	r3, [r3, #24]
 800fb9e:	60fb      	str	r3, [r7, #12]
    while (d)
 800fba0:	e7f1      	b.n	800fb86 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 800fba2:	bf00      	nop
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b086      	sub	sp, #24
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	60f8      	str	r0, [r7, #12]
 800fbb2:	60b9      	str	r1, [r7, #8]
 800fbb4:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d107      	bne.n	800fbce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	3364      	adds	r3, #100	; 0x64
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	6879      	ldr	r1, [r7, #4]
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	4798      	blx	r3
        return;
 800fbcc:	e026      	b.n	800fc1c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d10a      	bne.n	800fbea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 800fbe2:	68fa      	ldr	r2, [r7, #12]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	615a      	str	r2, [r3, #20]
 800fbe8:	e018      	b.n	800fc1c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbee:	617b      	str	r3, [r7, #20]
        while (tmp)
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d012      	beq.n	800fc1c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 800fbf6:	697a      	ldr	r2, [r7, #20]
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d10a      	bne.n	800fc14 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	699a      	ldr	r2, [r3, #24]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	615a      	str	r2, [r3, #20]
                return;
 800fc12:	e003      	b.n	800fc1c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	699b      	ldr	r3, [r3, #24]
 800fc18:	617b      	str	r3, [r7, #20]
        while (tmp)
 800fc1a:	e7e9      	b.n	800fbf0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 800fc1c:	3718      	adds	r7, #24
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b088      	sub	sp, #32
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	60f8      	str	r0, [r7, #12]
 800fc2a:	60b9      	str	r1, [r7, #8]
 800fc2c:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7ff fa91 	bl	800f158 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fc36:	4603      	mov	r3, r0
 800fc38:	f083 0301 	eor.w	r3, r3, #1
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d14b      	bne.n	800fcda <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d049      	beq.n	800fcde <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc4e:	61fb      	str	r3, [r7, #28]
    while (d)
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d044      	beq.n	800fce0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 800fc56:	69f8      	ldr	r0, [r7, #28]
 800fc58:	f7ff fa7e 	bl	800f158 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d037      	beq.n	800fcd2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 800fc62:	69f8      	ldr	r0, [r7, #28]
 800fc64:	f7ff fd65 	bl	800f732 <_ZNK8touchgfx8Drawable7getRectEv>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	f107 0314 	add.w	r3, r7, #20
 800fc6e:	68b9      	ldr	r1, [r7, #8]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7ff fc2a 	bl	800f4ca <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800fc76:	f107 0314 	add.w	r3, r7, #20
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7ff fd42 	bl	800f704 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fc80:	4603      	mov	r3, r0
 800fc82:	f083 0301 	eor.w	r3, r3, #1
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d022      	beq.n	800fcd2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 800fc8c:	69f8      	ldr	r0, [r7, #28]
 800fc8e:	f7ff fd5c 	bl	800f74a <_ZNK8touchgfx8Drawable4getXEv>
 800fc92:	4603      	mov	r3, r0
 800fc94:	4619      	mov	r1, r3
 800fc96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	b28b      	uxth	r3, r1
 800fc9e:	1ad3      	subs	r3, r2, r3
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	b21b      	sxth	r3, r3
 800fca4:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 800fca6:	69f8      	ldr	r0, [r7, #28]
 800fca8:	f7ff fd5c 	bl	800f764 <_ZNK8touchgfx8Drawable4getYEv>
 800fcac:	4603      	mov	r3, r0
 800fcae:	4619      	mov	r1, r3
 800fcb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fcb4:	b29a      	uxth	r2, r3
 800fcb6:	b28b      	uxth	r3, r1
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	b21b      	sxth	r3, r3
 800fcbe:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	3360      	adds	r3, #96	; 0x60
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f107 0114 	add.w	r1, r7, #20
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	69f8      	ldr	r0, [r7, #28]
 800fcd0:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	699b      	ldr	r3, [r3, #24]
 800fcd6:	61fb      	str	r3, [r7, #28]
    while (d)
 800fcd8:	e7ba      	b.n	800fc50 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 800fcda:	bf00      	nop
 800fcdc:	e000      	b.n	800fce0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 800fcde:	bf00      	nop
    }
}
 800fce0:	3720      	adds	r7, #32
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800fce6:	b480      	push	{r7}
 800fce8:	b083      	sub	sp, #12
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
 800fcee:	6039      	str	r1, [r7, #0]
        color = col;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	683a      	ldr	r2, [r7, #0]
 800fcf4:	601a      	str	r2, [r3, #0]
    }
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af02      	add	r7, sp, #8
 800fd0a:	6078      	str	r0, [r7, #4]
        visible(true)
 800fd0c:	4a13      	ldr	r2, [pc, #76]	; (800fd5c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	601a      	str	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	1d18      	adds	r0, r3, #4
 800fd16:	2300      	movs	r3, #0
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	2100      	movs	r1, #0
 800fd20:	f7ff fb28 	bl	800f374 <_ZN8touchgfx4RectC1Essss>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	330c      	adds	r3, #12
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff f911 	bl	800ef50 <_ZN8touchgfx4RectC1Ev>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	615a      	str	r2, [r3, #20]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	619a      	str	r2, [r3, #24]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	61da      	str	r2, [r3, #28]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4618      	mov	r0, r3
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	080217fc 	.word	0x080217fc

0800fd60 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	460b      	mov	r3, r1
 800fd6a:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	78fa      	ldrb	r2, [r7, #3]
 800fd70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800fd74:	bf00      	nop
 800fd76:	370c      	adds	r7, #12
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <_ZN8touchgfx6WidgetC1Ev>:
    Widget() : Drawable() { }
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff ffba 	bl	800fd04 <_ZN8touchgfx8DrawableC1Ev>
 800fd90:	4a03      	ldr	r2, [pc, #12]	; (800fda0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	601a      	str	r2, [r3, #0]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	08020254 	.word	0x08020254

0800fda4 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff ffe6 	bl	800fd80 <_ZN8touchgfx6WidgetC1Ev>
 800fdb4:	4a0a      	ldr	r2, [pc, #40]	; (800fde0 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	601a      	str	r2, [r3, #0]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	22ff      	movs	r2, #255	; 0xff
 800fdbe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	3328      	adds	r3, #40	; 0x28
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7ff ff8c 	bl	800fce6 <_ZN8touchgfx9colortypeC1Em>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	080204c8 	.word	0x080204c8

0800fde4 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	4a05      	ldr	r2, [pc, #20]	; (800fe04 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	601a      	str	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7ff fa17 	bl	800f228 <_ZN8touchgfx6WidgetD1Ev>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	080204c8 	.word	0x080204c8

0800fe08 <_ZN8touchgfx3BoxD0Ev>:
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f7ff ffe7 	bl	800fde4 <_ZN8touchgfx3BoxD1Ev>
 800fe16:	2130      	movs	r1, #48	; 0x30
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f00e fd3a 	bl	801e892 <_ZdlPvj>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4618      	mov	r0, r3
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	683a      	ldr	r2, [r7, #0]
 800fe36:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fe38:	bf00      	nop
 800fe3a:	370c      	adds	r7, #12
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr

0800fe44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800fe44:	b590      	push	{r4, r7, lr}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	71fb      	strb	r3, [r7, #7]
 800fe4e:	460b      	mov	r3, r1
 800fe50:	71bb      	strb	r3, [r7, #6]
 800fe52:	4613      	mov	r3, r2
 800fe54:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800fe56:	f7ff fa65 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d105      	bne.n	800fe6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800fe60:	4b0a      	ldr	r3, [pc, #40]	; (800fe8c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800fe62:	4a0b      	ldr	r2, [pc, #44]	; (800fe90 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800fe64:	2138      	movs	r1, #56	; 0x38
 800fe66:	480b      	ldr	r0, [pc, #44]	; (800fe94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800fe68:	f00e fd30 	bl	801e8cc <__assert_func>
 800fe6c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800fe6e:	f7ff fa65 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 800fe72:	6803      	ldr	r3, [r0, #0]
 800fe74:	332c      	adds	r3, #44	; 0x2c
 800fe76:	681c      	ldr	r4, [r3, #0]
 800fe78:	797b      	ldrb	r3, [r7, #5]
 800fe7a:	79ba      	ldrb	r2, [r7, #6]
 800fe7c:	79f9      	ldrb	r1, [r7, #7]
 800fe7e:	47a0      	blx	r4
 800fe80:	4603      	mov	r3, r0
    }
 800fe82:	4618      	mov	r0, r3
 800fe84:	370c      	adds	r7, #12
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd90      	pop	{r4, r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	0801fa3c 	.word	0x0801fa3c
 800fe90:	08020384 	.word	0x08020384
 800fe94:	0801fa80 	.word	0x0801fa80

0800fe98 <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	4a04      	ldr	r2, [pc, #16]	; (800feb4 <_ZN8touchgfx5EventD1Ev+0x1c>)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	601a      	str	r2, [r3, #0]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4618      	mov	r0, r3
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr
 800feb4:	08020410 	.word	0x08020410

0800feb8 <_ZN8touchgfx5EventD0Ev>:
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f7ff ffe9 	bl	800fe98 <_ZN8touchgfx5EventD1Ev>
 800fec6:	2104      	movs	r1, #4
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f00e fce2 	bl	801e892 <_ZdlPvj>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4618      	mov	r0, r3
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	4a05      	ldr	r2, [pc, #20]	; (800fef8 <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	601a      	str	r2, [r3, #0]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4618      	mov	r0, r3
 800feea:	f7ff ffd5 	bl	800fe98 <_ZN8touchgfx5EventD1Ev>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4618      	mov	r0, r3
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	080203fc 	.word	0x080203fc

0800fefc <_ZN8touchgfx10ClickEventD0Ev>:
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f7ff ffe7 	bl	800fed8 <_ZN8touchgfx10ClickEventD1Ev>
 800ff0a:	210c      	movs	r1, #12
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f00e fcc0 	bl	801e892 <_ZdlPvj>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
    {
        return _type;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	791b      	ldrb	r3, [r3, #4]
    }
 800ff28:	4618      	mov	r0, r3
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 800ff3c:	2300      	movs	r3, #0
    }
 800ff3e:	4618      	mov	r0, r3
 800ff40:	370c      	adds	r7, #12
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
	...

0800ff4c <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	4a05      	ldr	r2, [pc, #20]	; (800ff6c <_ZN8touchgfx9DragEventD1Ev+0x20>)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	601a      	str	r2, [r3, #0]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7ff ff9b 	bl	800fe98 <_ZN8touchgfx5EventD1Ev>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	4618      	mov	r0, r3
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	080203e8 	.word	0x080203e8

0800ff70 <_ZN8touchgfx9DragEventD0Ev>:
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7ff ffe7 	bl	800ff4c <_ZN8touchgfx9DragEventD1Ev>
 800ff7e:	2110      	movs	r1, #16
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f00e fc86 	bl	801e892 <_ZdlPvj>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3708      	adds	r7, #8
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800ff90:	b480      	push	{r7}
 800ff92:	b083      	sub	sp, #12
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 800ff98:	2301      	movs	r3, #1
    }
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	370c      	adds	r7, #12
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
	...

0800ffa8 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7ff fee4 	bl	800fd80 <_ZN8touchgfx6WidgetC1Ev>
 800ffb8:	4a09      	ldr	r2, [pc, #36]	; (800ffe0 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	601a      	str	r2, [r3, #0]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	629a      	str	r2, [r3, #40]	; 0x28
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2101      	movs	r1, #1
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff fec5 	bl	800fd60 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	08020458 	.word	0x08020458

0800ffe4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	4a05      	ldr	r2, [pc, #20]	; (8010004 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	601a      	str	r2, [r3, #0]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7ff f917 	bl	800f228 <_ZN8touchgfx6WidgetD1Ev>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4618      	mov	r0, r3
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	08020458 	.word	0x08020458

08010008 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f7ff ffe7 	bl	800ffe4 <_ZN8touchgfx14AbstractButtonD1Ev>
 8010016:	2130      	movs	r1, #48	; 0x30
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f00e fc3a 	bl	801e892 <_ZdlPvj>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4618      	mov	r0, r3
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4618      	mov	r0, r3
 8010034:	f7ff ffb8 	bl	800ffa8 <_ZN8touchgfx14AbstractButtonC1Ev>
 8010038:	4a0c      	ldr	r2, [pc, #48]	; (801006c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	601a      	str	r2, [r3, #0]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	332e      	adds	r3, #46	; 0x2e
 8010042:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010046:	4618      	mov	r0, r3
 8010048:	f7fe ff99 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	3330      	adds	r3, #48	; 0x30
 8010050:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010054:	4618      	mov	r0, r3
 8010056:	f7fe ff92 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	22ff      	movs	r2, #255	; 0xff
 801005e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4618      	mov	r0, r3
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	08020534 	.word	0x08020534

08010070 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	4a05      	ldr	r2, [pc, #20]	; (8010090 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff ffaf 	bl	800ffe4 <_ZN8touchgfx14AbstractButtonD1Ev>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	4618      	mov	r0, r3
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	08020534 	.word	0x08020534

08010094 <_ZN8touchgfx6ButtonD0Ev>:
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7ff ffe7 	bl	8010070 <_ZN8touchgfx6ButtonD1Ev>
 80100a2:	2134      	movs	r1, #52	; 0x34
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f00e fbf4 	bl	801e892 <_ZdlPvj>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4618      	mov	r0, r3
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <_ZNK8touchgfx6Bitmap5getIdEv>:
     *
     *        Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 80100bc:	4b07      	ldr	r3, [pc, #28]	; (80100dc <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d105      	bne.n	80100d0 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 80100c4:	4b06      	ldr	r3, [pc, #24]	; (80100e0 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 80100c6:	4a07      	ldr	r2, [pc, #28]	; (80100e4 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 80100c8:	21b6      	movs	r1, #182	; 0xb6
 80100ca:	4807      	ldr	r0, [pc, #28]	; (80100e8 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 80100cc:	f00e fbfe 	bl	801e8cc <__assert_func>
        return bitmapId;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	881b      	ldrh	r3, [r3, #0]
    }
 80100d4:	4618      	mov	r0, r3
 80100d6:	3708      	adds	r7, #8
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	20009e0c 	.word	0x20009e0c
 80100e0:	0801facc 	.word	0x0801facc
 80100e4:	0802041c 	.word	0x0802041c
 80100e8:	0801fb08 	.word	0x0801fb08

080100ec <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4618      	mov	r0, r3
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8010116:	4618      	mov	r0, r3
 8010118:	370c      	adds	r7, #12
 801011a:	46bd      	mov	sp, r7
 801011c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010120:	4770      	bx	lr

08010122 <_ZNK8touchgfx14AbstractButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_ABSTRACTBUTTON.
     */
    virtual uint16_t getType() const
 8010122:	b480      	push	{r7}
 8010124:	b083      	sub	sp, #12
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_ABSTRACTBUTTON;
 801012a:	2302      	movs	r3, #2
    }
 801012c:	4618      	mov	r0, r3
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b084      	sub	sp, #16
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
    bool wasPressed = pressed;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010148:	73fb      	strb	r3, [r7, #15]
    pressed = (event.getType() == ClickEvent::PRESSED);
 801014a:	6838      	ldr	r0, [r7, #0]
 801014c:	f7ff fee6 	bl	800ff1c <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	bf0c      	ite	eq
 8010156:	2301      	moveq	r3, #1
 8010158:	2300      	movne	r3, #0
 801015a:	b2da      	uxtb	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010168:	2b00      	cmp	r3, #0
 801016a:	d005      	beq.n	8010178 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x40>
 801016c:	7bfb      	ldrb	r3, [r7, #15]
 801016e:	f083 0301 	eor.w	r3, r3, #1
 8010172:	b2db      	uxtb	r3, r3
 8010174:	2b00      	cmp	r3, #0
 8010176:	d10a      	bne.n	801018e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x56>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801017e:	f083 0301 	eor.w	r3, r3, #1
 8010182:	b2db      	uxtb	r3, r3
 8010184:	2b00      	cmp	r3, #0
 8010186:	d009      	beq.n	801019c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
 8010188:	7bfb      	ldrb	r3, [r7, #15]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d006      	beq.n	801019c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
    {
        // Pressed state changed, so invalidate
        invalidate();
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	3314      	adds	r3, #20
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4610      	mov	r0, r2
 801019a:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 801019c:	7bfb      	ldrb	r3, [r7, #15]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00b      	beq.n	80101ba <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 80101a2:	6838      	ldr	r0, [r7, #0]
 80101a4:	f7ff feba 	bl	800ff1c <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d105      	bne.n	80101ba <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d001      	beq.n	80101ba <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 80101b6:	2301      	movs	r3, #1
 80101b8:	e000      	b.n	80101bc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x84>
 80101ba:	2300      	movs	r3, #0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d015      	beq.n	80101ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
    {
        // This is a click. Fire callback.
        if (action->isValid())
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	330c      	adds	r3, #12
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	4610      	mov	r0, r2
 80101d0:	4798      	blx	r3
 80101d2:	4603      	mov	r3, r0
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d009      	beq.n	80101ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
        {
            action->execute(*this);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	3308      	adds	r3, #8
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	6879      	ldr	r1, [r7, #4]
 80101e8:	4610      	mov	r0, r2
 80101ea:	4798      	blx	r3
        }
    }
}
 80101ec:	bf00      	nop
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <_ZNK8touchgfx3Box7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BOX.
     */
    virtual uint16_t getType() const
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 80101fc:	2304      	movs	r3, #4
    }
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr

0801020a <_ZNK8touchgfx3Box12getSolidRectEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
Rect Box::getSolidRect() const
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b084      	sub	sp, #16
 801020e:	af02      	add	r7, sp, #8
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 8010214:	2300      	movs	r3, #0
 8010216:	9300      	str	r3, [sp, #0]
 8010218:	2300      	movs	r3, #0
 801021a:	2200      	movs	r2, #0
 801021c:	2100      	movs	r1, #0
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f7ff f8a8 	bl	800f374 <_ZN8touchgfx4RectC1Essss>
    if (reportAsSolid || alpha == 255)
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801022a:	2b00      	cmp	r3, #0
 801022c:	d104      	bne.n	8010238 <_ZNK8touchgfx3Box12getSolidRectEv+0x2e>
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8010234:	2bff      	cmp	r3, #255	; 0xff
 8010236:	d109      	bne.n	801024c <_ZNK8touchgfx3Box12getSolidRectEv+0x42>
    {
        solidRect.width = rect.width;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 801024c:	bf00      	nop
}
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	3708      	adds	r7, #8
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:

void Box::draw(const Rect& area) const
{
 8010256:	b590      	push	{r4, r7, lr}
 8010258:	b085      	sub	sp, #20
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
 801025e:	6039      	str	r1, [r7, #0]
    Rect dirty = area;
 8010260:	683a      	ldr	r2, [r7, #0]
 8010262:	f107 0308 	add.w	r3, r7, #8
 8010266:	6810      	ldr	r0, [r2, #0]
 8010268:	6851      	ldr	r1, [r2, #4]
 801026a:	c303      	stmia	r3!, {r0, r1}
    translateRectToAbsolute(dirty);
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3324      	adds	r3, #36	; 0x24
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f107 0108 	add.w	r1, r7, #8
 801027a:	4610      	mov	r0, r2
 801027c:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 801027e:	f7ff f85d 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 8010282:	6803      	ldr	r3, [r0, #0]
 8010284:	331c      	adds	r3, #28
 8010286:	681c      	ldr	r4, [r3, #0]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	f107 0108 	add.w	r1, r7, #8
 8010294:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010296:	47a0      	blx	r4
}
 8010298:	bf00      	nop
 801029a:	3714      	adds	r7, #20
 801029c:	46bd      	mov	sp, r7
 801029e:	bd90      	pop	{r4, r7, pc}

080102a0 <_ZNK8touchgfx6Button7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTON;
 80102a8:	2305      	movs	r3, #5
    }
 80102aa:	4618      	mov	r0, r3
 80102ac:	370c      	adds	r7, #12
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void Button::draw(const Rect& invalidatedArea) const
{
 80102b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102b8:	b08d      	sub	sp, #52	; 0x34
 80102ba:	af04      	add	r7, sp, #16
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
    Bitmap bmp(AbstractButton::pressed ? down : up);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d002      	beq.n	80102d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1a>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	3330      	adds	r3, #48	; 0x30
 80102ce:	e001      	b.n	80102d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1e>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	332e      	adds	r3, #46	; 0x2e
 80102d4:	881b      	ldrh	r3, [r3, #0]
 80102d6:	83bb      	strh	r3, [r7, #28]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 80102d8:	f107 031c 	add.w	r3, r7, #28
 80102dc:	4618      	mov	r0, r3
 80102de:	f00b fd21 	bl	801bd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80102e2:	4603      	mov	r3, r0
 80102e4:	b21c      	sxth	r4, r3
 80102e6:	f107 031c 	add.w	r3, r7, #28
 80102ea:	4618      	mov	r0, r3
 80102ec:	f00b fd54 	bl	801bd98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80102f0:	4603      	mov	r3, r0
 80102f2:	b21b      	sxth	r3, r3
 80102f4:	f107 0014 	add.w	r0, r7, #20
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	4623      	mov	r3, r4
 80102fc:	2200      	movs	r2, #0
 80102fe:	2100      	movs	r1, #0
 8010300:	f7ff f838 	bl	800f374 <_ZN8touchgfx4RectC1Essss>
    dirty &= invalidatedArea;
 8010304:	f107 0314 	add.w	r3, r7, #20
 8010308:	6839      	ldr	r1, [r7, #0]
 801030a:	4618      	mov	r0, r3
 801030c:	f7ff f8f2 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 8010310:	f107 031c 	add.w	r3, r7, #28
 8010314:	4618      	mov	r0, r3
 8010316:	f7ff fecd 	bl	80100b4 <_ZNK8touchgfx6Bitmap5getIdEv>
 801031a:	4603      	mov	r3, r0
 801031c:	461a      	mov	r2, r3
 801031e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010322:	429a      	cmp	r2, r3
 8010324:	d00c      	beq.n	8010340 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8010326:	f107 0314 	add.w	r3, r7, #20
 801032a:	4618      	mov	r0, r3
 801032c:	f7ff f9ea 	bl	800f704 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010330:	4603      	mov	r3, r0
 8010332:	f083 0301 	eor.w	r3, r3, #1
 8010336:	b2db      	uxtb	r3, r3
 8010338:	2b00      	cmp	r3, #0
 801033a:	d001      	beq.n	8010340 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801033c:	2301      	movs	r3, #1
 801033e:	e000      	b.n	8010342 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8c>
 8010340:	2300      	movs	r3, #0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d024      	beq.n	8010390 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
    {
        Rect r;
 8010346:	f107 030c 	add.w	r3, r7, #12
 801034a:	4618      	mov	r0, r3
 801034c:	f7fe fe00 	bl	800ef50 <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	3324      	adds	r3, #36	; 0x24
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f107 010c 	add.w	r1, r7, #12
 801035e:	4610      	mov	r0, r2
 8010360:	4798      	blx	r3
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 8010362:	f7fe ffeb 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 8010366:	6803      	ldr	r3, [r0, #0]
 8010368:	330c      	adds	r3, #12
 801036a:	681c      	ldr	r4, [r3, #0]
 801036c:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
 8010370:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801037a:	f107 011c 	add.w	r1, r7, #28
 801037e:	2201      	movs	r2, #1
 8010380:	9202      	str	r2, [sp, #8]
 8010382:	9301      	str	r3, [sp, #4]
 8010384:	f107 0314 	add.w	r3, r7, #20
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	4633      	mov	r3, r6
 801038c:	462a      	mov	r2, r5
 801038e:	47a0      	blx	r4
    }
}
 8010390:	bf00      	nop
 8010392:	3724      	adds	r7, #36	; 0x24
 8010394:	46bd      	mov	sp, r7
 8010396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010398 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 8010398:	b590      	push	{r4, r7, lr}
 801039a:	b085      	sub	sp, #20
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
    up = bmpReleased;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	68ba      	ldr	r2, [r7, #8]
 80103a8:	8812      	ldrh	r2, [r2, #0]
 80103aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    down = bmpPressed;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	8812      	ldrh	r2, [r2, #0]
 80103b2:	861a      	strh	r2, [r3, #48]	; 0x30
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 80103b4:	68fc      	ldr	r4, [r7, #12]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	3330      	adds	r3, #48	; 0x30
 80103ba:	4618      	mov	r0, r3
 80103bc:	f00b fcb2 	bl	801bd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80103c0:	4603      	mov	r3, r0
 80103c2:	b21b      	sxth	r3, r3
 80103c4:	4619      	mov	r1, r3
 80103c6:	4620      	mov	r0, r4
 80103c8:	f7fe fe73 	bl	800f0b2 <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(down.getHeight());
 80103cc:	68fc      	ldr	r4, [r7, #12]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	3330      	adds	r3, #48	; 0x30
 80103d2:	4618      	mov	r0, r3
 80103d4:	f00b fce0 	bl	801bd98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80103d8:	4603      	mov	r3, r0
 80103da:	b21b      	sxth	r3, r3
 80103dc:	4619      	mov	r1, r3
 80103de:	4620      	mov	r0, r4
 80103e0:	f7fe fe76 	bl	800f0d0 <_ZN8touchgfx8Drawable9setHeightEs>
}
 80103e4:	bf00      	nop
 80103e6:	3714      	adds	r7, #20
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd90      	pop	{r4, r7, pc}

080103ec <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af02      	add	r7, sp, #8
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80103fc:	2bff      	cmp	r3, #255	; 0xff
 80103fe:	d008      	beq.n	8010412 <_ZNK8touchgfx6Button12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010400:	2300      	movs	r3, #0
 8010402:	9300      	str	r3, [sp, #0]
 8010404:	2300      	movs	r3, #0
 8010406:	2200      	movs	r2, #0
 8010408:	2100      	movs	r1, #0
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7fe ffb2 	bl	800f374 <_ZN8touchgfx4RectC1Essss>
 8010410:	e015      	b.n	801043e <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010418:	2b00      	cmp	r3, #0
 801041a:	d008      	beq.n	801042e <_ZNK8touchgfx6Button12getSolidRectEv+0x42>
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	4611      	mov	r1, r2
 8010426:	4618      	mov	r0, r3
 8010428:	f00b fcf0 	bl	801be0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801042c:	e007      	b.n	801043e <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4611      	mov	r1, r2
 8010438:	4618      	mov	r0, r3
 801043a:	f00b fce7 	bl	801be0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8010446:	b480      	push	{r7}
 8010448:	b083      	sub	sp, #12
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	b29b      	uxth	r3, r3
    }
 8010454:	4618      	mov	r0, r3
 8010456:	370c      	adds	r7, #12
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr

08010460 <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint8_t dummy = 0x5a;

void OSWrappers::initialize()
{
 8010460:	b580      	push	{r7, lr}
 8010462:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8010464:	2203      	movs	r2, #3
 8010466:	2100      	movs	r1, #0
 8010468:	2001      	movs	r0, #1
 801046a:	f000 fc41 	bl	8010cf0 <xQueueGenericCreate>
 801046e:	4602      	mov	r2, r0
 8010470:	4b0b      	ldr	r3, [pc, #44]	; (80104a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8010472:	601a      	str	r2, [r3, #0]
 8010474:	4b0a      	ldr	r3, [pc, #40]	; (80104a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d006      	beq.n	801048a <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 801047c:	4b08      	ldr	r3, [pc, #32]	; (80104a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801047e:	6818      	ldr	r0, [r3, #0]
 8010480:	2300      	movs	r3, #0
 8010482:	2200      	movs	r2, #0
 8010484:	2100      	movs	r1, #0
 8010486:	f000 fc8f 	bl	8010da8 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 801048a:	2200      	movs	r2, #0
 801048c:	2101      	movs	r1, #1
 801048e:	2001      	movs	r0, #1
 8010490:	f000 fc2e 	bl	8010cf0 <xQueueGenericCreate>
 8010494:	4602      	mov	r2, r0
 8010496:	4b03      	ldr	r3, [pc, #12]	; (80104a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8010498:	601a      	str	r2, [r3, #0]
}
 801049a:	bf00      	nop
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	20000860 	.word	0x20000860
 80104a4:	20000864 	.word	0x20000864

080104a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 80104ac:	4b04      	ldr	r3, [pc, #16]	; (80104c0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f04f 31ff 	mov.w	r1, #4294967295
 80104b4:	4618      	mov	r0, r3
 80104b6:	f000 ff6b 	bl	8011390 <xQueueSemaphoreTake>
}
 80104ba:	bf00      	nop
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	20000860 	.word	0x20000860

080104c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
void OSWrappers::giveFrameBufferSemaphore()
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80104c8:	4b04      	ldr	r3, [pc, #16]	; (80104dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80104ca:	6818      	ldr	r0, [r3, #0]
 80104cc:	2300      	movs	r3, #0
 80104ce:	2200      	movs	r2, #0
 80104d0:	2100      	movs	r1, #0
 80104d2:	f000 fc69 	bl	8010da8 <xQueueGenericSend>
}
 80104d6:	bf00      	nop
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	20000860 	.word	0x20000860

080104e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80104e4:	4b03      	ldr	r3, [pc, #12]	; (80104f4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2100      	movs	r1, #0
 80104ea:	4618      	mov	r0, r3
 80104ec:	f000 ff50 	bl	8011390 <xQueueSemaphoreTake>
}
 80104f0:	bf00      	nop
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	20000860 	.word	0x20000860

080104f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80104fe:	2300      	movs	r3, #0
 8010500:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8010502:	4b0b      	ldr	r3, [pc, #44]	; (8010530 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	1d3a      	adds	r2, r7, #4
 8010508:	4611      	mov	r1, r2
 801050a:	4618      	mov	r0, r3
 801050c:	f000 fdda 	bl	80110c4 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d007      	beq.n	8010526 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8010516:	4b07      	ldr	r3, [pc, #28]	; (8010534 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8010518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801051c:	601a      	str	r2, [r3, #0]
 801051e:	f3bf 8f4f 	dsb	sy
 8010522:	f3bf 8f6f 	isb	sy
}
 8010526:	bf00      	nop
 8010528:	3708      	adds	r7, #8
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	20000860 	.word	0x20000860
 8010534:	e000ed04 	.word	0xe000ed04

08010538 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
    if (vsync_q)
 801053e:	4b0e      	ldr	r3, [pc, #56]	; (8010578 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d013      	beq.n	801056e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8010546:	2300      	movs	r3, #0
 8010548:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 801054a:	4b0b      	ldr	r3, [pc, #44]	; (8010578 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 801054c:	6818      	ldr	r0, [r3, #0]
 801054e:	1d3a      	adds	r2, r7, #4
 8010550:	2300      	movs	r3, #0
 8010552:	490a      	ldr	r1, [pc, #40]	; (801057c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8010554:	f000 fd22 	bl	8010f9c <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d007      	beq.n	801056e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 801055e:	4b08      	ldr	r3, [pc, #32]	; (8010580 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8010560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010564:	601a      	str	r2, [r3, #0]
 8010566:	f3bf 8f4f 	dsb	sy
 801056a:	f3bf 8f6f 	isb	sy
    }
}
 801056e:	bf00      	nop
 8010570:	3708      	adds	r7, #8
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	20000864 	.word	0x20000864
 801057c:	20000054 	.word	0x20000054
 8010580:	e000ed04 	.word	0xe000ed04

08010584 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 8010584:	b580      	push	{r7, lr}
 8010586:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8010588:	4b08      	ldr	r3, [pc, #32]	; (80105ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2200      	movs	r2, #0
 801058e:	4908      	ldr	r1, [pc, #32]	; (80105b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010590:	4618      	mov	r0, r3
 8010592:	f000 fe21 	bl	80111d8 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8010596:	4b05      	ldr	r3, [pc, #20]	; (80105ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f04f 32ff 	mov.w	r2, #4294967295
 801059e:	4904      	ldr	r1, [pc, #16]	; (80105b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80105a0:	4618      	mov	r0, r3
 80105a2:	f000 fe19 	bl	80111d8 <xQueueReceive>
}
 80105a6:	bf00      	nop
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	20000864 	.word	0x20000864
 80105b0:	20000054 	.word	0x20000054

080105b4 <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d007      	beq.n	80105d2 <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 80105c2:	f7fe feaf 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2101      	movs	r1, #1
 80105ca:	4618      	mov	r0, r3
 80105cc:	f009 fa64 	bl	8019a98 <_ZN8touchgfx3HAL12setMCUActiveEb>
 80105d0:	e006      	b.n	80105e0 <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 80105d2:	f7fe fea7 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 80105d6:	4603      	mov	r3, r0
 80105d8:	2100      	movs	r1, #0
 80105da:	4618      	mov	r0, r3
 80105dc:	f009 fa5c 	bl	8019a98 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 80105e0:	2301      	movs	r3, #1
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3708      	adds	r7, #8
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 80105ea:	b480      	push	{r7}
 80105ec:	b083      	sub	sp, #12
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
 80105f2:	6039      	str	r1, [r7, #0]
        while (1);
 80105f4:	e7fe      	b.n	80105f4 <vApplicationStackOverflowHook+0xa>

080105f6 <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 80105f6:	b480      	push	{r7}
 80105f8:	b083      	sub	sp, #12
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
 80105fe:	6039      	str	r1, [r7, #0]
        while (1);
 8010600:	e7fe      	b.n	8010600 <vApplicationMallocFailedHook+0xa>
	...

08010604 <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 8010604:	b580      	push	{r7, lr}
 8010606:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8010608:	4902      	ldr	r1, [pc, #8]	; (8010614 <vApplicationIdleHook+0x10>)
 801060a:	2000      	movs	r0, #0
 801060c:	f001 fd18 	bl	8012040 <vTaskSetApplicationTaskTag>
    }
 8010610:	bf00      	nop
 8010612:	bd80      	pop	{r7, pc}
 8010614:	080105b5 	.word	0x080105b5

08010618 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010618:	b480      	push	{r7}
 801061a:	b087      	sub	sp, #28
 801061c:	af00      	add	r7, sp, #0
 801061e:	60f8      	str	r0, [r7, #12]
 8010620:	60b9      	str	r1, [r7, #8]
 8010622:	4613      	mov	r3, r2
 8010624:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010626:	2301      	movs	r3, #1
 8010628:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801062a:	2300      	movs	r3, #0
 801062c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801062e:	4b1f      	ldr	r3, [pc, #124]	; (80106ac <FATFS_LinkDriverEx+0x94>)
 8010630:	7a5b      	ldrb	r3, [r3, #9]
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b00      	cmp	r3, #0
 8010636:	d131      	bne.n	801069c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010638:	4b1c      	ldr	r3, [pc, #112]	; (80106ac <FATFS_LinkDriverEx+0x94>)
 801063a:	7a5b      	ldrb	r3, [r3, #9]
 801063c:	b2db      	uxtb	r3, r3
 801063e:	461a      	mov	r2, r3
 8010640:	4b1a      	ldr	r3, [pc, #104]	; (80106ac <FATFS_LinkDriverEx+0x94>)
 8010642:	2100      	movs	r1, #0
 8010644:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010646:	4b19      	ldr	r3, [pc, #100]	; (80106ac <FATFS_LinkDriverEx+0x94>)
 8010648:	7a5b      	ldrb	r3, [r3, #9]
 801064a:	b2db      	uxtb	r3, r3
 801064c:	4a17      	ldr	r2, [pc, #92]	; (80106ac <FATFS_LinkDriverEx+0x94>)
 801064e:	009b      	lsls	r3, r3, #2
 8010650:	4413      	add	r3, r2
 8010652:	68fa      	ldr	r2, [r7, #12]
 8010654:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010656:	4b15      	ldr	r3, [pc, #84]	; (80106ac <FATFS_LinkDriverEx+0x94>)
 8010658:	7a5b      	ldrb	r3, [r3, #9]
 801065a:	b2db      	uxtb	r3, r3
 801065c:	461a      	mov	r2, r3
 801065e:	4b13      	ldr	r3, [pc, #76]	; (80106ac <FATFS_LinkDriverEx+0x94>)
 8010660:	4413      	add	r3, r2
 8010662:	79fa      	ldrb	r2, [r7, #7]
 8010664:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010666:	4b11      	ldr	r3, [pc, #68]	; (80106ac <FATFS_LinkDriverEx+0x94>)
 8010668:	7a5b      	ldrb	r3, [r3, #9]
 801066a:	b2db      	uxtb	r3, r3
 801066c:	1c5a      	adds	r2, r3, #1
 801066e:	b2d1      	uxtb	r1, r2
 8010670:	4a0e      	ldr	r2, [pc, #56]	; (80106ac <FATFS_LinkDriverEx+0x94>)
 8010672:	7251      	strb	r1, [r2, #9]
 8010674:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010676:	7dbb      	ldrb	r3, [r7, #22]
 8010678:	3330      	adds	r3, #48	; 0x30
 801067a:	b2da      	uxtb	r2, r3
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	3301      	adds	r3, #1
 8010684:	223a      	movs	r2, #58	; 0x3a
 8010686:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	3302      	adds	r3, #2
 801068c:	222f      	movs	r2, #47	; 0x2f
 801068e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	3303      	adds	r3, #3
 8010694:	2200      	movs	r2, #0
 8010696:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010698:	2300      	movs	r3, #0
 801069a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801069c:	7dfb      	ldrb	r3, [r7, #23]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	371c      	adds	r7, #28
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop
 80106ac:	20000868 	.word	0x20000868

080106b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80106ba:	2200      	movs	r2, #0
 80106bc:	6839      	ldr	r1, [r7, #0]
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f7ff ffaa 	bl	8010618 <FATFS_LinkDriverEx>
 80106c4:	4603      	mov	r3, r0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3708      	adds	r7, #8
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80106ce:	b480      	push	{r7}
 80106d0:	b085      	sub	sp, #20
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	4603      	mov	r3, r0
 80106d6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80106d8:	2300      	movs	r3, #0
 80106da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80106dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80106e0:	2b84      	cmp	r3, #132	; 0x84
 80106e2:	d005      	beq.n	80106f0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80106e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	4413      	add	r3, r2
 80106ec:	3303      	adds	r3, #3
 80106ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80106f0:	68fb      	ldr	r3, [r7, #12]
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3714      	adds	r7, #20
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80106fe:	b480      	push	{r7}
 8010700:	b083      	sub	sp, #12
 8010702:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010704:	f3ef 8305 	mrs	r3, IPSR
 8010708:	607b      	str	r3, [r7, #4]
  return(result);
 801070a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801070c:	2b00      	cmp	r3, #0
 801070e:	bf14      	ite	ne
 8010710:	2301      	movne	r3, #1
 8010712:	2300      	moveq	r3, #0
 8010714:	b2db      	uxtb	r3, r3
}
 8010716:	4618      	mov	r0, r3
 8010718:	370c      	adds	r7, #12
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010722:	b580      	push	{r7, lr}
 8010724:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010726:	f001 ff37 	bl	8012598 <xTaskGetSchedulerState>
 801072a:	4603      	mov	r3, r0
 801072c:	2b01      	cmp	r3, #1
 801072e:	d101      	bne.n	8010734 <osKernelRunning+0x12>
    return 0;
 8010730:	2300      	movs	r3, #0
 8010732:	e000      	b.n	8010736 <osKernelRunning+0x14>
  else
    return 1;
 8010734:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010736:	4618      	mov	r0, r3
 8010738:	bd80      	pop	{r7, pc}

0801073a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801073e:	f7ff ffde 	bl	80106fe <inHandlerMode>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d003      	beq.n	8010750 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010748:	f001 fbac 	bl	8011ea4 <xTaskGetTickCountFromISR>
 801074c:	4603      	mov	r3, r0
 801074e:	e002      	b.n	8010756 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010750:	f001 fb98 	bl	8011e84 <xTaskGetTickCount>
 8010754:	4603      	mov	r3, r0
  }
}
 8010756:	4618      	mov	r0, r3
 8010758:	bd80      	pop	{r7, pc}

0801075a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801075a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801075c:	b089      	sub	sp, #36	; 0x24
 801075e:	af04      	add	r7, sp, #16
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	695b      	ldr	r3, [r3, #20]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d020      	beq.n	80107ae <osThreadCreate+0x54>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	699b      	ldr	r3, [r3, #24]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d01c      	beq.n	80107ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	685c      	ldr	r4, [r3, #4]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681d      	ldr	r5, [r3, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	691e      	ldr	r6, [r3, #16]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010786:	4618      	mov	r0, r3
 8010788:	f7ff ffa1 	bl	80106ce <makeFreeRtosPriority>
 801078c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	695b      	ldr	r3, [r3, #20]
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010796:	9202      	str	r2, [sp, #8]
 8010798:	9301      	str	r3, [sp, #4]
 801079a:	9100      	str	r1, [sp, #0]
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	4632      	mov	r2, r6
 80107a0:	4629      	mov	r1, r5
 80107a2:	4620      	mov	r0, r4
 80107a4:	f001 f8a1 	bl	80118ea <xTaskCreateStatic>
 80107a8:	4603      	mov	r3, r0
 80107aa:	60fb      	str	r3, [r7, #12]
 80107ac:	e01c      	b.n	80107e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	685c      	ldr	r4, [r3, #4]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80107ba:	b29e      	uxth	r6, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ff ff83 	bl	80106ce <makeFreeRtosPriority>
 80107c8:	4602      	mov	r2, r0
 80107ca:	f107 030c 	add.w	r3, r7, #12
 80107ce:	9301      	str	r3, [sp, #4]
 80107d0:	9200      	str	r2, [sp, #0]
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	4632      	mov	r2, r6
 80107d6:	4629      	mov	r1, r5
 80107d8:	4620      	mov	r0, r4
 80107da:	f001 f8df 	bl	801199c <xTaskCreate>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d001      	beq.n	80107e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80107e4:	2300      	movs	r3, #0
 80107e6:	e000      	b.n	80107ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80107e8:	68fb      	ldr	r3, [r7, #12]
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3714      	adds	r7, #20
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b084      	sub	sp, #16
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <osDelay+0x16>
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	e000      	b.n	801080a <osDelay+0x18>
 8010808:	2301      	movs	r3, #1
 801080a:	4618      	mov	r0, r3
 801080c:	f001 f9fe 	bl	8011c0c <vTaskDelay>
  
  return osOK;
 8010810:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010812:	4618      	mov	r0, r3
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}

0801081a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801081a:	b590      	push	{r4, r7, lr}
 801081c:	b085      	sub	sp, #20
 801081e:	af02      	add	r7, sp, #8
 8010820:	6078      	str	r0, [r7, #4]
 8010822:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	689b      	ldr	r3, [r3, #8]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d012      	beq.n	8010852 <osMessageCreate+0x38>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d00e      	beq.n	8010852 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6818      	ldr	r0, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6859      	ldr	r1, [r3, #4]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	689a      	ldr	r2, [r3, #8]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	68dc      	ldr	r4, [r3, #12]
 8010844:	2300      	movs	r3, #0
 8010846:	9300      	str	r3, [sp, #0]
 8010848:	4623      	mov	r3, r4
 801084a:	f000 f9df 	bl	8010c0c <xQueueGenericCreateStatic>
 801084e:	4603      	mov	r3, r0
 8010850:	e008      	b.n	8010864 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6818      	ldr	r0, [r3, #0]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	4619      	mov	r1, r3
 801085e:	f000 fa47 	bl	8010cf0 <xQueueGenericCreate>
 8010862:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010864:	4618      	mov	r0, r3
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	bd90      	pop	{r4, r7, pc}

0801086c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b086      	sub	sp, #24
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010878:	2300      	movs	r3, #0
 801087a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d101      	bne.n	801088a <osMessagePut+0x1e>
    ticks = 1;
 8010886:	2301      	movs	r3, #1
 8010888:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801088a:	f7ff ff38 	bl	80106fe <inHandlerMode>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d018      	beq.n	80108c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010894:	f107 0210 	add.w	r2, r7, #16
 8010898:	f107 0108 	add.w	r1, r7, #8
 801089c:	2300      	movs	r3, #0
 801089e:	68f8      	ldr	r0, [r7, #12]
 80108a0:	f000 fb7c 	bl	8010f9c <xQueueGenericSendFromISR>
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d001      	beq.n	80108ae <osMessagePut+0x42>
      return osErrorOS;
 80108aa:	23ff      	movs	r3, #255	; 0xff
 80108ac:	e018      	b.n	80108e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d014      	beq.n	80108de <osMessagePut+0x72>
 80108b4:	4b0c      	ldr	r3, [pc, #48]	; (80108e8 <osMessagePut+0x7c>)
 80108b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ba:	601a      	str	r2, [r3, #0]
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	e00b      	b.n	80108de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80108c6:	f107 0108 	add.w	r1, r7, #8
 80108ca:	2300      	movs	r3, #0
 80108cc:	697a      	ldr	r2, [r7, #20]
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	f000 fa6a 	bl	8010da8 <xQueueGenericSend>
 80108d4:	4603      	mov	r3, r0
 80108d6:	2b01      	cmp	r3, #1
 80108d8:	d001      	beq.n	80108de <osMessagePut+0x72>
      return osErrorOS;
 80108da:	23ff      	movs	r3, #255	; 0xff
 80108dc:	e000      	b.n	80108e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80108de:	2300      	movs	r3, #0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3718      	adds	r7, #24
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	e000ed04 	.word	0xe000ed04

080108ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80108ec:	b590      	push	{r4, r7, lr}
 80108ee:	b08b      	sub	sp, #44	; 0x2c
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80108fc:	2300      	movs	r3, #0
 80108fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d10a      	bne.n	801091c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010906:	2380      	movs	r3, #128	; 0x80
 8010908:	617b      	str	r3, [r7, #20]
    return event;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	461c      	mov	r4, r3
 801090e:	f107 0314 	add.w	r3, r7, #20
 8010912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801091a:	e054      	b.n	80109c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801091c:	2300      	movs	r3, #0
 801091e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010920:	2300      	movs	r3, #0
 8010922:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801092a:	d103      	bne.n	8010934 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801092c:	f04f 33ff 	mov.w	r3, #4294967295
 8010930:	627b      	str	r3, [r7, #36]	; 0x24
 8010932:	e009      	b.n	8010948 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d006      	beq.n	8010948 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010940:	2b00      	cmp	r3, #0
 8010942:	d101      	bne.n	8010948 <osMessageGet+0x5c>
      ticks = 1;
 8010944:	2301      	movs	r3, #1
 8010946:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010948:	f7ff fed9 	bl	80106fe <inHandlerMode>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d01c      	beq.n	801098c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010952:	f107 0220 	add.w	r2, r7, #32
 8010956:	f107 0314 	add.w	r3, r7, #20
 801095a:	3304      	adds	r3, #4
 801095c:	4619      	mov	r1, r3
 801095e:	68b8      	ldr	r0, [r7, #8]
 8010960:	f000 fe1e 	bl	80115a0 <xQueueReceiveFromISR>
 8010964:	4603      	mov	r3, r0
 8010966:	2b01      	cmp	r3, #1
 8010968:	d102      	bne.n	8010970 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801096a:	2310      	movs	r3, #16
 801096c:	617b      	str	r3, [r7, #20]
 801096e:	e001      	b.n	8010974 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010970:	2300      	movs	r3, #0
 8010972:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010974:	6a3b      	ldr	r3, [r7, #32]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d01d      	beq.n	80109b6 <osMessageGet+0xca>
 801097a:	4b15      	ldr	r3, [pc, #84]	; (80109d0 <osMessageGet+0xe4>)
 801097c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010980:	601a      	str	r2, [r3, #0]
 8010982:	f3bf 8f4f 	dsb	sy
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	e014      	b.n	80109b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801098c:	f107 0314 	add.w	r3, r7, #20
 8010990:	3304      	adds	r3, #4
 8010992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010994:	4619      	mov	r1, r3
 8010996:	68b8      	ldr	r0, [r7, #8]
 8010998:	f000 fc1e 	bl	80111d8 <xQueueReceive>
 801099c:	4603      	mov	r3, r0
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d102      	bne.n	80109a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80109a2:	2310      	movs	r3, #16
 80109a4:	617b      	str	r3, [r7, #20]
 80109a6:	e006      	b.n	80109b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80109a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d101      	bne.n	80109b2 <osMessageGet+0xc6>
 80109ae:	2300      	movs	r3, #0
 80109b0:	e000      	b.n	80109b4 <osMessageGet+0xc8>
 80109b2:	2340      	movs	r3, #64	; 0x40
 80109b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	461c      	mov	r4, r3
 80109ba:	f107 0314 	add.w	r3, r7, #20
 80109be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80109c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	372c      	adds	r7, #44	; 0x2c
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd90      	pop	{r4, r7, pc}
 80109ce:	bf00      	nop
 80109d0:	e000ed04 	.word	0xe000ed04

080109d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f103 0208 	add.w	r2, r3, #8
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f04f 32ff 	mov.w	r2, #4294967295
 80109ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f103 0208 	add.w	r2, r3, #8
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f103 0208 	add.w	r2, r3, #8
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a08:	bf00      	nop
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a22:	bf00      	nop
 8010a24:	370c      	adds	r7, #12
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr

08010a2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a2e:	b480      	push	{r7}
 8010a30:	b085      	sub	sp, #20
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
 8010a36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	68fa      	ldr	r2, [r7, #12]
 8010a42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	689a      	ldr	r2, [r3, #8]
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	683a      	ldr	r2, [r7, #0]
 8010a52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	683a      	ldr	r2, [r7, #0]
 8010a58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	1c5a      	adds	r2, r3, #1
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	601a      	str	r2, [r3, #0]
}
 8010a6a:	bf00      	nop
 8010a6c:	3714      	adds	r7, #20
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr

08010a76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a76:	b480      	push	{r7}
 8010a78:	b085      	sub	sp, #20
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a8c:	d103      	bne.n	8010a96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	691b      	ldr	r3, [r3, #16]
 8010a92:	60fb      	str	r3, [r7, #12]
 8010a94:	e00c      	b.n	8010ab0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	3308      	adds	r3, #8
 8010a9a:	60fb      	str	r3, [r7, #12]
 8010a9c:	e002      	b.n	8010aa4 <vListInsert+0x2e>
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	60fb      	str	r3, [r7, #12]
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	68ba      	ldr	r2, [r7, #8]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d2f6      	bcs.n	8010a9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	685a      	ldr	r2, [r3, #4]
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	1c5a      	adds	r2, r3, #1
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	601a      	str	r2, [r3, #0]
}
 8010adc:	bf00      	nop
 8010ade:	3714      	adds	r7, #20
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	691b      	ldr	r3, [r3, #16]
 8010af4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	6892      	ldr	r2, [r2, #8]
 8010afe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	6852      	ldr	r2, [r2, #4]
 8010b08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d103      	bne.n	8010b1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	689a      	ldr	r2, [r3, #8]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	1e5a      	subs	r2, r3, #1
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3714      	adds	r7, #20
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr

08010b3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d109      	bne.n	8010b64 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b54:	f383 8811 	msr	BASEPRI, r3
 8010b58:	f3bf 8f6f 	isb	sy
 8010b5c:	f3bf 8f4f 	dsb	sy
 8010b60:	60bb      	str	r3, [r7, #8]
 8010b62:	e7fe      	b.n	8010b62 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010b64:	f002 f882 	bl	8012c6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b70:	68f9      	ldr	r1, [r7, #12]
 8010b72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010b74:	fb01 f303 	mul.w	r3, r1, r3
 8010b78:	441a      	add	r2, r3
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2200      	movs	r2, #0
 8010b82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b94:	3b01      	subs	r3, #1
 8010b96:	68f9      	ldr	r1, [r7, #12]
 8010b98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010b9a:	fb01 f303 	mul.w	r3, r1, r3
 8010b9e:	441a      	add	r2, r3
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	22ff      	movs	r2, #255	; 0xff
 8010ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	22ff      	movs	r2, #255	; 0xff
 8010bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d114      	bne.n	8010be4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	691b      	ldr	r3, [r3, #16]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d01a      	beq.n	8010bf8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	3310      	adds	r3, #16
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f001 fb28 	bl	801221c <xTaskRemoveFromEventList>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d012      	beq.n	8010bf8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010bd2:	4b0d      	ldr	r3, [pc, #52]	; (8010c08 <xQueueGenericReset+0xcc>)
 8010bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bd8:	601a      	str	r2, [r3, #0]
 8010bda:	f3bf 8f4f 	dsb	sy
 8010bde:	f3bf 8f6f 	isb	sy
 8010be2:	e009      	b.n	8010bf8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	3310      	adds	r3, #16
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7ff fef3 	bl	80109d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	3324      	adds	r3, #36	; 0x24
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7ff feee 	bl	80109d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010bf8:	f002 f866 	bl	8012cc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010bfc:	2301      	movs	r3, #1
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3710      	adds	r7, #16
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	e000ed04 	.word	0xe000ed04

08010c0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b08e      	sub	sp, #56	; 0x38
 8010c10:	af02      	add	r7, sp, #8
 8010c12:	60f8      	str	r0, [r7, #12]
 8010c14:	60b9      	str	r1, [r7, #8]
 8010c16:	607a      	str	r2, [r7, #4]
 8010c18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d109      	bne.n	8010c34 <xQueueGenericCreateStatic+0x28>
 8010c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c24:	f383 8811 	msr	BASEPRI, r3
 8010c28:	f3bf 8f6f 	isb	sy
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c32:	e7fe      	b.n	8010c32 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d109      	bne.n	8010c4e <xQueueGenericCreateStatic+0x42>
 8010c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3e:	f383 8811 	msr	BASEPRI, r3
 8010c42:	f3bf 8f6f 	isb	sy
 8010c46:	f3bf 8f4f 	dsb	sy
 8010c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8010c4c:	e7fe      	b.n	8010c4c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d002      	beq.n	8010c5a <xQueueGenericCreateStatic+0x4e>
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d001      	beq.n	8010c5e <xQueueGenericCreateStatic+0x52>
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	e000      	b.n	8010c60 <xQueueGenericCreateStatic+0x54>
 8010c5e:	2300      	movs	r3, #0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d109      	bne.n	8010c78 <xQueueGenericCreateStatic+0x6c>
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	f383 8811 	msr	BASEPRI, r3
 8010c6c:	f3bf 8f6f 	isb	sy
 8010c70:	f3bf 8f4f 	dsb	sy
 8010c74:	623b      	str	r3, [r7, #32]
 8010c76:	e7fe      	b.n	8010c76 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d102      	bne.n	8010c84 <xQueueGenericCreateStatic+0x78>
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d101      	bne.n	8010c88 <xQueueGenericCreateStatic+0x7c>
 8010c84:	2301      	movs	r3, #1
 8010c86:	e000      	b.n	8010c8a <xQueueGenericCreateStatic+0x7e>
 8010c88:	2300      	movs	r3, #0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d109      	bne.n	8010ca2 <xQueueGenericCreateStatic+0x96>
 8010c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c92:	f383 8811 	msr	BASEPRI, r3
 8010c96:	f3bf 8f6f 	isb	sy
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	61fb      	str	r3, [r7, #28]
 8010ca0:	e7fe      	b.n	8010ca0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010ca2:	2348      	movs	r3, #72	; 0x48
 8010ca4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	2b48      	cmp	r3, #72	; 0x48
 8010caa:	d009      	beq.n	8010cc0 <xQueueGenericCreateStatic+0xb4>
 8010cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb0:	f383 8811 	msr	BASEPRI, r3
 8010cb4:	f3bf 8f6f 	isb	sy
 8010cb8:	f3bf 8f4f 	dsb	sy
 8010cbc:	61bb      	str	r3, [r7, #24]
 8010cbe:	e7fe      	b.n	8010cbe <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d00d      	beq.n	8010ce6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ccc:	2201      	movs	r2, #1
 8010cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010cd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd8:	9300      	str	r3, [sp, #0]
 8010cda:	4613      	mov	r3, r2
 8010cdc:	687a      	ldr	r2, [r7, #4]
 8010cde:	68b9      	ldr	r1, [r7, #8]
 8010ce0:	68f8      	ldr	r0, [r7, #12]
 8010ce2:	f000 f842 	bl	8010d6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3730      	adds	r7, #48	; 0x30
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b08a      	sub	sp, #40	; 0x28
 8010cf4:	af02      	add	r7, sp, #8
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d109      	bne.n	8010d18 <xQueueGenericCreate+0x28>
 8010d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d08:	f383 8811 	msr	BASEPRI, r3
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	613b      	str	r3, [r7, #16]
 8010d16:	e7fe      	b.n	8010d16 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d102      	bne.n	8010d24 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	61fb      	str	r3, [r7, #28]
 8010d22:	e004      	b.n	8010d2e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	68ba      	ldr	r2, [r7, #8]
 8010d28:	fb02 f303 	mul.w	r3, r2, r3
 8010d2c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010d2e:	69fb      	ldr	r3, [r7, #28]
 8010d30:	3348      	adds	r3, #72	; 0x48
 8010d32:	4618      	mov	r0, r3
 8010d34:	f002 f8b4 	bl	8012ea0 <pvPortMalloc>
 8010d38:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d00f      	beq.n	8010d60 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010d40:	69bb      	ldr	r3, [r7, #24]
 8010d42:	3348      	adds	r3, #72	; 0x48
 8010d44:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010d46:	69bb      	ldr	r3, [r7, #24]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010d4e:	79fa      	ldrb	r2, [r7, #7]
 8010d50:	69bb      	ldr	r3, [r7, #24]
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	4613      	mov	r3, r2
 8010d56:	697a      	ldr	r2, [r7, #20]
 8010d58:	68b9      	ldr	r1, [r7, #8]
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f000 f805 	bl	8010d6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010d60:	69bb      	ldr	r3, [r7, #24]
	}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3720      	adds	r7, #32
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b084      	sub	sp, #16
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	60f8      	str	r0, [r7, #12]
 8010d72:	60b9      	str	r1, [r7, #8]
 8010d74:	607a      	str	r2, [r7, #4]
 8010d76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d103      	bne.n	8010d86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	69ba      	ldr	r2, [r7, #24]
 8010d82:	601a      	str	r2, [r3, #0]
 8010d84:	e002      	b.n	8010d8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	687a      	ldr	r2, [r7, #4]
 8010d8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	68fa      	ldr	r2, [r7, #12]
 8010d90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010d92:	69bb      	ldr	r3, [r7, #24]
 8010d94:	68ba      	ldr	r2, [r7, #8]
 8010d96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010d98:	2101      	movs	r1, #1
 8010d9a:	69b8      	ldr	r0, [r7, #24]
 8010d9c:	f7ff fece 	bl	8010b3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010da0:	bf00      	nop
 8010da2:	3710      	adds	r7, #16
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b08e      	sub	sp, #56	; 0x38
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	607a      	str	r2, [r7, #4]
 8010db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010db6:	2300      	movs	r3, #0
 8010db8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d109      	bne.n	8010dd8 <xQueueGenericSend+0x30>
 8010dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc8:	f383 8811 	msr	BASEPRI, r3
 8010dcc:	f3bf 8f6f 	isb	sy
 8010dd0:	f3bf 8f4f 	dsb	sy
 8010dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dd6:	e7fe      	b.n	8010dd6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d103      	bne.n	8010de6 <xQueueGenericSend+0x3e>
 8010dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d101      	bne.n	8010dea <xQueueGenericSend+0x42>
 8010de6:	2301      	movs	r3, #1
 8010de8:	e000      	b.n	8010dec <xQueueGenericSend+0x44>
 8010dea:	2300      	movs	r3, #0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d109      	bne.n	8010e04 <xQueueGenericSend+0x5c>
 8010df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	627b      	str	r3, [r7, #36]	; 0x24
 8010e02:	e7fe      	b.n	8010e02 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	2b02      	cmp	r3, #2
 8010e08:	d103      	bne.n	8010e12 <xQueueGenericSend+0x6a>
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d101      	bne.n	8010e16 <xQueueGenericSend+0x6e>
 8010e12:	2301      	movs	r3, #1
 8010e14:	e000      	b.n	8010e18 <xQueueGenericSend+0x70>
 8010e16:	2300      	movs	r3, #0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d109      	bne.n	8010e30 <xQueueGenericSend+0x88>
 8010e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e20:	f383 8811 	msr	BASEPRI, r3
 8010e24:	f3bf 8f6f 	isb	sy
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	623b      	str	r3, [r7, #32]
 8010e2e:	e7fe      	b.n	8010e2e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e30:	f001 fbb2 	bl	8012598 <xTaskGetSchedulerState>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d102      	bne.n	8010e40 <xQueueGenericSend+0x98>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d101      	bne.n	8010e44 <xQueueGenericSend+0x9c>
 8010e40:	2301      	movs	r3, #1
 8010e42:	e000      	b.n	8010e46 <xQueueGenericSend+0x9e>
 8010e44:	2300      	movs	r3, #0
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d109      	bne.n	8010e5e <xQueueGenericSend+0xb6>
 8010e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4e:	f383 8811 	msr	BASEPRI, r3
 8010e52:	f3bf 8f6f 	isb	sy
 8010e56:	f3bf 8f4f 	dsb	sy
 8010e5a:	61fb      	str	r3, [r7, #28]
 8010e5c:	e7fe      	b.n	8010e5c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e5e:	f001 ff05 	bl	8012c6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d302      	bcc.n	8010e74 <xQueueGenericSend+0xcc>
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2b02      	cmp	r3, #2
 8010e72:	d129      	bne.n	8010ec8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010e74:	683a      	ldr	r2, [r7, #0]
 8010e76:	68b9      	ldr	r1, [r7, #8]
 8010e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e7a:	f000 fc26 	bl	80116ca <prvCopyDataToQueue>
 8010e7e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d010      	beq.n	8010eaa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8a:	3324      	adds	r3, #36	; 0x24
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f001 f9c5 	bl	801221c <xTaskRemoveFromEventList>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d013      	beq.n	8010ec0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010e98:	4b3f      	ldr	r3, [pc, #252]	; (8010f98 <xQueueGenericSend+0x1f0>)
 8010e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e9e:	601a      	str	r2, [r3, #0]
 8010ea0:	f3bf 8f4f 	dsb	sy
 8010ea4:	f3bf 8f6f 	isb	sy
 8010ea8:	e00a      	b.n	8010ec0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d007      	beq.n	8010ec0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010eb0:	4b39      	ldr	r3, [pc, #228]	; (8010f98 <xQueueGenericSend+0x1f0>)
 8010eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eb6:	601a      	str	r2, [r3, #0]
 8010eb8:	f3bf 8f4f 	dsb	sy
 8010ebc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010ec0:	f001 ff02 	bl	8012cc8 <vPortExitCritical>
				return pdPASS;
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	e063      	b.n	8010f90 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d103      	bne.n	8010ed6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010ece:	f001 fefb 	bl	8012cc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	e05c      	b.n	8010f90 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d106      	bne.n	8010eea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010edc:	f107 0314 	add.w	r3, r7, #20
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f001 f9fd 	bl	80122e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010eea:	f001 feed 	bl	8012cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010eee:	f000 ff1f 	bl	8011d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ef2:	f001 febb 	bl	8012c6c <vPortEnterCritical>
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010efc:	b25b      	sxtb	r3, r3
 8010efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f02:	d103      	bne.n	8010f0c <xQueueGenericSend+0x164>
 8010f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f06:	2200      	movs	r2, #0
 8010f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f12:	b25b      	sxtb	r3, r3
 8010f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f18:	d103      	bne.n	8010f22 <xQueueGenericSend+0x17a>
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010f22:	f001 fed1 	bl	8012cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010f26:	1d3a      	adds	r2, r7, #4
 8010f28:	f107 0314 	add.w	r3, r7, #20
 8010f2c:	4611      	mov	r1, r2
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f001 f9ec 	bl	801230c <xTaskCheckForTimeOut>
 8010f34:	4603      	mov	r3, r0
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d124      	bne.n	8010f84 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f3c:	f000 fcbd 	bl	80118ba <prvIsQueueFull>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d018      	beq.n	8010f78 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f48:	3310      	adds	r3, #16
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	4611      	mov	r1, r2
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f001 f940 	bl	80121d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f56:	f000 fc48 	bl	80117ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010f5a:	f000 fef7 	bl	8011d4c <xTaskResumeAll>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	f47f af7c 	bne.w	8010e5e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010f66:	4b0c      	ldr	r3, [pc, #48]	; (8010f98 <xQueueGenericSend+0x1f0>)
 8010f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f6c:	601a      	str	r2, [r3, #0]
 8010f6e:	f3bf 8f4f 	dsb	sy
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	e772      	b.n	8010e5e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f7a:	f000 fc36 	bl	80117ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f7e:	f000 fee5 	bl	8011d4c <xTaskResumeAll>
 8010f82:	e76c      	b.n	8010e5e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f86:	f000 fc30 	bl	80117ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f8a:	f000 fedf 	bl	8011d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010f8e:	2300      	movs	r3, #0
		}
	}
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3738      	adds	r7, #56	; 0x38
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	e000ed04 	.word	0xe000ed04

08010f9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b08e      	sub	sp, #56	; 0x38
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	607a      	str	r2, [r7, #4]
 8010fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d109      	bne.n	8010fc8 <xQueueGenericSendFromISR+0x2c>
 8010fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb8:	f383 8811 	msr	BASEPRI, r3
 8010fbc:	f3bf 8f6f 	isb	sy
 8010fc0:	f3bf 8f4f 	dsb	sy
 8010fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8010fc6:	e7fe      	b.n	8010fc6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d103      	bne.n	8010fd6 <xQueueGenericSendFromISR+0x3a>
 8010fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d101      	bne.n	8010fda <xQueueGenericSendFromISR+0x3e>
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	e000      	b.n	8010fdc <xQueueGenericSendFromISR+0x40>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d109      	bne.n	8010ff4 <xQueueGenericSendFromISR+0x58>
 8010fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe4:	f383 8811 	msr	BASEPRI, r3
 8010fe8:	f3bf 8f6f 	isb	sy
 8010fec:	f3bf 8f4f 	dsb	sy
 8010ff0:	623b      	str	r3, [r7, #32]
 8010ff2:	e7fe      	b.n	8010ff2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	2b02      	cmp	r3, #2
 8010ff8:	d103      	bne.n	8011002 <xQueueGenericSendFromISR+0x66>
 8010ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d101      	bne.n	8011006 <xQueueGenericSendFromISR+0x6a>
 8011002:	2301      	movs	r3, #1
 8011004:	e000      	b.n	8011008 <xQueueGenericSendFromISR+0x6c>
 8011006:	2300      	movs	r3, #0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d109      	bne.n	8011020 <xQueueGenericSendFromISR+0x84>
 801100c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011010:	f383 8811 	msr	BASEPRI, r3
 8011014:	f3bf 8f6f 	isb	sy
 8011018:	f3bf 8f4f 	dsb	sy
 801101c:	61fb      	str	r3, [r7, #28]
 801101e:	e7fe      	b.n	801101e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011020:	f001 ff00 	bl	8012e24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011024:	f3ef 8211 	mrs	r2, BASEPRI
 8011028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102c:	f383 8811 	msr	BASEPRI, r3
 8011030:	f3bf 8f6f 	isb	sy
 8011034:	f3bf 8f4f 	dsb	sy
 8011038:	61ba      	str	r2, [r7, #24]
 801103a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801103c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801103e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011048:	429a      	cmp	r2, r3
 801104a:	d302      	bcc.n	8011052 <xQueueGenericSendFromISR+0xb6>
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	2b02      	cmp	r3, #2
 8011050:	d12c      	bne.n	80110ac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	68b9      	ldr	r1, [r7, #8]
 8011060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011062:	f000 fb32 	bl	80116ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011066:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801106a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801106e:	d112      	bne.n	8011096 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011074:	2b00      	cmp	r3, #0
 8011076:	d016      	beq.n	80110a6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107a:	3324      	adds	r3, #36	; 0x24
 801107c:	4618      	mov	r0, r3
 801107e:	f001 f8cd 	bl	801221c <xTaskRemoveFromEventList>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d00e      	beq.n	80110a6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d00b      	beq.n	80110a6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2201      	movs	r2, #1
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	e007      	b.n	80110a6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801109a:	3301      	adds	r3, #1
 801109c:	b2db      	uxtb	r3, r3
 801109e:	b25a      	sxtb	r2, r3
 80110a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80110a6:	2301      	movs	r3, #1
 80110a8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80110aa:	e001      	b.n	80110b0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80110ac:	2300      	movs	r3, #0
 80110ae:	637b      	str	r3, [r7, #52]	; 0x34
 80110b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80110ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3738      	adds	r7, #56	; 0x38
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b08e      	sub	sp, #56	; 0x38
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80110d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d109      	bne.n	80110ec <xQueueGiveFromISR+0x28>
	__asm volatile
 80110d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110dc:	f383 8811 	msr	BASEPRI, r3
 80110e0:	f3bf 8f6f 	isb	sy
 80110e4:	f3bf 8f4f 	dsb	sy
 80110e8:	623b      	str	r3, [r7, #32]
 80110ea:	e7fe      	b.n	80110ea <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80110ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d009      	beq.n	8011108 <xQueueGiveFromISR+0x44>
 80110f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f8:	f383 8811 	msr	BASEPRI, r3
 80110fc:	f3bf 8f6f 	isb	sy
 8011100:	f3bf 8f4f 	dsb	sy
 8011104:	61fb      	str	r3, [r7, #28]
 8011106:	e7fe      	b.n	8011106 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8011108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d103      	bne.n	8011118 <xQueueGiveFromISR+0x54>
 8011110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d101      	bne.n	801111c <xQueueGiveFromISR+0x58>
 8011118:	2301      	movs	r3, #1
 801111a:	e000      	b.n	801111e <xQueueGiveFromISR+0x5a>
 801111c:	2300      	movs	r3, #0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d109      	bne.n	8011136 <xQueueGiveFromISR+0x72>
 8011122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011126:	f383 8811 	msr	BASEPRI, r3
 801112a:	f3bf 8f6f 	isb	sy
 801112e:	f3bf 8f4f 	dsb	sy
 8011132:	61bb      	str	r3, [r7, #24]
 8011134:	e7fe      	b.n	8011134 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011136:	f001 fe75 	bl	8012e24 <vPortValidateInterruptPriority>
	__asm volatile
 801113a:	f3ef 8211 	mrs	r2, BASEPRI
 801113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	617a      	str	r2, [r7, #20]
 8011150:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011152:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011154:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801115a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801115c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011162:	429a      	cmp	r2, r3
 8011164:	d22b      	bcs.n	80111be <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801116c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011172:	1c5a      	adds	r2, r3, #1
 8011174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011176:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011178:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011180:	d112      	bne.n	80111a8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011186:	2b00      	cmp	r3, #0
 8011188:	d016      	beq.n	80111b8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801118a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801118c:	3324      	adds	r3, #36	; 0x24
 801118e:	4618      	mov	r0, r3
 8011190:	f001 f844 	bl	801221c <xTaskRemoveFromEventList>
 8011194:	4603      	mov	r3, r0
 8011196:	2b00      	cmp	r3, #0
 8011198:	d00e      	beq.n	80111b8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d00b      	beq.n	80111b8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	2201      	movs	r2, #1
 80111a4:	601a      	str	r2, [r3, #0]
 80111a6:	e007      	b.n	80111b8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80111a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111ac:	3301      	adds	r3, #1
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	b25a      	sxtb	r2, r3
 80111b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80111b8:	2301      	movs	r3, #1
 80111ba:	637b      	str	r3, [r7, #52]	; 0x34
 80111bc:	e001      	b.n	80111c2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80111be:	2300      	movs	r3, #0
 80111c0:	637b      	str	r3, [r7, #52]	; 0x34
 80111c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80111cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3738      	adds	r7, #56	; 0x38
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
	...

080111d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b08c      	sub	sp, #48	; 0x30
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80111e4:	2300      	movs	r3, #0
 80111e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80111ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d109      	bne.n	8011206 <xQueueReceive+0x2e>
	__asm volatile
 80111f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	623b      	str	r3, [r7, #32]
 8011204:	e7fe      	b.n	8011204 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d103      	bne.n	8011214 <xQueueReceive+0x3c>
 801120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011210:	2b00      	cmp	r3, #0
 8011212:	d101      	bne.n	8011218 <xQueueReceive+0x40>
 8011214:	2301      	movs	r3, #1
 8011216:	e000      	b.n	801121a <xQueueReceive+0x42>
 8011218:	2300      	movs	r3, #0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d109      	bne.n	8011232 <xQueueReceive+0x5a>
 801121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011222:	f383 8811 	msr	BASEPRI, r3
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	61fb      	str	r3, [r7, #28]
 8011230:	e7fe      	b.n	8011230 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011232:	f001 f9b1 	bl	8012598 <xTaskGetSchedulerState>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d102      	bne.n	8011242 <xQueueReceive+0x6a>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d101      	bne.n	8011246 <xQueueReceive+0x6e>
 8011242:	2301      	movs	r3, #1
 8011244:	e000      	b.n	8011248 <xQueueReceive+0x70>
 8011246:	2300      	movs	r3, #0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d109      	bne.n	8011260 <xQueueReceive+0x88>
 801124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011250:	f383 8811 	msr	BASEPRI, r3
 8011254:	f3bf 8f6f 	isb	sy
 8011258:	f3bf 8f4f 	dsb	sy
 801125c:	61bb      	str	r3, [r7, #24]
 801125e:	e7fe      	b.n	801125e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011260:	f001 fd04 	bl	8012c6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011268:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	2b00      	cmp	r3, #0
 801126e:	d01f      	beq.n	80112b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011270:	68b9      	ldr	r1, [r7, #8]
 8011272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011274:	f000 fa93 	bl	801179e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127a:	1e5a      	subs	r2, r3, #1
 801127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011282:	691b      	ldr	r3, [r3, #16]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d00f      	beq.n	80112a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128a:	3310      	adds	r3, #16
 801128c:	4618      	mov	r0, r3
 801128e:	f000 ffc5 	bl	801221c <xTaskRemoveFromEventList>
 8011292:	4603      	mov	r3, r0
 8011294:	2b00      	cmp	r3, #0
 8011296:	d007      	beq.n	80112a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011298:	4b3c      	ldr	r3, [pc, #240]	; (801138c <xQueueReceive+0x1b4>)
 801129a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801129e:	601a      	str	r2, [r3, #0]
 80112a0:	f3bf 8f4f 	dsb	sy
 80112a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80112a8:	f001 fd0e 	bl	8012cc8 <vPortExitCritical>
				return pdPASS;
 80112ac:	2301      	movs	r3, #1
 80112ae:	e069      	b.n	8011384 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d103      	bne.n	80112be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80112b6:	f001 fd07 	bl	8012cc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80112ba:	2300      	movs	r3, #0
 80112bc:	e062      	b.n	8011384 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80112be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d106      	bne.n	80112d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80112c4:	f107 0310 	add.w	r3, r7, #16
 80112c8:	4618      	mov	r0, r3
 80112ca:	f001 f809 	bl	80122e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80112ce:	2301      	movs	r3, #1
 80112d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80112d2:	f001 fcf9 	bl	8012cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80112d6:	f000 fd2b 	bl	8011d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80112da:	f001 fcc7 	bl	8012c6c <vPortEnterCritical>
 80112de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112e4:	b25b      	sxtb	r3, r3
 80112e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ea:	d103      	bne.n	80112f4 <xQueueReceive+0x11c>
 80112ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ee:	2200      	movs	r2, #0
 80112f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112fa:	b25b      	sxtb	r3, r3
 80112fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011300:	d103      	bne.n	801130a <xQueueReceive+0x132>
 8011302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011304:	2200      	movs	r2, #0
 8011306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801130a:	f001 fcdd 	bl	8012cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801130e:	1d3a      	adds	r2, r7, #4
 8011310:	f107 0310 	add.w	r3, r7, #16
 8011314:	4611      	mov	r1, r2
 8011316:	4618      	mov	r0, r3
 8011318:	f000 fff8 	bl	801230c <xTaskCheckForTimeOut>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d123      	bne.n	801136a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011324:	f000 fab3 	bl	801188e <prvIsQueueEmpty>
 8011328:	4603      	mov	r3, r0
 801132a:	2b00      	cmp	r3, #0
 801132c:	d017      	beq.n	801135e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011330:	3324      	adds	r3, #36	; 0x24
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	4611      	mov	r1, r2
 8011336:	4618      	mov	r0, r3
 8011338:	f000 ff4c 	bl	80121d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801133c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801133e:	f000 fa54 	bl	80117ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011342:	f000 fd03 	bl	8011d4c <xTaskResumeAll>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d189      	bne.n	8011260 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 801134c:	4b0f      	ldr	r3, [pc, #60]	; (801138c <xQueueReceive+0x1b4>)
 801134e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011352:	601a      	str	r2, [r3, #0]
 8011354:	f3bf 8f4f 	dsb	sy
 8011358:	f3bf 8f6f 	isb	sy
 801135c:	e780      	b.n	8011260 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801135e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011360:	f000 fa43 	bl	80117ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011364:	f000 fcf2 	bl	8011d4c <xTaskResumeAll>
 8011368:	e77a      	b.n	8011260 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801136a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801136c:	f000 fa3d 	bl	80117ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011370:	f000 fcec 	bl	8011d4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011376:	f000 fa8a 	bl	801188e <prvIsQueueEmpty>
 801137a:	4603      	mov	r3, r0
 801137c:	2b00      	cmp	r3, #0
 801137e:	f43f af6f 	beq.w	8011260 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011382:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011384:	4618      	mov	r0, r3
 8011386:	3730      	adds	r7, #48	; 0x30
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}
 801138c:	e000ed04 	.word	0xe000ed04

08011390 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b08e      	sub	sp, #56	; 0x38
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801139a:	2300      	movs	r3, #0
 801139c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80113a2:	2300      	movs	r3, #0
 80113a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80113a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d109      	bne.n	80113c0 <xQueueSemaphoreTake+0x30>
 80113ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b0:	f383 8811 	msr	BASEPRI, r3
 80113b4:	f3bf 8f6f 	isb	sy
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	623b      	str	r3, [r7, #32]
 80113be:	e7fe      	b.n	80113be <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80113c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d009      	beq.n	80113dc <xQueueSemaphoreTake+0x4c>
 80113c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113cc:	f383 8811 	msr	BASEPRI, r3
 80113d0:	f3bf 8f6f 	isb	sy
 80113d4:	f3bf 8f4f 	dsb	sy
 80113d8:	61fb      	str	r3, [r7, #28]
 80113da:	e7fe      	b.n	80113da <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80113dc:	f001 f8dc 	bl	8012598 <xTaskGetSchedulerState>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d102      	bne.n	80113ec <xQueueSemaphoreTake+0x5c>
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d101      	bne.n	80113f0 <xQueueSemaphoreTake+0x60>
 80113ec:	2301      	movs	r3, #1
 80113ee:	e000      	b.n	80113f2 <xQueueSemaphoreTake+0x62>
 80113f0:	2300      	movs	r3, #0
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d109      	bne.n	801140a <xQueueSemaphoreTake+0x7a>
 80113f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113fa:	f383 8811 	msr	BASEPRI, r3
 80113fe:	f3bf 8f6f 	isb	sy
 8011402:	f3bf 8f4f 	dsb	sy
 8011406:	61bb      	str	r3, [r7, #24]
 8011408:	e7fe      	b.n	8011408 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801140a:	f001 fc2f 	bl	8012c6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011412:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011416:	2b00      	cmp	r3, #0
 8011418:	d024      	beq.n	8011464 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141c:	1e5a      	subs	r2, r3, #1
 801141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011420:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d104      	bne.n	8011434 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801142a:	f001 fa7b 	bl	8012924 <pvTaskIncrementMutexHeldCount>
 801142e:	4602      	mov	r2, r0
 8011430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011432:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011436:	691b      	ldr	r3, [r3, #16]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00f      	beq.n	801145c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143e:	3310      	adds	r3, #16
 8011440:	4618      	mov	r0, r3
 8011442:	f000 feeb 	bl	801221c <xTaskRemoveFromEventList>
 8011446:	4603      	mov	r3, r0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d007      	beq.n	801145c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801144c:	4b53      	ldr	r3, [pc, #332]	; (801159c <xQueueSemaphoreTake+0x20c>)
 801144e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011452:	601a      	str	r2, [r3, #0]
 8011454:	f3bf 8f4f 	dsb	sy
 8011458:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801145c:	f001 fc34 	bl	8012cc8 <vPortExitCritical>
				return pdPASS;
 8011460:	2301      	movs	r3, #1
 8011462:	e096      	b.n	8011592 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d110      	bne.n	801148c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146c:	2b00      	cmp	r3, #0
 801146e:	d009      	beq.n	8011484 <xQueueSemaphoreTake+0xf4>
 8011470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011474:	f383 8811 	msr	BASEPRI, r3
 8011478:	f3bf 8f6f 	isb	sy
 801147c:	f3bf 8f4f 	dsb	sy
 8011480:	617b      	str	r3, [r7, #20]
 8011482:	e7fe      	b.n	8011482 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011484:	f001 fc20 	bl	8012cc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011488:	2300      	movs	r3, #0
 801148a:	e082      	b.n	8011592 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 801148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801148e:	2b00      	cmp	r3, #0
 8011490:	d106      	bne.n	80114a0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011492:	f107 030c 	add.w	r3, r7, #12
 8011496:	4618      	mov	r0, r3
 8011498:	f000 ff22 	bl	80122e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801149c:	2301      	movs	r3, #1
 801149e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80114a0:	f001 fc12 	bl	8012cc8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80114a4:	f000 fc44 	bl	8011d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80114a8:	f001 fbe0 	bl	8012c6c <vPortEnterCritical>
 80114ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80114b2:	b25b      	sxtb	r3, r3
 80114b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b8:	d103      	bne.n	80114c2 <xQueueSemaphoreTake+0x132>
 80114ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114bc:	2200      	movs	r2, #0
 80114be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80114c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114c8:	b25b      	sxtb	r3, r3
 80114ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ce:	d103      	bne.n	80114d8 <xQueueSemaphoreTake+0x148>
 80114d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d2:	2200      	movs	r2, #0
 80114d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80114d8:	f001 fbf6 	bl	8012cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80114dc:	463a      	mov	r2, r7
 80114de:	f107 030c 	add.w	r3, r7, #12
 80114e2:	4611      	mov	r1, r2
 80114e4:	4618      	mov	r0, r3
 80114e6:	f000 ff11 	bl	801230c <xTaskCheckForTimeOut>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d132      	bne.n	8011556 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80114f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114f2:	f000 f9cc 	bl	801188e <prvIsQueueEmpty>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d026      	beq.n	801154a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d109      	bne.n	8011518 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011504:	f001 fbb2 	bl	8012c6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	4618      	mov	r0, r3
 801150e:	f001 f861 	bl	80125d4 <xTaskPriorityInherit>
 8011512:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011514:	f001 fbd8 	bl	8012cc8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151a:	3324      	adds	r3, #36	; 0x24
 801151c:	683a      	ldr	r2, [r7, #0]
 801151e:	4611      	mov	r1, r2
 8011520:	4618      	mov	r0, r3
 8011522:	f000 fe57 	bl	80121d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011528:	f000 f95f 	bl	80117ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801152c:	f000 fc0e 	bl	8011d4c <xTaskResumeAll>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	f47f af69 	bne.w	801140a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011538:	4b18      	ldr	r3, [pc, #96]	; (801159c <xQueueSemaphoreTake+0x20c>)
 801153a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801153e:	601a      	str	r2, [r3, #0]
 8011540:	f3bf 8f4f 	dsb	sy
 8011544:	f3bf 8f6f 	isb	sy
 8011548:	e75f      	b.n	801140a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801154a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801154c:	f000 f94d 	bl	80117ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011550:	f000 fbfc 	bl	8011d4c <xTaskResumeAll>
 8011554:	e759      	b.n	801140a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011558:	f000 f947 	bl	80117ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801155c:	f000 fbf6 	bl	8011d4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011562:	f000 f994 	bl	801188e <prvIsQueueEmpty>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	f43f af4e 	beq.w	801140a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	2b00      	cmp	r3, #0
 8011572:	d00d      	beq.n	8011590 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011574:	f001 fb7a 	bl	8012c6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801157a:	f000 f88e 	bl	801169a <prvGetDisinheritPriorityAfterTimeout>
 801157e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8011580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011586:	4618      	mov	r0, r3
 8011588:	f001 f92e 	bl	80127e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801158c:	f001 fb9c 	bl	8012cc8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011590:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011592:	4618      	mov	r0, r3
 8011594:	3738      	adds	r7, #56	; 0x38
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	e000ed04 	.word	0xe000ed04

080115a0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b08e      	sub	sp, #56	; 0x38
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80115b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d109      	bne.n	80115ca <xQueueReceiveFromISR+0x2a>
 80115b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ba:	f383 8811 	msr	BASEPRI, r3
 80115be:	f3bf 8f6f 	isb	sy
 80115c2:	f3bf 8f4f 	dsb	sy
 80115c6:	623b      	str	r3, [r7, #32]
 80115c8:	e7fe      	b.n	80115c8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d103      	bne.n	80115d8 <xQueueReceiveFromISR+0x38>
 80115d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d101      	bne.n	80115dc <xQueueReceiveFromISR+0x3c>
 80115d8:	2301      	movs	r3, #1
 80115da:	e000      	b.n	80115de <xQueueReceiveFromISR+0x3e>
 80115dc:	2300      	movs	r3, #0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d109      	bne.n	80115f6 <xQueueReceiveFromISR+0x56>
 80115e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e6:	f383 8811 	msr	BASEPRI, r3
 80115ea:	f3bf 8f6f 	isb	sy
 80115ee:	f3bf 8f4f 	dsb	sy
 80115f2:	61fb      	str	r3, [r7, #28]
 80115f4:	e7fe      	b.n	80115f4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80115f6:	f001 fc15 	bl	8012e24 <vPortValidateInterruptPriority>
	__asm volatile
 80115fa:	f3ef 8211 	mrs	r2, BASEPRI
 80115fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011602:	f383 8811 	msr	BASEPRI, r3
 8011606:	f3bf 8f6f 	isb	sy
 801160a:	f3bf 8f4f 	dsb	sy
 801160e:	61ba      	str	r2, [r7, #24]
 8011610:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011612:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011614:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801161a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161e:	2b00      	cmp	r3, #0
 8011620:	d02f      	beq.n	8011682 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801162c:	68b9      	ldr	r1, [r7, #8]
 801162e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011630:	f000 f8b5 	bl	801179e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011636:	1e5a      	subs	r2, r3, #1
 8011638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801163a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801163c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011644:	d112      	bne.n	801166c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011648:	691b      	ldr	r3, [r3, #16]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d016      	beq.n	801167c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011650:	3310      	adds	r3, #16
 8011652:	4618      	mov	r0, r3
 8011654:	f000 fde2 	bl	801221c <xTaskRemoveFromEventList>
 8011658:	4603      	mov	r3, r0
 801165a:	2b00      	cmp	r3, #0
 801165c:	d00e      	beq.n	801167c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d00b      	beq.n	801167c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2201      	movs	r2, #1
 8011668:	601a      	str	r2, [r3, #0]
 801166a:	e007      	b.n	801167c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801166c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011670:	3301      	adds	r3, #1
 8011672:	b2db      	uxtb	r3, r3
 8011674:	b25a      	sxtb	r2, r3
 8011676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801167c:	2301      	movs	r3, #1
 801167e:	637b      	str	r3, [r7, #52]	; 0x34
 8011680:	e001      	b.n	8011686 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8011682:	2300      	movs	r3, #0
 8011684:	637b      	str	r3, [r7, #52]	; 0x34
 8011686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011688:	613b      	str	r3, [r7, #16]
	__asm volatile
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011692:	4618      	mov	r0, r3
 8011694:	3738      	adds	r7, #56	; 0x38
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}

0801169a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801169a:	b480      	push	{r7}
 801169c:	b085      	sub	sp, #20
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d006      	beq.n	80116b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f1c3 0307 	rsb	r3, r3, #7
 80116b4:	60fb      	str	r3, [r7, #12]
 80116b6:	e001      	b.n	80116bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80116b8:	2300      	movs	r3, #0
 80116ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80116bc:	68fb      	ldr	r3, [r7, #12]
	}
 80116be:	4618      	mov	r0, r3
 80116c0:	3714      	adds	r7, #20
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr

080116ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80116ca:	b580      	push	{r7, lr}
 80116cc:	b086      	sub	sp, #24
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	60f8      	str	r0, [r7, #12]
 80116d2:	60b9      	str	r1, [r7, #8]
 80116d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80116d6:	2300      	movs	r3, #0
 80116d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10d      	bne.n	8011704 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d14d      	bne.n	801178c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	4618      	mov	r0, r3
 80116f6:	f000 fff3 	bl	80126e0 <xTaskPriorityDisinherit>
 80116fa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2200      	movs	r2, #0
 8011700:	605a      	str	r2, [r3, #4]
 8011702:	e043      	b.n	801178c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d119      	bne.n	801173e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	6898      	ldr	r0, [r3, #8]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011712:	461a      	mov	r2, r3
 8011714:	68b9      	ldr	r1, [r7, #8]
 8011716:	f00d f949 	bl	801e9ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	689a      	ldr	r2, [r3, #8]
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011722:	441a      	add	r2, r3
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	689a      	ldr	r2, [r3, #8]
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	429a      	cmp	r2, r3
 8011732:	d32b      	bcc.n	801178c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	609a      	str	r2, [r3, #8]
 801173c:	e026      	b.n	801178c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	68d8      	ldr	r0, [r3, #12]
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011746:	461a      	mov	r2, r3
 8011748:	68b9      	ldr	r1, [r7, #8]
 801174a:	f00d f92f 	bl	801e9ac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	68da      	ldr	r2, [r3, #12]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011756:	425b      	negs	r3, r3
 8011758:	441a      	add	r2, r3
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	68da      	ldr	r2, [r3, #12]
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	429a      	cmp	r2, r3
 8011768:	d207      	bcs.n	801177a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	685a      	ldr	r2, [r3, #4]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011772:	425b      	negs	r3, r3
 8011774:	441a      	add	r2, r3
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2b02      	cmp	r3, #2
 801177e:	d105      	bne.n	801178c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d002      	beq.n	801178c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	3b01      	subs	r3, #1
 801178a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	1c5a      	adds	r2, r3, #1
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011794:	697b      	ldr	r3, [r7, #20]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b082      	sub	sp, #8
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
 80117a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d018      	beq.n	80117e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	68da      	ldr	r2, [r3, #12]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117b8:	441a      	add	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	68da      	ldr	r2, [r3, #12]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d303      	bcc.n	80117d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	68d9      	ldr	r1, [r3, #12]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117da:	461a      	mov	r2, r3
 80117dc:	6838      	ldr	r0, [r7, #0]
 80117de:	f00d f8e5 	bl	801e9ac <memcpy>
	}
}
 80117e2:	bf00      	nop
 80117e4:	3708      	adds	r7, #8
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}

080117ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80117ea:	b580      	push	{r7, lr}
 80117ec:	b084      	sub	sp, #16
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80117f2:	f001 fa3b 	bl	8012c6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80117fe:	e011      	b.n	8011824 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011804:	2b00      	cmp	r3, #0
 8011806:	d012      	beq.n	801182e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	3324      	adds	r3, #36	; 0x24
 801180c:	4618      	mov	r0, r3
 801180e:	f000 fd05 	bl	801221c <xTaskRemoveFromEventList>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	d001      	beq.n	801181c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011818:	f000 fdd8 	bl	80123cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801181c:	7bfb      	ldrb	r3, [r7, #15]
 801181e:	3b01      	subs	r3, #1
 8011820:	b2db      	uxtb	r3, r3
 8011822:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011828:	2b00      	cmp	r3, #0
 801182a:	dce9      	bgt.n	8011800 <prvUnlockQueue+0x16>
 801182c:	e000      	b.n	8011830 <prvUnlockQueue+0x46>
					break;
 801182e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	22ff      	movs	r2, #255	; 0xff
 8011834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011838:	f001 fa46 	bl	8012cc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801183c:	f001 fa16 	bl	8012c6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011846:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011848:	e011      	b.n	801186e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	691b      	ldr	r3, [r3, #16]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d012      	beq.n	8011878 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	3310      	adds	r3, #16
 8011856:	4618      	mov	r0, r3
 8011858:	f000 fce0 	bl	801221c <xTaskRemoveFromEventList>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d001      	beq.n	8011866 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011862:	f000 fdb3 	bl	80123cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011866:	7bbb      	ldrb	r3, [r7, #14]
 8011868:	3b01      	subs	r3, #1
 801186a:	b2db      	uxtb	r3, r3
 801186c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801186e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011872:	2b00      	cmp	r3, #0
 8011874:	dce9      	bgt.n	801184a <prvUnlockQueue+0x60>
 8011876:	e000      	b.n	801187a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011878:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	22ff      	movs	r2, #255	; 0xff
 801187e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011882:	f001 fa21 	bl	8012cc8 <vPortExitCritical>
}
 8011886:	bf00      	nop
 8011888:	3710      	adds	r7, #16
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b084      	sub	sp, #16
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011896:	f001 f9e9 	bl	8012c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d102      	bne.n	80118a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80118a2:	2301      	movs	r3, #1
 80118a4:	60fb      	str	r3, [r7, #12]
 80118a6:	e001      	b.n	80118ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80118a8:	2300      	movs	r3, #0
 80118aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80118ac:	f001 fa0c 	bl	8012cc8 <vPortExitCritical>

	return xReturn;
 80118b0:	68fb      	ldr	r3, [r7, #12]
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}

080118ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b084      	sub	sp, #16
 80118be:	af00      	add	r7, sp, #0
 80118c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80118c2:	f001 f9d3 	bl	8012c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d102      	bne.n	80118d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80118d2:	2301      	movs	r3, #1
 80118d4:	60fb      	str	r3, [r7, #12]
 80118d6:	e001      	b.n	80118dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80118d8:	2300      	movs	r3, #0
 80118da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80118dc:	f001 f9f4 	bl	8012cc8 <vPortExitCritical>

	return xReturn;
 80118e0:	68fb      	ldr	r3, [r7, #12]
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}

080118ea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b08e      	sub	sp, #56	; 0x38
 80118ee:	af04      	add	r7, sp, #16
 80118f0:	60f8      	str	r0, [r7, #12]
 80118f2:	60b9      	str	r1, [r7, #8]
 80118f4:	607a      	str	r2, [r7, #4]
 80118f6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80118f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d109      	bne.n	8011912 <xTaskCreateStatic+0x28>
	__asm volatile
 80118fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011902:	f383 8811 	msr	BASEPRI, r3
 8011906:	f3bf 8f6f 	isb	sy
 801190a:	f3bf 8f4f 	dsb	sy
 801190e:	623b      	str	r3, [r7, #32]
 8011910:	e7fe      	b.n	8011910 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011914:	2b00      	cmp	r3, #0
 8011916:	d109      	bne.n	801192c <xTaskCreateStatic+0x42>
 8011918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	61fb      	str	r3, [r7, #28]
 801192a:	e7fe      	b.n	801192a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801192c:	2358      	movs	r3, #88	; 0x58
 801192e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	2b58      	cmp	r3, #88	; 0x58
 8011934:	d009      	beq.n	801194a <xTaskCreateStatic+0x60>
 8011936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801193a:	f383 8811 	msr	BASEPRI, r3
 801193e:	f3bf 8f6f 	isb	sy
 8011942:	f3bf 8f4f 	dsb	sy
 8011946:	61bb      	str	r3, [r7, #24]
 8011948:	e7fe      	b.n	8011948 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801194c:	2b00      	cmp	r3, #0
 801194e:	d01e      	beq.n	801198e <xTaskCreateStatic+0xa4>
 8011950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011952:	2b00      	cmp	r3, #0
 8011954:	d01b      	beq.n	801198e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011958:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801195e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011962:	2202      	movs	r2, #2
 8011964:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011968:	2300      	movs	r3, #0
 801196a:	9303      	str	r3, [sp, #12]
 801196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196e:	9302      	str	r3, [sp, #8]
 8011970:	f107 0314 	add.w	r3, r7, #20
 8011974:	9301      	str	r3, [sp, #4]
 8011976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011978:	9300      	str	r3, [sp, #0]
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	68b9      	ldr	r1, [r7, #8]
 8011980:	68f8      	ldr	r0, [r7, #12]
 8011982:	f000 f850 	bl	8011a26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011988:	f000 f8d6 	bl	8011b38 <prvAddNewTaskToReadyList>
 801198c:	e001      	b.n	8011992 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 801198e:	2300      	movs	r3, #0
 8011990:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011992:	697b      	ldr	r3, [r7, #20]
	}
 8011994:	4618      	mov	r0, r3
 8011996:	3728      	adds	r7, #40	; 0x28
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801199c:	b580      	push	{r7, lr}
 801199e:	b08c      	sub	sp, #48	; 0x30
 80119a0:	af04      	add	r7, sp, #16
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	603b      	str	r3, [r7, #0]
 80119a8:	4613      	mov	r3, r2
 80119aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119ac:	88fb      	ldrh	r3, [r7, #6]
 80119ae:	009b      	lsls	r3, r3, #2
 80119b0:	4618      	mov	r0, r3
 80119b2:	f001 fa75 	bl	8012ea0 <pvPortMalloc>
 80119b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d00e      	beq.n	80119dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80119be:	2058      	movs	r0, #88	; 0x58
 80119c0:	f001 fa6e 	bl	8012ea0 <pvPortMalloc>
 80119c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80119c6:	69fb      	ldr	r3, [r7, #28]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d003      	beq.n	80119d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80119cc:	69fb      	ldr	r3, [r7, #28]
 80119ce:	697a      	ldr	r2, [r7, #20]
 80119d0:	631a      	str	r2, [r3, #48]	; 0x30
 80119d2:	e005      	b.n	80119e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80119d4:	6978      	ldr	r0, [r7, #20]
 80119d6:	f001 fb29 	bl	801302c <vPortFree>
 80119da:	e001      	b.n	80119e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80119dc:	2300      	movs	r3, #0
 80119de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d017      	beq.n	8011a16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80119e6:	69fb      	ldr	r3, [r7, #28]
 80119e8:	2200      	movs	r2, #0
 80119ea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80119ee:	88fa      	ldrh	r2, [r7, #6]
 80119f0:	2300      	movs	r3, #0
 80119f2:	9303      	str	r3, [sp, #12]
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	9302      	str	r3, [sp, #8]
 80119f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fa:	9301      	str	r3, [sp, #4]
 80119fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fe:	9300      	str	r3, [sp, #0]
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	68b9      	ldr	r1, [r7, #8]
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f000 f80e 	bl	8011a26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011a0a:	69f8      	ldr	r0, [r7, #28]
 8011a0c:	f000 f894 	bl	8011b38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011a10:	2301      	movs	r3, #1
 8011a12:	61bb      	str	r3, [r7, #24]
 8011a14:	e002      	b.n	8011a1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011a16:	f04f 33ff 	mov.w	r3, #4294967295
 8011a1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011a1c:	69bb      	ldr	r3, [r7, #24]
	}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3720      	adds	r7, #32
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}

08011a26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011a26:	b580      	push	{r7, lr}
 8011a28:	b088      	sub	sp, #32
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	60f8      	str	r0, [r7, #12]
 8011a2e:	60b9      	str	r1, [r7, #8]
 8011a30:	607a      	str	r2, [r7, #4]
 8011a32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	009b      	lsls	r3, r3, #2
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	21a5      	movs	r1, #165	; 0xa5
 8011a40:	f00c ffbf 	bl	801e9c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011a4e:	3b01      	subs	r3, #1
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	4413      	add	r3, r2
 8011a54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	f023 0307 	bic.w	r3, r3, #7
 8011a5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	f003 0307 	and.w	r3, r3, #7
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d009      	beq.n	8011a7c <prvInitialiseNewTask+0x56>
 8011a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6c:	f383 8811 	msr	BASEPRI, r3
 8011a70:	f3bf 8f6f 	isb	sy
 8011a74:	f3bf 8f4f 	dsb	sy
 8011a78:	617b      	str	r3, [r7, #20]
 8011a7a:	e7fe      	b.n	8011a7a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	61fb      	str	r3, [r7, #28]
 8011a80:	e012      	b.n	8011aa8 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	4413      	add	r3, r2
 8011a88:	7819      	ldrb	r1, [r3, #0]
 8011a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	4413      	add	r3, r2
 8011a90:	3334      	adds	r3, #52	; 0x34
 8011a92:	460a      	mov	r2, r1
 8011a94:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8011a96:	68ba      	ldr	r2, [r7, #8]
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d006      	beq.n	8011ab0 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011aa2:	69fb      	ldr	r3, [r7, #28]
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	61fb      	str	r3, [r7, #28]
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	2b0f      	cmp	r3, #15
 8011aac:	d9e9      	bls.n	8011a82 <prvInitialiseNewTask+0x5c>
 8011aae:	e000      	b.n	8011ab2 <prvInitialiseNewTask+0x8c>
		{
			break;
 8011ab0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011abc:	2b06      	cmp	r3, #6
 8011abe:	d901      	bls.n	8011ac4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011ac0:	2306      	movs	r3, #6
 8011ac2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ac8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ace:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad8:	3304      	adds	r3, #4
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fe ff9a 	bl	8010a14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae2:	3318      	adds	r3, #24
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7fe ff95 	bl	8010a14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af2:	f1c3 0207 	rsb	r2, r3, #7
 8011af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011afe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b02:	2200      	movs	r2, #0
 8011b04:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b08:	2200      	movs	r2, #0
 8011b0a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011b14:	683a      	ldr	r2, [r7, #0]
 8011b16:	68f9      	ldr	r1, [r7, #12]
 8011b18:	69b8      	ldr	r0, [r7, #24]
 8011b1a:	f000 ff7d 	bl	8012a18 <pxPortInitialiseStack>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d002      	beq.n	8011b30 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011b30:	bf00      	nop
 8011b32:	3720      	adds	r7, #32
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011b40:	f001 f894 	bl	8012c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011b44:	4b2a      	ldr	r3, [pc, #168]	; (8011bf0 <prvAddNewTaskToReadyList+0xb8>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	3301      	adds	r3, #1
 8011b4a:	4a29      	ldr	r2, [pc, #164]	; (8011bf0 <prvAddNewTaskToReadyList+0xb8>)
 8011b4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011b4e:	4b29      	ldr	r3, [pc, #164]	; (8011bf4 <prvAddNewTaskToReadyList+0xbc>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d109      	bne.n	8011b6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011b56:	4a27      	ldr	r2, [pc, #156]	; (8011bf4 <prvAddNewTaskToReadyList+0xbc>)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011b5c:	4b24      	ldr	r3, [pc, #144]	; (8011bf0 <prvAddNewTaskToReadyList+0xb8>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	d110      	bne.n	8011b86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011b64:	f000 fc58 	bl	8012418 <prvInitialiseTaskLists>
 8011b68:	e00d      	b.n	8011b86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011b6a:	4b23      	ldr	r3, [pc, #140]	; (8011bf8 <prvAddNewTaskToReadyList+0xc0>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d109      	bne.n	8011b86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011b72:	4b20      	ldr	r3, [pc, #128]	; (8011bf4 <prvAddNewTaskToReadyList+0xbc>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d802      	bhi.n	8011b86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011b80:	4a1c      	ldr	r2, [pc, #112]	; (8011bf4 <prvAddNewTaskToReadyList+0xbc>)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011b86:	4b1d      	ldr	r3, [pc, #116]	; (8011bfc <prvAddNewTaskToReadyList+0xc4>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	4a1b      	ldr	r2, [pc, #108]	; (8011bfc <prvAddNewTaskToReadyList+0xc4>)
 8011b8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b94:	2201      	movs	r2, #1
 8011b96:	409a      	lsls	r2, r3
 8011b98:	4b19      	ldr	r3, [pc, #100]	; (8011c00 <prvAddNewTaskToReadyList+0xc8>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	4a18      	ldr	r2, [pc, #96]	; (8011c00 <prvAddNewTaskToReadyList+0xc8>)
 8011ba0:	6013      	str	r3, [r2, #0]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	009b      	lsls	r3, r3, #2
 8011baa:	4413      	add	r3, r2
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	4a15      	ldr	r2, [pc, #84]	; (8011c04 <prvAddNewTaskToReadyList+0xcc>)
 8011bb0:	441a      	add	r2, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	3304      	adds	r3, #4
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	4610      	mov	r0, r2
 8011bba:	f7fe ff38 	bl	8010a2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011bbe:	f001 f883 	bl	8012cc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011bc2:	4b0d      	ldr	r3, [pc, #52]	; (8011bf8 <prvAddNewTaskToReadyList+0xc0>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d00e      	beq.n	8011be8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011bca:	4b0a      	ldr	r3, [pc, #40]	; (8011bf4 <prvAddNewTaskToReadyList+0xbc>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d207      	bcs.n	8011be8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011bd8:	4b0b      	ldr	r3, [pc, #44]	; (8011c08 <prvAddNewTaskToReadyList+0xd0>)
 8011bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bde:	601a      	str	r2, [r3, #0]
 8011be0:	f3bf 8f4f 	dsb	sy
 8011be4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011be8:	bf00      	nop
 8011bea:	3708      	adds	r7, #8
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	20000974 	.word	0x20000974
 8011bf4:	20000874 	.word	0x20000874
 8011bf8:	20000980 	.word	0x20000980
 8011bfc:	20000990 	.word	0x20000990
 8011c00:	2000097c 	.word	0x2000097c
 8011c04:	20000878 	.word	0x20000878
 8011c08:	e000ed04 	.word	0xe000ed04

08011c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011c14:	2300      	movs	r3, #0
 8011c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d016      	beq.n	8011c4c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011c1e:	4b13      	ldr	r3, [pc, #76]	; (8011c6c <vTaskDelay+0x60>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d009      	beq.n	8011c3a <vTaskDelay+0x2e>
 8011c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2a:	f383 8811 	msr	BASEPRI, r3
 8011c2e:	f3bf 8f6f 	isb	sy
 8011c32:	f3bf 8f4f 	dsb	sy
 8011c36:	60bb      	str	r3, [r7, #8]
 8011c38:	e7fe      	b.n	8011c38 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011c3a:	f000 f879 	bl	8011d30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011c3e:	2100      	movs	r1, #0
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 fe83 	bl	801294c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011c46:	f000 f881 	bl	8011d4c <xTaskResumeAll>
 8011c4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d107      	bne.n	8011c62 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8011c52:	4b07      	ldr	r3, [pc, #28]	; (8011c70 <vTaskDelay+0x64>)
 8011c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c58:	601a      	str	r2, [r3, #0]
 8011c5a:	f3bf 8f4f 	dsb	sy
 8011c5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c62:	bf00      	nop
 8011c64:	3710      	adds	r7, #16
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	2000099c 	.word	0x2000099c
 8011c70:	e000ed04 	.word	0xe000ed04

08011c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b08a      	sub	sp, #40	; 0x28
 8011c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011c82:	463a      	mov	r2, r7
 8011c84:	1d39      	adds	r1, r7, #4
 8011c86:	f107 0308 	add.w	r3, r7, #8
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7ee fc88 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	9202      	str	r2, [sp, #8]
 8011c98:	9301      	str	r3, [sp, #4]
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	9300      	str	r3, [sp, #0]
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	460a      	mov	r2, r1
 8011ca2:	491d      	ldr	r1, [pc, #116]	; (8011d18 <vTaskStartScheduler+0xa4>)
 8011ca4:	481d      	ldr	r0, [pc, #116]	; (8011d1c <vTaskStartScheduler+0xa8>)
 8011ca6:	f7ff fe20 	bl	80118ea <xTaskCreateStatic>
 8011caa:	4602      	mov	r2, r0
 8011cac:	4b1c      	ldr	r3, [pc, #112]	; (8011d20 <vTaskStartScheduler+0xac>)
 8011cae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011cb0:	4b1b      	ldr	r3, [pc, #108]	; (8011d20 <vTaskStartScheduler+0xac>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d002      	beq.n	8011cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011cb8:	2301      	movs	r3, #1
 8011cba:	617b      	str	r3, [r7, #20]
 8011cbc:	e001      	b.n	8011cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d115      	bne.n	8011cf4 <vTaskStartScheduler+0x80>
 8011cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ccc:	f383 8811 	msr	BASEPRI, r3
 8011cd0:	f3bf 8f6f 	isb	sy
 8011cd4:	f3bf 8f4f 	dsb	sy
 8011cd8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011cda:	4b12      	ldr	r3, [pc, #72]	; (8011d24 <vTaskStartScheduler+0xb0>)
 8011cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ce0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011ce2:	4b11      	ldr	r3, [pc, #68]	; (8011d28 <vTaskStartScheduler+0xb4>)
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011ce8:	4b10      	ldr	r3, [pc, #64]	; (8011d2c <vTaskStartScheduler+0xb8>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011cee:	f000 ff1f 	bl	8012b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011cf2:	e00d      	b.n	8011d10 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cfa:	d109      	bne.n	8011d10 <vTaskStartScheduler+0x9c>
 8011cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d00:	f383 8811 	msr	BASEPRI, r3
 8011d04:	f3bf 8f6f 	isb	sy
 8011d08:	f3bf 8f4f 	dsb	sy
 8011d0c:	60fb      	str	r3, [r7, #12]
 8011d0e:	e7fe      	b.n	8011d0e <vTaskStartScheduler+0x9a>
}
 8011d10:	bf00      	nop
 8011d12:	3718      	adds	r7, #24
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	0801fc80 	.word	0x0801fc80
 8011d1c:	080123e5 	.word	0x080123e5
 8011d20:	20000998 	.word	0x20000998
 8011d24:	20000994 	.word	0x20000994
 8011d28:	20000980 	.word	0x20000980
 8011d2c:	20000978 	.word	0x20000978

08011d30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011d30:	b480      	push	{r7}
 8011d32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011d34:	4b04      	ldr	r3, [pc, #16]	; (8011d48 <vTaskSuspendAll+0x18>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	4a03      	ldr	r2, [pc, #12]	; (8011d48 <vTaskSuspendAll+0x18>)
 8011d3c:	6013      	str	r3, [r2, #0]
}
 8011d3e:	bf00      	nop
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr
 8011d48:	2000099c 	.word	0x2000099c

08011d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011d52:	2300      	movs	r3, #0
 8011d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011d56:	2300      	movs	r3, #0
 8011d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011d5a:	4b41      	ldr	r3, [pc, #260]	; (8011e60 <xTaskResumeAll+0x114>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d109      	bne.n	8011d76 <xTaskResumeAll+0x2a>
 8011d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d66:	f383 8811 	msr	BASEPRI, r3
 8011d6a:	f3bf 8f6f 	isb	sy
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	603b      	str	r3, [r7, #0]
 8011d74:	e7fe      	b.n	8011d74 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011d76:	f000 ff79 	bl	8012c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011d7a:	4b39      	ldr	r3, [pc, #228]	; (8011e60 <xTaskResumeAll+0x114>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	4a37      	ldr	r2, [pc, #220]	; (8011e60 <xTaskResumeAll+0x114>)
 8011d82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d84:	4b36      	ldr	r3, [pc, #216]	; (8011e60 <xTaskResumeAll+0x114>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d161      	bne.n	8011e50 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011d8c:	4b35      	ldr	r3, [pc, #212]	; (8011e64 <xTaskResumeAll+0x118>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d05d      	beq.n	8011e50 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d94:	e02e      	b.n	8011df4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011d96:	4b34      	ldr	r3, [pc, #208]	; (8011e68 <xTaskResumeAll+0x11c>)
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	3318      	adds	r3, #24
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fe fea0 	bl	8010ae8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	3304      	adds	r3, #4
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fe fe9b 	bl	8010ae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011db6:	2201      	movs	r2, #1
 8011db8:	409a      	lsls	r2, r3
 8011dba:	4b2c      	ldr	r3, [pc, #176]	; (8011e6c <xTaskResumeAll+0x120>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4313      	orrs	r3, r2
 8011dc0:	4a2a      	ldr	r2, [pc, #168]	; (8011e6c <xTaskResumeAll+0x120>)
 8011dc2:	6013      	str	r3, [r2, #0]
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dc8:	4613      	mov	r3, r2
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	4413      	add	r3, r2
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	4a27      	ldr	r2, [pc, #156]	; (8011e70 <xTaskResumeAll+0x124>)
 8011dd2:	441a      	add	r2, r3
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	3304      	adds	r3, #4
 8011dd8:	4619      	mov	r1, r3
 8011dda:	4610      	mov	r0, r2
 8011ddc:	f7fe fe27 	bl	8010a2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011de4:	4b23      	ldr	r3, [pc, #140]	; (8011e74 <xTaskResumeAll+0x128>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d302      	bcc.n	8011df4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8011dee:	4b22      	ldr	r3, [pc, #136]	; (8011e78 <xTaskResumeAll+0x12c>)
 8011df0:	2201      	movs	r2, #1
 8011df2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011df4:	4b1c      	ldr	r3, [pc, #112]	; (8011e68 <xTaskResumeAll+0x11c>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d1cc      	bne.n	8011d96 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d001      	beq.n	8011e06 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011e02:	f000 fba3 	bl	801254c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011e06:	4b1d      	ldr	r3, [pc, #116]	; (8011e7c <xTaskResumeAll+0x130>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d010      	beq.n	8011e34 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011e12:	f000 f859 	bl	8011ec8 <xTaskIncrementTick>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d002      	beq.n	8011e22 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8011e1c:	4b16      	ldr	r3, [pc, #88]	; (8011e78 <xTaskResumeAll+0x12c>)
 8011e1e:	2201      	movs	r2, #1
 8011e20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	3b01      	subs	r3, #1
 8011e26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1f1      	bne.n	8011e12 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8011e2e:	4b13      	ldr	r3, [pc, #76]	; (8011e7c <xTaskResumeAll+0x130>)
 8011e30:	2200      	movs	r2, #0
 8011e32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011e34:	4b10      	ldr	r3, [pc, #64]	; (8011e78 <xTaskResumeAll+0x12c>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d009      	beq.n	8011e50 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011e40:	4b0f      	ldr	r3, [pc, #60]	; (8011e80 <xTaskResumeAll+0x134>)
 8011e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e46:	601a      	str	r2, [r3, #0]
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011e50:	f000 ff3a 	bl	8012cc8 <vPortExitCritical>

	return xAlreadyYielded;
 8011e54:	68bb      	ldr	r3, [r7, #8]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	2000099c 	.word	0x2000099c
 8011e64:	20000974 	.word	0x20000974
 8011e68:	20000934 	.word	0x20000934
 8011e6c:	2000097c 	.word	0x2000097c
 8011e70:	20000878 	.word	0x20000878
 8011e74:	20000874 	.word	0x20000874
 8011e78:	20000988 	.word	0x20000988
 8011e7c:	20000984 	.word	0x20000984
 8011e80:	e000ed04 	.word	0xe000ed04

08011e84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011e8a:	4b05      	ldr	r3, [pc, #20]	; (8011ea0 <xTaskGetTickCount+0x1c>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011e90:	687b      	ldr	r3, [r7, #4]
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	370c      	adds	r7, #12
 8011e96:	46bd      	mov	sp, r7
 8011e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9c:	4770      	bx	lr
 8011e9e:	bf00      	nop
 8011ea0:	20000978 	.word	0x20000978

08011ea4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011eaa:	f000 ffbb 	bl	8012e24 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011eae:	2300      	movs	r3, #0
 8011eb0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011eb2:	4b04      	ldr	r3, [pc, #16]	; (8011ec4 <xTaskGetTickCountFromISR+0x20>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011eb8:	683b      	ldr	r3, [r7, #0]
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3708      	adds	r7, #8
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}
 8011ec2:	bf00      	nop
 8011ec4:	20000978 	.word	0x20000978

08011ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b086      	sub	sp, #24
 8011ecc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ed2:	4b50      	ldr	r3, [pc, #320]	; (8012014 <xTaskIncrementTick+0x14c>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	f040 808c 	bne.w	8011ff4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011edc:	4b4e      	ldr	r3, [pc, #312]	; (8012018 <xTaskIncrementTick+0x150>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011ee4:	4a4c      	ldr	r2, [pc, #304]	; (8012018 <xTaskIncrementTick+0x150>)
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d11f      	bne.n	8011f30 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011ef0:	4b4a      	ldr	r3, [pc, #296]	; (801201c <xTaskIncrementTick+0x154>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d009      	beq.n	8011f0e <xTaskIncrementTick+0x46>
 8011efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011efe:	f383 8811 	msr	BASEPRI, r3
 8011f02:	f3bf 8f6f 	isb	sy
 8011f06:	f3bf 8f4f 	dsb	sy
 8011f0a:	603b      	str	r3, [r7, #0]
 8011f0c:	e7fe      	b.n	8011f0c <xTaskIncrementTick+0x44>
 8011f0e:	4b43      	ldr	r3, [pc, #268]	; (801201c <xTaskIncrementTick+0x154>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	4b42      	ldr	r3, [pc, #264]	; (8012020 <xTaskIncrementTick+0x158>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a40      	ldr	r2, [pc, #256]	; (801201c <xTaskIncrementTick+0x154>)
 8011f1a:	6013      	str	r3, [r2, #0]
 8011f1c:	4a40      	ldr	r2, [pc, #256]	; (8012020 <xTaskIncrementTick+0x158>)
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	6013      	str	r3, [r2, #0]
 8011f22:	4b40      	ldr	r3, [pc, #256]	; (8012024 <xTaskIncrementTick+0x15c>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	3301      	adds	r3, #1
 8011f28:	4a3e      	ldr	r2, [pc, #248]	; (8012024 <xTaskIncrementTick+0x15c>)
 8011f2a:	6013      	str	r3, [r2, #0]
 8011f2c:	f000 fb0e 	bl	801254c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011f30:	4b3d      	ldr	r3, [pc, #244]	; (8012028 <xTaskIncrementTick+0x160>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	693a      	ldr	r2, [r7, #16]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d34d      	bcc.n	8011fd6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f3a:	4b38      	ldr	r3, [pc, #224]	; (801201c <xTaskIncrementTick+0x154>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d101      	bne.n	8011f48 <xTaskIncrementTick+0x80>
 8011f44:	2301      	movs	r3, #1
 8011f46:	e000      	b.n	8011f4a <xTaskIncrementTick+0x82>
 8011f48:	2300      	movs	r3, #0
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d004      	beq.n	8011f58 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f4e:	4b36      	ldr	r3, [pc, #216]	; (8012028 <xTaskIncrementTick+0x160>)
 8011f50:	f04f 32ff 	mov.w	r2, #4294967295
 8011f54:	601a      	str	r2, [r3, #0]
					break;
 8011f56:	e03e      	b.n	8011fd6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011f58:	4b30      	ldr	r3, [pc, #192]	; (801201c <xTaskIncrementTick+0x154>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	68db      	ldr	r3, [r3, #12]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011f68:	693a      	ldr	r2, [r7, #16]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d203      	bcs.n	8011f78 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011f70:	4a2d      	ldr	r2, [pc, #180]	; (8012028 <xTaskIncrementTick+0x160>)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6013      	str	r3, [r2, #0]
						break;
 8011f76:	e02e      	b.n	8011fd6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7fe fdb3 	bl	8010ae8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d004      	beq.n	8011f94 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	3318      	adds	r3, #24
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7fe fdaa 	bl	8010ae8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f98:	2201      	movs	r2, #1
 8011f9a:	409a      	lsls	r2, r3
 8011f9c:	4b23      	ldr	r3, [pc, #140]	; (801202c <xTaskIncrementTick+0x164>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	4313      	orrs	r3, r2
 8011fa2:	4a22      	ldr	r2, [pc, #136]	; (801202c <xTaskIncrementTick+0x164>)
 8011fa4:	6013      	str	r3, [r2, #0]
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011faa:	4613      	mov	r3, r2
 8011fac:	009b      	lsls	r3, r3, #2
 8011fae:	4413      	add	r3, r2
 8011fb0:	009b      	lsls	r3, r3, #2
 8011fb2:	4a1f      	ldr	r2, [pc, #124]	; (8012030 <xTaskIncrementTick+0x168>)
 8011fb4:	441a      	add	r2, r3
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	3304      	adds	r3, #4
 8011fba:	4619      	mov	r1, r3
 8011fbc:	4610      	mov	r0, r2
 8011fbe:	f7fe fd36 	bl	8010a2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fc6:	4b1b      	ldr	r3, [pc, #108]	; (8012034 <xTaskIncrementTick+0x16c>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d3b4      	bcc.n	8011f3a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011fd4:	e7b1      	b.n	8011f3a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011fd6:	4b17      	ldr	r3, [pc, #92]	; (8012034 <xTaskIncrementTick+0x16c>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fdc:	4914      	ldr	r1, [pc, #80]	; (8012030 <xTaskIncrementTick+0x168>)
 8011fde:	4613      	mov	r3, r2
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	4413      	add	r3, r2
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	440b      	add	r3, r1
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2b01      	cmp	r3, #1
 8011fec:	d907      	bls.n	8011ffe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8011fee:	2301      	movs	r3, #1
 8011ff0:	617b      	str	r3, [r7, #20]
 8011ff2:	e004      	b.n	8011ffe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011ff4:	4b10      	ldr	r3, [pc, #64]	; (8012038 <xTaskIncrementTick+0x170>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	4a0f      	ldr	r2, [pc, #60]	; (8012038 <xTaskIncrementTick+0x170>)
 8011ffc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011ffe:	4b0f      	ldr	r3, [pc, #60]	; (801203c <xTaskIncrementTick+0x174>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d001      	beq.n	801200a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8012006:	2301      	movs	r3, #1
 8012008:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801200a:	697b      	ldr	r3, [r7, #20]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	2000099c 	.word	0x2000099c
 8012018:	20000978 	.word	0x20000978
 801201c:	2000092c 	.word	0x2000092c
 8012020:	20000930 	.word	0x20000930
 8012024:	2000098c 	.word	0x2000098c
 8012028:	20000994 	.word	0x20000994
 801202c:	2000097c 	.word	0x2000097c
 8012030:	20000878 	.word	0x20000878
 8012034:	20000874 	.word	0x20000874
 8012038:	20000984 	.word	0x20000984
 801203c:	20000988 	.word	0x20000988

08012040 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d103      	bne.n	8012058 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012050:	4b08      	ldr	r3, [pc, #32]	; (8012074 <vTaskSetApplicationTaskTag+0x34>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	60fb      	str	r3, [r7, #12]
 8012056:	e001      	b.n	801205c <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 801205c:	f000 fe06 	bl	8012c6c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	683a      	ldr	r2, [r7, #0]
 8012064:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8012066:	f000 fe2f 	bl	8012cc8 <vPortExitCritical>
	}
 801206a:	bf00      	nop
 801206c:	3710      	adds	r7, #16
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	20000874 	.word	0x20000874

08012078 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d103      	bne.n	8012090 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012088:	4b0b      	ldr	r3, [pc, #44]	; (80120b8 <xTaskCallApplicationTaskHook+0x40>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	60fb      	str	r3, [r7, #12]
 801208e:	e001      	b.n	8012094 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012098:	2b00      	cmp	r3, #0
 801209a:	d005      	beq.n	80120a8 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120a0:	6838      	ldr	r0, [r7, #0]
 80120a2:	4798      	blx	r3
 80120a4:	60b8      	str	r0, [r7, #8]
 80120a6:	e001      	b.n	80120ac <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 80120a8:	2300      	movs	r3, #0
 80120aa:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 80120ac:	68bb      	ldr	r3, [r7, #8]
	}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3710      	adds	r7, #16
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	20000874 	.word	0x20000874

080120bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b088      	sub	sp, #32
 80120c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80120c2:	4b3f      	ldr	r3, [pc, #252]	; (80121c0 <vTaskSwitchContext+0x104>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d003      	beq.n	80120d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80120ca:	4b3e      	ldr	r3, [pc, #248]	; (80121c4 <vTaskSwitchContext+0x108>)
 80120cc:	2201      	movs	r2, #1
 80120ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80120d0:	e071      	b.n	80121b6 <vTaskSwitchContext+0xfa>
		xYieldPending = pdFALSE;
 80120d2:	4b3c      	ldr	r3, [pc, #240]	; (80121c4 <vTaskSwitchContext+0x108>)
 80120d4:	2200      	movs	r2, #0
 80120d6:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80120d8:	4b3b      	ldr	r3, [pc, #236]	; (80121c8 <vTaskSwitchContext+0x10c>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2101      	movs	r1, #1
 80120de:	4618      	mov	r0, r3
 80120e0:	f7ff ffca 	bl	8012078 <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 80120e4:	4b38      	ldr	r3, [pc, #224]	; (80121c8 <vTaskSwitchContext+0x10c>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120ea:	61fb      	str	r3, [r7, #28]
 80120ec:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80120f0:	61bb      	str	r3, [r7, #24]
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	69ba      	ldr	r2, [r7, #24]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d111      	bne.n	8012120 <vTaskSwitchContext+0x64>
 80120fc:	69fb      	ldr	r3, [r7, #28]
 80120fe:	3304      	adds	r3, #4
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	69ba      	ldr	r2, [r7, #24]
 8012104:	429a      	cmp	r2, r3
 8012106:	d10b      	bne.n	8012120 <vTaskSwitchContext+0x64>
 8012108:	69fb      	ldr	r3, [r7, #28]
 801210a:	3308      	adds	r3, #8
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	69ba      	ldr	r2, [r7, #24]
 8012110:	429a      	cmp	r2, r3
 8012112:	d105      	bne.n	8012120 <vTaskSwitchContext+0x64>
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	330c      	adds	r3, #12
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	69ba      	ldr	r2, [r7, #24]
 801211c:	429a      	cmp	r2, r3
 801211e:	d008      	beq.n	8012132 <vTaskSwitchContext+0x76>
 8012120:	4b29      	ldr	r3, [pc, #164]	; (80121c8 <vTaskSwitchContext+0x10c>)
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	4b28      	ldr	r3, [pc, #160]	; (80121c8 <vTaskSwitchContext+0x10c>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	3334      	adds	r3, #52	; 0x34
 801212a:	4619      	mov	r1, r3
 801212c:	4610      	mov	r0, r2
 801212e:	f7fe fa5c 	bl	80105ea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012132:	4b26      	ldr	r3, [pc, #152]	; (80121cc <vTaskSwitchContext+0x110>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	fab3 f383 	clz	r3, r3
 801213e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012140:	7afb      	ldrb	r3, [r7, #11]
 8012142:	f1c3 031f 	rsb	r3, r3, #31
 8012146:	617b      	str	r3, [r7, #20]
 8012148:	4921      	ldr	r1, [pc, #132]	; (80121d0 <vTaskSwitchContext+0x114>)
 801214a:	697a      	ldr	r2, [r7, #20]
 801214c:	4613      	mov	r3, r2
 801214e:	009b      	lsls	r3, r3, #2
 8012150:	4413      	add	r3, r2
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	440b      	add	r3, r1
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d109      	bne.n	8012170 <vTaskSwitchContext+0xb4>
	__asm volatile
 801215c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012160:	f383 8811 	msr	BASEPRI, r3
 8012164:	f3bf 8f6f 	isb	sy
 8012168:	f3bf 8f4f 	dsb	sy
 801216c:	607b      	str	r3, [r7, #4]
 801216e:	e7fe      	b.n	801216e <vTaskSwitchContext+0xb2>
 8012170:	697a      	ldr	r2, [r7, #20]
 8012172:	4613      	mov	r3, r2
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	4413      	add	r3, r2
 8012178:	009b      	lsls	r3, r3, #2
 801217a:	4a15      	ldr	r2, [pc, #84]	; (80121d0 <vTaskSwitchContext+0x114>)
 801217c:	4413      	add	r3, r2
 801217e:	613b      	str	r3, [r7, #16]
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	685a      	ldr	r2, [r3, #4]
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	605a      	str	r2, [r3, #4]
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	685a      	ldr	r2, [r3, #4]
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	3308      	adds	r3, #8
 8012192:	429a      	cmp	r2, r3
 8012194:	d104      	bne.n	80121a0 <vTaskSwitchContext+0xe4>
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	685a      	ldr	r2, [r3, #4]
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	605a      	str	r2, [r3, #4]
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	4a08      	ldr	r2, [pc, #32]	; (80121c8 <vTaskSwitchContext+0x10c>)
 80121a8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80121aa:	4b07      	ldr	r3, [pc, #28]	; (80121c8 <vTaskSwitchContext+0x10c>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2100      	movs	r1, #0
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7ff ff61 	bl	8012078 <xTaskCallApplicationTaskHook>
}
 80121b6:	bf00      	nop
 80121b8:	3720      	adds	r7, #32
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	2000099c 	.word	0x2000099c
 80121c4:	20000988 	.word	0x20000988
 80121c8:	20000874 	.word	0x20000874
 80121cc:	2000097c 	.word	0x2000097c
 80121d0:	20000878 	.word	0x20000878

080121d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d109      	bne.n	80121f8 <vTaskPlaceOnEventList+0x24>
 80121e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e8:	f383 8811 	msr	BASEPRI, r3
 80121ec:	f3bf 8f6f 	isb	sy
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	60fb      	str	r3, [r7, #12]
 80121f6:	e7fe      	b.n	80121f6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80121f8:	4b07      	ldr	r3, [pc, #28]	; (8012218 <vTaskPlaceOnEventList+0x44>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	3318      	adds	r3, #24
 80121fe:	4619      	mov	r1, r3
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7fe fc38 	bl	8010a76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012206:	2101      	movs	r1, #1
 8012208:	6838      	ldr	r0, [r7, #0]
 801220a:	f000 fb9f 	bl	801294c <prvAddCurrentTaskToDelayedList>
}
 801220e:	bf00      	nop
 8012210:	3710      	adds	r7, #16
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	20000874 	.word	0x20000874

0801221c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b086      	sub	sp, #24
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d109      	bne.n	8012246 <xTaskRemoveFromEventList+0x2a>
 8012232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012236:	f383 8811 	msr	BASEPRI, r3
 801223a:	f3bf 8f6f 	isb	sy
 801223e:	f3bf 8f4f 	dsb	sy
 8012242:	60fb      	str	r3, [r7, #12]
 8012244:	e7fe      	b.n	8012244 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	3318      	adds	r3, #24
 801224a:	4618      	mov	r0, r3
 801224c:	f7fe fc4c 	bl	8010ae8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012250:	4b1d      	ldr	r3, [pc, #116]	; (80122c8 <xTaskRemoveFromEventList+0xac>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d11c      	bne.n	8012292 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	3304      	adds	r3, #4
 801225c:	4618      	mov	r0, r3
 801225e:	f7fe fc43 	bl	8010ae8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012266:	2201      	movs	r2, #1
 8012268:	409a      	lsls	r2, r3
 801226a:	4b18      	ldr	r3, [pc, #96]	; (80122cc <xTaskRemoveFromEventList+0xb0>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4313      	orrs	r3, r2
 8012270:	4a16      	ldr	r2, [pc, #88]	; (80122cc <xTaskRemoveFromEventList+0xb0>)
 8012272:	6013      	str	r3, [r2, #0]
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012278:	4613      	mov	r3, r2
 801227a:	009b      	lsls	r3, r3, #2
 801227c:	4413      	add	r3, r2
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4a13      	ldr	r2, [pc, #76]	; (80122d0 <xTaskRemoveFromEventList+0xb4>)
 8012282:	441a      	add	r2, r3
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	3304      	adds	r3, #4
 8012288:	4619      	mov	r1, r3
 801228a:	4610      	mov	r0, r2
 801228c:	f7fe fbcf 	bl	8010a2e <vListInsertEnd>
 8012290:	e005      	b.n	801229e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	3318      	adds	r3, #24
 8012296:	4619      	mov	r1, r3
 8012298:	480e      	ldr	r0, [pc, #56]	; (80122d4 <xTaskRemoveFromEventList+0xb8>)
 801229a:	f7fe fbc8 	bl	8010a2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122a2:	4b0d      	ldr	r3, [pc, #52]	; (80122d8 <xTaskRemoveFromEventList+0xbc>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d905      	bls.n	80122b8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80122ac:	2301      	movs	r3, #1
 80122ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80122b0:	4b0a      	ldr	r3, [pc, #40]	; (80122dc <xTaskRemoveFromEventList+0xc0>)
 80122b2:	2201      	movs	r2, #1
 80122b4:	601a      	str	r2, [r3, #0]
 80122b6:	e001      	b.n	80122bc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80122b8:	2300      	movs	r3, #0
 80122ba:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80122bc:	697b      	ldr	r3, [r7, #20]
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3718      	adds	r7, #24
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	2000099c 	.word	0x2000099c
 80122cc:	2000097c 	.word	0x2000097c
 80122d0:	20000878 	.word	0x20000878
 80122d4:	20000934 	.word	0x20000934
 80122d8:	20000874 	.word	0x20000874
 80122dc:	20000988 	.word	0x20000988

080122e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80122e8:	4b06      	ldr	r3, [pc, #24]	; (8012304 <vTaskInternalSetTimeOutState+0x24>)
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80122f0:	4b05      	ldr	r3, [pc, #20]	; (8012308 <vTaskInternalSetTimeOutState+0x28>)
 80122f2:	681a      	ldr	r2, [r3, #0]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	605a      	str	r2, [r3, #4]
}
 80122f8:	bf00      	nop
 80122fa:	370c      	adds	r7, #12
 80122fc:	46bd      	mov	sp, r7
 80122fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012302:	4770      	bx	lr
 8012304:	2000098c 	.word	0x2000098c
 8012308:	20000978 	.word	0x20000978

0801230c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b088      	sub	sp, #32
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d109      	bne.n	8012330 <xTaskCheckForTimeOut+0x24>
 801231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012320:	f383 8811 	msr	BASEPRI, r3
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	f3bf 8f4f 	dsb	sy
 801232c:	613b      	str	r3, [r7, #16]
 801232e:	e7fe      	b.n	801232e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d109      	bne.n	801234a <xTaskCheckForTimeOut+0x3e>
 8012336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233a:	f383 8811 	msr	BASEPRI, r3
 801233e:	f3bf 8f6f 	isb	sy
 8012342:	f3bf 8f4f 	dsb	sy
 8012346:	60fb      	str	r3, [r7, #12]
 8012348:	e7fe      	b.n	8012348 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801234a:	f000 fc8f 	bl	8012c6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801234e:	4b1d      	ldr	r3, [pc, #116]	; (80123c4 <xTaskCheckForTimeOut+0xb8>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	69ba      	ldr	r2, [r7, #24]
 801235a:	1ad3      	subs	r3, r2, r3
 801235c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012366:	d102      	bne.n	801236e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012368:	2300      	movs	r3, #0
 801236a:	61fb      	str	r3, [r7, #28]
 801236c:	e023      	b.n	80123b6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	4b15      	ldr	r3, [pc, #84]	; (80123c8 <xTaskCheckForTimeOut+0xbc>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	429a      	cmp	r2, r3
 8012378:	d007      	beq.n	801238a <xTaskCheckForTimeOut+0x7e>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	69ba      	ldr	r2, [r7, #24]
 8012380:	429a      	cmp	r2, r3
 8012382:	d302      	bcc.n	801238a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012384:	2301      	movs	r3, #1
 8012386:	61fb      	str	r3, [r7, #28]
 8012388:	e015      	b.n	80123b6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	697a      	ldr	r2, [r7, #20]
 8012390:	429a      	cmp	r2, r3
 8012392:	d20b      	bcs.n	80123ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	1ad2      	subs	r2, r2, r3
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f7ff ff9d 	bl	80122e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80123a6:	2300      	movs	r3, #0
 80123a8:	61fb      	str	r3, [r7, #28]
 80123aa:	e004      	b.n	80123b6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	2200      	movs	r2, #0
 80123b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80123b2:	2301      	movs	r3, #1
 80123b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80123b6:	f000 fc87 	bl	8012cc8 <vPortExitCritical>

	return xReturn;
 80123ba:	69fb      	ldr	r3, [r7, #28]
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3720      	adds	r7, #32
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}
 80123c4:	20000978 	.word	0x20000978
 80123c8:	2000098c 	.word	0x2000098c

080123cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80123cc:	b480      	push	{r7}
 80123ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80123d0:	4b03      	ldr	r3, [pc, #12]	; (80123e0 <vTaskMissedYield+0x14>)
 80123d2:	2201      	movs	r2, #1
 80123d4:	601a      	str	r2, [r3, #0]
}
 80123d6:	bf00      	nop
 80123d8:	46bd      	mov	sp, r7
 80123da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123de:	4770      	bx	lr
 80123e0:	20000988 	.word	0x20000988

080123e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b082      	sub	sp, #8
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80123ec:	f000 f854 	bl	8012498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80123f0:	4b07      	ldr	r3, [pc, #28]	; (8012410 <prvIdleTask+0x2c>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d907      	bls.n	8012408 <prvIdleTask+0x24>
			{
				taskYIELD();
 80123f8:	4b06      	ldr	r3, [pc, #24]	; (8012414 <prvIdleTask+0x30>)
 80123fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123fe:	601a      	str	r2, [r3, #0]
 8012400:	f3bf 8f4f 	dsb	sy
 8012404:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012408:	f7fe f8fc 	bl	8010604 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801240c:	e7ee      	b.n	80123ec <prvIdleTask+0x8>
 801240e:	bf00      	nop
 8012410:	20000878 	.word	0x20000878
 8012414:	e000ed04 	.word	0xe000ed04

08012418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801241e:	2300      	movs	r3, #0
 8012420:	607b      	str	r3, [r7, #4]
 8012422:	e00c      	b.n	801243e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012424:	687a      	ldr	r2, [r7, #4]
 8012426:	4613      	mov	r3, r2
 8012428:	009b      	lsls	r3, r3, #2
 801242a:	4413      	add	r3, r2
 801242c:	009b      	lsls	r3, r3, #2
 801242e:	4a12      	ldr	r2, [pc, #72]	; (8012478 <prvInitialiseTaskLists+0x60>)
 8012430:	4413      	add	r3, r2
 8012432:	4618      	mov	r0, r3
 8012434:	f7fe face 	bl	80109d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	3301      	adds	r3, #1
 801243c:	607b      	str	r3, [r7, #4]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2b06      	cmp	r3, #6
 8012442:	d9ef      	bls.n	8012424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012444:	480d      	ldr	r0, [pc, #52]	; (801247c <prvInitialiseTaskLists+0x64>)
 8012446:	f7fe fac5 	bl	80109d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801244a:	480d      	ldr	r0, [pc, #52]	; (8012480 <prvInitialiseTaskLists+0x68>)
 801244c:	f7fe fac2 	bl	80109d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012450:	480c      	ldr	r0, [pc, #48]	; (8012484 <prvInitialiseTaskLists+0x6c>)
 8012452:	f7fe fabf 	bl	80109d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012456:	480c      	ldr	r0, [pc, #48]	; (8012488 <prvInitialiseTaskLists+0x70>)
 8012458:	f7fe fabc 	bl	80109d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801245c:	480b      	ldr	r0, [pc, #44]	; (801248c <prvInitialiseTaskLists+0x74>)
 801245e:	f7fe fab9 	bl	80109d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012462:	4b0b      	ldr	r3, [pc, #44]	; (8012490 <prvInitialiseTaskLists+0x78>)
 8012464:	4a05      	ldr	r2, [pc, #20]	; (801247c <prvInitialiseTaskLists+0x64>)
 8012466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012468:	4b0a      	ldr	r3, [pc, #40]	; (8012494 <prvInitialiseTaskLists+0x7c>)
 801246a:	4a05      	ldr	r2, [pc, #20]	; (8012480 <prvInitialiseTaskLists+0x68>)
 801246c:	601a      	str	r2, [r3, #0]
}
 801246e:	bf00      	nop
 8012470:	3708      	adds	r7, #8
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}
 8012476:	bf00      	nop
 8012478:	20000878 	.word	0x20000878
 801247c:	20000904 	.word	0x20000904
 8012480:	20000918 	.word	0x20000918
 8012484:	20000934 	.word	0x20000934
 8012488:	20000948 	.word	0x20000948
 801248c:	20000960 	.word	0x20000960
 8012490:	2000092c 	.word	0x2000092c
 8012494:	20000930 	.word	0x20000930

08012498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801249e:	e019      	b.n	80124d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80124a0:	f000 fbe4 	bl	8012c6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80124a4:	4b0f      	ldr	r3, [pc, #60]	; (80124e4 <prvCheckTasksWaitingTermination+0x4c>)
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	68db      	ldr	r3, [r3, #12]
 80124aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	3304      	adds	r3, #4
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7fe fb19 	bl	8010ae8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80124b6:	4b0c      	ldr	r3, [pc, #48]	; (80124e8 <prvCheckTasksWaitingTermination+0x50>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	3b01      	subs	r3, #1
 80124bc:	4a0a      	ldr	r2, [pc, #40]	; (80124e8 <prvCheckTasksWaitingTermination+0x50>)
 80124be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80124c0:	4b0a      	ldr	r3, [pc, #40]	; (80124ec <prvCheckTasksWaitingTermination+0x54>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	3b01      	subs	r3, #1
 80124c6:	4a09      	ldr	r2, [pc, #36]	; (80124ec <prvCheckTasksWaitingTermination+0x54>)
 80124c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80124ca:	f000 fbfd 	bl	8012cc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 f80e 	bl	80124f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80124d4:	4b05      	ldr	r3, [pc, #20]	; (80124ec <prvCheckTasksWaitingTermination+0x54>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d1e1      	bne.n	80124a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80124dc:	bf00      	nop
 80124de:	3708      	adds	r7, #8
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}
 80124e4:	20000948 	.word	0x20000948
 80124e8:	20000974 	.word	0x20000974
 80124ec:	2000095c 	.word	0x2000095c

080124f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b084      	sub	sp, #16
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d108      	bne.n	8012514 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012506:	4618      	mov	r0, r3
 8012508:	f000 fd90 	bl	801302c <vPortFree>
				vPortFree( pxTCB );
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f000 fd8d 	bl	801302c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012512:	e017      	b.n	8012544 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801251a:	2b01      	cmp	r3, #1
 801251c:	d103      	bne.n	8012526 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f000 fd84 	bl	801302c <vPortFree>
	}
 8012524:	e00e      	b.n	8012544 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801252c:	2b02      	cmp	r3, #2
 801252e:	d009      	beq.n	8012544 <prvDeleteTCB+0x54>
 8012530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012534:	f383 8811 	msr	BASEPRI, r3
 8012538:	f3bf 8f6f 	isb	sy
 801253c:	f3bf 8f4f 	dsb	sy
 8012540:	60fb      	str	r3, [r7, #12]
 8012542:	e7fe      	b.n	8012542 <prvDeleteTCB+0x52>
	}
 8012544:	bf00      	nop
 8012546:	3710      	adds	r7, #16
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012552:	4b0f      	ldr	r3, [pc, #60]	; (8012590 <prvResetNextTaskUnblockTime+0x44>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d101      	bne.n	8012560 <prvResetNextTaskUnblockTime+0x14>
 801255c:	2301      	movs	r3, #1
 801255e:	e000      	b.n	8012562 <prvResetNextTaskUnblockTime+0x16>
 8012560:	2300      	movs	r3, #0
 8012562:	2b00      	cmp	r3, #0
 8012564:	d004      	beq.n	8012570 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012566:	4b0b      	ldr	r3, [pc, #44]	; (8012594 <prvResetNextTaskUnblockTime+0x48>)
 8012568:	f04f 32ff 	mov.w	r2, #4294967295
 801256c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801256e:	e008      	b.n	8012582 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012570:	4b07      	ldr	r3, [pc, #28]	; (8012590 <prvResetNextTaskUnblockTime+0x44>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	68db      	ldr	r3, [r3, #12]
 8012578:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	4a05      	ldr	r2, [pc, #20]	; (8012594 <prvResetNextTaskUnblockTime+0x48>)
 8012580:	6013      	str	r3, [r2, #0]
}
 8012582:	bf00      	nop
 8012584:	370c      	adds	r7, #12
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	2000092c 	.word	0x2000092c
 8012594:	20000994 	.word	0x20000994

08012598 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012598:	b480      	push	{r7}
 801259a:	b083      	sub	sp, #12
 801259c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801259e:	4b0b      	ldr	r3, [pc, #44]	; (80125cc <xTaskGetSchedulerState+0x34>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d102      	bne.n	80125ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80125a6:	2301      	movs	r3, #1
 80125a8:	607b      	str	r3, [r7, #4]
 80125aa:	e008      	b.n	80125be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80125ac:	4b08      	ldr	r3, [pc, #32]	; (80125d0 <xTaskGetSchedulerState+0x38>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d102      	bne.n	80125ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80125b4:	2302      	movs	r3, #2
 80125b6:	607b      	str	r3, [r7, #4]
 80125b8:	e001      	b.n	80125be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80125ba:	2300      	movs	r3, #0
 80125bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80125be:	687b      	ldr	r3, [r7, #4]
	}
 80125c0:	4618      	mov	r0, r3
 80125c2:	370c      	adds	r7, #12
 80125c4:	46bd      	mov	sp, r7
 80125c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ca:	4770      	bx	lr
 80125cc:	20000980 	.word	0x20000980
 80125d0:	2000099c 	.word	0x2000099c

080125d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b084      	sub	sp, #16
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80125e0:	2300      	movs	r3, #0
 80125e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d06e      	beq.n	80126c8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ee:	4b39      	ldr	r3, [pc, #228]	; (80126d4 <xTaskPriorityInherit+0x100>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d25e      	bcs.n	80126b6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	699b      	ldr	r3, [r3, #24]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	db06      	blt.n	801260e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012600:	4b34      	ldr	r3, [pc, #208]	; (80126d4 <xTaskPriorityInherit+0x100>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012606:	f1c3 0207 	rsb	r2, r3, #7
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	6959      	ldr	r1, [r3, #20]
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012616:	4613      	mov	r3, r2
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	4413      	add	r3, r2
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	4a2e      	ldr	r2, [pc, #184]	; (80126d8 <xTaskPriorityInherit+0x104>)
 8012620:	4413      	add	r3, r2
 8012622:	4299      	cmp	r1, r3
 8012624:	d101      	bne.n	801262a <xTaskPriorityInherit+0x56>
 8012626:	2301      	movs	r3, #1
 8012628:	e000      	b.n	801262c <xTaskPriorityInherit+0x58>
 801262a:	2300      	movs	r3, #0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d03a      	beq.n	80126a6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	3304      	adds	r3, #4
 8012634:	4618      	mov	r0, r3
 8012636:	f7fe fa57 	bl	8010ae8 <uxListRemove>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d115      	bne.n	801266c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012644:	4924      	ldr	r1, [pc, #144]	; (80126d8 <xTaskPriorityInherit+0x104>)
 8012646:	4613      	mov	r3, r2
 8012648:	009b      	lsls	r3, r3, #2
 801264a:	4413      	add	r3, r2
 801264c:	009b      	lsls	r3, r3, #2
 801264e:	440b      	add	r3, r1
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d10a      	bne.n	801266c <xTaskPriorityInherit+0x98>
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801265a:	2201      	movs	r2, #1
 801265c:	fa02 f303 	lsl.w	r3, r2, r3
 8012660:	43da      	mvns	r2, r3
 8012662:	4b1e      	ldr	r3, [pc, #120]	; (80126dc <xTaskPriorityInherit+0x108>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	4013      	ands	r3, r2
 8012668:	4a1c      	ldr	r2, [pc, #112]	; (80126dc <xTaskPriorityInherit+0x108>)
 801266a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801266c:	4b19      	ldr	r3, [pc, #100]	; (80126d4 <xTaskPriorityInherit+0x100>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801267a:	2201      	movs	r2, #1
 801267c:	409a      	lsls	r2, r3
 801267e:	4b17      	ldr	r3, [pc, #92]	; (80126dc <xTaskPriorityInherit+0x108>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	4313      	orrs	r3, r2
 8012684:	4a15      	ldr	r2, [pc, #84]	; (80126dc <xTaskPriorityInherit+0x108>)
 8012686:	6013      	str	r3, [r2, #0]
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801268c:	4613      	mov	r3, r2
 801268e:	009b      	lsls	r3, r3, #2
 8012690:	4413      	add	r3, r2
 8012692:	009b      	lsls	r3, r3, #2
 8012694:	4a10      	ldr	r2, [pc, #64]	; (80126d8 <xTaskPriorityInherit+0x104>)
 8012696:	441a      	add	r2, r3
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	3304      	adds	r3, #4
 801269c:	4619      	mov	r1, r3
 801269e:	4610      	mov	r0, r2
 80126a0:	f7fe f9c5 	bl	8010a2e <vListInsertEnd>
 80126a4:	e004      	b.n	80126b0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80126a6:	4b0b      	ldr	r3, [pc, #44]	; (80126d4 <xTaskPriorityInherit+0x100>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80126b0:	2301      	movs	r3, #1
 80126b2:	60fb      	str	r3, [r7, #12]
 80126b4:	e008      	b.n	80126c8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80126ba:	4b06      	ldr	r3, [pc, #24]	; (80126d4 <xTaskPriorityInherit+0x100>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d201      	bcs.n	80126c8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80126c4:	2301      	movs	r3, #1
 80126c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80126c8:	68fb      	ldr	r3, [r7, #12]
	}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3710      	adds	r7, #16
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
 80126d2:	bf00      	nop
 80126d4:	20000874 	.word	0x20000874
 80126d8:	20000878 	.word	0x20000878
 80126dc:	2000097c 	.word	0x2000097c

080126e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b086      	sub	sp, #24
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80126ec:	2300      	movs	r3, #0
 80126ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d06c      	beq.n	80127d0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80126f6:	4b39      	ldr	r3, [pc, #228]	; (80127dc <xTaskPriorityDisinherit+0xfc>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	693a      	ldr	r2, [r7, #16]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d009      	beq.n	8012714 <xTaskPriorityDisinherit+0x34>
 8012700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012704:	f383 8811 	msr	BASEPRI, r3
 8012708:	f3bf 8f6f 	isb	sy
 801270c:	f3bf 8f4f 	dsb	sy
 8012710:	60fb      	str	r3, [r7, #12]
 8012712:	e7fe      	b.n	8012712 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012718:	2b00      	cmp	r3, #0
 801271a:	d109      	bne.n	8012730 <xTaskPriorityDisinherit+0x50>
 801271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012720:	f383 8811 	msr	BASEPRI, r3
 8012724:	f3bf 8f6f 	isb	sy
 8012728:	f3bf 8f4f 	dsb	sy
 801272c:	60bb      	str	r3, [r7, #8]
 801272e:	e7fe      	b.n	801272e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012734:	1e5a      	subs	r2, r3, #1
 8012736:	693b      	ldr	r3, [r7, #16]
 8012738:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012742:	429a      	cmp	r2, r3
 8012744:	d044      	beq.n	80127d0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801274a:	2b00      	cmp	r3, #0
 801274c:	d140      	bne.n	80127d0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	3304      	adds	r3, #4
 8012752:	4618      	mov	r0, r3
 8012754:	f7fe f9c8 	bl	8010ae8 <uxListRemove>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d115      	bne.n	801278a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012762:	491f      	ldr	r1, [pc, #124]	; (80127e0 <xTaskPriorityDisinherit+0x100>)
 8012764:	4613      	mov	r3, r2
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	4413      	add	r3, r2
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	440b      	add	r3, r1
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d10a      	bne.n	801278a <xTaskPriorityDisinherit+0xaa>
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012778:	2201      	movs	r2, #1
 801277a:	fa02 f303 	lsl.w	r3, r2, r3
 801277e:	43da      	mvns	r2, r3
 8012780:	4b18      	ldr	r3, [pc, #96]	; (80127e4 <xTaskPriorityDisinherit+0x104>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4013      	ands	r3, r2
 8012786:	4a17      	ldr	r2, [pc, #92]	; (80127e4 <xTaskPriorityDisinherit+0x104>)
 8012788:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012796:	f1c3 0207 	rsb	r2, r3, #7
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127a2:	2201      	movs	r2, #1
 80127a4:	409a      	lsls	r2, r3
 80127a6:	4b0f      	ldr	r3, [pc, #60]	; (80127e4 <xTaskPriorityDisinherit+0x104>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4313      	orrs	r3, r2
 80127ac:	4a0d      	ldr	r2, [pc, #52]	; (80127e4 <xTaskPriorityDisinherit+0x104>)
 80127ae:	6013      	str	r3, [r2, #0]
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127b4:	4613      	mov	r3, r2
 80127b6:	009b      	lsls	r3, r3, #2
 80127b8:	4413      	add	r3, r2
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	4a08      	ldr	r2, [pc, #32]	; (80127e0 <xTaskPriorityDisinherit+0x100>)
 80127be:	441a      	add	r2, r3
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	3304      	adds	r3, #4
 80127c4:	4619      	mov	r1, r3
 80127c6:	4610      	mov	r0, r2
 80127c8:	f7fe f931 	bl	8010a2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80127cc:	2301      	movs	r3, #1
 80127ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80127d0:	697b      	ldr	r3, [r7, #20]
	}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3718      	adds	r7, #24
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	20000874 	.word	0x20000874
 80127e0:	20000878 	.word	0x20000878
 80127e4:	2000097c 	.word	0x2000097c

080127e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b088      	sub	sp, #32
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80127f6:	2301      	movs	r3, #1
 80127f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	f000 8086 	beq.w	801290e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012802:	69bb      	ldr	r3, [r7, #24]
 8012804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012806:	2b00      	cmp	r3, #0
 8012808:	d109      	bne.n	801281e <vTaskPriorityDisinheritAfterTimeout+0x36>
 801280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280e:	f383 8811 	msr	BASEPRI, r3
 8012812:	f3bf 8f6f 	isb	sy
 8012816:	f3bf 8f4f 	dsb	sy
 801281a:	60fb      	str	r3, [r7, #12]
 801281c:	e7fe      	b.n	801281c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012822:	683a      	ldr	r2, [r7, #0]
 8012824:	429a      	cmp	r2, r3
 8012826:	d902      	bls.n	801282e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	61fb      	str	r3, [r7, #28]
 801282c:	e002      	b.n	8012834 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801282e:	69bb      	ldr	r3, [r7, #24]
 8012830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012832:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012838:	69fa      	ldr	r2, [r7, #28]
 801283a:	429a      	cmp	r2, r3
 801283c:	d067      	beq.n	801290e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012842:	697a      	ldr	r2, [r7, #20]
 8012844:	429a      	cmp	r2, r3
 8012846:	d162      	bne.n	801290e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012848:	4b33      	ldr	r3, [pc, #204]	; (8012918 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	69ba      	ldr	r2, [r7, #24]
 801284e:	429a      	cmp	r2, r3
 8012850:	d109      	bne.n	8012866 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8012852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012856:	f383 8811 	msr	BASEPRI, r3
 801285a:	f3bf 8f6f 	isb	sy
 801285e:	f3bf 8f4f 	dsb	sy
 8012862:	60bb      	str	r3, [r7, #8]
 8012864:	e7fe      	b.n	8012864 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801286a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	69fa      	ldr	r2, [r7, #28]
 8012870:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	699b      	ldr	r3, [r3, #24]
 8012876:	2b00      	cmp	r3, #0
 8012878:	db04      	blt.n	8012884 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801287a:	69fb      	ldr	r3, [r7, #28]
 801287c:	f1c3 0207 	rsb	r2, r3, #7
 8012880:	69bb      	ldr	r3, [r7, #24]
 8012882:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012884:	69bb      	ldr	r3, [r7, #24]
 8012886:	6959      	ldr	r1, [r3, #20]
 8012888:	693a      	ldr	r2, [r7, #16]
 801288a:	4613      	mov	r3, r2
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	4413      	add	r3, r2
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	4a22      	ldr	r2, [pc, #136]	; (801291c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012894:	4413      	add	r3, r2
 8012896:	4299      	cmp	r1, r3
 8012898:	d101      	bne.n	801289e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 801289a:	2301      	movs	r3, #1
 801289c:	e000      	b.n	80128a0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 801289e:	2300      	movs	r3, #0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d034      	beq.n	801290e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	3304      	adds	r3, #4
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7fe f91d 	bl	8010ae8 <uxListRemove>
 80128ae:	4603      	mov	r3, r0
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d115      	bne.n	80128e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80128b4:	69bb      	ldr	r3, [r7, #24]
 80128b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128b8:	4918      	ldr	r1, [pc, #96]	; (801291c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80128ba:	4613      	mov	r3, r2
 80128bc:	009b      	lsls	r3, r3, #2
 80128be:	4413      	add	r3, r2
 80128c0:	009b      	lsls	r3, r3, #2
 80128c2:	440b      	add	r3, r1
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d10a      	bne.n	80128e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ce:	2201      	movs	r2, #1
 80128d0:	fa02 f303 	lsl.w	r3, r2, r3
 80128d4:	43da      	mvns	r2, r3
 80128d6:	4b12      	ldr	r3, [pc, #72]	; (8012920 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	4013      	ands	r3, r2
 80128dc:	4a10      	ldr	r2, [pc, #64]	; (8012920 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80128de:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80128e0:	69bb      	ldr	r3, [r7, #24]
 80128e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e4:	2201      	movs	r2, #1
 80128e6:	409a      	lsls	r2, r3
 80128e8:	4b0d      	ldr	r3, [pc, #52]	; (8012920 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4313      	orrs	r3, r2
 80128ee:	4a0c      	ldr	r2, [pc, #48]	; (8012920 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80128f0:	6013      	str	r3, [r2, #0]
 80128f2:	69bb      	ldr	r3, [r7, #24]
 80128f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f6:	4613      	mov	r3, r2
 80128f8:	009b      	lsls	r3, r3, #2
 80128fa:	4413      	add	r3, r2
 80128fc:	009b      	lsls	r3, r3, #2
 80128fe:	4a07      	ldr	r2, [pc, #28]	; (801291c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012900:	441a      	add	r2, r3
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	3304      	adds	r3, #4
 8012906:	4619      	mov	r1, r3
 8012908:	4610      	mov	r0, r2
 801290a:	f7fe f890 	bl	8010a2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801290e:	bf00      	nop
 8012910:	3720      	adds	r7, #32
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	20000874 	.word	0x20000874
 801291c:	20000878 	.word	0x20000878
 8012920:	2000097c 	.word	0x2000097c

08012924 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012924:	b480      	push	{r7}
 8012926:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012928:	4b07      	ldr	r3, [pc, #28]	; (8012948 <pvTaskIncrementMutexHeldCount+0x24>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d004      	beq.n	801293a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012930:	4b05      	ldr	r3, [pc, #20]	; (8012948 <pvTaskIncrementMutexHeldCount+0x24>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012936:	3201      	adds	r2, #1
 8012938:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801293a:	4b03      	ldr	r3, [pc, #12]	; (8012948 <pvTaskIncrementMutexHeldCount+0x24>)
 801293c:	681b      	ldr	r3, [r3, #0]
	}
 801293e:	4618      	mov	r0, r3
 8012940:	46bd      	mov	sp, r7
 8012942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012946:	4770      	bx	lr
 8012948:	20000874 	.word	0x20000874

0801294c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b084      	sub	sp, #16
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012956:	4b29      	ldr	r3, [pc, #164]	; (80129fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801295c:	4b28      	ldr	r3, [pc, #160]	; (8012a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	3304      	adds	r3, #4
 8012962:	4618      	mov	r0, r3
 8012964:	f7fe f8c0 	bl	8010ae8 <uxListRemove>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d10b      	bne.n	8012986 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801296e:	4b24      	ldr	r3, [pc, #144]	; (8012a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012974:	2201      	movs	r2, #1
 8012976:	fa02 f303 	lsl.w	r3, r2, r3
 801297a:	43da      	mvns	r2, r3
 801297c:	4b21      	ldr	r3, [pc, #132]	; (8012a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4013      	ands	r3, r2
 8012982:	4a20      	ldr	r2, [pc, #128]	; (8012a04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012984:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801298c:	d10a      	bne.n	80129a4 <prvAddCurrentTaskToDelayedList+0x58>
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d007      	beq.n	80129a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012994:	4b1a      	ldr	r3, [pc, #104]	; (8012a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	3304      	adds	r3, #4
 801299a:	4619      	mov	r1, r3
 801299c:	481a      	ldr	r0, [pc, #104]	; (8012a08 <prvAddCurrentTaskToDelayedList+0xbc>)
 801299e:	f7fe f846 	bl	8010a2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80129a2:	e026      	b.n	80129f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80129a4:	68fa      	ldr	r2, [r7, #12]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	4413      	add	r3, r2
 80129aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80129ac:	4b14      	ldr	r3, [pc, #80]	; (8012a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	68ba      	ldr	r2, [r7, #8]
 80129b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80129b4:	68ba      	ldr	r2, [r7, #8]
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	429a      	cmp	r2, r3
 80129ba:	d209      	bcs.n	80129d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80129bc:	4b13      	ldr	r3, [pc, #76]	; (8012a0c <prvAddCurrentTaskToDelayedList+0xc0>)
 80129be:	681a      	ldr	r2, [r3, #0]
 80129c0:	4b0f      	ldr	r3, [pc, #60]	; (8012a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	3304      	adds	r3, #4
 80129c6:	4619      	mov	r1, r3
 80129c8:	4610      	mov	r0, r2
 80129ca:	f7fe f854 	bl	8010a76 <vListInsert>
}
 80129ce:	e010      	b.n	80129f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80129d0:	4b0f      	ldr	r3, [pc, #60]	; (8012a10 <prvAddCurrentTaskToDelayedList+0xc4>)
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	4b0a      	ldr	r3, [pc, #40]	; (8012a00 <prvAddCurrentTaskToDelayedList+0xb4>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	3304      	adds	r3, #4
 80129da:	4619      	mov	r1, r3
 80129dc:	4610      	mov	r0, r2
 80129de:	f7fe f84a 	bl	8010a76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80129e2:	4b0c      	ldr	r3, [pc, #48]	; (8012a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	68ba      	ldr	r2, [r7, #8]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d202      	bcs.n	80129f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80129ec:	4a09      	ldr	r2, [pc, #36]	; (8012a14 <prvAddCurrentTaskToDelayedList+0xc8>)
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	6013      	str	r3, [r2, #0]
}
 80129f2:	bf00      	nop
 80129f4:	3710      	adds	r7, #16
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}
 80129fa:	bf00      	nop
 80129fc:	20000978 	.word	0x20000978
 8012a00:	20000874 	.word	0x20000874
 8012a04:	2000097c 	.word	0x2000097c
 8012a08:	20000960 	.word	0x20000960
 8012a0c:	20000930 	.word	0x20000930
 8012a10:	2000092c 	.word	0x2000092c
 8012a14:	20000994 	.word	0x20000994

08012a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012a18:	b480      	push	{r7}
 8012a1a:	b085      	sub	sp, #20
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	60f8      	str	r0, [r7, #12]
 8012a20:	60b9      	str	r1, [r7, #8]
 8012a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	3b04      	subs	r3, #4
 8012a28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	3b04      	subs	r3, #4
 8012a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	f023 0201 	bic.w	r2, r3, #1
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	3b04      	subs	r3, #4
 8012a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012a48:	4a0c      	ldr	r2, [pc, #48]	; (8012a7c <pxPortInitialiseStack+0x64>)
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	3b14      	subs	r3, #20
 8012a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	3b04      	subs	r3, #4
 8012a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	f06f 0202 	mvn.w	r2, #2
 8012a66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	3b20      	subs	r3, #32
 8012a6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3714      	adds	r7, #20
 8012a74:	46bd      	mov	sp, r7
 8012a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7a:	4770      	bx	lr
 8012a7c:	08012a81 	.word	0x08012a81

08012a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012a80:	b480      	push	{r7}
 8012a82:	b085      	sub	sp, #20
 8012a84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012a86:	2300      	movs	r3, #0
 8012a88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012a8a:	4b11      	ldr	r3, [pc, #68]	; (8012ad0 <prvTaskExitError+0x50>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a92:	d009      	beq.n	8012aa8 <prvTaskExitError+0x28>
 8012a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a98:	f383 8811 	msr	BASEPRI, r3
 8012a9c:	f3bf 8f6f 	isb	sy
 8012aa0:	f3bf 8f4f 	dsb	sy
 8012aa4:	60fb      	str	r3, [r7, #12]
 8012aa6:	e7fe      	b.n	8012aa6 <prvTaskExitError+0x26>
 8012aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aac:	f383 8811 	msr	BASEPRI, r3
 8012ab0:	f3bf 8f6f 	isb	sy
 8012ab4:	f3bf 8f4f 	dsb	sy
 8012ab8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012aba:	bf00      	nop
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d0fc      	beq.n	8012abc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012ac2:	bf00      	nop
 8012ac4:	3714      	adds	r7, #20
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012acc:	4770      	bx	lr
 8012ace:	bf00      	nop
 8012ad0:	20000058 	.word	0x20000058
	...

08012ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012ae0:	4b07      	ldr	r3, [pc, #28]	; (8012b00 <pxCurrentTCBConst2>)
 8012ae2:	6819      	ldr	r1, [r3, #0]
 8012ae4:	6808      	ldr	r0, [r1, #0]
 8012ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aea:	f380 8809 	msr	PSP, r0
 8012aee:	f3bf 8f6f 	isb	sy
 8012af2:	f04f 0000 	mov.w	r0, #0
 8012af6:	f380 8811 	msr	BASEPRI, r0
 8012afa:	4770      	bx	lr
 8012afc:	f3af 8000 	nop.w

08012b00 <pxCurrentTCBConst2>:
 8012b00:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012b04:	bf00      	nop
 8012b06:	bf00      	nop

08012b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012b08:	4808      	ldr	r0, [pc, #32]	; (8012b2c <prvPortStartFirstTask+0x24>)
 8012b0a:	6800      	ldr	r0, [r0, #0]
 8012b0c:	6800      	ldr	r0, [r0, #0]
 8012b0e:	f380 8808 	msr	MSP, r0
 8012b12:	f04f 0000 	mov.w	r0, #0
 8012b16:	f380 8814 	msr	CONTROL, r0
 8012b1a:	b662      	cpsie	i
 8012b1c:	b661      	cpsie	f
 8012b1e:	f3bf 8f4f 	dsb	sy
 8012b22:	f3bf 8f6f 	isb	sy
 8012b26:	df00      	svc	0
 8012b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012b2a:	bf00      	nop
 8012b2c:	e000ed08 	.word	0xe000ed08

08012b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b086      	sub	sp, #24
 8012b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012b36:	4b44      	ldr	r3, [pc, #272]	; (8012c48 <xPortStartScheduler+0x118>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	4a44      	ldr	r2, [pc, #272]	; (8012c4c <xPortStartScheduler+0x11c>)
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	d109      	bne.n	8012b54 <xPortStartScheduler+0x24>
 8012b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b44:	f383 8811 	msr	BASEPRI, r3
 8012b48:	f3bf 8f6f 	isb	sy
 8012b4c:	f3bf 8f4f 	dsb	sy
 8012b50:	613b      	str	r3, [r7, #16]
 8012b52:	e7fe      	b.n	8012b52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012b54:	4b3c      	ldr	r3, [pc, #240]	; (8012c48 <xPortStartScheduler+0x118>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	4a3d      	ldr	r2, [pc, #244]	; (8012c50 <xPortStartScheduler+0x120>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d109      	bne.n	8012b72 <xPortStartScheduler+0x42>
 8012b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b62:	f383 8811 	msr	BASEPRI, r3
 8012b66:	f3bf 8f6f 	isb	sy
 8012b6a:	f3bf 8f4f 	dsb	sy
 8012b6e:	60fb      	str	r3, [r7, #12]
 8012b70:	e7fe      	b.n	8012b70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012b72:	4b38      	ldr	r3, [pc, #224]	; (8012c54 <xPortStartScheduler+0x124>)
 8012b74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	22ff      	movs	r2, #255	; 0xff
 8012b82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012b8c:	78fb      	ldrb	r3, [r7, #3]
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012b94:	b2da      	uxtb	r2, r3
 8012b96:	4b30      	ldr	r3, [pc, #192]	; (8012c58 <xPortStartScheduler+0x128>)
 8012b98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012b9a:	4b30      	ldr	r3, [pc, #192]	; (8012c5c <xPortStartScheduler+0x12c>)
 8012b9c:	2207      	movs	r2, #7
 8012b9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ba0:	e009      	b.n	8012bb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8012ba2:	4b2e      	ldr	r3, [pc, #184]	; (8012c5c <xPortStartScheduler+0x12c>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	4a2c      	ldr	r2, [pc, #176]	; (8012c5c <xPortStartScheduler+0x12c>)
 8012baa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012bac:	78fb      	ldrb	r3, [r7, #3]
 8012bae:	b2db      	uxtb	r3, r3
 8012bb0:	005b      	lsls	r3, r3, #1
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012bb6:	78fb      	ldrb	r3, [r7, #3]
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bbe:	2b80      	cmp	r3, #128	; 0x80
 8012bc0:	d0ef      	beq.n	8012ba2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012bc2:	4b26      	ldr	r3, [pc, #152]	; (8012c5c <xPortStartScheduler+0x12c>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	f1c3 0307 	rsb	r3, r3, #7
 8012bca:	2b04      	cmp	r3, #4
 8012bcc:	d009      	beq.n	8012be2 <xPortStartScheduler+0xb2>
 8012bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd2:	f383 8811 	msr	BASEPRI, r3
 8012bd6:	f3bf 8f6f 	isb	sy
 8012bda:	f3bf 8f4f 	dsb	sy
 8012bde:	60bb      	str	r3, [r7, #8]
 8012be0:	e7fe      	b.n	8012be0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012be2:	4b1e      	ldr	r3, [pc, #120]	; (8012c5c <xPortStartScheduler+0x12c>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	021b      	lsls	r3, r3, #8
 8012be8:	4a1c      	ldr	r2, [pc, #112]	; (8012c5c <xPortStartScheduler+0x12c>)
 8012bea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012bec:	4b1b      	ldr	r3, [pc, #108]	; (8012c5c <xPortStartScheduler+0x12c>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012bf4:	4a19      	ldr	r2, [pc, #100]	; (8012c5c <xPortStartScheduler+0x12c>)
 8012bf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	b2da      	uxtb	r2, r3
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012c00:	4b17      	ldr	r3, [pc, #92]	; (8012c60 <xPortStartScheduler+0x130>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	4a16      	ldr	r2, [pc, #88]	; (8012c60 <xPortStartScheduler+0x130>)
 8012c06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012c0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012c0c:	4b14      	ldr	r3, [pc, #80]	; (8012c60 <xPortStartScheduler+0x130>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4a13      	ldr	r2, [pc, #76]	; (8012c60 <xPortStartScheduler+0x130>)
 8012c12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012c16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012c18:	f000 f8d6 	bl	8012dc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012c1c:	4b11      	ldr	r3, [pc, #68]	; (8012c64 <xPortStartScheduler+0x134>)
 8012c1e:	2200      	movs	r2, #0
 8012c20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012c22:	f000 f8f5 	bl	8012e10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012c26:	4b10      	ldr	r3, [pc, #64]	; (8012c68 <xPortStartScheduler+0x138>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	4a0f      	ldr	r2, [pc, #60]	; (8012c68 <xPortStartScheduler+0x138>)
 8012c2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012c30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012c32:	f7ff ff69 	bl	8012b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012c36:	f7ff fa41 	bl	80120bc <vTaskSwitchContext>
	prvTaskExitError();
 8012c3a:	f7ff ff21 	bl	8012a80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012c3e:	2300      	movs	r3, #0
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3718      	adds	r7, #24
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	e000ed00 	.word	0xe000ed00
 8012c4c:	410fc271 	.word	0x410fc271
 8012c50:	410fc270 	.word	0x410fc270
 8012c54:	e000e400 	.word	0xe000e400
 8012c58:	200009a0 	.word	0x200009a0
 8012c5c:	200009a4 	.word	0x200009a4
 8012c60:	e000ed20 	.word	0xe000ed20
 8012c64:	20000058 	.word	0x20000058
 8012c68:	e000ef34 	.word	0xe000ef34

08012c6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c76:	f383 8811 	msr	BASEPRI, r3
 8012c7a:	f3bf 8f6f 	isb	sy
 8012c7e:	f3bf 8f4f 	dsb	sy
 8012c82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012c84:	4b0e      	ldr	r3, [pc, #56]	; (8012cc0 <vPortEnterCritical+0x54>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	3301      	adds	r3, #1
 8012c8a:	4a0d      	ldr	r2, [pc, #52]	; (8012cc0 <vPortEnterCritical+0x54>)
 8012c8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012c8e:	4b0c      	ldr	r3, [pc, #48]	; (8012cc0 <vPortEnterCritical+0x54>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	d10e      	bne.n	8012cb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012c96:	4b0b      	ldr	r3, [pc, #44]	; (8012cc4 <vPortEnterCritical+0x58>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d009      	beq.n	8012cb4 <vPortEnterCritical+0x48>
 8012ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca4:	f383 8811 	msr	BASEPRI, r3
 8012ca8:	f3bf 8f6f 	isb	sy
 8012cac:	f3bf 8f4f 	dsb	sy
 8012cb0:	603b      	str	r3, [r7, #0]
 8012cb2:	e7fe      	b.n	8012cb2 <vPortEnterCritical+0x46>
	}
}
 8012cb4:	bf00      	nop
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	20000058 	.word	0x20000058
 8012cc4:	e000ed04 	.word	0xe000ed04

08012cc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b083      	sub	sp, #12
 8012ccc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012cce:	4b11      	ldr	r3, [pc, #68]	; (8012d14 <vPortExitCritical+0x4c>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d109      	bne.n	8012cea <vPortExitCritical+0x22>
 8012cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cda:	f383 8811 	msr	BASEPRI, r3
 8012cde:	f3bf 8f6f 	isb	sy
 8012ce2:	f3bf 8f4f 	dsb	sy
 8012ce6:	607b      	str	r3, [r7, #4]
 8012ce8:	e7fe      	b.n	8012ce8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8012cea:	4b0a      	ldr	r3, [pc, #40]	; (8012d14 <vPortExitCritical+0x4c>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	3b01      	subs	r3, #1
 8012cf0:	4a08      	ldr	r2, [pc, #32]	; (8012d14 <vPortExitCritical+0x4c>)
 8012cf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012cf4:	4b07      	ldr	r3, [pc, #28]	; (8012d14 <vPortExitCritical+0x4c>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d104      	bne.n	8012d06 <vPortExitCritical+0x3e>
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012d06:	bf00      	nop
 8012d08:	370c      	adds	r7, #12
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop
 8012d14:	20000058 	.word	0x20000058
	...

08012d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012d20:	f3ef 8009 	mrs	r0, PSP
 8012d24:	f3bf 8f6f 	isb	sy
 8012d28:	4b15      	ldr	r3, [pc, #84]	; (8012d80 <pxCurrentTCBConst>)
 8012d2a:	681a      	ldr	r2, [r3, #0]
 8012d2c:	f01e 0f10 	tst.w	lr, #16
 8012d30:	bf08      	it	eq
 8012d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d3a:	6010      	str	r0, [r2, #0]
 8012d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012d44:	f380 8811 	msr	BASEPRI, r0
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	f3bf 8f6f 	isb	sy
 8012d50:	f7ff f9b4 	bl	80120bc <vTaskSwitchContext>
 8012d54:	f04f 0000 	mov.w	r0, #0
 8012d58:	f380 8811 	msr	BASEPRI, r0
 8012d5c:	bc09      	pop	{r0, r3}
 8012d5e:	6819      	ldr	r1, [r3, #0]
 8012d60:	6808      	ldr	r0, [r1, #0]
 8012d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d66:	f01e 0f10 	tst.w	lr, #16
 8012d6a:	bf08      	it	eq
 8012d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d70:	f380 8809 	msr	PSP, r0
 8012d74:	f3bf 8f6f 	isb	sy
 8012d78:	4770      	bx	lr
 8012d7a:	bf00      	nop
 8012d7c:	f3af 8000 	nop.w

08012d80 <pxCurrentTCBConst>:
 8012d80:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012d84:	bf00      	nop
 8012d86:	bf00      	nop

08012d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8012d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d92:	f383 8811 	msr	BASEPRI, r3
 8012d96:	f3bf 8f6f 	isb	sy
 8012d9a:	f3bf 8f4f 	dsb	sy
 8012d9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012da0:	f7ff f892 	bl	8011ec8 <xTaskIncrementTick>
 8012da4:	4603      	mov	r3, r0
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d003      	beq.n	8012db2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012daa:	4b06      	ldr	r3, [pc, #24]	; (8012dc4 <SysTick_Handler+0x3c>)
 8012dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012db0:	601a      	str	r2, [r3, #0]
 8012db2:	2300      	movs	r3, #0
 8012db4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012dbc:	bf00      	nop
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	e000ed04 	.word	0xe000ed04

08012dc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012dc8:	b480      	push	{r7}
 8012dca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012dcc:	4b0b      	ldr	r3, [pc, #44]	; (8012dfc <vPortSetupTimerInterrupt+0x34>)
 8012dce:	2200      	movs	r2, #0
 8012dd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012dd2:	4b0b      	ldr	r3, [pc, #44]	; (8012e00 <vPortSetupTimerInterrupt+0x38>)
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012dd8:	4b0a      	ldr	r3, [pc, #40]	; (8012e04 <vPortSetupTimerInterrupt+0x3c>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	4a0a      	ldr	r2, [pc, #40]	; (8012e08 <vPortSetupTimerInterrupt+0x40>)
 8012dde:	fba2 2303 	umull	r2, r3, r2, r3
 8012de2:	099b      	lsrs	r3, r3, #6
 8012de4:	4a09      	ldr	r2, [pc, #36]	; (8012e0c <vPortSetupTimerInterrupt+0x44>)
 8012de6:	3b01      	subs	r3, #1
 8012de8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012dea:	4b04      	ldr	r3, [pc, #16]	; (8012dfc <vPortSetupTimerInterrupt+0x34>)
 8012dec:	2207      	movs	r2, #7
 8012dee:	601a      	str	r2, [r3, #0]
}
 8012df0:	bf00      	nop
 8012df2:	46bd      	mov	sp, r7
 8012df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df8:	4770      	bx	lr
 8012dfa:	bf00      	nop
 8012dfc:	e000e010 	.word	0xe000e010
 8012e00:	e000e018 	.word	0xe000e018
 8012e04:	20000000 	.word	0x20000000
 8012e08:	10624dd3 	.word	0x10624dd3
 8012e0c:	e000e014 	.word	0xe000e014

08012e10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012e10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012e20 <vPortEnableVFP+0x10>
 8012e14:	6801      	ldr	r1, [r0, #0]
 8012e16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012e1a:	6001      	str	r1, [r0, #0]
 8012e1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012e1e:	bf00      	nop
 8012e20:	e000ed88 	.word	0xe000ed88

08012e24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012e24:	b480      	push	{r7}
 8012e26:	b085      	sub	sp, #20
 8012e28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012e2a:	f3ef 8305 	mrs	r3, IPSR
 8012e2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2b0f      	cmp	r3, #15
 8012e34:	d913      	bls.n	8012e5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012e36:	4a16      	ldr	r2, [pc, #88]	; (8012e90 <vPortValidateInterruptPriority+0x6c>)
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012e40:	4b14      	ldr	r3, [pc, #80]	; (8012e94 <vPortValidateInterruptPriority+0x70>)
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	7afa      	ldrb	r2, [r7, #11]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d209      	bcs.n	8012e5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8012e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e4e:	f383 8811 	msr	BASEPRI, r3
 8012e52:	f3bf 8f6f 	isb	sy
 8012e56:	f3bf 8f4f 	dsb	sy
 8012e5a:	607b      	str	r3, [r7, #4]
 8012e5c:	e7fe      	b.n	8012e5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012e5e:	4b0e      	ldr	r3, [pc, #56]	; (8012e98 <vPortValidateInterruptPriority+0x74>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012e66:	4b0d      	ldr	r3, [pc, #52]	; (8012e9c <vPortValidateInterruptPriority+0x78>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d909      	bls.n	8012e82 <vPortValidateInterruptPriority+0x5e>
 8012e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e72:	f383 8811 	msr	BASEPRI, r3
 8012e76:	f3bf 8f6f 	isb	sy
 8012e7a:	f3bf 8f4f 	dsb	sy
 8012e7e:	603b      	str	r3, [r7, #0]
 8012e80:	e7fe      	b.n	8012e80 <vPortValidateInterruptPriority+0x5c>
	}
 8012e82:	bf00      	nop
 8012e84:	3714      	adds	r7, #20
 8012e86:	46bd      	mov	sp, r7
 8012e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8c:	4770      	bx	lr
 8012e8e:	bf00      	nop
 8012e90:	e000e3f0 	.word	0xe000e3f0
 8012e94:	200009a0 	.word	0x200009a0
 8012e98:	e000ed0c 	.word	0xe000ed0c
 8012e9c:	200009a4 	.word	0x200009a4

08012ea0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b08a      	sub	sp, #40	; 0x28
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012eac:	f7fe ff40 	bl	8011d30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012eb0:	4b59      	ldr	r3, [pc, #356]	; (8013018 <pvPortMalloc+0x178>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d101      	bne.n	8012ebc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012eb8:	f000 f910 	bl	80130dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012ebc:	4b57      	ldr	r3, [pc, #348]	; (801301c <pvPortMalloc+0x17c>)
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	4013      	ands	r3, r2
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f040 808c 	bne.w	8012fe2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d01c      	beq.n	8012f0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8012ed0:	2208      	movs	r2, #8
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f003 0307 	and.w	r3, r3, #7
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d013      	beq.n	8012f0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f023 0307 	bic.w	r3, r3, #7
 8012ee8:	3308      	adds	r3, #8
 8012eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f003 0307 	and.w	r3, r3, #7
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d009      	beq.n	8012f0a <pvPortMalloc+0x6a>
 8012ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efa:	f383 8811 	msr	BASEPRI, r3
 8012efe:	f3bf 8f6f 	isb	sy
 8012f02:	f3bf 8f4f 	dsb	sy
 8012f06:	617b      	str	r3, [r7, #20]
 8012f08:	e7fe      	b.n	8012f08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d068      	beq.n	8012fe2 <pvPortMalloc+0x142>
 8012f10:	4b43      	ldr	r3, [pc, #268]	; (8013020 <pvPortMalloc+0x180>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d863      	bhi.n	8012fe2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012f1a:	4b42      	ldr	r3, [pc, #264]	; (8013024 <pvPortMalloc+0x184>)
 8012f1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012f1e:	4b41      	ldr	r3, [pc, #260]	; (8013024 <pvPortMalloc+0x184>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f24:	e004      	b.n	8012f30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8012f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d903      	bls.n	8012f42 <pvPortMalloc+0xa2>
 8012f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d1f1      	bne.n	8012f26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012f42:	4b35      	ldr	r3, [pc, #212]	; (8013018 <pvPortMalloc+0x178>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d04a      	beq.n	8012fe2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012f4c:	6a3b      	ldr	r3, [r7, #32]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	2208      	movs	r2, #8
 8012f52:	4413      	add	r3, r2
 8012f54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	6a3b      	ldr	r3, [r7, #32]
 8012f5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f60:	685a      	ldr	r2, [r3, #4]
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	1ad2      	subs	r2, r2, r3
 8012f66:	2308      	movs	r3, #8
 8012f68:	005b      	lsls	r3, r3, #1
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d91e      	bls.n	8012fac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	4413      	add	r3, r2
 8012f74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	f003 0307 	and.w	r3, r3, #7
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d009      	beq.n	8012f94 <pvPortMalloc+0xf4>
 8012f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f84:	f383 8811 	msr	BASEPRI, r3
 8012f88:	f3bf 8f6f 	isb	sy
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	613b      	str	r3, [r7, #16]
 8012f92:	e7fe      	b.n	8012f92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f96:	685a      	ldr	r2, [r3, #4]
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	1ad2      	subs	r2, r2, r3
 8012f9c:	69bb      	ldr	r3, [r7, #24]
 8012f9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa2:	687a      	ldr	r2, [r7, #4]
 8012fa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012fa6:	69b8      	ldr	r0, [r7, #24]
 8012fa8:	f000 f8fa 	bl	80131a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012fac:	4b1c      	ldr	r3, [pc, #112]	; (8013020 <pvPortMalloc+0x180>)
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	1ad3      	subs	r3, r2, r3
 8012fb6:	4a1a      	ldr	r2, [pc, #104]	; (8013020 <pvPortMalloc+0x180>)
 8012fb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012fba:	4b19      	ldr	r3, [pc, #100]	; (8013020 <pvPortMalloc+0x180>)
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	4b1a      	ldr	r3, [pc, #104]	; (8013028 <pvPortMalloc+0x188>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d203      	bcs.n	8012fce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012fc6:	4b16      	ldr	r3, [pc, #88]	; (8013020 <pvPortMalloc+0x180>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	4a17      	ldr	r2, [pc, #92]	; (8013028 <pvPortMalloc+0x188>)
 8012fcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd0:	685a      	ldr	r2, [r3, #4]
 8012fd2:	4b12      	ldr	r3, [pc, #72]	; (801301c <pvPortMalloc+0x17c>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	431a      	orrs	r2, r3
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fde:	2200      	movs	r2, #0
 8012fe0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012fe2:	f7fe feb3 	bl	8011d4c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012fe6:	69fb      	ldr	r3, [r7, #28]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d101      	bne.n	8012ff0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012fec:	f7fd fb03 	bl	80105f6 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ff0:	69fb      	ldr	r3, [r7, #28]
 8012ff2:	f003 0307 	and.w	r3, r3, #7
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d009      	beq.n	801300e <pvPortMalloc+0x16e>
 8012ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ffe:	f383 8811 	msr	BASEPRI, r3
 8013002:	f3bf 8f6f 	isb	sy
 8013006:	f3bf 8f4f 	dsb	sy
 801300a:	60fb      	str	r3, [r7, #12]
 801300c:	e7fe      	b.n	801300c <pvPortMalloc+0x16c>
	return pvReturn;
 801300e:	69fb      	ldr	r3, [r7, #28]
}
 8013010:	4618      	mov	r0, r3
 8013012:	3728      	adds	r7, #40	; 0x28
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	200089b0 	.word	0x200089b0
 801301c:	200089bc 	.word	0x200089bc
 8013020:	200089b4 	.word	0x200089b4
 8013024:	200089a8 	.word	0x200089a8
 8013028:	200089b8 	.word	0x200089b8

0801302c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b086      	sub	sp, #24
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d046      	beq.n	80130cc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801303e:	2308      	movs	r3, #8
 8013040:	425b      	negs	r3, r3
 8013042:	697a      	ldr	r2, [r7, #20]
 8013044:	4413      	add	r3, r2
 8013046:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	685a      	ldr	r2, [r3, #4]
 8013050:	4b20      	ldr	r3, [pc, #128]	; (80130d4 <vPortFree+0xa8>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	4013      	ands	r3, r2
 8013056:	2b00      	cmp	r3, #0
 8013058:	d109      	bne.n	801306e <vPortFree+0x42>
 801305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801305e:	f383 8811 	msr	BASEPRI, r3
 8013062:	f3bf 8f6f 	isb	sy
 8013066:	f3bf 8f4f 	dsb	sy
 801306a:	60fb      	str	r3, [r7, #12]
 801306c:	e7fe      	b.n	801306c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d009      	beq.n	801308a <vPortFree+0x5e>
 8013076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307a:	f383 8811 	msr	BASEPRI, r3
 801307e:	f3bf 8f6f 	isb	sy
 8013082:	f3bf 8f4f 	dsb	sy
 8013086:	60bb      	str	r3, [r7, #8]
 8013088:	e7fe      	b.n	8013088 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	685a      	ldr	r2, [r3, #4]
 801308e:	4b11      	ldr	r3, [pc, #68]	; (80130d4 <vPortFree+0xa8>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4013      	ands	r3, r2
 8013094:	2b00      	cmp	r3, #0
 8013096:	d019      	beq.n	80130cc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d115      	bne.n	80130cc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	685a      	ldr	r2, [r3, #4]
 80130a4:	4b0b      	ldr	r3, [pc, #44]	; (80130d4 <vPortFree+0xa8>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	43db      	mvns	r3, r3
 80130aa:	401a      	ands	r2, r3
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80130b0:	f7fe fe3e 	bl	8011d30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	685a      	ldr	r2, [r3, #4]
 80130b8:	4b07      	ldr	r3, [pc, #28]	; (80130d8 <vPortFree+0xac>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	4413      	add	r3, r2
 80130be:	4a06      	ldr	r2, [pc, #24]	; (80130d8 <vPortFree+0xac>)
 80130c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80130c2:	6938      	ldr	r0, [r7, #16]
 80130c4:	f000 f86c 	bl	80131a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80130c8:	f7fe fe40 	bl	8011d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80130cc:	bf00      	nop
 80130ce:	3718      	adds	r7, #24
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}
 80130d4:	200089bc 	.word	0x200089bc
 80130d8:	200089b4 	.word	0x200089b4

080130dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80130dc:	b480      	push	{r7}
 80130de:	b085      	sub	sp, #20
 80130e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80130e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80130e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80130e8:	4b27      	ldr	r3, [pc, #156]	; (8013188 <prvHeapInit+0xac>)
 80130ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f003 0307 	and.w	r3, r3, #7
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00c      	beq.n	8013110 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	3307      	adds	r3, #7
 80130fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	f023 0307 	bic.w	r3, r3, #7
 8013102:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013104:	68ba      	ldr	r2, [r7, #8]
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	1ad3      	subs	r3, r2, r3
 801310a:	4a1f      	ldr	r2, [pc, #124]	; (8013188 <prvHeapInit+0xac>)
 801310c:	4413      	add	r3, r2
 801310e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013114:	4a1d      	ldr	r2, [pc, #116]	; (801318c <prvHeapInit+0xb0>)
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801311a:	4b1c      	ldr	r3, [pc, #112]	; (801318c <prvHeapInit+0xb0>)
 801311c:	2200      	movs	r2, #0
 801311e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	68ba      	ldr	r2, [r7, #8]
 8013124:	4413      	add	r3, r2
 8013126:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013128:	2208      	movs	r2, #8
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	1a9b      	subs	r3, r3, r2
 801312e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	f023 0307 	bic.w	r3, r3, #7
 8013136:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	4a15      	ldr	r2, [pc, #84]	; (8013190 <prvHeapInit+0xb4>)
 801313c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801313e:	4b14      	ldr	r3, [pc, #80]	; (8013190 <prvHeapInit+0xb4>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2200      	movs	r2, #0
 8013144:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013146:	4b12      	ldr	r3, [pc, #72]	; (8013190 <prvHeapInit+0xb4>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	2200      	movs	r2, #0
 801314c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	68fa      	ldr	r2, [r7, #12]
 8013156:	1ad2      	subs	r2, r2, r3
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801315c:	4b0c      	ldr	r3, [pc, #48]	; (8013190 <prvHeapInit+0xb4>)
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	4a0a      	ldr	r2, [pc, #40]	; (8013194 <prvHeapInit+0xb8>)
 801316a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	4a09      	ldr	r2, [pc, #36]	; (8013198 <prvHeapInit+0xbc>)
 8013172:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013174:	4b09      	ldr	r3, [pc, #36]	; (801319c <prvHeapInit+0xc0>)
 8013176:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801317a:	601a      	str	r2, [r3, #0]
}
 801317c:	bf00      	nop
 801317e:	3714      	adds	r7, #20
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr
 8013188:	200009a8 	.word	0x200009a8
 801318c:	200089a8 	.word	0x200089a8
 8013190:	200089b0 	.word	0x200089b0
 8013194:	200089b8 	.word	0x200089b8
 8013198:	200089b4 	.word	0x200089b4
 801319c:	200089bc 	.word	0x200089bc

080131a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80131a0:	b480      	push	{r7}
 80131a2:	b085      	sub	sp, #20
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80131a8:	4b28      	ldr	r3, [pc, #160]	; (801324c <prvInsertBlockIntoFreeList+0xac>)
 80131aa:	60fb      	str	r3, [r7, #12]
 80131ac:	e002      	b.n	80131b4 <prvInsertBlockIntoFreeList+0x14>
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	60fb      	str	r3, [r7, #12]
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	687a      	ldr	r2, [r7, #4]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d8f7      	bhi.n	80131ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	685b      	ldr	r3, [r3, #4]
 80131c6:	68ba      	ldr	r2, [r7, #8]
 80131c8:	4413      	add	r3, r2
 80131ca:	687a      	ldr	r2, [r7, #4]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d108      	bne.n	80131e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	685a      	ldr	r2, [r3, #4]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	441a      	add	r2, r3
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	68ba      	ldr	r2, [r7, #8]
 80131ec:	441a      	add	r2, r3
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d118      	bne.n	8013228 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681a      	ldr	r2, [r3, #0]
 80131fa:	4b15      	ldr	r3, [pc, #84]	; (8013250 <prvInsertBlockIntoFreeList+0xb0>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d00d      	beq.n	801321e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	685a      	ldr	r2, [r3, #4]
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	441a      	add	r2, r3
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	681a      	ldr	r2, [r3, #0]
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	601a      	str	r2, [r3, #0]
 801321c:	e008      	b.n	8013230 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801321e:	4b0c      	ldr	r3, [pc, #48]	; (8013250 <prvInsertBlockIntoFreeList+0xb0>)
 8013220:	681a      	ldr	r2, [r3, #0]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	601a      	str	r2, [r3, #0]
 8013226:	e003      	b.n	8013230 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013230:	68fa      	ldr	r2, [r7, #12]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	429a      	cmp	r2, r3
 8013236:	d002      	beq.n	801323e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	687a      	ldr	r2, [r7, #4]
 801323c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801323e:	bf00      	nop
 8013240:	3714      	adds	r7, #20
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr
 801324a:	bf00      	nop
 801324c:	200089a8 	.word	0x200089a8
 8013250:	200089b0 	.word	0x200089b0

08013254 <I2C1_MspInit>:
/******************************* I2C Routines *********************************/
/**
  * @brief  Initializes I2C MSP.
  */
static void I2C1_MspInit(void)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b088      	sub	sp, #32
 8013258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 801325a:	2300      	movs	r3, #0
 801325c:	60bb      	str	r3, [r7, #8]
 801325e:	4b2a      	ldr	r3, [pc, #168]	; (8013308 <I2C1_MspInit+0xb4>)
 8013260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013262:	4a29      	ldr	r2, [pc, #164]	; (8013308 <I2C1_MspInit+0xb4>)
 8013264:	f043 0302 	orr.w	r3, r3, #2
 8013268:	6313      	str	r3, [r2, #48]	; 0x30
 801326a:	4b27      	ldr	r3, [pc, #156]	; (8013308 <I2C1_MspInit+0xb4>)
 801326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801326e:	f003 0302 	and.w	r3, r3, #2
 8013272:	60bb      	str	r3, [r7, #8]
 8013274:	68bb      	ldr	r3, [r7, #8]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 8013276:	f44f 7380 	mov.w	r3, #256	; 0x100
 801327a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 801327c:	2312      	movs	r3, #18
 801327e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8013280:	2300      	movs	r3, #0
 8013282:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8013284:	2302      	movs	r3, #2
 8013286:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 8013288:	2304      	movs	r3, #4
 801328a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 801328c:	f107 030c 	add.w	r3, r7, #12
 8013290:	4619      	mov	r1, r3
 8013292:	481e      	ldr	r0, [pc, #120]	; (801330c <I2C1_MspInit+0xb8>)
 8013294:	f7f0 fbf6 	bl	8003a84 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 8013298:	f44f 7300 	mov.w	r3, #512	; 0x200
 801329c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 801329e:	f107 030c 	add.w	r3, r7, #12
 80132a2:	4619      	mov	r1, r3
 80132a4:	4819      	ldr	r0, [pc, #100]	; (801330c <I2C1_MspInit+0xb8>)
 80132a6:	f7f0 fbed 	bl	8003a84 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCO_I2C1_CLK_ENABLE();
 80132aa:	2300      	movs	r3, #0
 80132ac:	607b      	str	r3, [r7, #4]
 80132ae:	4b16      	ldr	r3, [pc, #88]	; (8013308 <I2C1_MspInit+0xb4>)
 80132b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132b2:	4a15      	ldr	r2, [pc, #84]	; (8013308 <I2C1_MspInit+0xb4>)
 80132b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80132b8:	6413      	str	r3, [r2, #64]	; 0x40
 80132ba:	4b13      	ldr	r3, [pc, #76]	; (8013308 <I2C1_MspInit+0xb4>)
 80132bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80132c2:	607b      	str	r3, [r7, #4]
 80132c4:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCO_I2C1_FORCE_RESET();
 80132c6:	4b10      	ldr	r3, [pc, #64]	; (8013308 <I2C1_MspInit+0xb4>)
 80132c8:	6a1b      	ldr	r3, [r3, #32]
 80132ca:	4a0f      	ldr	r2, [pc, #60]	; (8013308 <I2C1_MspInit+0xb4>)
 80132cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80132d0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCO_I2C1_RELEASE_RESET();
 80132d2:	4b0d      	ldr	r3, [pc, #52]	; (8013308 <I2C1_MspInit+0xb4>)
 80132d4:	6a1b      	ldr	r3, [r3, #32]
 80132d6:	4a0c      	ldr	r2, [pc, #48]	; (8013308 <I2C1_MspInit+0xb4>)
 80132d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80132dc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 80132de:	2200      	movs	r2, #0
 80132e0:	2105      	movs	r1, #5
 80132e2:	201f      	movs	r0, #31
 80132e4:	f7ef f804 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 80132e8:	201f      	movs	r0, #31
 80132ea:	f7ef f81d 	bl	8002328 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 80132ee:	2200      	movs	r2, #0
 80132f0:	2105      	movs	r1, #5
 80132f2:	2020      	movs	r0, #32
 80132f4:	f7ee fffc 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 80132f8:	2020      	movs	r0, #32
 80132fa:	f7ef f815 	bl	8002328 <HAL_NVIC_EnableIRQ>
}
 80132fe:	bf00      	nop
 8013300:	3720      	adds	r7, #32
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	40023800 	.word	0x40023800
 801330c:	40020400 	.word	0x40020400

08013310 <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 8013314:	4814      	ldr	r0, [pc, #80]	; (8013368 <I2C1_Init+0x58>)
 8013316:	f7f2 ff89 	bl	800622c <HAL_I2C_GetState>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	d120      	bne.n	8013362 <I2C1_Init+0x52>
  {
    heval_I2c1.Instance = I2C1;
 8013320:	4b11      	ldr	r3, [pc, #68]	; (8013368 <I2C1_Init+0x58>)
 8013322:	4a12      	ldr	r2, [pc, #72]	; (801336c <I2C1_Init+0x5c>)
 8013324:	601a      	str	r2, [r3, #0]
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 8013326:	4b10      	ldr	r3, [pc, #64]	; (8013368 <I2C1_Init+0x58>)
 8013328:	4a11      	ldr	r2, [pc, #68]	; (8013370 <I2C1_Init+0x60>)
 801332a:	605a      	str	r2, [r3, #4]
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 801332c:	4b0e      	ldr	r3, [pc, #56]	; (8013368 <I2C1_Init+0x58>)
 801332e:	2200      	movs	r2, #0
 8013330:	609a      	str	r2, [r3, #8]
    heval_I2c1.Init.OwnAddress1     = 0;
 8013332:	4b0d      	ldr	r3, [pc, #52]	; (8013368 <I2C1_Init+0x58>)
 8013334:	2200      	movs	r2, #0
 8013336:	60da      	str	r2, [r3, #12]
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8013338:	4b0b      	ldr	r3, [pc, #44]	; (8013368 <I2C1_Init+0x58>)
 801333a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801333e:	611a      	str	r2, [r3, #16]
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013340:	4b09      	ldr	r3, [pc, #36]	; (8013368 <I2C1_Init+0x58>)
 8013342:	2200      	movs	r2, #0
 8013344:	615a      	str	r2, [r3, #20]
    heval_I2c1.Init.OwnAddress2     = 0;
 8013346:	4b08      	ldr	r3, [pc, #32]	; (8013368 <I2C1_Init+0x58>)
 8013348:	2200      	movs	r2, #0
 801334a:	619a      	str	r2, [r3, #24]
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801334c:	4b06      	ldr	r3, [pc, #24]	; (8013368 <I2C1_Init+0x58>)
 801334e:	2200      	movs	r2, #0
 8013350:	61da      	str	r2, [r3, #28]
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8013352:	4b05      	ldr	r3, [pc, #20]	; (8013368 <I2C1_Init+0x58>)
 8013354:	2200      	movs	r2, #0
 8013356:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit();
 8013358:	f7ff ff7c 	bl	8013254 <I2C1_MspInit>
    HAL_I2C_Init(&heval_I2c1);
 801335c:	4802      	ldr	r0, [pc, #8]	; (8013368 <I2C1_Init+0x58>)
 801335e:	f7f2 fadd 	bl	800591c <HAL_I2C_Init>
  }
}
 8013362:	bf00      	nop
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	200089c0 	.word	0x200089c0
 801336c:	40005400 	.word	0x40005400
 8013370:	00061a80 	.word	0x00061a80

08013374 <I2C1_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
static void I2C1_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b088      	sub	sp, #32
 8013378:	af04      	add	r7, sp, #16
 801337a:	4603      	mov	r3, r0
 801337c:	71fb      	strb	r3, [r7, #7]
 801337e:	460b      	mov	r3, r1
 8013380:	71bb      	strb	r3, [r7, #6]
 8013382:	4613      	mov	r3, r2
 8013384:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8013386:	2300      	movs	r3, #0
 8013388:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&heval_I2c1,
 801338a:	79fb      	ldrb	r3, [r7, #7]
 801338c:	b299      	uxth	r1, r3
 801338e:	79bb      	ldrb	r3, [r7, #6]
 8013390:	b29a      	uxth	r2, r3
 8013392:	2364      	movs	r3, #100	; 0x64
 8013394:	9302      	str	r3, [sp, #8]
 8013396:	2301      	movs	r3, #1
 8013398:	9301      	str	r3, [sp, #4]
 801339a:	1d7b      	adds	r3, r7, #5
 801339c:	9300      	str	r3, [sp, #0]
 801339e:	2301      	movs	r3, #1
 80133a0:	4807      	ldr	r0, [pc, #28]	; (80133c0 <I2C1_Write+0x4c>)
 80133a2:	f7f2 fc23 	bl	8005bec <HAL_I2C_Mem_Write>
 80133a6:	4603      	mov	r3, r0
 80133a8:	73fb      	strb	r3, [r7, #15]
                         &Value,
                         1,
                         100);

  /* Check the communication status */
  if(status != HAL_OK)
 80133aa:	7bfb      	ldrb	r3, [r7, #15]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d003      	beq.n	80133b8 <I2C1_Write+0x44>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 80133b0:	79fb      	ldrb	r3, [r7, #7]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f000 f85e 	bl	8013474 <I2C1_Error>
  }
}
 80133b8:	bf00      	nop
 80133ba:	3710      	adds	r7, #16
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	200089c0 	.word	0x200089c0

080133c4 <I2C1_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
static uint8_t I2C1_Read(uint8_t Addr, uint8_t Reg)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b088      	sub	sp, #32
 80133c8:	af04      	add	r7, sp, #16
 80133ca:	4603      	mov	r3, r0
 80133cc:	460a      	mov	r2, r1
 80133ce:	71fb      	strb	r3, [r7, #7]
 80133d0:	4613      	mov	r3, r2
 80133d2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80133d4:	2300      	movs	r3, #0
 80133d6:	73fb      	strb	r3, [r7, #15]
  uint8_t Value = 0;
 80133d8:	2300      	movs	r3, #0
 80133da:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 80133dc:	79fb      	ldrb	r3, [r7, #7]
 80133de:	b299      	uxth	r1, r3
 80133e0:	79bb      	ldrb	r3, [r7, #6]
 80133e2:	b29a      	uxth	r2, r3
 80133e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80133e8:	9302      	str	r3, [sp, #8]
 80133ea:	2301      	movs	r3, #1
 80133ec:	9301      	str	r3, [sp, #4]
 80133ee:	f107 030e 	add.w	r3, r7, #14
 80133f2:	9300      	str	r3, [sp, #0]
 80133f4:	2301      	movs	r3, #1
 80133f6:	4808      	ldr	r0, [pc, #32]	; (8013418 <I2C1_Read+0x54>)
 80133f8:	f7f2 fcf2 	bl	8005de0 <HAL_I2C_Mem_Read>
 80133fc:	4603      	mov	r3, r0
 80133fe:	73fb      	strb	r3, [r7, #15]
                        &Value,
                        1,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8013400:	7bfb      	ldrb	r3, [r7, #15]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d003      	beq.n	801340e <I2C1_Read+0x4a>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 8013406:	79fb      	ldrb	r3, [r7, #7]
 8013408:	4618      	mov	r0, r3
 801340a:	f000 f833 	bl	8013474 <I2C1_Error>
  }
  return Value;
 801340e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013410:	4618      	mov	r0, r3
 8013412:	3710      	adds	r7, #16
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	200089c0 	.word	0x200089c0

0801341c <I2C1_ReadMultiple>:
static HAL_StatusTypeDef I2C1_ReadMultiple(uint8_t Addr,
                                       uint16_t Reg,
                                       uint16_t MemAddress,
                                       uint8_t *Buffer,
                                       uint16_t Length)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b08a      	sub	sp, #40	; 0x28
 8013420:	af04      	add	r7, sp, #16
 8013422:	607b      	str	r3, [r7, #4]
 8013424:	4603      	mov	r3, r0
 8013426:	73fb      	strb	r3, [r7, #15]
 8013428:	460b      	mov	r3, r1
 801342a:	81bb      	strh	r3, [r7, #12]
 801342c:	4613      	mov	r3, r2
 801342e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8013430:	2300      	movs	r3, #0
 8013432:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8013434:	7bfb      	ldrb	r3, [r7, #15]
 8013436:	b299      	uxth	r1, r3
 8013438:	8978      	ldrh	r0, [r7, #10]
 801343a:	89ba      	ldrh	r2, [r7, #12]
 801343c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013440:	9302      	str	r3, [sp, #8]
 8013442:	8c3b      	ldrh	r3, [r7, #32]
 8013444:	9301      	str	r3, [sp, #4]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	9300      	str	r3, [sp, #0]
 801344a:	4603      	mov	r3, r0
 801344c:	4808      	ldr	r0, [pc, #32]	; (8013470 <I2C1_ReadMultiple+0x54>)
 801344e:	f7f2 fcc7 	bl	8005de0 <HAL_I2C_Mem_Read>
 8013452:	4603      	mov	r3, r0
 8013454:	75fb      	strb	r3, [r7, #23]
                        Buffer,
                        Length,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8013456:	7dfb      	ldrb	r3, [r7, #23]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d003      	beq.n	8013464 <I2C1_ReadMultiple+0x48>
  {
    /* I2C error occured */
    I2C1_Error(Addr);
 801345c:	7bfb      	ldrb	r3, [r7, #15]
 801345e:	4618      	mov	r0, r3
 8013460:	f000 f808 	bl	8013474 <I2C1_Error>
  }
  return status;
 8013464:	7dfb      	ldrb	r3, [r7, #23]
}
 8013466:	4618      	mov	r0, r3
 8013468:	3718      	adds	r7, #24
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
 801346e:	bf00      	nop
 8013470:	200089c0 	.word	0x200089c0

08013474 <I2C1_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	4603      	mov	r3, r0
 801347c:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C comunication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 801347e:	4804      	ldr	r0, [pc, #16]	; (8013490 <I2C1_Error+0x1c>)
 8013480:	f7f2 fb84 	bl	8005b8c <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C comunication bus */
  I2C1_Init();
 8013484:	f7ff ff44 	bl	8013310 <I2C1_Init>
}
 8013488:	bf00      	nop
 801348a:	3708      	adds	r7, #8
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}
 8013490:	200089c0 	.word	0x200089c0

08013494 <TS_IO_Init>:
/**
  * @brief  Initialize I2C communication
  *         channel from MCU to TouchScreen (TS).
  */
void TS_IO_Init(void)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	af00      	add	r7, sp, #0
  I2C1_Init();
 8013498:	f7ff ff3a 	bl	8013310 <I2C1_Init>
}
 801349c:	bf00      	nop
 801349e:	bd80      	pop	{r7, pc}

080134a0 <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	4603      	mov	r3, r0
 80134a8:	71fb      	strb	r3, [r7, #7]
 80134aa:	460b      	mov	r3, r1
 80134ac:	71bb      	strb	r3, [r7, #6]
 80134ae:	4613      	mov	r3, r2
 80134b0:	717b      	strb	r3, [r7, #5]
  I2C1_Write(Addr, Reg, Value);
 80134b2:	797a      	ldrb	r2, [r7, #5]
 80134b4:	79b9      	ldrb	r1, [r7, #6]
 80134b6:	79fb      	ldrb	r3, [r7, #7]
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7ff ff5b 	bl	8013374 <I2C1_Write>
}
 80134be:	bf00      	nop
 80134c0:	3708      	adds	r7, #8
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b082      	sub	sp, #8
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	4603      	mov	r3, r0
 80134ce:	460a      	mov	r2, r1
 80134d0:	71fb      	strb	r3, [r7, #7]
 80134d2:	4613      	mov	r3, r2
 80134d4:	71bb      	strb	r3, [r7, #6]
  return I2C1_Read(Addr, Reg);
 80134d6:	79ba      	ldrb	r2, [r7, #6]
 80134d8:	79fb      	ldrb	r3, [r7, #7]
 80134da:	4611      	mov	r1, r2
 80134dc:	4618      	mov	r0, r3
 80134de:	f7ff ff71 	bl	80133c4 <I2C1_Read>
 80134e2:	4603      	mov	r3, r0
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3708      	adds	r7, #8
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af02      	add	r7, sp, #8
 80134f2:	603a      	str	r2, [r7, #0]
 80134f4:	461a      	mov	r2, r3
 80134f6:	4603      	mov	r3, r0
 80134f8:	71fb      	strb	r3, [r7, #7]
 80134fa:	460b      	mov	r3, r1
 80134fc:	71bb      	strb	r3, [r7, #6]
 80134fe:	4613      	mov	r3, r2
 8013500:	80bb      	strh	r3, [r7, #4]
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8013502:	79bb      	ldrb	r3, [r7, #6]
 8013504:	b299      	uxth	r1, r3
 8013506:	79f8      	ldrb	r0, [r7, #7]
 8013508:	88bb      	ldrh	r3, [r7, #4]
 801350a:	9300      	str	r3, [sp, #0]
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	2201      	movs	r2, #1
 8013510:	f7ff ff84 	bl	801341c <I2C1_ReadMultiple>
 8013514:	4603      	mov	r3, r0
 8013516:	b29b      	uxth	r3, r3
}
 8013518:	4618      	mov	r0, r3
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f7ee fde5 	bl	80020f8 <HAL_Delay>
}
 801352e:	bf00      	nop
 8013530:	3708      	adds	r7, #8
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
	...

08013538 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	4603      	mov	r3, r0
 8013540:	460a      	mov	r2, r1
 8013542:	80fb      	strh	r3, [r7, #6]
 8013544:	4613      	mov	r3, r2
 8013546:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8013548:	2300      	movs	r3, #0
 801354a:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 801354c:	2300      	movs	r3, #0
 801354e:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8013550:	4b25      	ldr	r3, [pc, #148]	; (80135e8 <BSP_TS_Init+0xb0>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	4a25      	ldr	r2, [pc, #148]	; (80135ec <BSP_TS_Init+0xb4>)
 8013556:	7812      	ldrb	r2, [r2, #0]
 8013558:	b292      	uxth	r2, r2
 801355a:	4610      	mov	r0, r2
 801355c:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 801355e:	4b22      	ldr	r3, [pc, #136]	; (80135e8 <BSP_TS_Init+0xb0>)
 8013560:	685b      	ldr	r3, [r3, #4]
 8013562:	2054      	movs	r0, #84	; 0x54
 8013564:	4798      	blx	r3
 8013566:	4603      	mov	r3, r0
 8013568:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 801356a:	7b7b      	ldrb	r3, [r7, #13]
 801356c:	2b11      	cmp	r3, #17
 801356e:	d009      	beq.n	8013584 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8013570:	4b1d      	ldr	r3, [pc, #116]	; (80135e8 <BSP_TS_Init+0xb0>)
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	2070      	movs	r0, #112	; 0x70
 8013576:	4798      	blx	r3
 8013578:	4603      	mov	r3, r0
 801357a:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 801357c:	4b1b      	ldr	r3, [pc, #108]	; (80135ec <BSP_TS_Init+0xb4>)
 801357e:	2270      	movs	r2, #112	; 0x70
 8013580:	701a      	strb	r2, [r3, #0]
 8013582:	e002      	b.n	801358a <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8013584:	4b19      	ldr	r3, [pc, #100]	; (80135ec <BSP_TS_Init+0xb4>)
 8013586:	2254      	movs	r2, #84	; 0x54
 8013588:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 801358a:	7b7b      	ldrb	r3, [r7, #13]
 801358c:	2b11      	cmp	r3, #17
 801358e:	d002      	beq.n	8013596 <BSP_TS_Init+0x5e>
 8013590:	7bbb      	ldrb	r3, [r7, #14]
 8013592:	2b11      	cmp	r3, #17
 8013594:	d121      	bne.n	80135da <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8013596:	4b16      	ldr	r3, [pc, #88]	; (80135f0 <BSP_TS_Init+0xb8>)
 8013598:	4a13      	ldr	r2, [pc, #76]	; (80135e8 <BSP_TS_Init+0xb0>)
 801359a:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 801359c:	88fa      	ldrh	r2, [r7, #6]
 801359e:	88bb      	ldrh	r3, [r7, #4]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d203      	bcs.n	80135ac <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 80135a4:	4b13      	ldr	r3, [pc, #76]	; (80135f4 <BSP_TS_Init+0xbc>)
 80135a6:	2201      	movs	r2, #1
 80135a8:	701a      	strb	r2, [r3, #0]
 80135aa:	e002      	b.n	80135b2 <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80135ac:	4b11      	ldr	r3, [pc, #68]	; (80135f4 <BSP_TS_Init+0xbc>)
 80135ae:	220c      	movs	r2, #12
 80135b0:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 80135b2:	7bfb      	ldrb	r3, [r7, #15]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d112      	bne.n	80135de <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80135b8:	4b0d      	ldr	r3, [pc, #52]	; (80135f0 <BSP_TS_Init+0xb8>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	4a0b      	ldr	r2, [pc, #44]	; (80135ec <BSP_TS_Init+0xb4>)
 80135c0:	7812      	ldrb	r2, [r2, #0]
 80135c2:	b292      	uxth	r2, r2
 80135c4:	4610      	mov	r0, r2
 80135c6:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80135c8:	4b09      	ldr	r3, [pc, #36]	; (80135f0 <BSP_TS_Init+0xb8>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	4a07      	ldr	r2, [pc, #28]	; (80135ec <BSP_TS_Init+0xb4>)
 80135d0:	7812      	ldrb	r2, [r2, #0]
 80135d2:	b292      	uxth	r2, r2
 80135d4:	4610      	mov	r0, r2
 80135d6:	4798      	blx	r3
    if(ts_status == TS_OK)
 80135d8:	e001      	b.n	80135de <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80135da:	2303      	movs	r3, #3
 80135dc:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80135de:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3710      	adds	r7, #16
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}
 80135e8:	20000004 	.word	0x20000004
 80135ec:	20008a19 	.word	0x20008a19
 80135f0:	20008a14 	.word	0x20008a14
 80135f4:	20008a18 	.word	0x20008a18

080135f8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80135f8:	b590      	push	{r4, r7, lr}
 80135fa:	b089      	sub	sp, #36	; 0x24
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8013600:	2300      	movs	r3, #0
 8013602:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8013604:	4b89      	ldr	r3, [pc, #548]	; (801382c <BSP_TS_GetState+0x234>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	691b      	ldr	r3, [r3, #16]
 801360a:	4a89      	ldr	r2, [pc, #548]	; (8013830 <BSP_TS_GetState+0x238>)
 801360c:	7812      	ldrb	r2, [r2, #0]
 801360e:	b292      	uxth	r2, r2
 8013610:	4610      	mov	r0, r2
 8013612:	4798      	blx	r3
 8013614:	4603      	mov	r3, r0
 8013616:	461a      	mov	r2, r3
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	f000 80fe 	beq.w	8013822 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8013626:	2300      	movs	r3, #0
 8013628:	61fb      	str	r3, [r7, #28]
 801362a:	e0f3      	b.n	8013814 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 801362c:	4b7f      	ldr	r3, [pc, #508]	; (801382c <BSP_TS_GetState+0x234>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	695b      	ldr	r3, [r3, #20]
 8013632:	4a7f      	ldr	r2, [pc, #508]	; (8013830 <BSP_TS_GetState+0x238>)
 8013634:	7812      	ldrb	r2, [r2, #0]
 8013636:	b290      	uxth	r0, r2
 8013638:	f107 0110 	add.w	r1, r7, #16
 801363c:	69fa      	ldr	r2, [r7, #28]
 801363e:	0052      	lsls	r2, r2, #1
 8013640:	188c      	adds	r4, r1, r2
 8013642:	f107 010c 	add.w	r1, r7, #12
 8013646:	69fa      	ldr	r2, [r7, #28]
 8013648:	0052      	lsls	r2, r2, #1
 801364a:	440a      	add	r2, r1
 801364c:	4621      	mov	r1, r4
 801364e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8013650:	4b78      	ldr	r3, [pc, #480]	; (8013834 <BSP_TS_GetState+0x23c>)
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	f003 0308 	and.w	r3, r3, #8
 8013658:	2b00      	cmp	r3, #0
 801365a:	d01d      	beq.n	8013698 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	005b      	lsls	r3, r3, #1
 8013660:	f107 0220 	add.w	r2, r7, #32
 8013664:	4413      	add	r3, r2
 8013666:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 801366a:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	005b      	lsls	r3, r3, #1
 8013670:	f107 0220 	add.w	r2, r7, #32
 8013674:	4413      	add	r3, r2
 8013676:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 801367a:	69fb      	ldr	r3, [r7, #28]
 801367c:	005b      	lsls	r3, r3, #1
 801367e:	f107 0120 	add.w	r1, r7, #32
 8013682:	440b      	add	r3, r1
 8013684:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8013688:	69fb      	ldr	r3, [r7, #28]
 801368a:	005b      	lsls	r3, r3, #1
 801368c:	f107 0220 	add.w	r2, r7, #32
 8013690:	4413      	add	r3, r2
 8013692:	8b3a      	ldrh	r2, [r7, #24]
 8013694:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8013698:	4b66      	ldr	r3, [pc, #408]	; (8013834 <BSP_TS_GetState+0x23c>)
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	f003 0302 	and.w	r3, r3, #2
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d011      	beq.n	80136c8 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80136a4:	69fb      	ldr	r3, [r7, #28]
 80136a6:	005b      	lsls	r3, r3, #1
 80136a8:	f107 0220 	add.w	r2, r7, #32
 80136ac:	4413      	add	r3, r2
 80136ae:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80136b2:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80136b6:	3303      	adds	r3, #3
 80136b8:	b29a      	uxth	r2, r3
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	005b      	lsls	r3, r3, #1
 80136be:	f107 0120 	add.w	r1, r7, #32
 80136c2:	440b      	add	r3, r1
 80136c4:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80136c8:	4b5a      	ldr	r3, [pc, #360]	; (8013834 <BSP_TS_GetState+0x23c>)
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	f003 0304 	and.w	r3, r3, #4
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d011      	beq.n	80136f8 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	005b      	lsls	r3, r3, #1
 80136d8:	f107 0220 	add.w	r2, r7, #32
 80136dc:	4413      	add	r3, r2
 80136de:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80136e2:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80136e6:	3301      	adds	r3, #1
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	005b      	lsls	r3, r3, #1
 80136ee:	f107 0120 	add.w	r1, r7, #32
 80136f2:	440b      	add	r3, r1
 80136f4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80136f8:	69fb      	ldr	r3, [r7, #28]
 80136fa:	005b      	lsls	r3, r3, #1
 80136fc:	f107 0220 	add.w	r2, r7, #32
 8013700:	4413      	add	r3, r2
 8013702:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8013706:	4619      	mov	r1, r3
 8013708:	4a4b      	ldr	r2, [pc, #300]	; (8013838 <BSP_TS_GetState+0x240>)
 801370a:	69fb      	ldr	r3, [r7, #28]
 801370c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013710:	4299      	cmp	r1, r3
 8013712:	d90e      	bls.n	8013732 <BSP_TS_GetState+0x13a>
 8013714:	69fb      	ldr	r3, [r7, #28]
 8013716:	005b      	lsls	r3, r3, #1
 8013718:	f107 0220 	add.w	r2, r7, #32
 801371c:	4413      	add	r3, r2
 801371e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8013722:	4945      	ldr	r1, [pc, #276]	; (8013838 <BSP_TS_GetState+0x240>)
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801372a:	b29b      	uxth	r3, r3
 801372c:	1ad3      	subs	r3, r2, r3
 801372e:	b29b      	uxth	r3, r3
 8013730:	e00d      	b.n	801374e <BSP_TS_GetState+0x156>
 8013732:	4a41      	ldr	r2, [pc, #260]	; (8013838 <BSP_TS_GetState+0x240>)
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801373a:	b29a      	uxth	r2, r3
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	005b      	lsls	r3, r3, #1
 8013740:	f107 0120 	add.w	r1, r7, #32
 8013744:	440b      	add	r3, r1
 8013746:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 801374a:	1ad3      	subs	r3, r2, r3
 801374c:	b29b      	uxth	r3, r3
 801374e:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	005b      	lsls	r3, r3, #1
 8013754:	f107 0220 	add.w	r2, r7, #32
 8013758:	4413      	add	r3, r2
 801375a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 801375e:	4619      	mov	r1, r3
 8013760:	4a36      	ldr	r2, [pc, #216]	; (801383c <BSP_TS_GetState+0x244>)
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013768:	4299      	cmp	r1, r3
 801376a:	d90e      	bls.n	801378a <BSP_TS_GetState+0x192>
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	005b      	lsls	r3, r3, #1
 8013770:	f107 0220 	add.w	r2, r7, #32
 8013774:	4413      	add	r3, r2
 8013776:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 801377a:	4930      	ldr	r1, [pc, #192]	; (801383c <BSP_TS_GetState+0x244>)
 801377c:	69fb      	ldr	r3, [r7, #28]
 801377e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013782:	b29b      	uxth	r3, r3
 8013784:	1ad3      	subs	r3, r2, r3
 8013786:	b29b      	uxth	r3, r3
 8013788:	e00d      	b.n	80137a6 <BSP_TS_GetState+0x1ae>
 801378a:	4a2c      	ldr	r2, [pc, #176]	; (801383c <BSP_TS_GetState+0x244>)
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013792:	b29a      	uxth	r2, r3
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	005b      	lsls	r3, r3, #1
 8013798:	f107 0120 	add.w	r1, r7, #32
 801379c:	440b      	add	r3, r1
 801379e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80137a2:	1ad3      	subs	r3, r2, r3
 80137a4:	b29b      	uxth	r3, r3
 80137a6:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80137a8:	8afa      	ldrh	r2, [r7, #22]
 80137aa:	8abb      	ldrh	r3, [r7, #20]
 80137ac:	4413      	add	r3, r2
 80137ae:	2b05      	cmp	r3, #5
 80137b0:	dd17      	ble.n	80137e2 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 80137b2:	69fb      	ldr	r3, [r7, #28]
 80137b4:	005b      	lsls	r3, r3, #1
 80137b6:	f107 0220 	add.w	r2, r7, #32
 80137ba:	4413      	add	r3, r2
 80137bc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80137c0:	4619      	mov	r1, r3
 80137c2:	4a1d      	ldr	r2, [pc, #116]	; (8013838 <BSP_TS_GetState+0x240>)
 80137c4:	69fb      	ldr	r3, [r7, #28]
 80137c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80137ca:	69fb      	ldr	r3, [r7, #28]
 80137cc:	005b      	lsls	r3, r3, #1
 80137ce:	f107 0220 	add.w	r2, r7, #32
 80137d2:	4413      	add	r3, r2
 80137d4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80137d8:	4619      	mov	r1, r3
 80137da:	4a18      	ldr	r2, [pc, #96]	; (801383c <BSP_TS_GetState+0x244>)
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80137e2:	4a15      	ldr	r2, [pc, #84]	; (8013838 <BSP_TS_GetState+0x240>)
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137ea:	b299      	uxth	r1, r3
 80137ec:	687a      	ldr	r2, [r7, #4]
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	005b      	lsls	r3, r3, #1
 80137f2:	4413      	add	r3, r2
 80137f4:	460a      	mov	r2, r1
 80137f6:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80137f8:	4a10      	ldr	r2, [pc, #64]	; (801383c <BSP_TS_GetState+0x244>)
 80137fa:	69fb      	ldr	r3, [r7, #28]
 80137fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013800:	b299      	uxth	r1, r3
 8013802:	687a      	ldr	r2, [r7, #4]
 8013804:	69fb      	ldr	r3, [r7, #28]
 8013806:	005b      	lsls	r3, r3, #1
 8013808:	4413      	add	r3, r2
 801380a:	460a      	mov	r2, r1
 801380c:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	3301      	adds	r3, #1
 8013812:	61fb      	str	r3, [r7, #28]
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	461a      	mov	r2, r3
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	4293      	cmp	r3, r2
 801381e:	f4ff af05 	bcc.w	801362c <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8013822:	7efb      	ldrb	r3, [r7, #27]
}
 8013824:	4618      	mov	r0, r3
 8013826:	3724      	adds	r7, #36	; 0x24
 8013828:	46bd      	mov	sp, r7
 801382a:	bd90      	pop	{r4, r7, pc}
 801382c:	20008a14 	.word	0x20008a14
 8013830:	20008a19 	.word	0x20008a19
 8013834:	20008a18 	.word	0x20008a18
 8013838:	20008a1c 	.word	0x20008a1c
 801383c:	20008a24 	.word	0x20008a24

08013840 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8013840:	b480      	push	{r7}
 8013842:	b083      	sub	sp, #12
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
    {
 8013848:	4a04      	ldr	r2, [pc, #16]	; (801385c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	601a      	str	r2, [r3, #0]
    }
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	4618      	mov	r0, r3
 8013852:	370c      	adds	r7, #12
 8013854:	46bd      	mov	sp, r7
 8013856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385a:	4770      	bx	lr
 801385c:	080205bc 	.word	0x080205bc

08013860 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8013860:	b580      	push	{r7, lr}
 8013862:	b082      	sub	sp, #8
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
    }
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f7ff ffe9 	bl	8013840 <_ZN8touchgfx12FontProviderD1Ev>
 801386e:	2104      	movs	r1, #4
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f00b f80e 	bl	801e892 <_ZdlPvj>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4618      	mov	r0, r3
 801387a:	3708      	adds	r7, #8
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}

08013880 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	460b      	mov	r3, r1
 801388a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 801388c:	887b      	ldrh	r3, [r7, #2]
 801388e:	2b01      	cmp	r3, #1
 8013890:	d008      	beq.n	80138a4 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 8013892:	2b02      	cmp	r3, #2
 8013894:	d00b      	beq.n	80138ae <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8013896:	2b00      	cmp	r3, #0
 8013898:	d10e      	bne.n	80138b8 <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 801389a:	f001 fa61 	bl	8014d60 <_ZN17TypedTextDatabase8getFontsEv>
 801389e:	4603      	mov	r3, r0
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	e00a      	b.n	80138ba <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80138a4:	f001 fa5c 	bl	8014d60 <_ZN17TypedTextDatabase8getFontsEv>
 80138a8:	4603      	mov	r3, r0
 80138aa:	685b      	ldr	r3, [r3, #4]
 80138ac:	e005      	b.n	80138ba <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80138ae:	f001 fa57 	bl	8014d60 <_ZN17TypedTextDatabase8getFontsEv>
 80138b2:	4603      	mov	r3, r0
 80138b4:	689b      	ldr	r3, [r3, #8]
 80138b6:	e000      	b.n	80138ba <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 80138b8:	2300      	movs	r3, #0
    }
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3708      	adds	r7, #8
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
	...

080138c4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	4a05      	ldr	r2, [pc, #20]	; (80138e4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	601a      	str	r2, [r3, #0]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7ff ffb3 	bl	8013840 <_ZN8touchgfx12FontProviderD1Ev>
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	4618      	mov	r0, r3
 80138de:	3708      	adds	r7, #8
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	080205a8 	.word	0x080205a8

080138e8 <_ZN23ApplicationFontProviderD0Ev>:
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f7ff ffe7 	bl	80138c4 <_ZN23ApplicationFontProviderD1Ev>
 80138f6:	2104      	movs	r1, #4
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f00a ffca 	bl	801e892 <_ZdlPvj>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	4618      	mov	r0, r3
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8013908:	b480      	push	{r7}
 801390a:	b083      	sub	sp, #12
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	4a04      	ldr	r2, [pc, #16]	; (8013924 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	601a      	str	r2, [r3, #0]
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	4618      	mov	r0, r3
 801391a:	370c      	adds	r7, #12
 801391c:	46bd      	mov	sp, r7
 801391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013922:	4770      	bx	lr
 8013924:	080217ac 	.word	0x080217ac

08013928 <_ZN8touchgfx4FontD0Ev>:
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f7ff ffe9 	bl	8013908 <_ZN8touchgfx4FontD1Ev>
 8013936:	2110      	movs	r1, #16
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f00a ffaa 	bl	801e892 <_ZdlPvj>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	4618      	mov	r0, r3
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8013948:	b590      	push	{r4, r7, lr}
 801394a:	b087      	sub	sp, #28
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	460b      	mov	r3, r1
 8013952:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8013954:	2300      	movs	r3, #0
 8013956:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8013958:	2300      	movs	r3, #0
 801395a:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	3308      	adds	r3, #8
 8013962:	681c      	ldr	r4, [r3, #0]
 8013964:	f107 030f 	add.w	r3, r7, #15
 8013968:	f107 0210 	add.w	r2, r7, #16
 801396c:	8879      	ldrh	r1, [r7, #2]
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	47a0      	blx	r4
 8013972:	6178      	str	r0, [r7, #20]
        return glyph;
 8013974:	697b      	ldr	r3, [r7, #20]
    }
 8013976:	4618      	mov	r0, r3
 8013978:	371c      	adds	r7, #28
 801397a:	46bd      	mov	sp, r7
 801397c:	bd90      	pop	{r4, r7, pc}

0801397e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 801397e:	b480      	push	{r7}
 8013980:	b083      	sub	sp, #12
 8013982:	af00      	add	r7, sp, #0
 8013984:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	895b      	ldrh	r3, [r3, #10]
    }
 801398a:	4618      	mov	r0, r3
 801398c:	370c      	adds	r7, #12
 801398e:	46bd      	mov	sp, r7
 8013990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013994:	4770      	bx	lr

08013996 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8013996:	b480      	push	{r7}
 8013998:	b083      	sub	sp, #12
 801399a:	af00      	add	r7, sp, #0
 801399c:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	899b      	ldrh	r3, [r3, #12]
    }
 80139a2:	4618      	mov	r0, r3
 80139a4:	370c      	adds	r7, #12
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr

080139ae <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 80139ae:	b480      	push	{r7}
 80139b0:	b083      	sub	sp, #12
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	889b      	ldrh	r3, [r3, #4]
    }
 80139ba:	4618      	mov	r0, r3
 80139bc:	370c      	adds	r7, #12
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr

080139c6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 80139c6:	b480      	push	{r7}
 80139c8:	b083      	sub	sp, #12
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	889a      	ldrh	r2, [r3, #4]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	799b      	ldrb	r3, [r3, #6]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	4413      	add	r3, r2
 80139da:	b29b      	uxth	r3, r3
    }
 80139dc:	4618      	mov	r0, r3
 80139de:	370c      	adds	r7, #12
 80139e0:	46bd      	mov	sp, r7
 80139e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e6:	4770      	bx	lr

080139e8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 80139e8:	b480      	push	{r7}
 80139ea:	b083      	sub	sp, #12
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	79db      	ldrb	r3, [r3, #7]
 80139f4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80139f8:	b2db      	uxtb	r3, r3
    }
 80139fa:	4618      	mov	r0, r3
 80139fc:	370c      	adds	r7, #12
 80139fe:	46bd      	mov	sp, r7
 8013a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a04:	4770      	bx	lr

08013a06 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 8013a06:	b480      	push	{r7}
 8013a08:	b083      	sub	sp, #12
 8013a0a:	af00      	add	r7, sp, #0
 8013a0c:	6078      	str	r0, [r7, #4]
    {
        return a4;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	79db      	ldrb	r3, [r3, #7]
 8013a12:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8013a16:	b2db      	uxtb	r3, r3
    }
 8013a18:	4618      	mov	r0, r3
 8013a1a:	370c      	adds	r7, #12
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a22:	4770      	bx	lr

08013a24 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8013a24:	b480      	push	{r7}
 8013a26:	b083      	sub	sp, #12
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6a1b      	ldr	r3, [r3, #32]
    }
 8013a30:	4618      	mov	r0, r3
 8013a32:	370c      	adds	r7, #12
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	4a05      	ldr	r2, [pc, #20]	; (8013a5c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	601a      	str	r2, [r3, #0]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ff ff5b 	bl	8013908 <_ZN8touchgfx4FontD1Ev>
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	4618      	mov	r0, r3
 8013a56:	3708      	adds	r7, #8
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}
 8013a5c:	08021868 	.word	0x08021868

08013a60 <_ZN8touchgfx9ConstFontD0Ev>:
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f7ff ffe7 	bl	8013a3c <_ZN8touchgfx9ConstFontD1Ev>
 8013a6e:	2118      	movs	r1, #24
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f00a ff0e 	bl	801e892 <_ZdlPvj>
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3708      	adds	r7, #8
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	4a05      	ldr	r2, [pc, #20]	; (8013aa0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	601a      	str	r2, [r3, #0]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7ff ffd3 	bl	8013a3c <_ZN8touchgfx9ConstFontD1Ev>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3708      	adds	r7, #8
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}
 8013aa0:	080205d0 	.word	0x080205d0

08013aa4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f7ff ffe7 	bl	8013a80 <_ZN8touchgfx13GeneratedFontD1Ev>
 8013ab2:	2124      	movs	r1, #36	; 0x24
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f00a feec 	bl	801e892 <_ZdlPvj>
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	4618      	mov	r0, r3
 8013abe:	3708      	adds	r7, #8
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}

08013ac4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 8013ac4:	b480      	push	{r7}
 8013ac6:	b083      	sub	sp, #12
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	7b5b      	ldrb	r3, [r3, #13]
 8013ad0:	021b      	lsls	r3, r3, #8
 8013ad2:	b21b      	sxth	r3, r3
 8013ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013ad8:	b21a      	sxth	r2, r3
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	7adb      	ldrb	r3, [r3, #11]
 8013ade:	b21b      	sxth	r3, r3
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	b21b      	sxth	r3, r3
 8013ae4:	b29b      	uxth	r3, r3
    }
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	370c      	adds	r7, #12
 8013aea:	46bd      	mov	sp, r7
 8013aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af0:	4770      	bx	lr
	...

08013af4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b08c      	sub	sp, #48	; 0x30
 8013af8:	af08      	add	r7, sp, #32
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	4611      	mov	r1, r2
 8013b00:	461a      	mov	r2, r3
 8013b02:	460b      	mov	r3, r1
 8013b04:	80fb      	strh	r3, [r7, #6]
 8013b06:	4613      	mov	r3, r2
 8013b08:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 8013b0a:	68f8      	ldr	r0, [r7, #12]
 8013b0c:	88b9      	ldrh	r1, [r7, #4]
 8013b0e:	88fa      	ldrh	r2, [r7, #6]
 8013b10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013b12:	9306      	str	r3, [sp, #24]
 8013b14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013b16:	9305      	str	r3, [sp, #20]
 8013b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b1c:	9304      	str	r3, [sp, #16]
 8013b1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013b22:	9303      	str	r3, [sp, #12]
 8013b24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013b28:	9302      	str	r3, [sp, #8]
 8013b2a:	7f3b      	ldrb	r3, [r7, #28]
 8013b2c:	9301      	str	r3, [sp, #4]
 8013b2e:	7e3b      	ldrb	r3, [r7, #24]
 8013b30:	9300      	str	r3, [sp, #0]
 8013b32:	460b      	mov	r3, r1
 8013b34:	68b9      	ldr	r1, [r7, #8]
 8013b36:	f007 f835 	bl	801aba4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8013b3a:	4a08      	ldr	r2, [pc, #32]	; (8013b5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	601a      	str	r2, [r3, #0]
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b44:	619a      	str	r2, [r3, #24]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b4a:	61da      	str	r2, [r3, #28]
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b50:	621a      	str	r2, [r3, #32]
{
}
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	4618      	mov	r0, r3
 8013b56:	3710      	adds	r7, #16
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	080205d0 	.word	0x080205d0

08013b60 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8013b60:	b480      	push	{r7}
 8013b62:	b085      	sub	sp, #20
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	699b      	ldr	r3, [r3, #24]
 8013b6e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	889b      	ldrh	r3, [r3, #4]
 8013b74:	0adb      	lsrs	r3, r3, #11
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	009b      	lsls	r3, r3, #2
 8013b7a:	68fa      	ldr	r2, [r7, #12]
 8013b7c:	4413      	add	r3, r2
 8013b7e:	681a      	ldr	r2, [r3, #0]
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4413      	add	r3, r2
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3714      	adds	r7, #20
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr

08013b92 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8013b92:	b580      	push	{r7, lr}
 8013b94:	b086      	sub	sp, #24
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	60f8      	str	r0, [r7, #12]
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	607a      	str	r2, [r7, #4]
 8013b9e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d003      	beq.n	8013bae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	7b1b      	ldrb	r3, [r3, #12]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d101      	bne.n	8013bb2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	e023      	b.n	8013bfa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f7ff ff86 	bl	8013ac4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8013bbc:	8abb      	ldrh	r3, [r7, #20]
 8013bbe:	82fb      	strh	r3, [r7, #22]
 8013bc0:	8afa      	ldrh	r2, [r7, #22]
 8013bc2:	8abb      	ldrh	r3, [r7, #20]
 8013bc4:	6879      	ldr	r1, [r7, #4]
 8013bc6:	7b09      	ldrb	r1, [r1, #12]
 8013bc8:	440b      	add	r3, r1
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	da14      	bge.n	8013bf8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	69da      	ldr	r2, [r3, #28]
 8013bd2:	8afb      	ldrh	r3, [r7, #22]
 8013bd4:	009b      	lsls	r3, r3, #2
 8013bd6:	4413      	add	r3, r2
 8013bd8:	881b      	ldrh	r3, [r3, #0]
 8013bda:	897a      	ldrh	r2, [r7, #10]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d107      	bne.n	8013bf0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	69da      	ldr	r2, [r3, #28]
 8013be4:	8afb      	ldrh	r3, [r7, #22]
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	4413      	add	r3, r2
 8013bea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013bee:	e004      	b.n	8013bfa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8013bf0:	8afb      	ldrh	r3, [r7, #22]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	82fb      	strh	r3, [r7, #22]
 8013bf6:	e7e3      	b.n	8013bc0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 8013bf8:	2300      	movs	r3, #0
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3718      	adds	r7, #24
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
	...

08013c04 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0, 0);
 8013c04:	b580      	push	{r7, lr}
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	4801      	ldr	r0, [pc, #4]	; (8013c10 <__tcf_0+0xc>)
 8013c0a:	f7ff ff39 	bl	8013a80 <_ZN8touchgfx13GeneratedFontD1Ev>
 8013c0e:	bd80      	pop	{r7, pc}
 8013c10:	20008a2c 	.word	0x20008a2c

08013c14 <_Z23getFont_verdana_10_4bppv>:
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b08a      	sub	sp, #40	; 0x28
 8013c18:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0, 0);
 8013c1a:	4b15      	ldr	r3, [pc, #84]	; (8013c70 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	f003 0301 	and.w	r3, r3, #1
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d11f      	bne.n	8013c66 <_Z23getFont_verdana_10_4bppv+0x52>
 8013c26:	2300      	movs	r3, #0
 8013c28:	9309      	str	r3, [sp, #36]	; 0x24
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	9308      	str	r3, [sp, #32]
 8013c2e:	2300      	movs	r3, #0
 8013c30:	9307      	str	r3, [sp, #28]
 8013c32:	4b10      	ldr	r3, [pc, #64]	; (8013c74 <_Z23getFont_verdana_10_4bppv+0x60>)
 8013c34:	9306      	str	r3, [sp, #24]
 8013c36:	4b10      	ldr	r3, [pc, #64]	; (8013c78 <_Z23getFont_verdana_10_4bppv+0x64>)
 8013c38:	9305      	str	r3, [sp, #20]
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	9304      	str	r3, [sp, #16]
 8013c3e:	2300      	movs	r3, #0
 8013c40:	9303      	str	r3, [sp, #12]
 8013c42:	2301      	movs	r3, #1
 8013c44:	9302      	str	r3, [sp, #8]
 8013c46:	2304      	movs	r3, #4
 8013c48:	9301      	str	r3, [sp, #4]
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	9300      	str	r3, [sp, #0]
 8013c4e:	230a      	movs	r3, #10
 8013c50:	2200      	movs	r2, #0
 8013c52:	490a      	ldr	r1, [pc, #40]	; (8013c7c <_Z23getFont_verdana_10_4bppv+0x68>)
 8013c54:	480a      	ldr	r0, [pc, #40]	; (8013c80 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8013c56:	f7ff ff4d 	bl	8013af4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8013c5a:	4b05      	ldr	r3, [pc, #20]	; (8013c70 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8013c5c:	2201      	movs	r2, #1
 8013c5e:	601a      	str	r2, [r3, #0]
 8013c60:	4808      	ldr	r0, [pc, #32]	; (8013c84 <_Z23getFont_verdana_10_4bppv+0x70>)
 8013c62:	f00a fe51 	bl	801e908 <atexit>
    return verdana_10_4bpp;
 8013c66:	4b06      	ldr	r3, [pc, #24]	; (8013c80 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	20008a50 	.word	0x20008a50
 8013c74:	08022c9c 	.word	0x08022c9c
 8013c78:	0802061c 	.word	0x0802061c
 8013c7c:	08022ca8 	.word	0x08022ca8
 8013c80:	20008a2c 	.word	0x20008a2c
 8013c84:	08013c05 	.word	0x08013c05

08013c88 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 0, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0, 0);
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	4801      	ldr	r0, [pc, #4]	; (8013c94 <__tcf_0+0xc>)
 8013c8e:	f7ff fef7 	bl	8013a80 <_ZN8touchgfx13GeneratedFontD1Ev>
 8013c92:	bd80      	pop	{r7, pc}
 8013c94:	20008a54 	.word	0x20008a54

08013c98 <_Z23getFont_verdana_20_4bppv>:
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b08a      	sub	sp, #40	; 0x28
 8013c9c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 0, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0, 0);
 8013c9e:	4b15      	ldr	r3, [pc, #84]	; (8013cf4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	f003 0301 	and.w	r3, r3, #1
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d11f      	bne.n	8013cea <_Z23getFont_verdana_20_4bppv+0x52>
 8013caa:	2300      	movs	r3, #0
 8013cac:	9309      	str	r3, [sp, #36]	; 0x24
 8013cae:	2300      	movs	r3, #0
 8013cb0:	9308      	str	r3, [sp, #32]
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	9307      	str	r3, [sp, #28]
 8013cb6:	4b10      	ldr	r3, [pc, #64]	; (8013cf8 <_Z23getFont_verdana_20_4bppv+0x60>)
 8013cb8:	9306      	str	r3, [sp, #24]
 8013cba:	4b10      	ldr	r3, [pc, #64]	; (8013cfc <_Z23getFont_verdana_20_4bppv+0x64>)
 8013cbc:	9305      	str	r3, [sp, #20]
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	9304      	str	r3, [sp, #16]
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	9303      	str	r3, [sp, #12]
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	9302      	str	r3, [sp, #8]
 8013cca:	2304      	movs	r3, #4
 8013ccc:	9301      	str	r3, [sp, #4]
 8013cce:	2300      	movs	r3, #0
 8013cd0:	9300      	str	r3, [sp, #0]
 8013cd2:	2314      	movs	r3, #20
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	490a      	ldr	r1, [pc, #40]	; (8013d00 <_Z23getFont_verdana_20_4bppv+0x68>)
 8013cd8:	480a      	ldr	r0, [pc, #40]	; (8013d04 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8013cda:	f7ff ff0b 	bl	8013af4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8013cde:	4b05      	ldr	r3, [pc, #20]	; (8013cf4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	601a      	str	r2, [r3, #0]
 8013ce4:	4808      	ldr	r0, [pc, #32]	; (8013d08 <_Z23getFont_verdana_20_4bppv+0x70>)
 8013ce6:	f00a fe0f 	bl	801e908 <atexit>
    return verdana_20_4bpp;
 8013cea:	4b06      	ldr	r3, [pc, #24]	; (8013d04 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	20008a78 	.word	0x20008a78
 8013cf8:	08022ca0 	.word	0x08022ca0
 8013cfc:	08020620 	.word	0x08020620
 8013d00:	08022cb8 	.word	0x08022cb8
 8013d04:	20008a54 	.word	0x20008a54
 8013d08:	08013c89 	.word	0x08013c89

08013d0c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0, 0);
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	af00      	add	r7, sp, #0
 8013d10:	4801      	ldr	r0, [pc, #4]	; (8013d18 <__tcf_0+0xc>)
 8013d12:	f7ff feb5 	bl	8013a80 <_ZN8touchgfx13GeneratedFontD1Ev>
 8013d16:	bd80      	pop	{r7, pc}
 8013d18:	20008a7c 	.word	0x20008a7c

08013d1c <_Z23getFont_verdana_40_4bppv>:
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b08a      	sub	sp, #40	; 0x28
 8013d20:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0, 0);
 8013d22:	4b15      	ldr	r3, [pc, #84]	; (8013d78 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	f003 0301 	and.w	r3, r3, #1
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d11f      	bne.n	8013d6e <_Z23getFont_verdana_40_4bppv+0x52>
 8013d2e:	2300      	movs	r3, #0
 8013d30:	9309      	str	r3, [sp, #36]	; 0x24
 8013d32:	2300      	movs	r3, #0
 8013d34:	9308      	str	r3, [sp, #32]
 8013d36:	2300      	movs	r3, #0
 8013d38:	9307      	str	r3, [sp, #28]
 8013d3a:	4b10      	ldr	r3, [pc, #64]	; (8013d7c <_Z23getFont_verdana_40_4bppv+0x60>)
 8013d3c:	9306      	str	r3, [sp, #24]
 8013d3e:	4b10      	ldr	r3, [pc, #64]	; (8013d80 <_Z23getFont_verdana_40_4bppv+0x64>)
 8013d40:	9305      	str	r3, [sp, #20]
 8013d42:	2300      	movs	r3, #0
 8013d44:	9304      	str	r3, [sp, #16]
 8013d46:	2300      	movs	r3, #0
 8013d48:	9303      	str	r3, [sp, #12]
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	9302      	str	r3, [sp, #8]
 8013d4e:	2304      	movs	r3, #4
 8013d50:	9301      	str	r3, [sp, #4]
 8013d52:	2300      	movs	r3, #0
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	2328      	movs	r3, #40	; 0x28
 8013d58:	2200      	movs	r2, #0
 8013d5a:	490a      	ldr	r1, [pc, #40]	; (8013d84 <_Z23getFont_verdana_40_4bppv+0x68>)
 8013d5c:	480a      	ldr	r0, [pc, #40]	; (8013d88 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8013d5e:	f7ff fec9 	bl	8013af4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8013d62:	4b05      	ldr	r3, [pc, #20]	; (8013d78 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8013d64:	2201      	movs	r2, #1
 8013d66:	601a      	str	r2, [r3, #0]
 8013d68:	4808      	ldr	r0, [pc, #32]	; (8013d8c <_Z23getFont_verdana_40_4bppv+0x70>)
 8013d6a:	f00a fdcd 	bl	801e908 <atexit>
    return verdana_40_4bpp;
 8013d6e:	4b06      	ldr	r3, [pc, #24]	; (8013d88 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	20008aa0 	.word	0x20008aa0
 8013d7c:	08022ca4 	.word	0x08022ca4
 8013d80:	08020624 	.word	0x08020624
 8013d84:	08022cc8 	.word	0x08022cc8
 8013d88:	20008a7c 	.word	0x20008a7c
 8013d8c:	08013d0d 	.word	0x08013d0d

08013d90 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8013d90:	b480      	push	{r7}
 8013d92:	b083      	sub	sp, #12
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	370c      	adds	r7, #12
 8013da0:	46bd      	mov	sp, r7
 8013da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da6:	4770      	bx	lr

08013da8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8013da8:	b480      	push	{r7}
 8013daa:	b083      	sub	sp, #12
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	6039      	str	r1, [r7, #0]
    {
    }
 8013db2:	bf00      	nop
 8013db4:	370c      	adds	r7, #12
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr

08013dbe <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8013dbe:	b480      	push	{r7}
 8013dc0:	b083      	sub	sp, #12
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
 8013dc6:	6039      	str	r1, [r7, #0]
    {
    }
 8013dc8:	bf00      	nop
 8013dca:	370c      	adds	r7, #12
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd2:	4770      	bx	lr

08013dd4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8013dd4:	b480      	push	{r7}
 8013dd6:	b083      	sub	sp, #12
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
 8013ddc:	6039      	str	r1, [r7, #0]
    {
    }
 8013dde:	bf00      	nop
 8013de0:	370c      	adds	r7, #12
 8013de2:	46bd      	mov	sp, r7
 8013de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de8:	4770      	bx	lr

08013dea <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8013dea:	b480      	push	{r7}
 8013dec:	b083      	sub	sp, #12
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	6078      	str	r0, [r7, #4]
 8013df2:	460b      	mov	r3, r1
 8013df4:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013df6:	bf00      	nop
 8013df8:	370c      	adds	r7, #12
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr

08013e02 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8013e02:	b480      	push	{r7}
 8013e04:	b083      	sub	sp, #12
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
    {
    }
 8013e0a:	bf00      	nop
 8013e0c:	370c      	adds	r7, #12
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e14:	4770      	bx	lr

08013e16 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8013e16:	b480      	push	{r7}
 8013e18:	b083      	sub	sp, #12
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
    {
    }
 8013e1e:	bf00      	nop
 8013e20:	370c      	adds	r7, #12
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr
	...

08013e2c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8013e2c:	b480      	push	{r7}
 8013e2e:	b083      	sub	sp, #12
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
    {
 8013e34:	4a04      	ldr	r2, [pc, #16]	; (8013e48 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	601a      	str	r2, [r3, #0]
    }
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr
 8013e48:	08020718 	.word	0x08020718

08013e4c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
    }
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f7ff ffe9 	bl	8013e2c <_ZN8touchgfx15UIEventListenerD1Ev>
 8013e5a:	2104      	movs	r1, #4
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f00a fd18 	bl	801e892 <_ZdlPvj>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	4618      	mov	r0, r3
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8013e6c:	b480      	push	{r7}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8013e74:	4a07      	ldr	r2, [pc, #28]	; (8013e94 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	601a      	str	r2, [r3, #0]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	605a      	str	r2, [r3, #4]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2200      	movs	r2, #0
 8013e84:	721a      	strb	r2, [r3, #8]
    {
    }
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	370c      	adds	r7, #12
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr
 8013e94:	080206f8 	.word	0x080206f8

08013e98 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8013e98:	b480      	push	{r7}
 8013e9a:	b083      	sub	sp, #12
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
    {
 8013ea0:	4a04      	ldr	r2, [pc, #16]	; (8013eb4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	601a      	str	r2, [r3, #0]
    }
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	370c      	adds	r7, #12
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr
 8013eb4:	080206f8 	.word	0x080206f8

08013eb8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
    }
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f7ff ffe9 	bl	8013e98 <_ZN8touchgfx10TransitionD1Ev>
 8013ec6:	210c      	movs	r1, #12
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f00a fce2 	bl	801e892 <_ZdlPvj>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8013ed8:	b480      	push	{r7}
 8013eda:	b083      	sub	sp, #12
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	bf00      	nop
 8013ee2:	370c      	adds	r7, #12
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr

08013eec <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8013eec:	b480      	push	{r7}
 8013eee:	b083      	sub	sp, #12
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	bf00      	nop
 8013ef6:	370c      	adds	r7, #12
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efe:	4770      	bx	lr

08013f00 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8013f00:	b480      	push	{r7}
 8013f02:	b083      	sub	sp, #12
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	bf00      	nop
 8013f0a:	370c      	adds	r7, #12
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8013f14:	b480      	push	{r7}
 8013f16:	b083      	sub	sp, #12
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	683a      	ldr	r2, [r7, #0]
 8013f22:	605a      	str	r2, [r3, #4]
    }
 8013f24:	bf00      	nop
 8013f26:	370c      	adds	r7, #12
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr

08013f30 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	460b      	mov	r3, r1
 8013f3a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013f3c:	bf00      	nop
 8013f3e:	370c      	adds	r7, #12
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8013f48:	b480      	push	{r7}
 8013f4a:	b083      	sub	sp, #12
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
    {
 8013f50:	4a04      	ldr	r2, [pc, #16]	; (8013f64 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	601a      	str	r2, [r3, #0]
    }
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	4618      	mov	r0, r3
 8013f5a:	370c      	adds	r7, #12
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f62:	4770      	bx	lr
 8013f64:	080206e0 	.word	0x080206e0

08013f68 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
    }
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7ff ffe9 	bl	8013f48 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8013f76:	2104      	movs	r1, #4
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f00a fc8a 	bl	801e892 <_ZdlPvj>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	4618      	mov	r0, r3
 8013f82:	3708      	adds	r7, #8
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	4a05      	ldr	r2, [pc, #20]	; (8013fa8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	601a      	str	r2, [r3, #0]
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ff ff47 	bl	8013e2c <_ZN8touchgfx15UIEventListenerD1Ev>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	080216c4 	.word	0x080216c4

08013fac <_ZN8touchgfx11ApplicationD0Ev>:
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f7ff ffe7 	bl	8013f88 <_ZN8touchgfx11ApplicationD1Ev>
 8013fba:	f44f 7198 	mov.w	r1, #304	; 0x130
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f00a fc67 	bl	801e892 <_ZdlPvj>
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3708      	adds	r7, #8
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
	...

08013fd0 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f006 f8e6 	bl	801a1ac <_ZN8touchgfx11ApplicationC1Ev>
 8013fe0:	4a09      	ldr	r2, [pc, #36]	; (8014008 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	601a      	str	r2, [r3, #0]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2200      	movs	r2, #0
 8013fea:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4a04      	ldr	r2, [pc, #16]	; (801400c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8013ffa:	6013      	str	r3, [r2, #0]
    }
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	4618      	mov	r0, r3
 8014000:	3708      	adds	r7, #8
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	080206a4 	.word	0x080206a4
 801400c:	20009dd0 	.word	0x20009dd0

08014010 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	4a05      	ldr	r2, [pc, #20]	; (8014030 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	601a      	str	r2, [r3, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	4618      	mov	r0, r3
 8014022:	f7ff ffb1 	bl	8013f88 <_ZN8touchgfx11ApplicationD1Ev>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	4618      	mov	r0, r3
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	080206a4 	.word	0x080206a4

08014034 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f7ff ffe7 	bl	8014010 <_ZN8touchgfx14MVPApplicationD1Ev>
 8014042:	f44f 719c 	mov.w	r1, #312	; 0x138
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f00a fc23 	bl	801e892 <_ZdlPvj>
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	4618      	mov	r0, r3
 8014050:	3708      	adds	r7, #8
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}

08014056 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8014056:	b580      	push	{r7, lr}
 8014058:	b082      	sub	sp, #8
 801405a:	af00      	add	r7, sp, #0
 801405c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f000 f804 	bl	801406c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8014064:	bf00      	nop
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801407a:	2b00      	cmp	r3, #0
 801407c:	d00f      	beq.n	801409e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	330c      	adds	r3, #12
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	4610      	mov	r0, r2
 8014092:	4798      	blx	r3
 8014094:	4603      	mov	r3, r0
 8014096:	2b00      	cmp	r3, #0
 8014098:	d001      	beq.n	801409e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801409a:	2301      	movs	r3, #1
 801409c:	e000      	b.n	80140a0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 801409e:	2300      	movs	r3, #0
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d00e      	beq.n	80140c2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	3308      	adds	r3, #8
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	4610      	mov	r0, r2
 80140b8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2200      	movs	r2, #0
 80140be:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 80140c2:	bf00      	nop
 80140c4:	3708      	adds	r7, #8
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}

080140ca <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 80140ca:	b580      	push	{r7, lr}
 80140cc:	b084      	sub	sp, #16
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	60f8      	str	r0, [r7, #12]
 80140d2:	60b9      	str	r1, [r7, #8]
 80140d4:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 80140d6:	f006 f849 	bl	801a16c <_ZN8touchgfx11Application11getInstanceEv>
 80140da:	4603      	mov	r3, r0
 80140dc:	4618      	mov	r0, r3
 80140de:	f006 f84b 	bl	801a178 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d008      	beq.n	80140fc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	330c      	adds	r3, #12
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	4610      	mov	r0, r2
 80140fa:	4798      	blx	r3
    }
    if (*currentTrans)
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d007      	beq.n	8014114 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	4610      	mov	r0, r2
 8014112:	4798      	blx	r3
    }
    if (*currentScreen)
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d008      	beq.n	801412e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	681a      	ldr	r2, [r3, #0]
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	3314      	adds	r3, #20
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	4610      	mov	r0, r2
 801412c:	4798      	blx	r3
    }
    if (*currentPresenter)
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d008      	beq.n	8014148 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	681a      	ldr	r2, [r3, #0]
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	3304      	adds	r3, #4
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	4610      	mov	r0, r2
 8014146:	4798      	blx	r3
    }
    if (*currentScreen)
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d007      	beq.n	8014160 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	681a      	ldr	r2, [r3, #0]
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	4610      	mov	r0, r2
 801415e:	4798      	blx	r3
    }
    if (*currentPresenter)
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d008      	beq.n	801417a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	3308      	adds	r3, #8
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	4610      	mov	r0, r2
 8014178:	4798      	blx	r3
    }
}
 801417a:	bf00      	nop
 801417c:	3710      	adds	r7, #16
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}

08014182 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8014182:	b580      	push	{r7, lr}
 8014184:	b084      	sub	sp, #16
 8014186:	af00      	add	r7, sp, #0
 8014188:	60f8      	str	r0, [r7, #12]
 801418a:	60b9      	str	r1, [r7, #8]
 801418c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	330c      	adds	r3, #12
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	68f8      	ldr	r0, [r7, #12]
 8014198:	4798      	blx	r3
    newPresenter->activate();
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	68b8      	ldr	r0, [r7, #8]
 80141a2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80141a4:	6879      	ldr	r1, [r7, #4]
 80141a6:	68f8      	ldr	r0, [r7, #12]
 80141a8:	f007 f8a6 	bl	801b2f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	3310      	adds	r3, #16
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	6878      	ldr	r0, [r7, #4]
 80141b6:	4798      	blx	r3

    Application::getInstance()->draw();
 80141b8:	f005 ffd8 	bl	801a16c <_ZN8touchgfx11Application11getInstanceEv>
 80141bc:	4602      	mov	r2, r0
 80141be:	6813      	ldr	r3, [r2, #0]
 80141c0:	3328      	adds	r3, #40	; 0x28
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	4610      	mov	r0, r2
 80141c6:	4798      	blx	r3
}
 80141c8:	bf00      	nop
 80141ca:	3710      	adds	r7, #16
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 80141d0:	b480      	push	{r7}
 80141d2:	b083      	sub	sp, #12
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	683a      	ldr	r2, [r7, #0]
 80141de:	601a      	str	r2, [r3, #0]
    }
 80141e0:	bf00      	nop
 80141e2:	370c      	adds	r7, #12
 80141e4:	46bd      	mov	sp, r7
 80141e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ea:	4770      	bx	lr

080141ec <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	4a08      	ldr	r2, [pc, #32]	; (8014218 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	601a      	str	r2, [r3, #0]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8014200:	4618      	mov	r0, r3
 8014202:	f000 fa55 	bl	80146b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	4618      	mov	r0, r3
 801420a:	f7ff ff01 	bl	8014010 <_ZN8touchgfx14MVPApplicationD1Ev>
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	4618      	mov	r0, r3
 8014212:	3708      	adds	r7, #8
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}
 8014218:	08020650 	.word	0x08020650

0801421c <_ZN23FrontendApplicationBaseD0Ev>:
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f7ff ffe1 	bl	80141ec <_ZN23FrontendApplicationBaseD1Ev>
 801422a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f00a fb2f 	bl	801e892 <_ZdlPvj>
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	4618      	mov	r0, r3
 8014238:	3708      	adds	r7, #8
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
	...

08014240 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	4618      	mov	r0, r3
 801424c:	f7ff fe0e 	bl	8013e6c <_ZN8touchgfx10TransitionC1Ev>
 8014250:	4a03      	ldr	r2, [pc, #12]	; (8014260 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	601a      	str	r2, [r3, #0]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	4618      	mov	r0, r3
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	08020630 	.word	0x08020630

08014264 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	4a05      	ldr	r2, [pc, #20]	; (8014284 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	601a      	str	r2, [r3, #0]
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	4618      	mov	r0, r3
 8014276:	f7ff fe0f 	bl	8013e98 <_ZN8touchgfx10TransitionD1Ev>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	4618      	mov	r0, r3
 801427e:	3708      	adds	r7, #8
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}
 8014284:	08020630 	.word	0x08020630

08014288 <_ZN8touchgfx12NoTransitionD0Ev>:
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f7ff ffe7 	bl	8014264 <_ZN8touchgfx12NoTransitionD1Ev>
 8014296:	210c      	movs	r1, #12
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f00a fafa 	bl	801e892 <_ZdlPvj>
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	4618      	mov	r0, r3
 80142a2:	3708      	adds	r7, #8
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 80142a8:	b480      	push	{r7}
 80142aa:	b083      	sub	sp, #12
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2201      	movs	r2, #1
 80142b4:	721a      	strb	r2, [r3, #8]
    }
 80142b6:	bf00      	nop
 80142b8:	370c      	adds	r7, #12
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr

080142c2 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 80142c2:	b480      	push	{r7}
 80142c4:	b083      	sub	sp, #12
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	6078      	str	r0, [r7, #4]
 80142ca:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	683a      	ldr	r2, [r7, #0]
 80142d0:	605a      	str	r2, [r3, #4]
    }
 80142d2:	bf00      	nop
 80142d4:	370c      	adds	r7, #12
 80142d6:	46bd      	mov	sp, r7
 80142d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142dc:	4770      	bx	lr
	...

080142e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	60b9      	str	r1, [r7, #8]
 80142ea:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7ff fe6e 	bl	8013fd0 <_ZN8touchgfx14MVPApplicationC1Ev>
 80142f4:	4a0f      	ldr	r2, [pc, #60]	; (8014334 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	601a      	str	r2, [r3, #0]
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8014300:	4618      	mov	r0, r3
 8014302:	f000 f897 	bl	8014434 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	687a      	ldr	r2, [r7, #4]
 801430a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	68ba      	ldr	r2, [r7, #8]
 8014312:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8014316:	f7fb f805 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 801431a:	4602      	mov	r2, r0
 801431c:	6813      	ldr	r3, [r2, #0]
 801431e:	3308      	adds	r3, #8
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2100      	movs	r1, #0
 8014324:	4610      	mov	r0, r2
 8014326:	4798      	blx	r3

}
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	4618      	mov	r0, r3
 801432c:	3710      	adds	r7, #16
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	08020650 	.word	0x08020650

08014338 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8014338:	b480      	push	{r7}
 801433a:	b083      	sub	sp, #12
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	6039      	str	r1, [r7, #0]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	4618      	mov	r0, r3
 8014346:	370c      	adds	r7, #12
 8014348:	46bd      	mov	sp, r7
 801434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434e:	4770      	bx	lr

08014350 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	6039      	str	r1, [r7, #0]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	683a      	ldr	r2, [r7, #0]
 801435e:	4611      	mov	r1, r2
 8014360:	4618      	mov	r0, r3
 8014362:	f7ff ffe9 	bl	8014338 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	685a      	ldr	r2, [r3, #4]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	605a      	str	r2, [r3, #4]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	683a      	ldr	r2, [r7, #0]
 8014372:	3308      	adds	r3, #8
 8014374:	3208      	adds	r2, #8
 8014376:	e892 0003 	ldmia.w	r2, {r0, r1}
 801437a:	e883 0003 	stmia.w	r3, {r0, r1}
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	4618      	mov	r0, r3
 8014382:	3708      	adds	r7, #8
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}

08014388 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8014388:	b590      	push	{r4, r7, lr}
 801438a:	b089      	sub	sp, #36	; 0x24
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8014396:	4b10      	ldr	r3, [pc, #64]	; (80143d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8014398:	61bb      	str	r3, [r7, #24]
 801439a:	2300      	movs	r3, #0
 801439c:	61fb      	str	r3, [r7, #28]
 801439e:	f107 0008 	add.w	r0, r7, #8
 80143a2:	f107 0318 	add.w	r3, r7, #24
 80143a6:	cb0c      	ldmia	r3, {r2, r3}
 80143a8:	6879      	ldr	r1, [r7, #4]
 80143aa:	f000 f85f 	bl	801446c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80143ae:	f107 0308 	add.w	r3, r7, #8
 80143b2:	4619      	mov	r1, r3
 80143b4:	4620      	mov	r0, r4
 80143b6:	f7ff ffcb 	bl	8014350 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80143ba:	f107 0308 	add.w	r3, r7, #8
 80143be:	4618      	mov	r0, r3
 80143c0:	f000 f976 	bl	80146b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80143d0:	bf00      	nop
 80143d2:	3724      	adds	r7, #36	; 0x24
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd90      	pop	{r4, r7, pc}
 80143d8:	080143dd 	.word	0x080143dd

080143dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b084      	sub	sp, #16
 80143e0:	af02      	add	r7, sp, #8
 80143e2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f503 7198 	add.w	r1, r3, #304	; 0x130
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80143f0:	461a      	mov	r2, r3
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80143f8:	9300      	str	r3, [sp, #0]
 80143fa:	4b04      	ldr	r3, [pc, #16]	; (801440c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80143fc:	4804      	ldr	r0, [pc, #16]	; (8014410 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80143fe:	f000 f855 	bl	80144ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8014402:	bf00      	nop
 8014404:	3708      	adds	r7, #8
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	20009dcc 	.word	0x20009dcc
 8014410:	20009dc8 	.word	0x20009dc8

08014414 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8014414:	b480      	push	{r7}
 8014416:	b083      	sub	sp, #12
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	4a04      	ldr	r2, [pc, #16]	; (8014430 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	601a      	str	r2, [r3, #0]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	4618      	mov	r0, r3
 8014426:	370c      	adds	r7, #12
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr
 8014430:	080206e0 	.word	0x080206e0

08014434 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 8014434:	b580      	push	{r7, lr}
 8014436:	b082      	sub	sp, #8
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	4618      	mov	r0, r3
 8014440:	f7ff ffe8 	bl	8014414 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8014444:	4a08      	ldr	r2, [pc, #32]	; (8014468 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	601a      	str	r2, [r3, #0]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2200      	movs	r2, #0
 801444e:	605a      	str	r2, [r3, #4]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2200      	movs	r2, #0
 8014454:	609a      	str	r2, [r3, #8]
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2200      	movs	r2, #0
 801445a:	60da      	str	r2, [r3, #12]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	4618      	mov	r0, r3
 8014460:	3708      	adds	r7, #8
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}
 8014466:	bf00      	nop
 8014468:	0802068c 	.word	0x0802068c

0801446c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 801446c:	b580      	push	{r7, lr}
 801446e:	b084      	sub	sp, #16
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	60b9      	str	r1, [r7, #8]
 8014476:	4639      	mov	r1, r7
 8014478:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	4618      	mov	r0, r3
 8014480:	f7ff ffc8 	bl	8014414 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8014484:	4a08      	ldr	r2, [pc, #32]	; (80144a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	68ba      	ldr	r2, [r7, #8]
 801448e:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	3308      	adds	r3, #8
 8014494:	463a      	mov	r2, r7
 8014496:	e892 0003 	ldmia.w	r2, {r0, r1}
 801449a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	4618      	mov	r0, r3
 80144a2:	3710      	adds	r7, #16
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	0802068c 	.word	0x0802068c

080144ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80144ac:	b590      	push	{r4, r7, lr}
 80144ae:	b089      	sub	sp, #36	; 0x24
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	60b9      	str	r1, [r7, #8]
 80144b6:	607a      	str	r2, [r7, #4]
 80144b8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	689a      	ldr	r2, [r3, #8]
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	689b      	ldr	r3, [r3, #8]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	3320      	adds	r3, #32
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	4610      	mov	r0, r2
 80144ca:	4798      	blx	r3
 80144cc:	4603      	mov	r3, r0
 80144ce:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 80144d2:	d205      	bcs.n	80144e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80144d4:	4b4d      	ldr	r3, [pc, #308]	; (801460c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 80144d6:	4a4e      	ldr	r2, [pc, #312]	; (8014610 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80144d8:	21c2      	movs	r1, #194	; 0xc2
 80144da:	484e      	ldr	r0, [pc, #312]	; (8014614 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80144dc:	f00a f9f6 	bl	801e8cc <__assert_func>
 80144e0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	685a      	ldr	r2, [r3, #4]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	685b      	ldr	r3, [r3, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	3320      	adds	r3, #32
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	4610      	mov	r0, r2
 80144f2:	4798      	blx	r3
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b0f      	cmp	r3, #15
 80144f8:	d805      	bhi.n	8014506 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80144fa:	4b47      	ldr	r3, [pc, #284]	; (8014618 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80144fc:	4a44      	ldr	r2, [pc, #272]	; (8014610 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80144fe:	21c3      	movs	r1, #195	; 0xc3
 8014500:	4844      	ldr	r0, [pc, #272]	; (8014614 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014502:	f00a f9e3 	bl	801e8cc <__assert_func>
 8014506:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	68da      	ldr	r2, [r3, #12]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	3320      	adds	r3, #32
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	4610      	mov	r0, r2
 8014518:	4798      	blx	r3
 801451a:	4603      	mov	r3, r0
 801451c:	2b0b      	cmp	r3, #11
 801451e:	d805      	bhi.n	801452c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8014520:	4b3e      	ldr	r3, [pc, #248]	; (801461c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8014522:	4a3b      	ldr	r2, [pc, #236]	; (8014610 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8014524:	21c4      	movs	r1, #196	; 0xc4
 8014526:	483b      	ldr	r0, [pc, #236]	; (8014614 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014528:	f00a f9d0 	bl	801e8cc <__assert_func>
 801452c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801452e:	683a      	ldr	r2, [r7, #0]
 8014530:	68b9      	ldr	r1, [r7, #8]
 8014532:	68f8      	ldr	r0, [r7, #12]
 8014534:	f7ff fdc9 	bl	80140ca <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	68db      	ldr	r3, [r3, #12]
 801453c:	2100      	movs	r1, #0
 801453e:	4618      	mov	r0, r3
 8014540:	f000 f86e 	bl	8014620 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8014544:	4603      	mov	r3, r0
 8014546:	4619      	mov	r1, r3
 8014548:	200c      	movs	r0, #12
 801454a:	f7ff fc21 	bl	8013d90 <_ZnwjPv>
 801454e:	4604      	mov	r4, r0
 8014550:	2c00      	cmp	r4, #0
 8014552:	d004      	beq.n	801455e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8014554:	4620      	mov	r0, r4
 8014556:	f7ff fe73 	bl	8014240 <_ZN8touchgfx12NoTransitionC1Ev>
 801455a:	4623      	mov	r3, r4
 801455c:	e000      	b.n	8014560 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801455e:	4623      	mov	r3, r4
 8014560:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	689b      	ldr	r3, [r3, #8]
 8014566:	2100      	movs	r1, #0
 8014568:	4618      	mov	r0, r3
 801456a:	f000 f86c 	bl	8014646 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801456e:	4603      	mov	r3, r0
 8014570:	4619      	mov	r1, r3
 8014572:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8014576:	f7ff fc0b 	bl	8013d90 <_ZnwjPv>
 801457a:	4604      	mov	r4, r0
 801457c:	2c00      	cmp	r4, #0
 801457e:	d004      	beq.n	801458a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8014580:	4620      	mov	r0, r4
 8014582:	f000 fd89 	bl	8015098 <_ZN11Screen1ViewC1Ev>
 8014586:	4623      	mov	r3, r4
 8014588:	e000      	b.n	801458c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801458a:	4623      	mov	r3, r4
 801458c:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	2100      	movs	r1, #0
 8014594:	4618      	mov	r0, r3
 8014596:	f000 f869 	bl	801466c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801459a:	4603      	mov	r3, r0
 801459c:	4619      	mov	r1, r3
 801459e:	2010      	movs	r0, #16
 80145a0:	f7ff fbf6 	bl	8013d90 <_ZnwjPv>
 80145a4:	4604      	mov	r4, r0
 80145a6:	2c00      	cmp	r4, #0
 80145a8:	d005      	beq.n	80145b6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 80145aa:	69b9      	ldr	r1, [r7, #24]
 80145ac:	4620      	mov	r0, r4
 80145ae:	f000 fd1b 	bl	8014fe8 <_ZN16Screen1PresenterC1ER11Screen1View>
 80145b2:	4623      	mov	r3, r4
 80145b4:	e000      	b.n	80145b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80145b6:	4623      	mov	r3, r4
 80145b8:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	69fa      	ldr	r2, [r7, #28]
 80145be:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	697a      	ldr	r2, [r7, #20]
 80145c4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	69ba      	ldr	r2, [r7, #24]
 80145ca:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d002      	beq.n	80145d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	3304      	adds	r3, #4
 80145d6:	e000      	b.n	80145da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80145d8:	2300      	movs	r3, #0
 80145da:	4619      	mov	r1, r3
 80145dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80145de:	f7ff fdf7 	bl	80141d0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	3304      	adds	r3, #4
 80145e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7ff fe6a 	bl	80142c2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80145ee:	69bb      	ldr	r3, [r7, #24]
 80145f0:	6979      	ldr	r1, [r7, #20]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f000 f84d 	bl	8014692 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80145f8:	69fa      	ldr	r2, [r7, #28]
 80145fa:	6979      	ldr	r1, [r7, #20]
 80145fc:	69b8      	ldr	r0, [r7, #24]
 80145fe:	f7ff fdc0 	bl	8014182 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8014602:	697b      	ldr	r3, [r7, #20]
}
 8014604:	4618      	mov	r0, r3
 8014606:	3724      	adds	r7, #36	; 0x24
 8014608:	46bd      	mov	sp, r7
 801460a:	bd90      	pop	{r4, r7, pc}
 801460c:	0801fc88 	.word	0x0801fc88
 8014610:	08020738 	.word	0x08020738
 8014614:	0801fd18 	.word	0x0801fd18
 8014618:	0801fd68 	.word	0x0801fd68
 801461c:	0801fe0c 	.word	0x0801fe0c

08014620 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	460b      	mov	r3, r1
 801462a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	3324      	adds	r3, #36	; 0x24
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	887a      	ldrh	r2, [r7, #2]
 8014636:	4611      	mov	r1, r2
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	4798      	blx	r3
 801463c:	4603      	mov	r3, r0
    }
 801463e:	4618      	mov	r0, r3
 8014640:	3708      	adds	r7, #8
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}

08014646 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8014646:	b580      	push	{r7, lr}
 8014648:	b082      	sub	sp, #8
 801464a:	af00      	add	r7, sp, #0
 801464c:	6078      	str	r0, [r7, #4]
 801464e:	460b      	mov	r3, r1
 8014650:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	3324      	adds	r3, #36	; 0x24
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	887a      	ldrh	r2, [r7, #2]
 801465c:	4611      	mov	r1, r2
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	4798      	blx	r3
 8014662:	4603      	mov	r3, r0
    }
 8014664:	4618      	mov	r0, r3
 8014666:	3708      	adds	r7, #8
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	460b      	mov	r3, r1
 8014676:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	3324      	adds	r3, #36	; 0x24
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	887a      	ldrh	r2, [r7, #2]
 8014682:	4611      	mov	r1, r2
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	4798      	blx	r3
 8014688:	4603      	mov	r3, r0
    }
 801468a:	4618      	mov	r0, r3
 801468c:	3708      	adds	r7, #8
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}

08014692 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8014692:	b480      	push	{r7}
 8014694:	b083      	sub	sp, #12
 8014696:	af00      	add	r7, sp, #0
 8014698:	6078      	str	r0, [r7, #4]
 801469a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	683a      	ldr	r2, [r7, #0]
 80146a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80146a2:	bf00      	nop
 80146a4:	370c      	adds	r7, #12
 80146a6:	46bd      	mov	sp, r7
 80146a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ac:	4770      	bx	lr
	...

080146b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	4a05      	ldr	r2, [pc, #20]	; (80146d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	601a      	str	r2, [r3, #0]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7ff fc41 	bl	8013f48 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	4618      	mov	r0, r3
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	0802068c 	.word	0x0802068c

080146d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7ff ffe7 	bl	80146b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80146e2:	2110      	movs	r1, #16
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f00a f8d4 	bl	801e892 <_ZdlPvj>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	4618      	mov	r0, r3
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	68d2      	ldr	r2, [r2, #12]
 8014704:	1052      	asrs	r2, r2, #1
 8014706:	1899      	adds	r1, r3, r2
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	68db      	ldr	r3, [r3, #12]
 801470c:	f003 0301 	and.w	r3, r3, #1
 8014710:	2b00      	cmp	r3, #0
 8014712:	d102      	bne.n	801471a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	689b      	ldr	r3, [r3, #8]
 8014718:	e00a      	b.n	8014730 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	687a      	ldr	r2, [r7, #4]
 8014720:	68d2      	ldr	r2, [r2, #12]
 8014722:	1052      	asrs	r2, r2, #1
 8014724:	4413      	add	r3, r2
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	6892      	ldr	r2, [r2, #8]
 801472c:	4413      	add	r3, r2
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	4608      	mov	r0, r1
 8014732:	4798      	blx	r3
    }
 8014734:	bf00      	nop
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d010      	beq.n	801476e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	689b      	ldr	r3, [r3, #8]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d107      	bne.n	8014764 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	f003 0301 	and.w	r3, r3, #1
 801475c:	2b00      	cmp	r3, #0
 801475e:	d101      	bne.n	8014764 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8014760:	2301      	movs	r3, #1
 8014762:	e000      	b.n	8014766 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8014764:	2300      	movs	r3, #0
 8014766:	2b01      	cmp	r3, #1
 8014768:	d001      	beq.n	801476e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801476a:	2301      	movs	r3, #1
 801476c:	e000      	b.n	8014770 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801476e:	2300      	movs	r3, #0
    }
 8014770:	4618      	mov	r0, r3
 8014772:	370c      	adds	r7, #12
 8014774:	46bd      	mov	sp, r7
 8014776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477a:	4770      	bx	lr

0801477c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	4a06      	ldr	r2, [pc, #24]	; (80147a0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	601a      	str	r2, [r3, #0]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	3304      	adds	r3, #4
 801478e:	4618      	mov	r0, r3
 8014790:	f7fa fd9a 	bl	800f2c8 <_ZN8touchgfx9ContainerD1Ev>
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	4618      	mov	r0, r3
 8014798:	3708      	adds	r7, #8
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}
 801479e:	bf00      	nop
 80147a0:	080218d0 	.word	0x080218d0

080147a4 <_ZN8touchgfx6ScreenD0Ev>:
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b082      	sub	sp, #8
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f7ff ffe5 	bl	801477c <_ZN8touchgfx6ScreenD1Ev>
 80147b2:	213c      	movs	r1, #60	; 0x3c
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f00a f86c 	bl	801e892 <_ZdlPvj>
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	4618      	mov	r0, r3
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}

080147c4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80147c4:	b480      	push	{r7}
 80147c6:	b083      	sub	sp, #12
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	bf00      	nop
 80147ce:	370c      	adds	r7, #12
 80147d0:	46bd      	mov	sp, r7
 80147d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d6:	4770      	bx	lr

080147d8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80147d8:	b480      	push	{r7}
 80147da:	b083      	sub	sp, #12
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	bf00      	nop
 80147e2:	370c      	adds	r7, #12
 80147e4:	46bd      	mov	sp, r7
 80147e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ea:	4770      	bx	lr

080147ec <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 80147ec:	b480      	push	{r7}
 80147ee:	b083      	sub	sp, #12
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	bf00      	nop
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8014800:	b480      	push	{r7}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
    {
    }
 8014808:	bf00      	nop
 801480a:	370c      	adds	r7, #12
 801480c:	46bd      	mov	sp, r7
 801480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014812:	4770      	bx	lr

08014814 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8014814:	b480      	push	{r7}
 8014816:	b083      	sub	sp, #12
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
 801481c:	460b      	mov	r3, r1
 801481e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8014820:	bf00      	nop
 8014822:	370c      	adds	r7, #12
 8014824:	46bd      	mov	sp, r7
 8014826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482a:	4770      	bx	lr

0801482c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801482c:	b580      	push	{r7, lr}
 801482e:	b082      	sub	sp, #8
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	3304      	adds	r3, #4
 801483a:	6839      	ldr	r1, [r7, #0]
 801483c:	4618      	mov	r0, r3
 801483e:	f7fa ffc1 	bl	800f7c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8014842:	bf00      	nop
 8014844:	3708      	adds	r7, #8
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
	...

0801484c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	4a05      	ldr	r2, [pc, #20]	; (801486c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	601a      	str	r2, [r3, #0]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	4618      	mov	r0, r3
 801485e:	f7ff ff8d 	bl	801477c <_ZN8touchgfx6ScreenD1Ev>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4618      	mov	r0, r3
 8014866:	3708      	adds	r7, #8
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}
 801486c:	08020878 	.word	0x08020878

08014870 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f7ff ffe7 	bl	801484c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801487e:	2140      	movs	r1, #64	; 0x40
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f00a f806 	bl	801e892 <_ZdlPvj>
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	4618      	mov	r0, r3
 801488a:	3708      	adds	r7, #8
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}

08014890 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	4a1b      	ldr	r2, [pc, #108]	; (8014908 <_ZN15Screen1ViewBaseD1Ev+0x78>)
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	601a      	str	r2, [r3, #0]
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7fb fbe3 	bl	8010070 <_ZN8touchgfx6ButtonD1Ev>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7fb fbdd 	bl	8010070 <_ZN8touchgfx6ButtonD1Ev>
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80148bc:	4618      	mov	r0, r3
 80148be:	f7fb fbd7 	bl	8010070 <_ZN8touchgfx6ButtonD1Ev>
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7fb fbd1 	bl	8010070 <_ZN8touchgfx6ButtonD1Ev>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	33d8      	adds	r3, #216	; 0xd8
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fb fbcc 	bl	8010070 <_ZN8touchgfx6ButtonD1Ev>
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	33a4      	adds	r3, #164	; 0xa4
 80148dc:	4618      	mov	r0, r3
 80148de:	f7fb fbc7 	bl	8010070 <_ZN8touchgfx6ButtonD1Ev>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	3370      	adds	r3, #112	; 0x70
 80148e6:	4618      	mov	r0, r3
 80148e8:	f7fb fbc2 	bl	8010070 <_ZN8touchgfx6ButtonD1Ev>
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	3340      	adds	r3, #64	; 0x40
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7fb fa77 	bl	800fde4 <_ZN8touchgfx3BoxD1Ev>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7ff ffa7 	bl	801484c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	4618      	mov	r0, r3
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	08020844 	.word	0x08020844

0801490c <_ZN15Screen1ViewBaseD0Ev>:
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f7ff ffbb 	bl	8014890 <_ZN15Screen1ViewBaseD1Ev>
 801491a:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f009 ffb7 	bl	801e892 <_ZdlPvj>
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	4618      	mov	r0, r3
 8014928:	3708      	adds	r7, #8
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
	...

08014930 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

Screen1ViewBase::Screen1ViewBase()
 8014930:	b590      	push	{r4, r7, lr}
 8014932:	b093      	sub	sp, #76	; 0x4c
 8014934:	af02      	add	r7, sp, #8
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	4618      	mov	r0, r3
 801493c:	f000 f970 	bl	8014c20 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8014940:	4ab1      	ldr	r2, [pc, #708]	; (8014c08 <_ZN15Screen1ViewBaseC1Ev+0x2d8>)
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	601a      	str	r2, [r3, #0]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	3340      	adds	r3, #64	; 0x40
 801494a:	4618      	mov	r0, r3
 801494c:	f7fb fa2a 	bl	800fda4 <_ZN8touchgfx3BoxC1Ev>
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	3370      	adds	r3, #112	; 0x70
 8014954:	4618      	mov	r0, r3
 8014956:	f7fb fb67 	bl	8010028 <_ZN8touchgfx6ButtonC1Ev>
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	33a4      	adds	r3, #164	; 0xa4
 801495e:	4618      	mov	r0, r3
 8014960:	f7fb fb62 	bl	8010028 <_ZN8touchgfx6ButtonC1Ev>
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	33d8      	adds	r3, #216	; 0xd8
 8014968:	4618      	mov	r0, r3
 801496a:	f7fb fb5d 	bl	8010028 <_ZN8touchgfx6ButtonC1Ev>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8014974:	4618      	mov	r0, r3
 8014976:	f7fb fb57 	bl	8010028 <_ZN8touchgfx6ButtonC1Ev>
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014980:	4618      	mov	r0, r3
 8014982:	f7fb fb51 	bl	8010028 <_ZN8touchgfx6ButtonC1Ev>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801498c:	4618      	mov	r0, r3
 801498e:	f7fb fb4b 	bl	8010028 <_ZN8touchgfx6ButtonC1Ev>
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014998:	4618      	mov	r0, r3
 801499a:	f7fb fb45 	bl	8010028 <_ZN8touchgfx6ButtonC1Ev>
{
    box1.setPosition(0, 0, 800, 480);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80149a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80149ae:	2200      	movs	r2, #0
 80149b0:	2100      	movs	r1, #0
 80149b2:	f7fa fb15 	bl	800efe0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(199, 142, 0));
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80149bc:	2200      	movs	r2, #0
 80149be:	218e      	movs	r1, #142	; 0x8e
 80149c0:	20c7      	movs	r0, #199	; 0xc7
 80149c2:	f7fb fa3f 	bl	800fe44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80149c6:	4603      	mov	r3, r0
 80149c8:	4619      	mov	r1, r3
 80149ca:	4620      	mov	r0, r4
 80149cc:	f7fb fa2c 	bl	800fe28 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(0, 0);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	3370      	adds	r3, #112	; 0x70
 80149d4:	2200      	movs	r2, #0
 80149d6:	2100      	movs	r1, #0
 80149d8:	4618      	mov	r0, r3
 80149da:	f7fa fb4c 	bl	800f076 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80149e4:	f107 0308 	add.w	r3, r7, #8
 80149e8:	2100      	movs	r1, #0
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7fa fac7 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 80149f0:	f107 030c 	add.w	r3, r7, #12
 80149f4:	2101      	movs	r1, #1
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7fa fac1 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 80149fc:	f107 020c 	add.w	r2, r7, #12
 8014a00:	f107 0308 	add.w	r3, r7, #8
 8014a04:	4619      	mov	r1, r3
 8014a06:	4620      	mov	r0, r4
 8014a08:	f7fb fcc6 	bl	8010398 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    button2.setXY(0, 0);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	33a4      	adds	r3, #164	; 0xa4
 8014a10:	2200      	movs	r2, #0
 8014a12:	2100      	movs	r1, #0
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7fa fb2e 	bl	800f076 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8014a20:	f107 0310 	add.w	r3, r7, #16
 8014a24:	2100      	movs	r1, #0
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7fa faa9 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014a2c:	f107 0314 	add.w	r3, r7, #20
 8014a30:	2101      	movs	r1, #1
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7fa faa3 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014a38:	f107 0214 	add.w	r2, r7, #20
 8014a3c:	f107 0310 	add.w	r3, r7, #16
 8014a40:	4619      	mov	r1, r3
 8014a42:	4620      	mov	r0, r4
 8014a44:	f7fb fca8 	bl	8010398 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    button3.setXY(630, 0);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	33d8      	adds	r3, #216	; 0xd8
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	f240 2176 	movw	r1, #630	; 0x276
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fa fb0f 	bl	800f076 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8014a5e:	f107 0318 	add.w	r3, r7, #24
 8014a62:	2100      	movs	r1, #0
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fa fa8a 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014a6a:	f107 031c 	add.w	r3, r7, #28
 8014a6e:	2101      	movs	r1, #1
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7fa fa84 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014a76:	f107 021c 	add.w	r2, r7, #28
 8014a7a:	f107 0318 	add.w	r3, r7, #24
 8014a7e:	4619      	mov	r1, r3
 8014a80:	4620      	mov	r0, r4
 8014a82:	f7fb fc89 	bl	8010398 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    button4.setXY(0, 0);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	2100      	movs	r1, #0
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7fa faf0 	bl	800f076 <_ZN8touchgfx8Drawable5setXYEss>
    button4.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8014a9c:	f107 0320 	add.w	r3, r7, #32
 8014aa0:	2100      	movs	r1, #0
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7fa fa6b 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014aac:	2101      	movs	r1, #1
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fa fa65 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014ab4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014ab8:	f107 0320 	add.w	r3, r7, #32
 8014abc:	4619      	mov	r1, r3
 8014abe:	4620      	mov	r0, r4
 8014ac0:	f7fb fc6a 	bl	8010398 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    button5.setXY(0, 420);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014aca:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8014ace:	2100      	movs	r1, #0
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7fa fad0 	bl	800f076 <_ZN8touchgfx8Drawable5setXYEss>
    button5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8014adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014ae0:	2100      	movs	r1, #0
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fa fa4b 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014aec:	2101      	movs	r1, #1
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7fa fa45 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014af4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014afc:	4619      	mov	r1, r3
 8014afe:	4620      	mov	r0, r4
 8014b00:	f7fb fc4a 	bl	8010398 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    button6.setXY(0, 0);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7fa fab1 	bl	800f076 <_ZN8touchgfx8Drawable5setXYEss>
    button6.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8014b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014b1e:	2100      	movs	r1, #0
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7fa fa2c 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014b2a:	2101      	movs	r1, #1
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7fa fa26 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014b32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f7fb fc2b 	bl	8010398 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    button7.setXY(630, 420);
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014b48:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8014b4c:	f240 2176 	movw	r1, #630	; 0x276
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7fa fa90 	bl	800f076 <_ZN8touchgfx8Drawable5setXYEss>
    button7.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8014b5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014b60:	2100      	movs	r1, #0
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7fa fa0b 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014b68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014b6c:	2101      	movs	r1, #1
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fa fa05 	bl	800ef7e <_ZN8touchgfx6BitmapC1Et>
 8014b74:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014b78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014b7c:	4619      	mov	r1, r3
 8014b7e:	4620      	mov	r0, r4
 8014b80:	f7fb fc0a 	bl	8010398 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    add(box1);
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	3340      	adds	r3, #64	; 0x40
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	4610      	mov	r0, r2
 8014b8e:	f7ff fe4d 	bl	801482c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	3370      	adds	r3, #112	; 0x70
 8014b98:	4619      	mov	r1, r3
 8014b9a:	4610      	mov	r0, r2
 8014b9c:	f7ff fe46 	bl	801482c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button2);
 8014ba0:	687a      	ldr	r2, [r7, #4]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	33a4      	adds	r3, #164	; 0xa4
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	4610      	mov	r0, r2
 8014baa:	f7ff fe3f 	bl	801482c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button3);
 8014bae:	687a      	ldr	r2, [r7, #4]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	33d8      	adds	r3, #216	; 0xd8
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	4610      	mov	r0, r2
 8014bb8:	f7ff fe38 	bl	801482c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button4);
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	4610      	mov	r0, r2
 8014bc8:	f7ff fe30 	bl	801482c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button5);
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	4610      	mov	r0, r2
 8014bd8:	f7ff fe28 	bl	801482c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button6);
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8014be4:	4619      	mov	r1, r3
 8014be6:	4610      	mov	r0, r2
 8014be8:	f7ff fe20 	bl	801482c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button7);
 8014bec:	687a      	ldr	r2, [r7, #4]
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014bf4:	4619      	mov	r1, r3
 8014bf6:	4610      	mov	r0, r2
 8014bf8:	f7ff fe18 	bl	801482c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3744      	adds	r7, #68	; 0x44
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd90      	pop	{r4, r7, pc}
 8014c06:	bf00      	nop
 8014c08:	08020844 	.word	0x08020844

08014c0c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8014c0c:	b480      	push	{r7}
 8014c0e:	b083      	sub	sp, #12
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]

}
 8014c14:	bf00      	nop
 8014c16:	370c      	adds	r7, #12
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1e:	4770      	bx	lr

08014c20 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f006 f9e6 	bl	801affc <_ZN8touchgfx6ScreenC1Ev>
 8014c30:	4a05      	ldr	r2, [pc, #20]	; (8014c48 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	601a      	str	r2, [r3, #0]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3708      	adds	r7, #8
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	bf00      	nop
 8014c48:	08020878 	.word	0x08020878

08014c4c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8014c50:	4b02      	ldr	r3, [pc, #8]	; (8014c5c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	46bd      	mov	sp, r7
 8014c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5a:	4770      	bx	lr
 8014c5c:	080208a4 	.word	0x080208a4

08014c60 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 8014c60:	b480      	push	{r7}
 8014c62:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014c64:	2302      	movs	r3, #2
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6e:	4770      	bx	lr

08014c70 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param data A reference to the TypedTextData storage array.
     * @param f    The fonts associated with the array.
     * @param n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8014c70:	b480      	push	{r7}
 8014c72:	b085      	sub	sp, #20
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	60f8      	str	r0, [r7, #12]
 8014c78:	60b9      	str	r1, [r7, #8]
 8014c7a:	4613      	mov	r3, r2
 8014c7c:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8014c7e:	4a07      	ldr	r2, [pc, #28]	; (8014c9c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	6013      	str	r3, [r2, #0]
        fonts = f;
 8014c84:	4a06      	ldr	r2, [pc, #24]	; (8014ca0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8014c8a:	4a06      	ldr	r2, [pc, #24]	; (8014ca4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8014c8c:	88fb      	ldrh	r3, [r7, #6]
 8014c8e:	8013      	strh	r3, [r2, #0]
    }
 8014c90:	bf00      	nop
 8014c92:	3714      	adds	r7, #20
 8014c94:	46bd      	mov	sp, r7
 8014c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9a:	4770      	bx	lr
 8014c9c:	20009dd4 	.word	0x20009dd4
 8014ca0:	20009ddc 	.word	0x20009ddc
 8014ca4:	20009dd8 	.word	0x20009dd8

08014ca8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014ca8:	b590      	push	{r4, r7, lr}
 8014caa:	b085      	sub	sp, #20
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	4603      	mov	r3, r0
 8014cb0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014cb6:	88fb      	ldrh	r3, [r7, #6]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d127      	bne.n	8014d0c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014cbc:	88fb      	ldrh	r3, [r7, #6]
 8014cbe:	4a1e      	ldr	r2, [pc, #120]	; (8014d38 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d016      	beq.n	8014cf6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014cc8:	88fb      	ldrh	r3, [r7, #6]
 8014cca:	4a1b      	ldr	r2, [pc, #108]	; (8014d38 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cd0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	68ba      	ldr	r2, [r7, #8]
 8014cd8:	4413      	add	r3, r2
 8014cda:	4a18      	ldr	r2, [pc, #96]	; (8014d3c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014cdc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	68ba      	ldr	r2, [r7, #8]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	4a16      	ldr	r2, [pc, #88]	; (8014d40 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014ce8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	689b      	ldr	r3, [r3, #8]
 8014cee:	68ba      	ldr	r2, [r7, #8]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	60fb      	str	r3, [r7, #12]
 8014cf4:	e00a      	b.n	8014d0c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8014cf6:	4b11      	ldr	r3, [pc, #68]	; (8014d3c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014cf8:	4a12      	ldr	r2, [pc, #72]	; (8014d44 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8014cfa:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	4b10      	ldr	r3, [pc, #64]	; (8014d40 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014d00:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8014d02:	88fb      	ldrh	r3, [r7, #6]
 8014d04:	4a10      	ldr	r2, [pc, #64]	; (8014d48 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8014d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d0a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d00d      	beq.n	8014d2e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8014d12:	4a0e      	ldr	r2, [pc, #56]	; (8014d4c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8014d14:	88fb      	ldrh	r3, [r7, #6]
 8014d16:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8014d18:	f000 f822 	bl	8014d60 <_ZN17TypedTextDatabase8getFontsEv>
 8014d1c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8014d1e:	f000 f817 	bl	8014d50 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8014d22:	4603      	mov	r3, r0
 8014d24:	461a      	mov	r2, r3
 8014d26:	4621      	mov	r1, r4
 8014d28:	68f8      	ldr	r0, [r7, #12]
 8014d2a:	f7ff ffa1 	bl	8014c70 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8014d2e:	bf00      	nop
 8014d30:	3714      	adds	r7, #20
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd90      	pop	{r4, r7, pc}
 8014d36:	bf00      	nop
 8014d38:	20008ab4 	.word	0x20008ab4
 8014d3c:	20008abc 	.word	0x20008abc
 8014d40:	20008ac0 	.word	0x20008ac0
 8014d44:	08036b98 	.word	0x08036b98
 8014d48:	08036ba0 	.word	0x08036ba0
 8014d4c:	20008ab8 	.word	0x20008ab8

08014d50 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014d50:	b480      	push	{r7}
 8014d52:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014d54:	2301      	movs	r3, #1
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014d60:	b480      	push	{r7}
 8014d62:	af00      	add	r7, sp, #0
    return _fonts;
 8014d64:	4b02      	ldr	r3, [pc, #8]	; (8014d70 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6e:	4770      	bx	lr
 8014d70:	20008ac4 	.word	0x20008ac4

08014d74 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	6039      	str	r1, [r7, #0]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2b01      	cmp	r3, #1
 8014d82:	d113      	bne.n	8014dac <_Z41__static_initialization_and_destruction_0ii+0x38>
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d10e      	bne.n	8014dac <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8014d8e:	f7fe ff83 	bl	8013c98 <_Z23getFont_verdana_20_4bppv>
 8014d92:	4602      	mov	r2, r0
};
 8014d94:	4b07      	ldr	r3, [pc, #28]	; (8014db4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014d96:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8014d98:	f7fe ffc0 	bl	8013d1c <_Z23getFont_verdana_40_4bppv>
 8014d9c:	4602      	mov	r2, r0
};
 8014d9e:	4b05      	ldr	r3, [pc, #20]	; (8014db4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014da0:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 8014da2:	f7fe ff37 	bl	8013c14 <_Z23getFont_verdana_10_4bppv>
 8014da6:	4602      	mov	r2, r0
};
 8014da8:	4b02      	ldr	r3, [pc, #8]	; (8014db4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014daa:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 8014dac:	bf00      	nop
 8014dae:	3708      	adds	r7, #8
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	20008ac4 	.word	0x20008ac4

08014db8 <_GLOBAL__sub_I__fonts>:
 8014db8:	b580      	push	{r7, lr}
 8014dba:	af00      	add	r7, sp, #0
 8014dbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014dc0:	2001      	movs	r0, #1
 8014dc2:	f7ff ffd7 	bl	8014d74 <_Z41__static_initialization_and_destruction_0ii>
 8014dc6:	bd80      	pop	{r7, pc}

08014dc8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	4a05      	ldr	r2, [pc, #20]	; (8014de8 <_ZN19FrontendApplicationD1Ev+0x20>)
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	601a      	str	r2, [r3, #0]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7ff fa07 	bl	80141ec <_ZN23FrontendApplicationBaseD1Ev>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	4618      	mov	r0, r3
 8014de2:	3708      	adds	r7, #8
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}
 8014de8:	080208d4 	.word	0x080208d4

08014dec <_ZN19FrontendApplicationD0Ev>:
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f7ff ffe7 	bl	8014dc8 <_ZN19FrontendApplicationD1Ev>
 8014dfa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f009 fd47 	bl	801e892 <_ZdlPvj>
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	4618      	mov	r0, r3
 8014e08:	3708      	adds	r7, #8
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}

08014e0e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8014e0e:	b580      	push	{r7, lr}
 8014e10:	b082      	sub	sp, #8
 8014e12:	af00      	add	r7, sp, #0
 8014e14:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f000 f82d 	bl	8014e7c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	4618      	mov	r0, r3
 8014e26:	f005 f8db 	bl	8019fe0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014e2a:	bf00      	nop
 8014e2c:	3708      	adds	r7, #8
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
	...

08014e34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	60f8      	str	r0, [r7, #12]
 8014e3c:	60b9      	str	r1, [r7, #8]
 8014e3e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	68b9      	ldr	r1, [r7, #8]
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7ff fa4a 	bl	80142e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8014e4c:	4a03      	ldr	r2, [pc, #12]	; (8014e5c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	601a      	str	r2, [r3, #0]
{
}
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	4618      	mov	r0, r3
 8014e56:	3710      	adds	r7, #16
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	080208d4 	.word	0x080208d4

08014e60 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8014e60:	b480      	push	{r7}
 8014e62:	b083      	sub	sp, #12
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	601a      	str	r2, [r3, #0]
{
}
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	4618      	mov	r0, r3
 8014e72:	370c      	adds	r7, #12
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr

08014e7c <_ZN5Model4tickEv>:

void Model::tick()
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	b083      	sub	sp, #12
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
}
 8014e84:	bf00      	nop
 8014e86:	370c      	adds	r7, #12
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8e:	4770      	bx	lr

08014e90 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014e90:	b480      	push	{r7}
 8014e92:	b083      	sub	sp, #12
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
    {
    }
 8014e98:	bf00      	nop
 8014e9a:	370c      	adds	r7, #12
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea2:	4770      	bx	lr

08014ea4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014ea4:	b480      	push	{r7}
 8014ea6:	b083      	sub	sp, #12
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
    {
    }
 8014eac:	bf00      	nop
 8014eae:	370c      	adds	r7, #12
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb6:	4770      	bx	lr

08014eb8 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8014eb8:	b480      	push	{r7}
 8014eba:	b083      	sub	sp, #12
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
    {
 8014ec0:	4a04      	ldr	r2, [pc, #16]	; (8014ed4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	601a      	str	r2, [r3, #0]
    }
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	370c      	adds	r7, #12
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed2:	4770      	bx	lr
 8014ed4:	08020948 	.word	0x08020948

08014ed8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
    }
 8014ee0:	6878      	ldr	r0, [r7, #4]
 8014ee2:	f7ff ffe9 	bl	8014eb8 <_ZN8touchgfx9PresenterD1Ev>
 8014ee6:	2104      	movs	r1, #4
 8014ee8:	6878      	ldr	r0, [r7, #4]
 8014eea:	f009 fcd2 	bl	801e892 <_ZdlPvj>
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	3708      	adds	r7, #8
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}

08014ef8 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8014ef8:	b480      	push	{r7}
 8014efa:	b083      	sub	sp, #12
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
    {
 8014f00:	4a04      	ldr	r2, [pc, #16]	; (8014f14 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	601a      	str	r2, [r3, #0]
    }
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	4618      	mov	r0, r3
 8014f0a:	370c      	adds	r7, #12
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f12:	4770      	bx	lr
 8014f14:	08020948 	.word	0x08020948

08014f18 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	4a06      	ldr	r2, [pc, #24]	; (8014f3c <_ZN13ModelListenerC1Ev+0x24>)
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	601a      	str	r2, [r3, #0]
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	605a      	str	r2, [r3, #4]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	4618      	mov	r0, r3
 8014f30:	370c      	adds	r7, #12
 8014f32:	46bd      	mov	sp, r7
 8014f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	08020938 	.word	0x08020938

08014f40 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8014f40:	b480      	push	{r7}
 8014f42:	b083      	sub	sp, #12
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
 8014f48:	4a04      	ldr	r2, [pc, #16]	; (8014f5c <_ZN13ModelListenerD1Ev+0x1c>)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	601a      	str	r2, [r3, #0]
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	4618      	mov	r0, r3
 8014f52:	370c      	adds	r7, #12
 8014f54:	46bd      	mov	sp, r7
 8014f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5a:	4770      	bx	lr
 8014f5c:	08020938 	.word	0x08020938

08014f60 <_ZN13ModelListenerD0Ev>:
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f7ff ffe9 	bl	8014f40 <_ZN13ModelListenerD1Ev>
 8014f6e:	2108      	movs	r1, #8
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f009 fc8e 	bl	801e892 <_ZdlPvj>
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	4a09      	ldr	r2, [pc, #36]	; (8014fb0 <_ZN16Screen1PresenterD1Ev+0x30>)
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	601a      	str	r2, [r3, #0]
 8014f8e:	4a09      	ldr	r2, [pc, #36]	; (8014fb4 <_ZN16Screen1PresenterD1Ev+0x34>)
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	605a      	str	r2, [r3, #4]
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	3304      	adds	r3, #4
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f7ff ffd1 	bl	8014f40 <_ZN13ModelListenerD1Ev>
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f7ff ff89 	bl	8014eb8 <_ZN8touchgfx9PresenterD1Ev>
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3708      	adds	r7, #8
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}
 8014fb0:	08020910 	.word	0x08020910
 8014fb4:	08020928 	.word	0x08020928

08014fb8 <_ZThn4_N16Screen1PresenterD1Ev>:
 8014fb8:	f1a0 0004 	sub.w	r0, r0, #4
 8014fbc:	e7e0      	b.n	8014f80 <_ZN16Screen1PresenterD1Ev>
 8014fbe:	bf00      	nop

08014fc0 <_ZN16Screen1PresenterD0Ev>:
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f7ff ffd9 	bl	8014f80 <_ZN16Screen1PresenterD1Ev>
 8014fce:	2110      	movs	r1, #16
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f009 fc5e 	bl	801e892 <_ZdlPvj>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <_ZThn4_N16Screen1PresenterD0Ev>:
 8014fe0:	f1a0 0004 	sub.w	r0, r0, #4
 8014fe4:	e7ec      	b.n	8014fc0 <_ZN16Screen1PresenterD0Ev>
	...

08014fe8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b082      	sub	sp, #8
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	6039      	str	r1, [r7, #0]
    : view(v)
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7ff ff7f 	bl	8014ef8 <_ZN8touchgfx9PresenterC1Ev>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	3304      	adds	r3, #4
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7ff ff8a 	bl	8014f18 <_ZN13ModelListenerC1Ev>
 8015004:	4a06      	ldr	r2, [pc, #24]	; (8015020 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	601a      	str	r2, [r3, #0]
 801500a:	4a06      	ldr	r2, [pc, #24]	; (8015024 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	605a      	str	r2, [r3, #4]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	683a      	ldr	r2, [r7, #0]
 8015014:	60da      	str	r2, [r3, #12]
{
}
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	4618      	mov	r0, r3
 801501a:	3708      	adds	r7, #8
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}
 8015020:	08020910 	.word	0x08020910
 8015024:	08020928 	.word	0x08020928

08015028 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8015028:	b480      	push	{r7}
 801502a:	b083      	sub	sp, #12
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]

}
 8015030:	bf00      	nop
 8015032:	370c      	adds	r7, #12
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr

0801503c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801503c:	b480      	push	{r7}
 801503e:	b083      	sub	sp, #12
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]

}
 8015044:	bf00      	nop
 8015046:	370c      	adds	r7, #12
 8015048:	46bd      	mov	sp, r7
 801504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504e:	4770      	bx	lr

08015050 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	4a05      	ldr	r2, [pc, #20]	; (8015070 <_ZN11Screen1ViewD1Ev+0x20>)
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	601a      	str	r2, [r3, #0]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4618      	mov	r0, r3
 8015062:	f7ff fc15 	bl	8014890 <_ZN15Screen1ViewBaseD1Ev>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	08020960 	.word	0x08020960

08015074 <_ZN11Screen1ViewD0Ev>:
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f7ff ffe7 	bl	8015050 <_ZN11Screen1ViewD1Ev>
 8015082:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f009 fc03 	bl	801e892 <_ZdlPvj>
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	4618      	mov	r0, r3
 8015090:	3708      	adds	r7, #8
 8015092:	46bd      	mov	sp, r7
 8015094:	bd80      	pop	{r7, pc}
	...

08015098 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8015098:	b580      	push	{r7, lr}
 801509a:	b082      	sub	sp, #8
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7ff fc44 	bl	8014930 <_ZN15Screen1ViewBaseC1Ev>
 80150a8:	4a03      	ldr	r2, [pc, #12]	; (80150b8 <_ZN11Screen1ViewC1Ev+0x20>)
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	601a      	str	r2, [r3, #0]
{

}
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	4618      	mov	r0, r3
 80150b2:	3708      	adds	r7, #8
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	08020960 	.word	0x08020960

080150bc <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7ff fda0 	bl	8014c0c <_ZN15Screen1ViewBase11setupScreenEv>
}
 80150cc:	bf00      	nop
 80150ce:	3708      	adds	r7, #8
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b082      	sub	sp, #8
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	4618      	mov	r0, r3
 80150e0:	f7ff fb84 	bl	80147ec <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80150e4:	bf00      	nop
 80150e6:	3708      	adds	r7, #8
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80150ec:	b480      	push	{r7}
 80150ee:	b083      	sub	sp, #12
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	801a      	strh	r2, [r3, #0]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2200      	movs	r2, #0
 80150fe:	805a      	strh	r2, [r3, #2]
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2200      	movs	r2, #0
 8015104:	809a      	strh	r2, [r3, #4]
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2200      	movs	r2, #0
 801510a:	80da      	strh	r2, [r3, #6]
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2200      	movs	r2, #0
 8015110:	811a      	strh	r2, [r3, #8]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	2200      	movs	r2, #0
 8015116:	815a      	strh	r2, [r3, #10]
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2200      	movs	r2, #0
 801511c:	819a      	strh	r2, [r3, #12]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2200      	movs	r2, #0
 8015122:	739a      	strb	r2, [r3, #14]
        {
        }
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	4618      	mov	r0, r3
 8015128:	370c      	adds	r7, #12
 801512a:	46bd      	mov	sp, r7
 801512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015130:	4770      	bx	lr

08015132 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8015132:	b580      	push	{r7, lr}
 8015134:	b082      	sub	sp, #8
 8015136:	af00      	add	r7, sp, #0
 8015138:	6078      	str	r0, [r7, #4]
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	4618      	mov	r0, r3
 801513e:	f7ff ffd5 	bl	80150ec <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2200      	movs	r2, #0
 8015146:	611a      	str	r2, [r3, #16]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	2200      	movs	r2, #0
 801514c:	829a      	strh	r2, [r3, #20]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	4618      	mov	r0, r3
 8015152:	3708      	adds	r7, #8
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8015158:	b480      	push	{r7}
 801515a:	b083      	sub	sp, #12
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
    {
 8015160:	4a04      	ldr	r2, [pc, #16]	; (8015174 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	601a      	str	r2, [r3, #0]
    }
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	4618      	mov	r0, r3
 801516a:	370c      	adds	r7, #12
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr
 8015174:	08020a90 	.word	0x08020a90

08015178 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
    }
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f7ff ffe9 	bl	8015158 <_ZN8touchgfx3LCDD1Ev>
 8015186:	2104      	movs	r1, #4
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f009 fb82 	bl	801e892 <_ZdlPvj>
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	4618      	mov	r0, r3
 8015192:	3708      	adds	r7, #8
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}

08015198 <_ZN8touchgfx3LCD4initEv>:
     *
     * @brief Performs initialization.
     *
     *        Performs initialization.
     */
    virtual void init()
 8015198:	b480      	push	{r7}
 801519a:	b083      	sub	sp, #12
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
    {
    }
 80151a0:	bf00      	nop
 80151a2:	370c      	adds	r7, #12
 80151a4:	46bd      	mov	sp, r7
 80151a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151aa:	4770      	bx	lr

080151ac <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 80151ac:	b480      	push	{r7}
 80151ae:	b083      	sub	sp, #12
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 80151b4:	4a07      	ldr	r2, [pc, #28]	; (80151d4 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	601a      	str	r2, [r3, #0]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2200      	movs	r2, #0
 80151be:	605a      	str	r2, [r3, #4]
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2200      	movs	r2, #0
 80151c4:	609a      	str	r2, [r3, #8]
    {
    }
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	4618      	mov	r0, r3
 80151ca:	370c      	adds	r7, #12
 80151cc:	46bd      	mov	sp, r7
 80151ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d2:	4770      	bx	lr
 80151d4:	08020a68 	.word	0x08020a68

080151d8 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 80151d8:	b480      	push	{r7}
 80151da:	b083      	sub	sp, #12
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
 80151e0:	4a04      	ldr	r2, [pc, #16]	; (80151f4 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	601a      	str	r2, [r3, #0]
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	4618      	mov	r0, r3
 80151ea:	370c      	adds	r7, #12
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr
 80151f4:	08020a68 	.word	0x08020a68

080151f8 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f7ff ffe9 	bl	80151d8 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8015206:	210c      	movs	r1, #12
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	f009 fb42 	bl	801e892 <_ZdlPvj>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	4618      	mov	r0, r3
 8015212:	3708      	adds	r7, #8
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}

08015218 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8015218:	b580      	push	{r7, lr}
 801521a:	b084      	sub	sp, #16
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	460b      	mov	r3, r1
 8015222:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 8015224:	78fb      	ldrb	r3, [r7, #3]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d011      	beq.n	801524e <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	3310      	adds	r3, #16
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	4798      	blx	r3
 8015236:	4602      	mov	r2, r0
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	689b      	ldr	r3, [r3, #8]
 801523c:	1ad3      	subs	r3, r2, r3
 801523e:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	685a      	ldr	r2, [r3, #4]
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	441a      	add	r2, r3
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 801524c:	e008      	b.n	8015260 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	3310      	adds	r3, #16
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	6878      	ldr	r0, [r7, #4]
 8015258:	4798      	blx	r3
 801525a:	4602      	mov	r2, r0
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	609a      	str	r2, [r3, #8]
    }
 8015260:	bf00      	nop
 8015262:	3710      	adds	r7, #16
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}

08015268 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 8015268:	b480      	push	{r7}
 801526a:	b083      	sub	sp, #12
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	685b      	ldr	r3, [r3, #4]
    }
 8015274:	4618      	mov	r0, r3
 8015276:	370c      	adds	r7, #12
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr

08015280 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 8015280:	b480      	push	{r7}
 8015282:	b083      	sub	sp, #12
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	683a      	ldr	r2, [r7, #0]
 801528e:	605a      	str	r2, [r3, #4]
    }
 8015290:	bf00      	nop
 8015292:	370c      	adds	r7, #12
 8015294:	46bd      	mov	sp, r7
 8015296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529a:	4770      	bx	lr

0801529c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 801529c:	b580      	push	{r7, lr}
 801529e:	b084      	sub	sp, #16
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	60f8      	str	r0, [r7, #12]
 80152a4:	60b9      	str	r1, [r7, #8]
 80152a6:	607a      	str	r2, [r7, #4]
 80152a8:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 80152aa:	4a44      	ldr	r2, [pc, #272]	; (80153bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	601a      	str	r2, [r3, #0]
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	68ba      	ldr	r2, [r7, #8]
 80152b4:	605a      	str	r2, [r3, #4]
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	687a      	ldr	r2, [r7, #4]
 80152ba:	609a      	str	r2, [r3, #8]
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	683a      	ldr	r2, [r7, #0]
 80152c0:	60da      	str	r2, [r3, #12]
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	2200      	movs	r2, #0
 80152c6:	611a      	str	r2, [r3, #16]
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2200      	movs	r2, #0
 80152cc:	615a      	str	r2, [r3, #20]
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2200      	movs	r2, #0
 80152d2:	619a      	str	r2, [r3, #24]
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	331c      	adds	r3, #28
 80152d8:	4618      	mov	r0, r3
 80152da:	f7ff ff2a 	bl	8015132 <_ZN8touchgfx8GesturesC1Ev>
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	2200      	movs	r2, #0
 80152e2:	639a      	str	r2, [r3, #56]	; 0x38
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	2200      	movs	r2, #0
 80152e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	2200      	movs	r2, #0
 80152ee:	641a      	str	r2, [r3, #64]	; 0x40
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	2200      	movs	r2, #0
 80152f4:	645a      	str	r2, [r3, #68]	; 0x44
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2200      	movs	r2, #0
 80152fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2201      	movs	r2, #1
 8015302:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2201      	movs	r2, #1
 801530a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2200      	movs	r2, #0
 8015312:	64da      	str	r2, [r3, #76]	; 0x4c
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	3350      	adds	r3, #80	; 0x50
 8015318:	4618      	mov	r0, r3
 801531a:	f7f9 fe19 	bl	800ef50 <_ZN8touchgfx4RectC1Ev>
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	2201      	movs	r2, #1
 8015322:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	2200      	movs	r2, #0
 801532a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	2200      	movs	r2, #0
 8015332:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	2201      	movs	r2, #1
 801533a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2200      	movs	r2, #0
 8015342:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	2200      	movs	r2, #0
 801534a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	2200      	movs	r2, #0
 8015352:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	2200      	movs	r2, #0
 801535a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	2200      	movs	r2, #0
 8015362:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	2200      	movs	r2, #0
 801536a:	671a      	str	r2, [r3, #112]	; 0x70
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2200      	movs	r2, #0
 8015370:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8015374:	4a12      	ldr	r2, [pc, #72]	; (80153c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801537a:	4a12      	ldr	r2, [pc, #72]	; (80153c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801537c:	8b3b      	ldrh	r3, [r7, #24]
 801537e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8015380:	4a11      	ldr	r2, [pc, #68]	; (80153c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8015382:	8bbb      	ldrh	r3, [r7, #28]
 8015384:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8015386:	4b11      	ldr	r3, [pc, #68]	; (80153cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8015388:	2200      	movs	r2, #0
 801538a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801538c:	4b0d      	ldr	r3, [pc, #52]	; (80153c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801538e:	881a      	ldrh	r2, [r3, #0]
 8015390:	4b0f      	ldr	r3, [pc, #60]	; (80153d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8015392:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8015394:	4b0c      	ldr	r3, [pc, #48]	; (80153c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8015396:	881a      	ldrh	r2, [r3, #0]
 8015398:	4b0e      	ldr	r3, [pc, #56]	; (80153d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801539a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801539c:	8b3a      	ldrh	r2, [r7, #24]
 801539e:	8bbb      	ldrh	r3, [r7, #28]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d301      	bcc.n	80153a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 80153a4:	2200      	movs	r2, #0
 80153a6:	e000      	b.n	80153aa <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 80153a8:	2201      	movs	r2, #1
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	4618      	mov	r0, r3
 80153b4:	3710      	adds	r7, #16
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	bf00      	nop
 80153bc:	080210c4 	.word	0x080210c4
 80153c0:	20009d70 	.word	0x20009d70
 80153c4:	20009d62 	.word	0x20009d62
 80153c8:	20009d64 	.word	0x20009d64
 80153cc:	20009d66 	.word	0x20009d66
 80153d0:	20009d68 	.word	0x20009d68
 80153d4:	20009d6a 	.word	0x20009d6a

080153d8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 80153d8:	b480      	push	{r7}
 80153da:	b083      	sub	sp, #12
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	4a04      	ldr	r2, [pc, #16]	; (80153f4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	601a      	str	r2, [r3, #0]
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	4618      	mov	r0, r3
 80153ea:	370c      	adds	r7, #12
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr
 80153f4:	080210c4 	.word	0x080210c4

080153f8 <_ZN8touchgfx3HALD0Ev>:
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f7ff ffe9 	bl	80153d8 <_ZN8touchgfx3HALD1Ev>
 8015406:	2178      	movs	r1, #120	; 0x78
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f009 fa42 	bl	801e892 <_ZdlPvj>
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	4618      	mov	r0, r3
 8015412:	3708      	adds	r7, #8
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	460b      	mov	r3, r1
 8015422:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	78fa      	ldrb	r2, [r7, #3]
 8015428:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 801542c:	bf00      	nop
 801542e:	370c      	adds	r7, #12
 8015430:	46bd      	mov	sp, r7
 8015432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015436:	4770      	bx	lr

08015438 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
     *
     *        Enables or disables compensation for lost frames. See knowledge base article.
     *
     * @param enabled true to enable, false to disable.
     */
    void setFrameRateCompensation(bool enabled)
 8015438:	b480      	push	{r7}
 801543a:	b083      	sub	sp, #12
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	460b      	mov	r3, r1
 8015442:	70fb      	strb	r3, [r7, #3]
    {
        vSyncCompensationEnabled = enabled;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	78fa      	ldrb	r2, [r7, #3]
 8015448:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    };
 801544c:	bf00      	nop
 801544e:	370c      	adds	r7, #12
 8015450:	46bd      	mov	sp, r7
 8015452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015456:	4770      	bx	lr

08015458 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
     *
     *        Sets the number of ticks between each touch screen sample.
     *
     * @param sampleRateInTicks Sample rate. Default is 1 (every tick).
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
 8015458:	b480      	push	{r7}
 801545a:	b083      	sub	sp, #12
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	460b      	mov	r3, r1
 8015462:	70fb      	strb	r3, [r7, #3]
    {
        if (sampleRateInTicks > 0)
 8015464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015468:	2b00      	cmp	r3, #0
 801546a:	dd03      	ble.n	8015474 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
        {
            touchSampleRate = sampleRateInTicks;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	78fa      	ldrb	r2, [r7, #3]
 8015470:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }
    }
 8015474:	bf00      	nop
 8015476:	370c      	adds	r7, #12
 8015478:	46bd      	mov	sp, r7
 801547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547e:	4770      	bx	lr

08015480 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
     *
     *        Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8015480:	b480      	push	{r7}
 8015482:	b083      	sub	sp, #12
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	683a      	ldr	r2, [r7, #0]
 801548e:	611a      	str	r2, [r3, #16]
    }
 8015490:	bf00      	nop
 8015492:	370c      	adds	r7, #12
 8015494:	46bd      	mov	sp, r7
 8015496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549a:	4770      	bx	lr

0801549c <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     *        This method sets a flag that determines if generic HAL should calculate MCU load
     *        based on concrete MCU instrumentation.
     *
     * @param enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 801549c:	b480      	push	{r7}
 801549e:	b083      	sub	sp, #12
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
 80154a4:	460b      	mov	r3, r1
 80154a6:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	78fa      	ldrb	r2, [r7, #3]
 80154ac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 80154b0:	bf00      	nop
 80154b2:	370c      	adds	r7, #12
 80154b4:	46bd      	mov	sp, r7
 80154b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ba:	4770      	bx	lr

080154bc <_ZN8touchgfx3HAL13setFingerSizeEh>:
     *        algorithm will consider the size of the drawable and the distance from the touch
     *        point.
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
 80154bc:	b480      	push	{r7}
 80154be:	b083      	sub	sp, #12
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	460b      	mov	r3, r1
 80154c6:	70fb      	strb	r3, [r7, #3]
    {
        fingerSize = size;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	78fa      	ldrb	r2, [r7, #3]
 80154cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
 80154d0:	bf00      	nop
 80154d2:	370c      	adds	r7, #12
 80154d4:	46bd      	mov	sp, r7
 80154d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154da:	4770      	bx	lr

080154dc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     *
     *        Registers an array of texts.
     *
     * @param t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80154dc:	b480      	push	{r7}
 80154de:	b083      	sub	sp, #12
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80154e4:	4a04      	ldr	r2, [pc, #16]	; (80154f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	6013      	str	r3, [r2, #0]
    }
 80154ea:	bf00      	nop
 80154ec:	370c      	adds	r7, #12
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr
 80154f6:	bf00      	nop
 80154f8:	20009de0 	.word	0x20009de0

080154fc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80154fc:	b480      	push	{r7}
 80154fe:	b085      	sub	sp, #20
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
 8015508:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801550a:	4a0b      	ldr	r2, [pc, #44]	; (8015538 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	601a      	str	r2, [r3, #0]
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	68ba      	ldr	r2, [r7, #8]
 8015514:	605a      	str	r2, [r3, #4]
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	687a      	ldr	r2, [r7, #4]
 801551a:	609a      	str	r2, [r3, #8]
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	683a      	ldr	r2, [r7, #0]
 8015520:	60da      	str	r2, [r3, #12]
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	69ba      	ldr	r2, [r7, #24]
 8015526:	611a      	str	r2, [r3, #16]
    {
    }
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	4618      	mov	r0, r3
 801552c:	3714      	adds	r7, #20
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr
 8015536:	bf00      	nop
 8015538:	08020a58 	.word	0x08020a58

0801553c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801553c:	b480      	push	{r7}
 801553e:	b083      	sub	sp, #12
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
    {
 8015544:	4a04      	ldr	r2, [pc, #16]	; (8015558 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	601a      	str	r2, [r3, #0]
    }
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	4618      	mov	r0, r3
 801554e:	370c      	adds	r7, #12
 8015550:	46bd      	mov	sp, r7
 8015552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015556:	4770      	bx	lr
 8015558:	08020a58 	.word	0x08020a58

0801555c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801555c:	b580      	push	{r7, lr}
 801555e:	b082      	sub	sp, #8
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
    }
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f7ff ffe9 	bl	801553c <_ZN8touchgfx7MVPHeapD1Ev>
 801556a:	2114      	movs	r1, #20
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f009 f990 	bl	801e892 <_ZdlPvj>
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	4618      	mov	r0, r3
 8015576:	3708      	adds	r7, #8
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	4618      	mov	r0, r3
 801558a:	f7fe fefd 	bl	8014388 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801558e:	bf00      	nop
 8015590:	3708      	adds	r7, #8
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
	...

08015598 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015598:	b580      	push	{r7, lr}
 801559a:	b086      	sub	sp, #24
 801559c:	af02      	add	r7, sp, #8
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
 80155a4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80155a6:	68f8      	ldr	r0, [r7, #12]
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	9300      	str	r3, [sp, #0]
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	687a      	ldr	r2, [r7, #4]
 80155b0:	68b9      	ldr	r1, [r7, #8]
 80155b2:	f7ff ffa3 	bl	80154fc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80155b6:	4a04      	ldr	r2, [pc, #16]	; (80155c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	601a      	str	r2, [r3, #0]
    {

    }
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	4618      	mov	r0, r3
 80155c0:	3710      	adds	r7, #16
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	bf00      	nop
 80155c8:	08020a44 	.word	0x08020a44

080155cc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80155cc:	b580      	push	{r7, lr}
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	4801      	ldr	r0, [pc, #4]	; (80155d8 <__tcf_0+0xc>)
 80155d2:	f000 fb7f 	bl	8015cd4 <_ZN12FrontendHeapD1Ev>
 80155d6:	bd80      	pop	{r7, pc}
 80155d8:	20008ad0 	.word	0x20008ad0

080155dc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80155dc:	b580      	push	{r7, lr}
 80155de:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80155e0:	4b08      	ldr	r3, [pc, #32]	; (8015604 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	f003 0301 	and.w	r3, r3, #1
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d108      	bne.n	80155fe <_ZN12FrontendHeap11getInstanceEv+0x22>
 80155ec:	4806      	ldr	r0, [pc, #24]	; (8015608 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80155ee:	f000 f831 	bl	8015654 <_ZN12FrontendHeapC1Ev>
 80155f2:	4b04      	ldr	r3, [pc, #16]	; (8015604 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80155f4:	2201      	movs	r2, #1
 80155f6:	601a      	str	r2, [r3, #0]
 80155f8:	4804      	ldr	r0, [pc, #16]	; (801560c <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80155fa:	f009 f985 	bl	801e908 <atexit>
        return instance;
 80155fe:	4b02      	ldr	r3, [pc, #8]	; (8015608 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8015600:	4618      	mov	r0, r3
 8015602:	bd80      	pop	{r7, pc}
 8015604:	20008e48 	.word	0x20008e48
 8015608:	20008ad0 	.word	0x20008ad0
 801560c:	080155cd 	.word	0x080155cd

08015610 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
 8015618:	4a05      	ldr	r2, [pc, #20]	; (8015630 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	601a      	str	r2, [r3, #0]
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	4618      	mov	r0, r3
 8015622:	f7ff ff8b 	bl	801553c <_ZN8touchgfx7MVPHeapD1Ev>
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	4618      	mov	r0, r3
 801562a:	3708      	adds	r7, #8
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}
 8015630:	08020a44 	.word	0x08020a44

08015634 <_ZN16FrontendHeapBaseD0Ev>:
 8015634:	b580      	push	{r7, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f7ff ffe7 	bl	8015610 <_ZN16FrontendHeapBaseD1Ev>
 8015642:	2114      	movs	r1, #20
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f009 f924 	bl	801e892 <_ZdlPvj>
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	4618      	mov	r0, r3
 801564e:	3708      	adds	r7, #8
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015654:	b590      	push	{r4, r7, lr}
 8015656:	b085      	sub	sp, #20
 8015658:	af02      	add	r7, sp, #8
 801565a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 801565c:	6878      	ldr	r0, [r7, #4]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f103 0114 	add.w	r1, r3, #20
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	4623      	mov	r3, r4
 801567a:	f7ff ff8d 	bl	8015598 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801567e:	4a18      	ldr	r2, [pc, #96]	; (80156e0 <_ZN12FrontendHeapC1Ev+0x8c>)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	601a      	str	r2, [r3, #0]
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	3314      	adds	r3, #20
 8015688:	4618      	mov	r0, r3
 801568a:	f000 f9ef 	bl	8015a6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	332c      	adds	r3, #44	; 0x2c
 8015692:	4618      	mov	r0, r3
 8015694:	f000 fa1e 	bl	8015ad4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801569e:	4618      	mov	r0, r3
 80156a0:	f000 fa4e 	bl	8015b40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f503 7009 	add.w	r0, r3, #548	; 0x224
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	4619      	mov	r1, r3
 80156b4:	f7ff fbbe 	bl	8014e34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80156be:	4618      	mov	r0, r3
 80156c0:	f7ff fbce 	bl	8014e60 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80156cc:	4619      	mov	r1, r3
 80156ce:	4610      	mov	r0, r2
 80156d0:	f7ff ff54 	bl	801557c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	4618      	mov	r0, r3
 80156d8:	370c      	adds	r7, #12
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd90      	pop	{r4, r7, pc}
 80156de:	bf00      	nop
 80156e0:	08020994 	.word	0x08020994

080156e4 <_ZN8touchgfx8LCD24bppD1Ev>:
 */
class LCD24bpp : public LCD
{
public:

    virtual ~LCD24bpp() {}
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	4a05      	ldr	r2, [pc, #20]	; (8015704 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	601a      	str	r2, [r3, #0]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7ff fd2f 	bl	8015158 <_ZN8touchgfx3LCDD1Ev>
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	4618      	mov	r0, r3
 80156fe:	3708      	adds	r7, #8
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}
 8015704:	080226f0 	.word	0x080226f0

08015708 <_ZN8touchgfx8LCD24bppD0Ev>:
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f7ff ffe7 	bl	80156e4 <_ZN8touchgfx8LCD24bppD1Ev>
 8015716:	2104      	movs	r1, #4
 8015718:	6878      	ldr	r0, [r7, #4]
 801571a:	f009 f8ba 	bl	801e892 <_ZdlPvj>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	4618      	mov	r0, r3
 8015722:	3708      	adds	r7, #8
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}

08015728 <_ZN14STM32F4HAL_DSIC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F4HAL_DSI(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8015728:	b580      	push	{r7, lr}
 801572a:	b086      	sub	sp, #24
 801572c:	af02      	add	r7, sp, #8
 801572e:	60f8      	str	r0, [r7, #12]
 8015730:	60b9      	str	r1, [r7, #8]
 8015732:	607a      	str	r2, [r7, #4]
 8015734:	603b      	str	r3, [r7, #0]
 8015736:	68f8      	ldr	r0, [r7, #12]
 8015738:	8bbb      	ldrh	r3, [r7, #28]
 801573a:	9301      	str	r3, [sp, #4]
 801573c:	8b3b      	ldrh	r3, [r7, #24]
 801573e:	9300      	str	r3, [sp, #0]
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	68b9      	ldr	r1, [r7, #8]
 8015746:	f7ff fda9 	bl	801529c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801574a:	4a04      	ldr	r2, [pc, #16]	; (801575c <_ZN14STM32F4HAL_DSIC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	601a      	str	r2, [r3, #0]
    {
    }
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	4618      	mov	r0, r3
 8015754:	3710      	adds	r7, #16
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}
 801575a:	bf00      	nop
 801575c:	08020b68 	.word	0x08020b68

08015760 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015760:	b480      	push	{r7}
 8015762:	b083      	sub	sp, #12
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
 8015768:	4a04      	ldr	r2, [pc, #16]	; (801577c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	601a      	str	r2, [r3, #0]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	4618      	mov	r0, r3
 8015772:	370c      	adds	r7, #12
 8015774:	46bd      	mov	sp, r7
 8015776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577a:	4770      	bx	lr
 801577c:	0802023c 	.word	0x0802023c

08015780 <_ZN22OTM8009TouchControllerC1Ev>:
#include <platform/driver/touch/TouchController.hpp>

class OTM8009TouchController : public touchgfx::TouchController
{
public:
    OTM8009TouchController() {}
 8015780:	b580      	push	{r7, lr}
 8015782:	b082      	sub	sp, #8
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	4618      	mov	r0, r3
 801578c:	f7ff ffe8 	bl	8015760 <_ZN8touchgfx15TouchControllerC1Ev>
 8015790:	4a03      	ldr	r2, [pc, #12]	; (80157a0 <_ZN22OTM8009TouchControllerC1Ev+0x20>)
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	601a      	str	r2, [r3, #0]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	4618      	mov	r0, r3
 801579a:	3708      	adds	r7, #8
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	08020adc 	.word	0x08020adc

080157a4 <_ZN22OTM8009TouchControllerD1Ev>:
    virtual ~OTM8009TouchController() {}
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b082      	sub	sp, #8
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	4a05      	ldr	r2, [pc, #20]	; (80157c4 <_ZN22OTM8009TouchControllerD1Ev+0x20>)
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	601a      	str	r2, [r3, #0]
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7f9 fbab 	bl	800ef10 <_ZN8touchgfx15TouchControllerD1Ev>
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	4618      	mov	r0, r3
 80157be:	3708      	adds	r7, #8
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	08020adc 	.word	0x08020adc

080157c8 <_ZN22OTM8009TouchControllerD0Ev>:
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f7ff ffe7 	bl	80157a4 <_ZN22OTM8009TouchControllerD1Ev>
 80157d6:	2104      	movs	r1, #4
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f009 f85a 	bl	801e892 <_ZdlPvj>
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	4618      	mov	r0, r3
 80157e2:	3708      	adds	r7, #8
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <LCD_GetXSize>:
#include "stm32f4xx_hal_dsi.h"

extern DSI_HandleTypeDef    hdsi;

uint32_t LCD_GetXSize()
{
 80157e8:	b480      	push	{r7}
 80157ea:	af00      	add	r7, sp, #0
    return OTM8009A_800X480_WIDTH;
 80157ec:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr

080157fa <LCD_GetYSize>:

uint32_t LCD_GetYSize()
{
 80157fa:	b480      	push	{r7}
 80157fc:	af00      	add	r7, sp, #0
    return OTM8009A_800X480_HEIGHT;
 80157fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8015802:	4618      	mov	r0, r3
 8015804:	46bd      	mov	sp, r7
 8015806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580a:	4770      	bx	lr

0801580c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
extern "C" void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b084      	sub	sp, #16
 8015810:	af02      	add	r7, sp, #8
 8015812:	6078      	str	r0, [r7, #4]
 8015814:	6039      	str	r1, [r7, #0]
    if (NbrParams <= 1)
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	2b01      	cmp	r3, #1
 801581a:	d80d      	bhi.n	8015838 <DSI_IO_WriteCmd+0x2c>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	781b      	ldrb	r3, [r3, #0]
 8015820:	461a      	mov	r2, r3
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	3301      	adds	r3, #1
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	9300      	str	r3, [sp, #0]
 801582a:	4613      	mov	r3, r2
 801582c:	2215      	movs	r2, #21
 801582e:	2100      	movs	r1, #0
 8015830:	480a      	ldr	r0, [pc, #40]	; (801585c <DSI_IO_WriteCmd+0x50>)
 8015832:	f7ee f840 	bl	80038b6 <HAL_DSI_ShortWrite>
    else
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
}
 8015836:	e00d      	b.n	8015854 <DSI_IO_WriteCmd+0x48>
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8015838:	683a      	ldr	r2, [r7, #0]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	4413      	add	r3, r2
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	461a      	mov	r2, r3
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	9301      	str	r3, [sp, #4]
 8015846:	9200      	str	r2, [sp, #0]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2239      	movs	r2, #57	; 0x39
 801584c:	2100      	movs	r1, #0
 801584e:	4803      	ldr	r0, [pc, #12]	; (801585c <DSI_IO_WriteCmd+0x50>)
 8015850:	f7ee f853 	bl	80038fa <HAL_DSI_LongWrite>
}
 8015854:	bf00      	nop
 8015856:	3708      	adds	r7, #8
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}
 801585c:	20009be8 	.word	0x20009be8

08015860 <LCD_ReqTear>:
{
    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af02      	add	r7, sp, #8
        uint8_t ScanLineParams[2];
        uint16_t scanline = 533;
 8015866:	f240 2315 	movw	r3, #533	; 0x215
 801586a:	80fb      	strh	r3, [r7, #6]

        ScanLineParams[0] = scanline >> 8;
 801586c:	88fb      	ldrh	r3, [r7, #6]
 801586e:	121b      	asrs	r3, r3, #8
 8015870:	b2db      	uxtb	r3, r3
 8015872:	713b      	strb	r3, [r7, #4]
        ScanLineParams[1] = scanline & 0x00FF;
 8015874:	88fb      	ldrh	r3, [r7, #6]
 8015876:	b2db      	uxtb	r3, r3
 8015878:	717b      	strb	r3, [r7, #5]

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, OTM8009A_CMD_WRTESCN, ScanLineParams);
 801587a:	1d3b      	adds	r3, r7, #4
 801587c:	9301      	str	r3, [sp, #4]
 801587e:	2344      	movs	r3, #68	; 0x44
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	2302      	movs	r3, #2
 8015884:	2239      	movs	r2, #57	; 0x39
 8015886:	2100      	movs	r1, #0
 8015888:	4807      	ldr	r0, [pc, #28]	; (80158a8 <LCD_ReqTear+0x48>)
 801588a:	f7ee f836 	bl	80038fa <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, OTM8009A_TEEON_TELOM_VBLANKING_INFO_ONLY);
 801588e:	2300      	movs	r3, #0
 8015890:	9300      	str	r3, [sp, #0]
 8015892:	2335      	movs	r3, #53	; 0x35
 8015894:	2215      	movs	r2, #21
 8015896:	2100      	movs	r1, #0
 8015898:	4803      	ldr	r0, [pc, #12]	; (80158a8 <LCD_ReqTear+0x48>)
 801589a:	f7ee f80c 	bl	80038b6 <HAL_DSI_ShortWrite>
    }
 801589e:	bf00      	nop
 80158a0:	3708      	adds	r7, #8
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	20009be8 	.word	0x20009be8

080158ac <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	af02      	add	r7, sp, #8
 80158b2:	6078      	str	r0, [r7, #4]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	009b      	lsls	r3, r3, #2
 80158b8:	4a07      	ldr	r2, [pc, #28]	; (80158d8 <LCD_SetUpdateRegion+0x2c>)
 80158ba:	4413      	add	r3, r2
 80158bc:	9301      	str	r3, [sp, #4]
 80158be:	232a      	movs	r3, #42	; 0x2a
 80158c0:	9300      	str	r3, [sp, #0]
 80158c2:	2304      	movs	r3, #4
 80158c4:	2239      	movs	r2, #57	; 0x39
 80158c6:	2100      	movs	r1, #0
 80158c8:	4804      	ldr	r0, [pc, #16]	; (80158dc <LCD_SetUpdateRegion+0x30>)
 80158ca:	f7ee f816 	bl	80038fa <HAL_DSI_LongWrite>
    }
 80158ce:	bf00      	nop
 80158d0:	3708      	adds	r7, #8
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	20000068 	.word	0x20000068
 80158dc:	20009be8 	.word	0x20009be8

080158e0 <LCD_SetUpdateRegionLeft>:

    void LCD_SetUpdateRegionLeft()
    {
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af02      	add	r7, sp, #8
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 80158e6:	4b06      	ldr	r3, [pc, #24]	; (8015900 <LCD_SetUpdateRegionLeft+0x20>)
 80158e8:	9301      	str	r3, [sp, #4]
 80158ea:	232a      	movs	r3, #42	; 0x2a
 80158ec:	9300      	str	r3, [sp, #0]
 80158ee:	2304      	movs	r3, #4
 80158f0:	2239      	movs	r2, #57	; 0x39
 80158f2:	2100      	movs	r1, #0
 80158f4:	4803      	ldr	r0, [pc, #12]	; (8015904 <LCD_SetUpdateRegionLeft+0x24>)
 80158f6:	f7ee f800 	bl	80038fa <HAL_DSI_LongWrite>
    }
 80158fa:	bf00      	nop
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	20000078 	.word	0x20000078
 8015904:	20009be8 	.word	0x20009be8

08015908 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af02      	add	r7, sp, #8
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 801590e:	4b06      	ldr	r3, [pc, #24]	; (8015928 <LCD_SetUpdateRegionRight+0x20>)
 8015910:	9301      	str	r3, [sp, #4]
 8015912:	232a      	movs	r3, #42	; 0x2a
 8015914:	9300      	str	r3, [sp, #0]
 8015916:	2304      	movs	r3, #4
 8015918:	2239      	movs	r2, #57	; 0x39
 801591a:	2100      	movs	r1, #0
 801591c:	4803      	ldr	r0, [pc, #12]	; (801592c <LCD_SetUpdateRegionRight+0x24>)
 801591e:	f7ed ffec 	bl	80038fa <HAL_DSI_LongWrite>
    }
 8015922:	bf00      	nop
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}
 8015928:	2000007c 	.word	0x2000007c
 801592c:	20009be8 	.word	0x20009be8

08015930 <_ZL12LCD_LL_Resetv>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on disco Rev B and beyond.
  */
static void LCD_LL_Reset(void)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	af00      	add	r7, sp, #0
   /* Activate XRES active low */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8015934:	2200      	movs	r2, #0
 8015936:	2180      	movs	r1, #128	; 0x80
 8015938:	4807      	ldr	r0, [pc, #28]	; (8015958 <_ZL12LCD_LL_Resetv+0x28>)
 801593a:	f7ee fb6f 	bl	800401c <HAL_GPIO_WritePin>

  HAL_Delay(20); /* wait 20 ms */
 801593e:	2014      	movs	r0, #20
 8015940:	f7ec fbda 	bl	80020f8 <HAL_Delay>

  /* Desactivate XRES */
  HAL_GPIO_WritePin(GPIOH,GPIO_PIN_7, GPIO_PIN_SET);
 8015944:	2201      	movs	r2, #1
 8015946:	2180      	movs	r1, #128	; 0x80
 8015948:	4803      	ldr	r0, [pc, #12]	; (8015958 <_ZL12LCD_LL_Resetv+0x28>)
 801594a:	f7ee fb67 	bl	800401c <HAL_GPIO_WritePin>

  /* Wait for 10ms after releasing XRES before sending commands */
  HAL_Delay(10);
 801594e:	200a      	movs	r0, #10
 8015950:	f7ec fbd2 	bl	80020f8 <HAL_Delay>
}
 8015954:	bf00      	nop
 8015956:	bd80      	pop	{r7, pc}
 8015958:	40021c00 	.word	0x40021c00

0801595c <_Z16GRAPHICS_HW_Initv>:

using namespace touchgfx;
void GRAPHICS_HW_Init()
{
 801595c:	b580      	push	{r7, lr}
 801595e:	af00      	add	r7, sp, #0
     
    
    MX_FMC_Init();
 8015960:	f000 fba6 	bl	80160b0 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 8015964:	f000 fbfa 	bl	801615c <_Z15MX_SDRAM_InitExv>
    LCD_LL_Reset();
 8015968:	f7ff ffe2 	bl	8015930 <_ZL12LCD_LL_Resetv>
    MX_LCD_Init();
 801596c:	f000 fb10 	bl	8015f90 <_Z11MX_LCD_Initv>
    MX_DSI_Init();
 8015970:	f000 fc54 	bl	801621c <_Z11MX_DSI_Initv>

    GPIO::init();
 8015974:	f002 f9b0 	bl	8017cd8 <_ZN8touchgfx4GPIO4initEv>

}
 8015978:	bf00      	nop
 801597a:	bd80      	pop	{r7, pc}

0801597c <_ZN8touchgfx22STM32F4InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F4Instrumentation: public MCUInstrumentation
 801597c:	b580      	push	{r7, lr}
 801597e:	b082      	sub	sp, #8
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	4618      	mov	r0, r3
 8015988:	f7ff fc10 	bl	80151ac <_ZN8touchgfx18MCUInstrumentationC1Ev>
 801598c:	4a03      	ldr	r2, [pc, #12]	; (801599c <_ZN8touchgfx22STM32F4InstrumentationC1Ev+0x20>)
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	601a      	str	r2, [r3, #0]
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	4618      	mov	r0, r3
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}
 801599c:	08020ccc 	.word	0x08020ccc

080159a0 <_ZN8touchgfx13touchgfx_initEv>:

static LCD24bpp display;
static uint16_t bitdepth = 24;

void touchgfx_init()
{ 
 80159a0:	b590      	push	{r4, r7, lr}
 80159a2:	b087      	sub	sp, #28
 80159a4:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 800;
 80159a6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80159aa:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 480;
 80159ac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80159b0:	80bb      	strh	r3, [r7, #4]

  HAL& hal = touchgfx_generic_init<STM32F4HAL_DSI>(dma, display, tc, dispWidth, dispHeight, (uint16_t*) 0, 
                                               0, 0);                                                     
 80159b2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80159b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80159ba:	2200      	movs	r2, #0
 80159bc:	9203      	str	r2, [sp, #12]
 80159be:	2200      	movs	r2, #0
 80159c0:	9202      	str	r2, [sp, #8]
 80159c2:	2200      	movs	r2, #0
 80159c4:	9201      	str	r2, [sp, #4]
 80159c6:	9300      	str	r3, [sp, #0]
 80159c8:	460b      	mov	r3, r1
 80159ca:	4a19      	ldr	r2, [pc, #100]	; (8015a30 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 80159cc:	4919      	ldr	r1, [pc, #100]	; (8015a34 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 80159ce:	481a      	ldr	r0, [pc, #104]	; (8015a38 <_ZN8touchgfx13touchgfx_initEv+0x98>)
 80159d0:	f000 f8ea 	bl	8015ba8 <_ZN8touchgfx21touchgfx_generic_initI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 80159d4:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth, false, false);
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	337c      	adds	r3, #124	; 0x7c
 80159dc:	681c      	ldr	r4, [r3, #0]
 80159de:	4b17      	ldr	r3, [pc, #92]	; (8015a3c <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	4619      	mov	r1, r3
 80159e4:	4b16      	ldr	r3, [pc, #88]	; (8015a40 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 80159e6:	881a      	ldrh	r2, [r3, #0]
 80159e8:	2300      	movs	r3, #0
 80159ea:	9300      	str	r3, [sp, #0]
 80159ec:	2300      	movs	r3, #0
 80159ee:	6838      	ldr	r0, [r7, #0]
 80159f0:	47a0      	blx	r4

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 80159f2:	2100      	movs	r1, #0
 80159f4:	6838      	ldr	r0, [r7, #0]
 80159f6:	f7ff fd1f 	bl	8015438 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    hal.setTouchSampleRate(2);
 80159fa:	2102      	movs	r1, #2
 80159fc:	6838      	ldr	r0, [r7, #0]
 80159fe:	f7ff fd2b 	bl	8015458 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 8015a02:	2101      	movs	r1, #1
 8015a04:	6838      	ldr	r0, [r7, #0]
 8015a06:	f7ff fd59 	bl	80154bc <_ZN8touchgfx3HAL13setFingerSizeEh>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 8015a0a:	2100      	movs	r1, #0
 8015a0c:	6838      	ldr	r0, [r7, #0]
 8015a0e:	f7ff fd03 	bl	8015418 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 8015a12:	480c      	ldr	r0, [pc, #48]	; (8015a44 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8015a14:	f002 f87c 	bl	8017b10 <_ZN8touchgfx22STM32F4Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 8015a18:	490a      	ldr	r1, [pc, #40]	; (8015a44 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8015a1a:	6838      	ldr	r0, [r7, #0]
 8015a1c:	f7ff fd30 	bl	8015480 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);  
 8015a20:	2101      	movs	r1, #1
 8015a22:	6838      	ldr	r0, [r7, #0]
 8015a24:	f7ff fd3a 	bl	801549c <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8015a28:	bf00      	nop
 8015a2a:	370c      	adds	r7, #12
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd90      	pop	{r4, r7, pc}
 8015a30:	20009a70 	.word	0x20009a70
 8015a34:	20000084 	.word	0x20000084
 8015a38:	20008e50 	.word	0x20008e50
 8015a3c:	20000080 	.word	0x20000080
 8015a40:	20000088 	.word	0x20000088
 8015a44:	20009a74 	.word	0x20009a74

08015a48 <_Z13GRAPHICS_Initv>:
}
using namespace touchgfx;

void GRAPHICS_Init()
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 8015a4c:	f7ff ffa8 	bl	80159a0 <_ZN8touchgfx13touchgfx_initEv>
}
 8015a50:	bf00      	nop
 8015a52:	bd80      	pop	{r7, pc}

08015a54 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 8015a58:	f7f9 fc64 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	6813      	ldr	r3, [r2, #0]
 8015a60:	330c      	adds	r3, #12
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	4610      	mov	r0, r2
 8015a66:	4798      	blx	r3
}
 8015a68:	bf00      	nop
 8015a6a:	bd80      	pop	{r7, pc}

08015a6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	4618      	mov	r0, r3
 8015a78:	f003 fa62 	bl	8018f40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015a7c:	4a03      	ldr	r2, [pc, #12]	; (8015a8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	601a      	str	r2, [r3, #0]
    {
    }
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	4618      	mov	r0, r3
 8015a86:	3708      	adds	r7, #8
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	08020a10 	.word	0x08020a10

08015a90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b082      	sub	sp, #8
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
    {
    }
 8015a98:	4a05      	ldr	r2, [pc, #20]	; (8015ab0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	601a      	str	r2, [r3, #0]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f003 fa4b 	bl	8018f3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3708      	adds	r7, #8
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	08020a10 	.word	0x08020a10

08015ab4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
    }
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f7ff ffe7 	bl	8015a90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015ac2:	2118      	movs	r1, #24
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	f008 fee4 	bl	801e892 <_ZdlPvj>
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	4618      	mov	r0, r3
 8015ace:	3708      	adds	r7, #8
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b082      	sub	sp, #8
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f003 fa2e 	bl	8018f40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015ae4:	4a03      	ldr	r2, [pc, #12]	; (8015af4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	601a      	str	r2, [r3, #0]
    }
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	4618      	mov	r0, r3
 8015aee:	3708      	adds	r7, #8
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	080209dc 	.word	0x080209dc

08015af8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
    }
 8015b00:	4a05      	ldr	r2, [pc, #20]	; (8015b18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	601a      	str	r2, [r3, #0]
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f003 fa17 	bl	8018f3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	4618      	mov	r0, r3
 8015b12:	3708      	adds	r7, #8
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}
 8015b18:	080209dc 	.word	0x080209dc

08015b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
    }
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f7ff ffe7 	bl	8015af8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015b2a:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8015b2e:	6878      	ldr	r0, [r7, #4]
 8015b30:	f008 feaf 	bl	801e892 <_ZdlPvj>
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	4618      	mov	r0, r3
 8015b38:	3708      	adds	r7, #8
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}
	...

08015b40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f003 f9f8 	bl	8018f40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015b50:	4a03      	ldr	r2, [pc, #12]	; (8015b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	601a      	str	r2, [r3, #0]
    }
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3708      	adds	r7, #8
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}
 8015b60:	080209a8 	.word	0x080209a8

08015b64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
    }
 8015b6c:	4a05      	ldr	r2, [pc, #20]	; (8015b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	601a      	str	r2, [r3, #0]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	4618      	mov	r0, r3
 8015b76:	f003 f9e1 	bl	8018f3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3708      	adds	r7, #8
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}
 8015b84:	080209a8 	.word	0x080209a8

08015b88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b082      	sub	sp, #8
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
    }
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f7ff ffe7 	bl	8015b64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015b96:	2114      	movs	r1, #20
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f008 fe7a 	bl	801e892 <_ZdlPvj>
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3708      	adds	r7, #8
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}

08015ba8 <_ZN8touchgfx21touchgfx_generic_initI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8015ba8:	b590      	push	{r4, r7, lr}
 8015baa:	b089      	sub	sp, #36	; 0x24
 8015bac:	af02      	add	r7, sp, #8
 8015bae:	60f8      	str	r0, [r7, #12]
 8015bb0:	60b9      	str	r1, [r7, #8]
 8015bb2:	607a      	str	r2, [r7, #4]
 8015bb4:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 8015bb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015bba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8015bbe:	9300      	str	r3, [sp, #0]
 8015bc0:	4613      	mov	r3, r2
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	68b9      	ldr	r1, [r7, #8]
 8015bc6:	68f8      	ldr	r0, [r7, #12]
 8015bc8:	f000 f85c 	bl	8015c84 <_ZN8touchgfx6getHALI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 8015bcc:	6178      	str	r0, [r7, #20]
    hal.initialize();
 8015bce:	6978      	ldr	r0, [r7, #20]
 8015bd0:	f003 fcc0 	bl	8019554 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 8015bd4:	f7ff f83a 	bl	8014c4c <_ZN14BitmapDatabase11getInstanceEv>
 8015bd8:	4604      	mov	r4, r0
 8015bda:	f7ff f841 	bl	8014c60 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8015bde:	4603      	mov	r3, r0
 8015be0:	4619      	mov	r1, r3
 8015be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015be4:	9300      	str	r3, [sp, #0]
 8015be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015bea:	4620      	mov	r0, r4
 8015bec:	f006 f886 	bl	801bcfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 8015bf0:	480d      	ldr	r0, [pc, #52]	; (8015c28 <_ZN8touchgfx21touchgfx_generic_initI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 8015bf2:	f7ff fc73 	bl	80154dc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8015bf6:	2000      	movs	r0, #0
 8015bf8:	f7ff f856 	bl	8014ca8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8015bfc:	480b      	ldr	r0, [pc, #44]	; (8015c2c <_ZN8touchgfx21touchgfx_generic_initI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 8015bfe:	f005 ffcb 	bl	801bb98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8015c02:	f7ff fceb 	bl	80155dc <_ZN12FrontendHeap11getInstanceEv>
 8015c06:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	3358      	adds	r3, #88	; 0x58
 8015c0e:	681c      	ldr	r4, [r3, #0]
 8015c10:	f004 faac 	bl	801a16c <_ZN8touchgfx11Application11getInstanceEv>
 8015c14:	4603      	mov	r3, r0
 8015c16:	4619      	mov	r1, r3
 8015c18:	6978      	ldr	r0, [r7, #20]
 8015c1a:	47a0      	blx	r4

    return hal;
 8015c1c:	697b      	ldr	r3, [r7, #20]
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	371c      	adds	r7, #28
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd90      	pop	{r4, r7, pc}
 8015c26:	bf00      	nop
 8015c28:	20008e4c 	.word	0x20008e4c
 8015c2c:	20000064 	.word	0x20000064

08015c30 <_ZN14STM32F4HAL_DSID1Ev>:
class STM32F4HAL_DSI : public touchgfx::HAL
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b082      	sub	sp, #8
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
 8015c38:	4a05      	ldr	r2, [pc, #20]	; (8015c50 <_ZN14STM32F4HAL_DSID1Ev+0x20>)
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	601a      	str	r2, [r3, #0]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	4618      	mov	r0, r3
 8015c42:	f7ff fbc9 	bl	80153d8 <_ZN8touchgfx3HALD1Ev>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3708      	adds	r7, #8
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	08020b68 	.word	0x08020b68

08015c54 <_ZN14STM32F4HAL_DSID0Ev>:
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b082      	sub	sp, #8
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f7ff ffe7 	bl	8015c30 <_ZN14STM32F4HAL_DSID1Ev>
 8015c62:	2178      	movs	r1, #120	; 0x78
 8015c64:	6878      	ldr	r0, [r7, #4]
 8015c66:	f008 fe14 	bl	801e892 <_ZdlPvj>
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	3708      	adds	r7, #8
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}

08015c74 <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 8015c74:	b580      	push	{r7, lr}
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	4801      	ldr	r0, [pc, #4]	; (8015c80 <__tcf_1+0xc>)
 8015c7a:	f7ff ffd9 	bl	8015c30 <_ZN14STM32F4HAL_DSID1Ev>
 8015c7e:	bd80      	pop	{r7, pc}
 8015c80:	20009a84 	.word	0x20009a84

08015c84 <_ZN8touchgfx6getHALI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b086      	sub	sp, #24
 8015c88:	af02      	add	r7, sp, #8
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	607a      	str	r2, [r7, #4]
 8015c90:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 8015c92:	4b0d      	ldr	r3, [pc, #52]	; (8015cc8 <_ZN8touchgfx6getHALI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	f003 0301 	and.w	r3, r3, #1
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d10f      	bne.n	8015cbe <_ZN8touchgfx6getHALI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 8015c9e:	887b      	ldrh	r3, [r7, #2]
 8015ca0:	8b3a      	ldrh	r2, [r7, #24]
 8015ca2:	9201      	str	r2, [sp, #4]
 8015ca4:	9300      	str	r3, [sp, #0]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	68ba      	ldr	r2, [r7, #8]
 8015caa:	68f9      	ldr	r1, [r7, #12]
 8015cac:	4807      	ldr	r0, [pc, #28]	; (8015ccc <_ZN8touchgfx6getHALI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 8015cae:	f7ff fd3b 	bl	8015728 <_ZN14STM32F4HAL_DSIC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015cb2:	4b05      	ldr	r3, [pc, #20]	; (8015cc8 <_ZN8touchgfx6getHALI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8015cb4:	2201      	movs	r2, #1
 8015cb6:	601a      	str	r2, [r3, #0]
 8015cb8:	4805      	ldr	r0, [pc, #20]	; (8015cd0 <_ZN8touchgfx6getHALI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 8015cba:	f008 fe25 	bl	801e908 <atexit>
    return hal;
 8015cbe:	4b03      	ldr	r3, [pc, #12]	; (8015ccc <_ZN8touchgfx6getHALI14STM32F4HAL_DSIEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3710      	adds	r7, #16
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	20009afc 	.word	0x20009afc
 8015ccc:	20009a84 	.word	0x20009a84
 8015cd0:	08015c75 	.word	0x08015c75

08015cd4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b082      	sub	sp, #8
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
 8015cdc:	4a10      	ldr	r2, [pc, #64]	; (8015d20 <_ZN12FrontendHeapD1Ev+0x4c>)
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	601a      	str	r2, [r3, #0]
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7ff f86d 	bl	8014dc8 <_ZN19FrontendApplicationD1Ev>
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7ff ff35 	bl	8015b64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	332c      	adds	r3, #44	; 0x2c
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7ff fefa 	bl	8015af8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	3314      	adds	r3, #20
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff fec1 	bl	8015a90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7ff fc7d 	bl	8015610 <_ZN16FrontendHeapBaseD1Ev>
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	4618      	mov	r0, r3
 8015d1a:	3708      	adds	r7, #8
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}
 8015d20:	08020994 	.word	0x08020994

08015d24 <_ZN12FrontendHeapD0Ev>:
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b082      	sub	sp, #8
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
 8015d2c:	6878      	ldr	r0, [r7, #4]
 8015d2e:	f7ff ffd1 	bl	8015cd4 <_ZN12FrontendHeapD1Ev>
 8015d32:	f44f 715e 	mov.w	r1, #888	; 0x378
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f008 fdab 	bl	801e892 <_ZdlPvj>
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3708      	adds	r7, #8
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
	...

08015d48 <_ZN8touchgfx22STM32F4InstrumentationD1Ev>:
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
 8015d50:	4a05      	ldr	r2, [pc, #20]	; (8015d68 <_ZN8touchgfx22STM32F4InstrumentationD1Ev+0x20>)
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	601a      	str	r2, [r3, #0]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7ff fa3d 	bl	80151d8 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	4618      	mov	r0, r3
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	08020ccc 	.word	0x08020ccc

08015d6c <_ZN8touchgfx22STM32F4InstrumentationD0Ev>:
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b082      	sub	sp, #8
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f7ff ffe7 	bl	8015d48 <_ZN8touchgfx22STM32F4InstrumentationD1Ev>
 8015d7a:	2110      	movs	r1, #16
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f008 fd88 	bl	801e892 <_ZdlPvj>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	4618      	mov	r0, r3
 8015d86:	3708      	adds	r7, #8
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd80      	pop	{r7, pc}

08015d8c <_Z41__static_initialization_and_destruction_0ii>:
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b082      	sub	sp, #8
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	6039      	str	r1, [r7, #0]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2b01      	cmp	r3, #1
 8015d9a:	d10d      	bne.n	8015db8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015da2:	4293      	cmp	r3, r2
 8015da4:	d108      	bne.n	8015db8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
STM32F4DMA dma; /* generated DMA2D acceleration module declaration for F4 devices */
 8015da6:	4812      	ldr	r0, [pc, #72]	; (8015df0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8015da8:	f000 fe88 	bl	8016abc <_ZN10STM32F4DMAC1Ev>
OTM8009TouchController tc;
 8015dac:	4811      	ldr	r0, [pc, #68]	; (8015df4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015dae:	f7ff fce7 	bl	8015780 <_ZN22OTM8009TouchControllerC1Ev>
STM32F4Instrumentation mcuInstr;
 8015db2:	4811      	ldr	r0, [pc, #68]	; (8015df8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8015db4:	f7ff fde2 	bl	801597c <_ZN8touchgfx22STM32F4InstrumentationC1Ev>
static LCD24bpp display;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d113      	bne.n	8015de6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015dc4:	4293      	cmp	r3, r2
 8015dc6:	d10e      	bne.n	8015de6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8015dc8:	480c      	ldr	r0, [pc, #48]	; (8015dfc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8015dca:	f7ff fc8b 	bl	80156e4 <_ZN8touchgfx8LCD24bppD1Ev>
STM32F4Instrumentation mcuInstr;
 8015dce:	480a      	ldr	r0, [pc, #40]	; (8015df8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8015dd0:	f7ff ffba 	bl	8015d48 <_ZN8touchgfx22STM32F4InstrumentationD1Ev>
OTM8009TouchController tc;
 8015dd4:	4807      	ldr	r0, [pc, #28]	; (8015df4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015dd6:	f7ff fce5 	bl	80157a4 <_ZN22OTM8009TouchControllerD1Ev>
STM32F4DMA dma; /* generated DMA2D acceleration module declaration for F4 devices */
 8015dda:	4805      	ldr	r0, [pc, #20]	; (8015df0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8015ddc:	f000 fe98 	bl	8016b10 <_ZN10STM32F4DMAD1Ev>
static ApplicationFontProvider fontProvider;
 8015de0:	4807      	ldr	r0, [pc, #28]	; (8015e00 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8015de2:	f7fd fd6f 	bl	80138c4 <_ZN23ApplicationFontProviderD1Ev>
}
 8015de6:	bf00      	nop
 8015de8:	3708      	adds	r7, #8
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	20008e50 	.word	0x20008e50
 8015df4:	20009a70 	.word	0x20009a70
 8015df8:	20009a74 	.word	0x20009a74
 8015dfc:	20000084 	.word	0x20000084
 8015e00:	20000064 	.word	0x20000064

08015e04 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8015e04:	b480      	push	{r7}
 8015e06:	b083      	sub	sp, #12
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015e0c:	2301      	movs	r3, #1
    }
 8015e0e:	4618      	mov	r0, r3
 8015e10:	370c      	adds	r7, #12
 8015e12:	46bd      	mov	sp, r7
 8015e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e18:	4770      	bx	lr

08015e1a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8015e1a:	b480      	push	{r7}
 8015e1c:	b083      	sub	sp, #12
 8015e1e:	af00      	add	r7, sp, #0
 8015e20:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8015e22:	230c      	movs	r3, #12
    }
 8015e24:	4618      	mov	r0, r3
 8015e26:	370c      	adds	r7, #12
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr

08015e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8015e30:	b480      	push	{r7}
 8015e32:	b083      	sub	sp, #12
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	460b      	mov	r3, r1
 8015e3a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015e3c:	887a      	ldrh	r2, [r7, #2]
 8015e3e:	4613      	mov	r3, r2
 8015e40:	005b      	lsls	r3, r3, #1
 8015e42:	4413      	add	r3, r2
 8015e44:	009b      	lsls	r3, r3, #2
 8015e46:	3308      	adds	r3, #8
 8015e48:	687a      	ldr	r2, [r7, #4]
 8015e4a:	4413      	add	r3, r2
    }
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	370c      	adds	r7, #12
 8015e50:	46bd      	mov	sp, r7
 8015e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e56:	4770      	bx	lr

08015e58 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8015e58:	b480      	push	{r7}
 8015e5a:	b083      	sub	sp, #12
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
 8015e60:	460b      	mov	r3, r1
 8015e62:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015e64:	887a      	ldrh	r2, [r7, #2]
 8015e66:	4613      	mov	r3, r2
 8015e68:	005b      	lsls	r3, r3, #1
 8015e6a:	4413      	add	r3, r2
 8015e6c:	009b      	lsls	r3, r3, #2
 8015e6e:	3308      	adds	r3, #8
 8015e70:	687a      	ldr	r2, [r7, #4]
 8015e72:	4413      	add	r3, r2
    }
 8015e74:	4618      	mov	r0, r3
 8015e76:	370c      	adds	r7, #12
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7e:	4770      	bx	lr

08015e80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015e80:	b480      	push	{r7}
 8015e82:	b083      	sub	sp, #12
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015e88:	2301      	movs	r3, #1
    }
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	370c      	adds	r7, #12
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e94:	4770      	bx	lr

08015e96 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015e96:	b480      	push	{r7}
 8015e98:	b083      	sub	sp, #12
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015e9e:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
    }
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	370c      	adds	r7, #12
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eac:	4770      	bx	lr

08015eae <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015eae:	b480      	push	{r7}
 8015eb0:	b083      	sub	sp, #12
 8015eb2:	af00      	add	r7, sp, #0
 8015eb4:	6078      	str	r0, [r7, #4]
 8015eb6:	460b      	mov	r3, r1
 8015eb8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015eba:	887b      	ldrh	r3, [r7, #2]
 8015ebc:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8015ec0:	fb02 f303 	mul.w	r3, r2, r3
 8015ec4:	3308      	adds	r3, #8
 8015ec6:	687a      	ldr	r2, [r7, #4]
 8015ec8:	4413      	add	r3, r2
    }
 8015eca:	4618      	mov	r0, r3
 8015ecc:	370c      	adds	r7, #12
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed4:	4770      	bx	lr

08015ed6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015ed6:	b480      	push	{r7}
 8015ed8:	b083      	sub	sp, #12
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	6078      	str	r0, [r7, #4]
 8015ede:	460b      	mov	r3, r1
 8015ee0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015ee2:	887b      	ldrh	r3, [r7, #2]
 8015ee4:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8015ee8:	fb02 f303 	mul.w	r3, r2, r3
 8015eec:	3308      	adds	r3, #8
 8015eee:	687a      	ldr	r2, [r7, #4]
 8015ef0:	4413      	add	r3, r2
    }
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	370c      	adds	r7, #12
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efc:	4770      	bx	lr

08015efe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015efe:	b480      	push	{r7}
 8015f00:	b083      	sub	sp, #12
 8015f02:	af00      	add	r7, sp, #0
 8015f04:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015f06:	2301      	movs	r3, #1
    }
 8015f08:	4618      	mov	r0, r3
 8015f0a:	370c      	adds	r7, #12
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr

08015f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015f14:	b480      	push	{r7}
 8015f16:	b083      	sub	sp, #12
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015f1c:	2310      	movs	r3, #16
    }
 8015f1e:	4618      	mov	r0, r3
 8015f20:	370c      	adds	r7, #12
 8015f22:	46bd      	mov	sp, r7
 8015f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f28:	4770      	bx	lr

08015f2a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015f2a:	b480      	push	{r7}
 8015f2c:	b083      	sub	sp, #12
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	6078      	str	r0, [r7, #4]
 8015f32:	460b      	mov	r3, r1
 8015f34:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015f36:	887b      	ldrh	r3, [r7, #2]
 8015f38:	011b      	lsls	r3, r3, #4
 8015f3a:	3308      	adds	r3, #8
 8015f3c:	687a      	ldr	r2, [r7, #4]
 8015f3e:	4413      	add	r3, r2
    }
 8015f40:	4618      	mov	r0, r3
 8015f42:	370c      	adds	r7, #12
 8015f44:	46bd      	mov	sp, r7
 8015f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4a:	4770      	bx	lr

08015f4c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015f4c:	b480      	push	{r7}
 8015f4e:	b083      	sub	sp, #12
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
 8015f54:	460b      	mov	r3, r1
 8015f56:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015f58:	887b      	ldrh	r3, [r7, #2]
 8015f5a:	011b      	lsls	r3, r3, #4
 8015f5c:	3308      	adds	r3, #8
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	4413      	add	r3, r2
    }
 8015f62:	4618      	mov	r0, r3
 8015f64:	370c      	adds	r7, #12
 8015f66:	46bd      	mov	sp, r7
 8015f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6c:	4770      	bx	lr

08015f6e <_GLOBAL__sub_I_LCD_GetXSize>:
 8015f6e:	b580      	push	{r7, lr}
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015f76:	2001      	movs	r0, #1
 8015f78:	f7ff ff08 	bl	8015d8c <_Z41__static_initialization_and_destruction_0ii>
 8015f7c:	bd80      	pop	{r7, pc}

08015f7e <_GLOBAL__sub_D_LCD_GetXSize>:
 8015f7e:	b580      	push	{r7, lr}
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015f86:	2000      	movs	r0, #0
 8015f88:	f7ff ff00 	bl	8015d8c <_Z41__static_initialization_and_destruction_0ii>
 8015f8c:	bd80      	pop	{r7, pc}
	...

08015f90 <_Z11MX_LCD_Initv>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
void MX_LCD_Init(void) 
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b08e      	sub	sp, #56	; 0x38
 8015f94:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef             pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 8015f96:	4844      	ldr	r0, [pc, #272]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015f98:	f7f0 fd7e 	bl	8006a98 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 8015f9c:	4b42      	ldr	r3, [pc, #264]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015f9e:	4a43      	ldr	r2, [pc, #268]	; (80160ac <_Z11MX_LCD_Initv+0x11c>)
 8015fa0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8015fa2:	4b41      	ldr	r3, [pc, #260]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8015fa8:	4b3f      	ldr	r3, [pc, #252]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015faa:	2200      	movs	r2, #0
 8015fac:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8015fae:	4b3e      	ldr	r3, [pc, #248]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8015fb4:	4b3c      	ldr	r3, [pc, #240]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8015fba:	4b3b      	ldr	r3, [pc, #236]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fbc:	2201      	movs	r2, #1
 8015fbe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8015fc0:	4b39      	ldr	r3, [pc, #228]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8015fc6:	4b38      	ldr	r3, [pc, #224]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fc8:	2202      	movs	r2, #2
 8015fca:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8015fcc:	4b36      	ldr	r3, [pc, #216]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fce:	2202      	movs	r2, #2
 8015fd0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 402;
 8015fd2:	4b35      	ldr	r3, [pc, #212]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fd4:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8015fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 8015fda:	4b33      	ldr	r3, [pc, #204]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fdc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 403;
 8015fe2:	4b31      	ldr	r3, [pc, #196]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fe4:	f240 1293 	movw	r2, #403	; 0x193
 8015fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 8015fea:	4b2f      	ldr	r3, [pc, #188]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015fec:	f240 12e3 	movw	r2, #483	; 0x1e3
 8015ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8015ff2:	4b2d      	ldr	r3, [pc, #180]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8015ffa:	4b2b      	ldr	r3, [pc, #172]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8016002:	4b29      	ldr	r3, [pc, #164]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 8016004:	2200      	movs	r2, #0
 8016006:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801600a:	4827      	ldr	r0, [pc, #156]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 801600c:	f7f0 fc74 	bl	80068f8 <HAL_LTDC_Init>
 8016010:	4603      	mov	r3, r0
 8016012:	2b00      	cmp	r3, #0
 8016014:	bf14      	ite	ne
 8016016:	2301      	movne	r3, #1
 8016018:	2300      	moveq	r3, #0
 801601a:	b2db      	uxtb	r3, r3
 801601c:	2b00      	cmp	r3, #0
 801601e:	d001      	beq.n	8016024 <_Z11MX_LCD_Initv+0x94>
  {
    Error_Handler( );
 8016020:	f7ea ff9c 	bl	8000f5c <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 8016024:	2300      	movs	r3, #0
 8016026:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 400;
 8016028:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801602c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 801602e:	2300      	movs	r3, #0
 8016030:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8016032:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8016036:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8016038:	2301      	movs	r3, #1
 801603a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 801603c:	23ff      	movs	r3, #255	; 0xff
 801603e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8016040:	2300      	movs	r3, #0
 8016042:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8016044:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8016048:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801604a:	2307      	movs	r3, #7
 801604c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 801604e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8016052:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 400;
 8016054:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016058:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 801605a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801605e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8016060:	2300      	movs	r3, #0
 8016062:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8016066:	2300      	movs	r3, #0
 8016068:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 801606c:	2300      	movs	r3, #0
 801606e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8016072:	1d3b      	adds	r3, r7, #4
 8016074:	2200      	movs	r2, #0
 8016076:	4619      	mov	r1, r3
 8016078:	480b      	ldr	r0, [pc, #44]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 801607a:	f7f0 fde7 	bl	8006c4c <HAL_LTDC_ConfigLayer>
 801607e:	4603      	mov	r3, r0
 8016080:	2b00      	cmp	r3, #0
 8016082:	bf14      	ite	ne
 8016084:	2301      	movne	r3, #1
 8016086:	2300      	moveq	r3, #0
 8016088:	b2db      	uxtb	r3, r3
 801608a:	2b00      	cmp	r3, #0
 801608c:	d001      	beq.n	8016092 <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 801608e:	f7ea ff65 	bl	8000f5c <Error_Handler>
  }


 HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8016092:	2200      	movs	r2, #0
 8016094:	f44f 7148 	mov.w	r1, #800	; 0x320
 8016098:	4803      	ldr	r0, [pc, #12]	; (80160a8 <_Z11MX_LCD_Initv+0x118>)
 801609a:	f7f0 fe15 	bl	8006cc8 <HAL_LTDC_SetPitch>
}
 801609e:	bf00      	nop
 80160a0:	3738      	adds	r7, #56	; 0x38
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop
 80160a8:	20009b00 	.word	0x20009b00
 80160ac:	40016800 	.word	0x40016800

080160b0 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b088      	sub	sp, #32
 80160b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80160b6:	1d3b      	adds	r3, r7, #4
 80160b8:	2200      	movs	r2, #0
 80160ba:	601a      	str	r2, [r3, #0]
 80160bc:	605a      	str	r2, [r3, #4]
 80160be:	609a      	str	r2, [r3, #8]
 80160c0:	60da      	str	r2, [r3, #12]
 80160c2:	611a      	str	r2, [r3, #16]
 80160c4:	615a      	str	r2, [r3, #20]
 80160c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80160c8:	4b22      	ldr	r3, [pc, #136]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 80160ca:	4a23      	ldr	r2, [pc, #140]	; (8016158 <_Z11MX_FMC_Initv+0xa8>)
 80160cc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80160ce:	4b21      	ldr	r3, [pc, #132]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 80160d0:	2200      	movs	r2, #0
 80160d2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80160d4:	4b1f      	ldr	r3, [pc, #124]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 80160d6:	2200      	movs	r2, #0
 80160d8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80160da:	4b1e      	ldr	r3, [pc, #120]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 80160dc:	2204      	movs	r2, #4
 80160de:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80160e0:	4b1c      	ldr	r3, [pc, #112]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 80160e2:	2220      	movs	r2, #32
 80160e4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80160e6:	4b1b      	ldr	r3, [pc, #108]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 80160e8:	2240      	movs	r2, #64	; 0x40
 80160ea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80160ec:	4b19      	ldr	r3, [pc, #100]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 80160ee:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80160f2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80160f4:	4b17      	ldr	r3, [pc, #92]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 80160f6:	2200      	movs	r2, #0
 80160f8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80160fa:	4b16      	ldr	r3, [pc, #88]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 80160fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016100:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8016102:	4b14      	ldr	r3, [pc, #80]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 8016104:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016108:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801610a:	4b12      	ldr	r3, [pc, #72]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 801610c:	2200      	movs	r2, #0
 801610e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8016110:	2302      	movs	r3, #2
 8016112:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8016114:	2307      	movs	r3, #7
 8016116:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8016118:	2304      	movs	r3, #4
 801611a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 801611c:	2307      	movs	r3, #7
 801611e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8016120:	2302      	movs	r3, #2
 8016122:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8016124:	2302      	movs	r3, #2
 8016126:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8016128:	2302      	movs	r3, #2
 801612a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 801612c:	1d3b      	adds	r3, r7, #4
 801612e:	4619      	mov	r1, r3
 8016130:	4808      	ldr	r0, [pc, #32]	; (8016154 <_Z11MX_FMC_Initv+0xa4>)
 8016132:	f7f3 fa1d 	bl	8009570 <HAL_SDRAM_Init>
 8016136:	4603      	mov	r3, r0
 8016138:	2b00      	cmp	r3, #0
 801613a:	bf14      	ite	ne
 801613c:	2301      	movne	r3, #1
 801613e:	2300      	moveq	r3, #0
 8016140:	b2db      	uxtb	r3, r3
 8016142:	2b00      	cmp	r3, #0
 8016144:	d001      	beq.n	801614a <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 8016146:	f7ea ff09 	bl	8000f5c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 801614a:	bf00      	nop
 801614c:	3720      	adds	r7, #32
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}
 8016152:	bf00      	nop
 8016154:	20009c04 	.word	0x20009c04
 8016158:	a0000140 	.word	0xa0000140

0801615c <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b082      	sub	sp, #8
 8016160:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 8016162:	2300      	movs	r3, #0
 8016164:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8016166:	4b2b      	ldr	r3, [pc, #172]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 8016168:	2201      	movs	r2, #1
 801616a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801616c:	4b29      	ldr	r3, [pc, #164]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 801616e:	2210      	movs	r2, #16
 8016170:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8016172:	4b28      	ldr	r3, [pc, #160]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 8016174:	2201      	movs	r2, #1
 8016176:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8016178:	4b26      	ldr	r3, [pc, #152]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 801617a:	2200      	movs	r2, #0
 801617c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801617e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016182:	4924      	ldr	r1, [pc, #144]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 8016184:	4824      	ldr	r0, [pc, #144]	; (8016218 <_Z15MX_SDRAM_InitExv+0xbc>)
 8016186:	f7f3 fa27 	bl	80095d8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 801618a:	2001      	movs	r0, #1
 801618c:	f7eb ffb4 	bl	80020f8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8016190:	4b20      	ldr	r3, [pc, #128]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 8016192:	2202      	movs	r2, #2
 8016194:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8016196:	4b1f      	ldr	r3, [pc, #124]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 8016198:	2210      	movs	r2, #16
 801619a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801619c:	4b1d      	ldr	r3, [pc, #116]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 801619e:	2201      	movs	r2, #1
 80161a0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80161a2:	4b1c      	ldr	r3, [pc, #112]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161a4:	2200      	movs	r2, #0
 80161a6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 80161a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161ac:	4919      	ldr	r1, [pc, #100]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161ae:	481a      	ldr	r0, [pc, #104]	; (8016218 <_Z15MX_SDRAM_InitExv+0xbc>)
 80161b0:	f7f3 fa12 	bl	80095d8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80161b4:	4b17      	ldr	r3, [pc, #92]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161b6:	2203      	movs	r2, #3
 80161b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80161ba:	4b16      	ldr	r3, [pc, #88]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161bc:	2210      	movs	r2, #16
 80161be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80161c0:	4b14      	ldr	r3, [pc, #80]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161c2:	2208      	movs	r2, #8
 80161c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80161c6:	4b13      	ldr	r3, [pc, #76]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161c8:	2200      	movs	r2, #0
 80161ca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80161cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161d0:	4910      	ldr	r1, [pc, #64]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161d2:	4811      	ldr	r0, [pc, #68]	; (8016218 <_Z15MX_SDRAM_InitExv+0xbc>)
 80161d4:	f7f3 fa00 	bl	80095d8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80161d8:	f44f 730c 	mov.w	r3, #560	; 0x230
 80161dc:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80161de:	4b0d      	ldr	r3, [pc, #52]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161e0:	2204      	movs	r2, #4
 80161e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80161e4:	4b0b      	ldr	r3, [pc, #44]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161e6:	2210      	movs	r2, #16
 80161e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80161ea:	4b0a      	ldr	r3, [pc, #40]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161ec:	2201      	movs	r2, #1
 80161ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	4a08      	ldr	r2, [pc, #32]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161f4:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80161f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161fa:	4906      	ldr	r1, [pc, #24]	; (8016214 <_Z15MX_SDRAM_InitExv+0xb8>)
 80161fc:	4806      	ldr	r0, [pc, #24]	; (8016218 <_Z15MX_SDRAM_InitExv+0xbc>)
 80161fe:	f7f3 f9eb 	bl	80095d8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8016202:	f44f 61cf 	mov.w	r1, #1656	; 0x678
 8016206:	4804      	ldr	r0, [pc, #16]	; (8016218 <_Z15MX_SDRAM_InitExv+0xbc>)
 8016208:	f7f3 fa11 	bl	800962e <HAL_SDRAM_ProgramRefreshRate>
}
 801620c:	bf00      	nop
 801620e:	3708      	adds	r7, #8
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}
 8016214:	20009c38 	.word	0x20009c38
 8016218:	20009c04 	.word	0x20009c04

0801621c <_Z11MX_DSI_Initv>:

/* DSI init function */
void MX_DSI_Init(void)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af02      	add	r7, sp, #8
  static DSI_LPCmdTypeDef          LPCmd;
  static DSI_PLLInitTypeDef        PLLInit;
  
/* Base address of DSI Host/Wrapper registers to be set before calling De-Init */

  hdsi.Instance = DSI;
 8016222:	4ba4      	ldr	r3, [pc, #656]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 8016224:	4aa4      	ldr	r2, [pc, #656]	; (80164b8 <_Z11MX_DSI_Initv+0x29c>)
 8016226:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8016228:	4ba2      	ldr	r3, [pc, #648]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 801622a:	2200      	movs	r2, #0
 801622c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 801622e:	4ba1      	ldr	r3, [pc, #644]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 8016230:	2204      	movs	r2, #4
 8016232:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8016234:	4b9f      	ldr	r3, [pc, #636]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 8016236:	2201      	movs	r2, #1
 8016238:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 801623a:	4ba0      	ldr	r3, [pc, #640]	; (80164bc <_Z11MX_DSI_Initv+0x2a0>)
 801623c:	227d      	movs	r2, #125	; 0x7d
 801623e:	601a      	str	r2, [r3, #0]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8016240:	4b9e      	ldr	r3, [pc, #632]	; (80164bc <_Z11MX_DSI_Initv+0x2a0>)
 8016242:	2202      	movs	r2, #2
 8016244:	605a      	str	r2, [r3, #4]
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8016246:	4b9d      	ldr	r3, [pc, #628]	; (80164bc <_Z11MX_DSI_Initv+0x2a0>)
 8016248:	2200      	movs	r2, #0
 801624a:	609a      	str	r2, [r3, #8]
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 801624c:	499b      	ldr	r1, [pc, #620]	; (80164bc <_Z11MX_DSI_Initv+0x2a0>)
 801624e:	4899      	ldr	r0, [pc, #612]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 8016250:	f7ec fd74 	bl	8002d3c <HAL_DSI_Init>
 8016254:	4603      	mov	r3, r0
 8016256:	2b00      	cmp	r3, #0
 8016258:	bf14      	ite	ne
 801625a:	2301      	movne	r3, #1
 801625c:	2300      	moveq	r3, #0
 801625e:	b2db      	uxtb	r3, r3
 8016260:	2b00      	cmp	r3, #0
 8016262:	d001      	beq.n	8016268 <_Z11MX_DSI_Initv+0x4c>
  {
    Error_Handler();
 8016264:	f7ea fe7a 	bl	8000f5c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8016268:	4b95      	ldr	r3, [pc, #596]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 801626a:	2201      	movs	r2, #1
 801626c:	601a      	str	r2, [r3, #0]
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 801626e:	4b94      	ldr	r3, [pc, #592]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 8016270:	2200      	movs	r2, #0
 8016272:	605a      	str	r2, [r3, #4]
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8016274:	4b92      	ldr	r3, [pc, #584]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 8016276:	2200      	movs	r2, #0
 8016278:	609a      	str	r2, [r3, #8]
  HostTimeouts.HighSpeedReadTimeout = 0;
 801627a:	4b91      	ldr	r3, [pc, #580]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 801627c:	2200      	movs	r2, #0
 801627e:	60da      	str	r2, [r3, #12]
  HostTimeouts.LowPowerReadTimeout = 0;
 8016280:	4b8f      	ldr	r3, [pc, #572]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 8016282:	2200      	movs	r2, #0
 8016284:	611a      	str	r2, [r3, #16]
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8016286:	4b8e      	ldr	r3, [pc, #568]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 8016288:	2200      	movs	r2, #0
 801628a:	615a      	str	r2, [r3, #20]
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 801628c:	4b8c      	ldr	r3, [pc, #560]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 801628e:	2200      	movs	r2, #0
 8016290:	619a      	str	r2, [r3, #24]
  HostTimeouts.LowPowerWriteTimeout = 0;
 8016292:	4b8b      	ldr	r3, [pc, #556]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 8016294:	2200      	movs	r2, #0
 8016296:	61da      	str	r2, [r3, #28]
  HostTimeouts.BTATimeout = 0;
 8016298:	4b89      	ldr	r3, [pc, #548]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 801629a:	2200      	movs	r2, #0
 801629c:	621a      	str	r2, [r3, #32]
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 801629e:	4988      	ldr	r1, [pc, #544]	; (80164c0 <_Z11MX_DSI_Initv+0x2a4>)
 80162a0:	4884      	ldr	r0, [pc, #528]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 80162a2:	f7ed f9e5 	bl	8003670 <HAL_DSI_ConfigHostTimeouts>
 80162a6:	4603      	mov	r3, r0
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	bf14      	ite	ne
 80162ac:	2301      	movne	r3, #1
 80162ae:	2300      	moveq	r3, #0
 80162b0:	b2db      	uxtb	r3, r3
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d001      	beq.n	80162ba <_Z11MX_DSI_Initv+0x9e>
  {
    Error_Handler();
 80162b6:	f7ea fe51 	bl	8000f5c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80162ba:	4b82      	ldr	r3, [pc, #520]	; (80164c4 <_Z11MX_DSI_Initv+0x2a8>)
 80162bc:	221c      	movs	r2, #28
 80162be:	601a      	str	r2, [r3, #0]
  PhyTimings.ClockLaneLP2HSTime = 33;
 80162c0:	4b80      	ldr	r3, [pc, #512]	; (80164c4 <_Z11MX_DSI_Initv+0x2a8>)
 80162c2:	2221      	movs	r2, #33	; 0x21
 80162c4:	605a      	str	r2, [r3, #4]
  PhyTimings.DataLaneHS2LPTime = 15;
 80162c6:	4b7f      	ldr	r3, [pc, #508]	; (80164c4 <_Z11MX_DSI_Initv+0x2a8>)
 80162c8:	220f      	movs	r2, #15
 80162ca:	609a      	str	r2, [r3, #8]
  PhyTimings.DataLaneLP2HSTime = 25;
 80162cc:	4b7d      	ldr	r3, [pc, #500]	; (80164c4 <_Z11MX_DSI_Initv+0x2a8>)
 80162ce:	2219      	movs	r2, #25
 80162d0:	60da      	str	r2, [r3, #12]
  PhyTimings.DataLaneMaxReadTime = 0;
 80162d2:	4b7c      	ldr	r3, [pc, #496]	; (80164c4 <_Z11MX_DSI_Initv+0x2a8>)
 80162d4:	2200      	movs	r2, #0
 80162d6:	611a      	str	r2, [r3, #16]
  PhyTimings.StopWaitTime = 10;
 80162d8:	4b7a      	ldr	r3, [pc, #488]	; (80164c4 <_Z11MX_DSI_Initv+0x2a8>)
 80162da:	220a      	movs	r2, #10
 80162dc:	615a      	str	r2, [r3, #20]
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80162de:	4979      	ldr	r1, [pc, #484]	; (80164c4 <_Z11MX_DSI_Initv+0x2a8>)
 80162e0:	4874      	ldr	r0, [pc, #464]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 80162e2:	f7ed f95b 	bl	800359c <HAL_DSI_ConfigPhyTimer>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	bf14      	ite	ne
 80162ec:	2301      	movne	r3, #1
 80162ee:	2300      	moveq	r3, #0
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d001      	beq.n	80162fa <_Z11MX_DSI_Initv+0xde>
  {
    Error_Handler();
 80162f6:	f7ea fe31 	bl	8000f5c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80162fa:	2104      	movs	r1, #4
 80162fc:	486d      	ldr	r0, [pc, #436]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 80162fe:	f7ed f925 	bl	800354c <HAL_DSI_ConfigFlowControl>
 8016302:	4603      	mov	r3, r0
 8016304:	2b00      	cmp	r3, #0
 8016306:	bf14      	ite	ne
 8016308:	2301      	movne	r3, #1
 801630a:	2300      	moveq	r3, #0
 801630c:	b2db      	uxtb	r3, r3
 801630e:	2b00      	cmp	r3, #0
 8016310:	d001      	beq.n	8016316 <_Z11MX_DSI_Initv+0xfa>
  {
    Error_Handler();
 8016312:	f7ea fe23 	bl	8000f5c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8016316:	f242 7110 	movw	r1, #10000	; 0x2710
 801631a:	4866      	ldr	r0, [pc, #408]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 801631c:	f7ed fb85 	bl	8003a2a <HAL_DSI_SetLowPowerRXFilter>
 8016320:	4603      	mov	r3, r0
 8016322:	2b00      	cmp	r3, #0
 8016324:	bf14      	ite	ne
 8016326:	2301      	movne	r3, #1
 8016328:	2300      	moveq	r3, #0
 801632a:	b2db      	uxtb	r3, r3
 801632c:	2b00      	cmp	r3, #0
 801632e:	d001      	beq.n	8016334 <_Z11MX_DSI_Initv+0x118>
  {
    Error_Handler();
 8016330:	f7ea fe14 	bl	8000f5c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8016334:	2100      	movs	r1, #0
 8016336:	485f      	ldr	r0, [pc, #380]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 8016338:	f7ec fe1a 	bl	8002f70 <HAL_DSI_ConfigErrorMonitor>
 801633c:	4603      	mov	r3, r0
 801633e:	2b00      	cmp	r3, #0
 8016340:	bf14      	ite	ne
 8016342:	2301      	movne	r3, #1
 8016344:	2300      	moveq	r3, #0
 8016346:	b2db      	uxtb	r3, r3
 8016348:	2b00      	cmp	r3, #0
 801634a:	d001      	beq.n	8016350 <_Z11MX_DSI_Initv+0x134>
  {
    Error_Handler();
 801634c:	f7ea fe06 	bl	8000f5c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8016350:	4b5d      	ldr	r3, [pc, #372]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016356:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8016358:	4b5b      	ldr	r3, [pc, #364]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 801635a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801635e:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8016360:	4b59      	ldr	r3, [pc, #356]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016366:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8016368:	4b57      	ldr	r3, [pc, #348]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 801636a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801636e:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8016370:	4b55      	ldr	r3, [pc, #340]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016372:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016376:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8016378:	4b53      	ldr	r3, [pc, #332]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 801637a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801637e:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8016380:	4b51      	ldr	r3, [pc, #324]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016382:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016386:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8016388:	4b4f      	ldr	r3, [pc, #316]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 801638a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801638e:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8016390:	4b4d      	ldr	r3, [pc, #308]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016392:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016396:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8016398:	4b4b      	ldr	r3, [pc, #300]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 801639a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801639e:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 80163a0:	4b49      	ldr	r3, [pc, #292]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 80163a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80163a6:	629a      	str	r2, [r3, #40]	; 0x28
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80163a8:	4b47      	ldr	r3, [pc, #284]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 80163aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80163ae:	62da      	str	r2, [r3, #44]	; 0x2c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80163b0:	4b45      	ldr	r3, [pc, #276]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 80163b2:	2200      	movs	r2, #0
 80163b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80163b6:	4944      	ldr	r1, [pc, #272]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 80163b8:	483e      	ldr	r0, [pc, #248]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 80163ba:	f7ed f869 	bl	8003490 <HAL_DSI_ConfigCommand>
 80163be:	4603      	mov	r3, r0
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	bf14      	ite	ne
 80163c4:	2301      	movne	r3, #1
 80163c6:	2300      	moveq	r3, #0
 80163c8:	b2db      	uxtb	r3, r3
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d001      	beq.n	80163d2 <_Z11MX_DSI_Initv+0x1b6>
  {
    Error_Handler();
 80163ce:	f7ea fdc5 	bl	8000f5c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80163d2:	4b3e      	ldr	r3, [pc, #248]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 80163d4:	2200      	movs	r2, #0
 80163d6:	601a      	str	r2, [r3, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80163d8:	4b3c      	ldr	r3, [pc, #240]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 80163da:	2205      	movs	r2, #5
 80163dc:	605a      	str	r2, [r3, #4]
  CmdCfg.CommandSize = 400;
 80163de:	4b3b      	ldr	r3, [pc, #236]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 80163e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80163e4:	609a      	str	r2, [r3, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80163e6:	4b39      	ldr	r3, [pc, #228]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 80163e8:	2210      	movs	r2, #16
 80163ea:	60da      	str	r2, [r3, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80163ec:	4b37      	ldr	r3, [pc, #220]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 80163ee:	2200      	movs	r2, #0
 80163f0:	611a      	str	r2, [r3, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80163f2:	4b36      	ldr	r3, [pc, #216]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 80163f4:	2200      	movs	r2, #0
 80163f6:	615a      	str	r2, [r3, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80163f8:	4b34      	ldr	r3, [pc, #208]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 80163fa:	2200      	movs	r2, #0
 80163fc:	619a      	str	r2, [r3, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80163fe:	4b33      	ldr	r3, [pc, #204]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 8016400:	2200      	movs	r2, #0
 8016402:	61da      	str	r2, [r3, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8016404:	4b31      	ldr	r3, [pc, #196]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 8016406:	2200      	movs	r2, #0
 8016408:	621a      	str	r2, [r3, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 801640a:	4b30      	ldr	r3, [pc, #192]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 801640c:	2200      	movs	r2, #0
 801640e:	625a      	str	r2, [r3, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8016410:	4b2e      	ldr	r3, [pc, #184]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 8016412:	2201      	movs	r2, #1
 8016414:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8016416:	492d      	ldr	r1, [pc, #180]	; (80164cc <_Z11MX_DSI_Initv+0x2b0>)
 8016418:	4826      	ldr	r0, [pc, #152]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 801641a:	f7ec ff61 	bl	80032e0 <HAL_DSI_ConfigAdaptedCommandMode>
 801641e:	4603      	mov	r3, r0
 8016420:	2b00      	cmp	r3, #0
 8016422:	bf14      	ite	ne
 8016424:	2301      	movne	r3, #1
 8016426:	2300      	moveq	r3, #0
 8016428:	b2db      	uxtb	r3, r3
 801642a:	2b00      	cmp	r3, #0
 801642c:	d001      	beq.n	8016432 <_Z11MX_DSI_Initv+0x216>
  {
    Error_Handler();
 801642e:	f7ea fd95 	bl	8000f5c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8016432:	2100      	movs	r1, #0
 8016434:	481f      	ldr	r0, [pc, #124]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 8016436:	f7ec ff2b 	bl	8003290 <HAL_DSI_SetGenericVCID>
 801643a:	4603      	mov	r3, r0
 801643c:	2b00      	cmp	r3, #0
 801643e:	bf14      	ite	ne
 8016440:	2301      	movne	r3, #1
 8016442:	2300      	moveq	r3, #0
 8016444:	b2db      	uxtb	r3, r3
 8016446:	2b00      	cmp	r3, #0
 8016448:	d001      	beq.n	801644e <_Z11MX_DSI_Initv+0x232>
  {
    Error_Handler();
 801644a:	f7ea fd87 	bl	8000f5c <Error_Handler>
  }



 /* Start DSI */
  HAL_DSI_Start(&(hdsi));
 801644e:	4819      	ldr	r0, [pc, #100]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 8016450:	f7ed f9d4 	bl	80037fc <HAL_DSI_Start>
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
   *  depending on configuration set in 'hdsivideo_handle'.
   */

  /* Send Display off DCS Command to display */
  HAL_DSI_ShortWrite(&(hdsi),
 8016454:	2300      	movs	r3, #0
 8016456:	9300      	str	r3, [sp, #0]
 8016458:	2328      	movs	r3, #40	; 0x28
 801645a:	2215      	movs	r2, #21
 801645c:	2100      	movs	r1, #0
 801645e:	4815      	ldr	r0, [pc, #84]	; (80164b4 <_Z11MX_DSI_Initv+0x298>)
 8016460:	f7ed fa29 	bl	80038b6 <HAL_DSI_ShortWrite>
                     0,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPOFF,
                     0x00);

  OTM8009A_Init(OTM8009A_FORMAT, OTM8009A_ORIENTATION_LANDSCAPE);
 8016464:	2101      	movs	r1, #1
 8016466:	2000      	movs	r0, #0
 8016468:	f7eb fbae 	bl	8001bc8 <OTM8009A_Init>

  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_DISABLE;
 801646c:	4b16      	ldr	r3, [pc, #88]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 801646e:	2200      	movs	r2, #0
 8016470:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 8016472:	4b15      	ldr	r3, [pc, #84]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016474:	2200      	movs	r2, #0
 8016476:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_DISABLE;
 8016478:	4b13      	ldr	r3, [pc, #76]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 801647a:	2200      	movs	r2, #0
 801647c:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 801647e:	4b12      	ldr	r3, [pc, #72]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016480:	2200      	movs	r2, #0
 8016482:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_DISABLE;
 8016484:	4b10      	ldr	r3, [pc, #64]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016486:	2200      	movs	r2, #0
 8016488:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 801648a:	4b0f      	ldr	r3, [pc, #60]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 801648c:	2200      	movs	r2, #0
 801648e:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
 8016490:	4b0d      	ldr	r3, [pc, #52]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016492:	2200      	movs	r2, #0
 8016494:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 8016496:	4b0c      	ldr	r3, [pc, #48]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 8016498:	2200      	movs	r2, #0
 801649a:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
 801649c:	4b0a      	ldr	r3, [pc, #40]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 801649e:	2200      	movs	r2, #0
 80164a0:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 80164a2:	4b09      	ldr	r3, [pc, #36]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 80164a4:	2200      	movs	r2, #0
 80164a6:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 80164a8:	4b07      	ldr	r3, [pc, #28]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 80164aa:	2200      	movs	r2, #0
 80164ac:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 80164ae:	4906      	ldr	r1, [pc, #24]	; (80164c8 <_Z11MX_DSI_Initv+0x2ac>)
 80164b0:	e00e      	b.n	80164d0 <_Z11MX_DSI_Initv+0x2b4>
 80164b2:	bf00      	nop
 80164b4:	20009be8 	.word	0x20009be8
 80164b8:	40016c00 	.word	0x40016c00
 80164bc:	20009ce4 	.word	0x20009ce4
 80164c0:	20009c60 	.word	0x20009c60
 80164c4:	20009c48 	.word	0x20009c48
 80164c8:	20009cb0 	.word	0x20009cb0
 80164cc:	20009c84 	.word	0x20009c84
 80164d0:	4802      	ldr	r0, [pc, #8]	; (80164dc <_Z11MX_DSI_Initv+0x2c0>)
 80164d2:	f7ec ffdd 	bl	8003490 <HAL_DSI_ConfigCommand>

  }
 80164d6:	bf00      	nop
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}
 80164dc:	20009be8 	.word	0x20009be8

080164e0 <HAL_LTDC_MspInit>:

  /*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b084      	sub	sp, #16
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	4a0e      	ldr	r2, [pc, #56]	; (8016528 <HAL_LTDC_MspInit+0x48>)
 80164ee:	4293      	cmp	r3, r2
 80164f0:	d115      	bne.n	801651e <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80164f2:	2300      	movs	r3, #0
 80164f4:	60fb      	str	r3, [r7, #12]
 80164f6:	4b0d      	ldr	r3, [pc, #52]	; (801652c <HAL_LTDC_MspInit+0x4c>)
 80164f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164fa:	4a0c      	ldr	r2, [pc, #48]	; (801652c <HAL_LTDC_MspInit+0x4c>)
 80164fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016500:	6453      	str	r3, [r2, #68]	; 0x44
 8016502:	4b0a      	ldr	r3, [pc, #40]	; (801652c <HAL_LTDC_MspInit+0x4c>)
 8016504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016506:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801650a:	60fb      	str	r3, [r7, #12]
 801650c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801650e:	2200      	movs	r2, #0
 8016510:	2105      	movs	r1, #5
 8016512:	2058      	movs	r0, #88	; 0x58
 8016514:	f7eb feec 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8016518:	2058      	movs	r0, #88	; 0x58
 801651a:	f7eb ff05 	bl	8002328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 801651e:	bf00      	nop
 8016520:	3710      	adds	r7, #16
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}
 8016526:	bf00      	nop
 8016528:	40016800 	.word	0x40016800
 801652c:	40023800 	.word	0x40023800

08016530 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b082      	sub	sp, #8
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	4a07      	ldr	r2, [pc, #28]	; (801655c <HAL_LTDC_MspDeInit+0x2c>)
 801653e:	4293      	cmp	r3, r2
 8016540:	d108      	bne.n	8016554 <HAL_LTDC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8016542:	4b07      	ldr	r3, [pc, #28]	; (8016560 <HAL_LTDC_MspDeInit+0x30>)
 8016544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016546:	4a06      	ldr	r2, [pc, #24]	; (8016560 <HAL_LTDC_MspDeInit+0x30>)
 8016548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801654c:	6453      	str	r3, [r2, #68]	; 0x44

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 801654e:	2058      	movs	r0, #88	; 0x58
 8016550:	f7eb fef8 	bl	8002344 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8016554:	bf00      	nop
 8016556:	3708      	adds	r7, #8
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}
 801655c:	40016800 	.word	0x40016800
 8016560:	40023800 	.word	0x40023800

08016564 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b08a      	sub	sp, #40	; 0x28
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801656c:	f107 0314 	add.w	r3, r7, #20
 8016570:	2200      	movs	r2, #0
 8016572:	601a      	str	r2, [r3, #0]
 8016574:	605a      	str	r2, [r3, #4]
 8016576:	609a      	str	r2, [r3, #8]
 8016578:	60da      	str	r2, [r3, #12]
 801657a:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	4a1d      	ldr	r2, [pc, #116]	; (80165f8 <HAL_DSI_MspInit+0x94>)
 8016582:	4293      	cmp	r3, r2
 8016584:	d133      	bne.n	80165ee <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DSI_CLK_ENABLE();
 8016586:	2300      	movs	r3, #0
 8016588:	613b      	str	r3, [r7, #16]
 801658a:	4b1c      	ldr	r3, [pc, #112]	; (80165fc <HAL_DSI_MspInit+0x98>)
 801658c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801658e:	4a1b      	ldr	r2, [pc, #108]	; (80165fc <HAL_DSI_MspInit+0x98>)
 8016590:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016594:	6453      	str	r3, [r2, #68]	; 0x44
 8016596:	4b19      	ldr	r3, [pc, #100]	; (80165fc <HAL_DSI_MspInit+0x98>)
 8016598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801659a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801659e:	613b      	str	r3, [r7, #16]
 80165a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80165a2:	2300      	movs	r3, #0
 80165a4:	60fb      	str	r3, [r7, #12]
 80165a6:	4b15      	ldr	r3, [pc, #84]	; (80165fc <HAL_DSI_MspInit+0x98>)
 80165a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165aa:	4a14      	ldr	r2, [pc, #80]	; (80165fc <HAL_DSI_MspInit+0x98>)
 80165ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80165b0:	6313      	str	r3, [r2, #48]	; 0x30
 80165b2:	4b12      	ldr	r3, [pc, #72]	; (80165fc <HAL_DSI_MspInit+0x98>)
 80165b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80165ba:	60fb      	str	r3, [r7, #12]
 80165bc:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80165be:	2304      	movs	r3, #4
 80165c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165c2:	2302      	movs	r3, #2
 80165c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165c6:	2300      	movs	r3, #0
 80165c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165ca:	2303      	movs	r3, #3
 80165cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80165ce:	230d      	movs	r3, #13
 80165d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80165d2:	f107 0314 	add.w	r3, r7, #20
 80165d6:	4619      	mov	r1, r3
 80165d8:	4809      	ldr	r0, [pc, #36]	; (8016600 <HAL_DSI_MspInit+0x9c>)
 80165da:	f7ed fa53 	bl	8003a84 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 80165de:	2200      	movs	r2, #0
 80165e0:	2105      	movs	r1, #5
 80165e2:	205c      	movs	r0, #92	; 0x5c
 80165e4:	f7eb fe84 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80165e8:	205c      	movs	r0, #92	; 0x5c
 80165ea:	f7eb fe9d 	bl	8002328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 80165ee:	bf00      	nop
 80165f0:	3728      	adds	r7, #40	; 0x28
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	40016c00 	.word	0x40016c00
 80165fc:	40023800 	.word	0x40023800
 8016600:	40022400 	.word	0x40022400

08016604 <HAL_DMA2D_MspInit>:
  /* USER CODE END DSI_MspDeInit 1 */
  }
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b084      	sub	sp, #16
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	4a0e      	ldr	r2, [pc, #56]	; (801664c <HAL_DMA2D_MspInit+0x48>)
 8016612:	4293      	cmp	r3, r2
 8016614:	d115      	bne.n	8016642 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8016616:	2300      	movs	r3, #0
 8016618:	60fb      	str	r3, [r7, #12]
 801661a:	4b0d      	ldr	r3, [pc, #52]	; (8016650 <HAL_DMA2D_MspInit+0x4c>)
 801661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801661e:	4a0c      	ldr	r2, [pc, #48]	; (8016650 <HAL_DMA2D_MspInit+0x4c>)
 8016620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016624:	6313      	str	r3, [r2, #48]	; 0x30
 8016626:	4b0a      	ldr	r3, [pc, #40]	; (8016650 <HAL_DMA2D_MspInit+0x4c>)
 8016628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801662a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801662e:	60fb      	str	r3, [r7, #12]
 8016630:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8016632:	2200      	movs	r2, #0
 8016634:	2105      	movs	r1, #5
 8016636:	205a      	movs	r0, #90	; 0x5a
 8016638:	f7eb fe5a 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801663c:	205a      	movs	r0, #90	; 0x5a
 801663e:	f7eb fe73 	bl	8002328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8016642:	bf00      	nop
 8016644:	3710      	adds	r7, #16
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
 801664a:	bf00      	nop
 801664c:	4002b000 	.word	0x4002b000
 8016650:	40023800 	.word	0x40023800

08016654 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b082      	sub	sp, #8
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	4a07      	ldr	r2, [pc, #28]	; (8016680 <HAL_DMA2D_MspDeInit+0x2c>)
 8016662:	4293      	cmp	r3, r2
 8016664:	d108      	bne.n	8016678 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8016666:	4b07      	ldr	r3, [pc, #28]	; (8016684 <HAL_DMA2D_MspDeInit+0x30>)
 8016668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801666a:	4a06      	ldr	r2, [pc, #24]	; (8016684 <HAL_DMA2D_MspDeInit+0x30>)
 801666c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016670:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8016672:	205a      	movs	r0, #90	; 0x5a
 8016674:	f7eb fe66 	bl	8002344 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 8016678:	bf00      	nop
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	4002b000 	.word	0x4002b000
 8016684:	40023800 	.word	0x40023800

08016688 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8016688:	b580      	push	{r7, lr}
 801668a:	b086      	sub	sp, #24
 801668c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 801668e:	1d3b      	adds	r3, r7, #4
 8016690:	2200      	movs	r2, #0
 8016692:	601a      	str	r2, [r3, #0]
 8016694:	605a      	str	r2, [r3, #4]
 8016696:	609a      	str	r2, [r3, #8]
 8016698:	60da      	str	r2, [r3, #12]
 801669a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 801669c:	4b44      	ldr	r3, [pc, #272]	; (80167b0 <_ZL15HAL_FMC_MspInitv+0x128>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	f040 8081 	bne.w	80167a8 <_ZL15HAL_FMC_MspInitv+0x120>
    return;
  }
  FMC_Initialized = 1;
 80166a6:	4b42      	ldr	r3, [pc, #264]	; (80167b0 <_ZL15HAL_FMC_MspInitv+0x128>)
 80166a8:	2201      	movs	r2, #1
 80166aa:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80166ac:	2300      	movs	r3, #0
 80166ae:	603b      	str	r3, [r7, #0]
 80166b0:	4b40      	ldr	r3, [pc, #256]	; (80167b4 <_ZL15HAL_FMC_MspInitv+0x12c>)
 80166b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166b4:	4a3f      	ldr	r2, [pc, #252]	; (80167b4 <_ZL15HAL_FMC_MspInitv+0x12c>)
 80166b6:	f043 0301 	orr.w	r3, r3, #1
 80166ba:	6393      	str	r3, [r2, #56]	; 0x38
 80166bc:	4b3d      	ldr	r3, [pc, #244]	; (80167b4 <_ZL15HAL_FMC_MspInitv+0x12c>)
 80166be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166c0:	f003 0301 	and.w	r3, r3, #1
 80166c4:	603b      	str	r3, [r7, #0]
 80166c6:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin 
 80166c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80166cc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin 
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80166ce:	2302      	movs	r3, #2
 80166d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166d2:	2300      	movs	r3, #0
 80166d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80166d6:	2303      	movs	r3, #3
 80166d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80166da:	230c      	movs	r3, #12
 80166dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80166de:	1d3b      	adds	r3, r7, #4
 80166e0:	4619      	mov	r1, r3
 80166e2:	4835      	ldr	r0, [pc, #212]	; (80167b8 <_ZL15HAL_FMC_MspInitv+0x130>)
 80166e4:	f7ed f9ce 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin 
 80166e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80166ec:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80166ee:	2302      	movs	r3, #2
 80166f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166f2:	2300      	movs	r3, #0
 80166f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80166f6:	2303      	movs	r3, #3
 80166f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80166fa:	230c      	movs	r3, #12
 80166fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80166fe:	1d3b      	adds	r3, r7, #4
 8016700:	4619      	mov	r1, r3
 8016702:	482e      	ldr	r0, [pc, #184]	; (80167bc <_ZL15HAL_FMC_MspInitv+0x134>)
 8016704:	f7ed f9be 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin 
 8016708:	f24c 7303 	movw	r3, #50947	; 0xc703
 801670c:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801670e:	2302      	movs	r3, #2
 8016710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016712:	2300      	movs	r3, #0
 8016714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016716:	2303      	movs	r3, #3
 8016718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801671a:	230c      	movs	r3, #12
 801671c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801671e:	1d3b      	adds	r3, r7, #4
 8016720:	4619      	mov	r1, r3
 8016722:	4827      	ldr	r0, [pc, #156]	; (80167c0 <_ZL15HAL_FMC_MspInitv+0x138>)
 8016724:	f7ed f9ae 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8016728:	f240 63ff 	movw	r3, #1791	; 0x6ff
 801672c:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801672e:	2302      	movs	r3, #2
 8016730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016732:	2300      	movs	r3, #0
 8016734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016736:	2303      	movs	r3, #3
 8016738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801673a:	230c      	movs	r3, #12
 801673c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801673e:	1d3b      	adds	r3, r7, #4
 8016740:	4619      	mov	r1, r3
 8016742:	4820      	ldr	r0, [pc, #128]	; (80167c4 <_ZL15HAL_FMC_MspInitv+0x13c>)
 8016744:	f7ed f99e 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8016748:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801674c:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin 
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801674e:	2302      	movs	r3, #2
 8016750:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016752:	2300      	movs	r3, #0
 8016754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016756:	2303      	movs	r3, #3
 8016758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801675a:	230c      	movs	r3, #12
 801675c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801675e:	1d3b      	adds	r3, r7, #4
 8016760:	4619      	mov	r1, r3
 8016762:	4819      	ldr	r0, [pc, #100]	; (80167c8 <_ZL15HAL_FMC_MspInitv+0x140>)
 8016764:	f7ed f98e 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin 
 8016768:	f64f 730c 	movw	r3, #65292	; 0xff0c
 801676c:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin 
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801676e:	2302      	movs	r3, #2
 8016770:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016772:	2300      	movs	r3, #0
 8016774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016776:	2303      	movs	r3, #3
 8016778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801677a:	230c      	movs	r3, #12
 801677c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801677e:	1d3b      	adds	r3, r7, #4
 8016780:	4619      	mov	r1, r3
 8016782:	4812      	ldr	r0, [pc, #72]	; (80167cc <_ZL15HAL_FMC_MspInitv+0x144>)
 8016784:	f7ed f97e 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8016788:	2301      	movs	r3, #1
 801678a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801678c:	2302      	movs	r3, #2
 801678e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016790:	2300      	movs	r3, #0
 8016792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016794:	2303      	movs	r3, #3
 8016796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8016798:	230c      	movs	r3, #12
 801679a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 801679c:	1d3b      	adds	r3, r7, #4
 801679e:	4619      	mov	r1, r3
 80167a0:	480b      	ldr	r0, [pc, #44]	; (80167d0 <_ZL15HAL_FMC_MspInitv+0x148>)
 80167a2:	f7ed f96f 	bl	8003a84 <HAL_GPIO_Init>
 80167a6:	e000      	b.n	80167aa <_ZL15HAL_FMC_MspInitv+0x122>
    return;
 80167a8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80167aa:	3718      	adds	r7, #24
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd80      	pop	{r7, pc}
 80167b0:	20009cf0 	.word	0x20009cf0
 80167b4:	40023800 	.word	0x40023800
 80167b8:	40021000 	.word	0x40021000
 80167bc:	40021800 	.word	0x40021800
 80167c0:	40020c00 	.word	0x40020c00
 80167c4:	40022000 	.word	0x40022000
 80167c8:	40021400 	.word	0x40021400
 80167cc:	40021c00 	.word	0x40021c00
 80167d0:	40020800 	.word	0x40020800

080167d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b082      	sub	sp, #8
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80167dc:	f7ff ff54 	bl	8016688 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80167e0:	bf00      	nop
 80167e2:	3708      	adds	r7, #8
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}

080167e8 <_ZN22OTM8009TouchController4initEv>:
uint32_t LCD_GetXSize();
uint32_t LCD_GetYSize();
}

void OTM8009TouchController::init()
{
 80167e8:	b590      	push	{r4, r7, lr}
 80167ea:	b083      	sub	sp, #12
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN OTM8009TouchController_init */
    /* Add code for touch controller Initialization */
    BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 80167f0:	f7fe fffa 	bl	80157e8 <LCD_GetXSize>
 80167f4:	4603      	mov	r3, r0
 80167f6:	b29c      	uxth	r4, r3
 80167f8:	f7fe ffff 	bl	80157fa <LCD_GetYSize>
 80167fc:	4603      	mov	r3, r0
 80167fe:	b29b      	uxth	r3, r3
 8016800:	4619      	mov	r1, r3
 8016802:	4620      	mov	r0, r4
 8016804:	f7fc fe98 	bl	8013538 <BSP_TS_Init>
    
/* USER CODE END OTM8009TouchController_init */
}
 8016808:	bf00      	nop
 801680a:	370c      	adds	r7, #12
 801680c:	46bd      	mov	sp, r7
 801680e:	bd90      	pop	{r4, r7, pc}

08016810 <_ZN22OTM8009TouchController11sampleTouchERlS0_>:

bool OTM8009TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b088      	sub	sp, #32
 8016814:	af00      	add	r7, sp, #0
 8016816:	60f8      	str	r0, [r7, #12]
 8016818:	60b9      	str	r1, [r7, #8]
 801681a:	607a      	str	r2, [r7, #4]
/* USER CODE BEGIN OTM8009TouchController_sampleTouch */
    TS_StateTypeDef state;
      BSP_TS_GetState(&state);
 801681c:	f107 0314 	add.w	r3, r7, #20
 8016820:	4618      	mov	r0, r3
 8016822:	f7fc fee9 	bl	80135f8 <BSP_TS_GetState>
      if (state.touchDetected)
 8016826:	7d3b      	ldrb	r3, [r7, #20]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d009      	beq.n	8016840 <_ZN22OTM8009TouchController11sampleTouchERlS0_+0x30>
      {
       x = state.touchX[0];
 801682c:	8afb      	ldrh	r3, [r7, #22]
 801682e:	461a      	mov	r2, r3
 8016830:	68bb      	ldr	r3, [r7, #8]
 8016832:	601a      	str	r2, [r3, #0]
       y = state.touchY[0];
 8016834:	8b7b      	ldrh	r3, [r7, #26]
 8016836:	461a      	mov	r2, r3
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	601a      	str	r2, [r3, #0]
       return true;
 801683c:	2301      	movs	r3, #1
 801683e:	e000      	b.n	8016842 <_ZN22OTM8009TouchController11sampleTouchERlS0_+0x32>
    }

    return false; 
 8016840:	2300      	movs	r3, #0
/* USER CODE END OTM8009TouchController_sampleTouch */
}
 8016842:	4618      	mov	r0, r3
 8016844:	3720      	adds	r7, #32
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}

0801684a <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 801684a:	b480      	push	{r7}
 801684c:	b083      	sub	sp, #12
 801684e:	af00      	add	r7, sp, #0
 8016850:	6078      	str	r0, [r7, #4]
        return color;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	681b      	ldr	r3, [r3, #0]
    }
 8016856:	4618      	mov	r0, r3
 8016858:	370c      	adds	r7, #12
 801685a:	46bd      	mov	sp, r7
 801685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016860:	4770      	bx	lr
	...

08016864 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
    {
 801686c:	4a04      	ldr	r2, [pc, #16]	; (8016880 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	601a      	str	r2, [r3, #0]
    }
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	4618      	mov	r0, r3
 8016876:	370c      	adds	r7, #12
 8016878:	46bd      	mov	sp, r7
 801687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687e:	4770      	bx	lr
 8016880:	08020b44 	.word	0x08020b44

08016884 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
    }
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f7ff ffe9 	bl	8016864 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016892:	2104      	movs	r1, #4
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	f007 fffc 	bl	801e892 <_ZdlPvj>
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	4618      	mov	r0, r3
 801689e:	3708      	adds	r7, #8
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}

080168a4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	3344      	adds	r3, #68	; 0x44
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	4798      	blx	r3
    }
 80168b8:	bf00      	nop
 80168ba:	3708      	adds	r7, #8
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}

080168c0 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80168c0:	b480      	push	{r7}
 80168c2:	b083      	sub	sp, #12
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80168c8:	2300      	movs	r3, #0
    }
 80168ca:	4618      	mov	r0, r3
 80168cc:	370c      	adds	r7, #12
 80168ce:	46bd      	mov	sp, r7
 80168d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d4:	4770      	bx	lr
	...

080168d8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80168d8:	b480      	push	{r7}
 80168da:	b083      	sub	sp, #12
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
    {
 80168e0:	4a04      	ldr	r2, [pc, #16]	; (80168f4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	601a      	str	r2, [r3, #0]
    }
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	4618      	mov	r0, r3
 80168ea:	370c      	adds	r7, #12
 80168ec:	46bd      	mov	sp, r7
 80168ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f2:	4770      	bx	lr
 80168f4:	08021514 	.word	0x08021514

080168f8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
    }
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	f7ff ffe9 	bl	80168d8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016906:	210c      	movs	r1, #12
 8016908:	6878      	ldr	r0, [r7, #4]
 801690a:	f007 ffc2 	bl	801e892 <_ZdlPvj>
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	4618      	mov	r0, r3
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016918:	b480      	push	{r7}
 801691a:	b083      	sub	sp, #12
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016922:	4a09      	ldr	r2, [pc, #36]	; (8016948 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	601a      	str	r2, [r3, #0]
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	683a      	ldr	r2, [r7, #0]
 801692c:	605a      	str	r2, [r3, #4]
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2200      	movs	r2, #0
 8016932:	721a      	strb	r2, [r3, #8]
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	2200      	movs	r2, #0
 8016938:	725a      	strb	r2, [r3, #9]
    {
    }
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	4618      	mov	r0, r3
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr
 8016948:	08021514 	.word	0x08021514

0801694c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	685a      	ldr	r2, [r3, #4]
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	685b      	ldr	r3, [r3, #4]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	3314      	adds	r3, #20
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	4610      	mov	r0, r2
 8016964:	4798      	blx	r3
    }
 8016966:	bf00      	nop
 8016968:	3708      	adds	r7, #8
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}

0801696e <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801696e:	b580      	push	{r7, lr}
 8016970:	b082      	sub	sp, #8
 8016972:	af00      	add	r7, sp, #0
 8016974:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8016976:	687a      	ldr	r2, [r7, #4]
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	3328      	adds	r3, #40	; 0x28
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	4610      	mov	r0, r2
 8016982:	4798      	blx	r3
    }
 8016984:	bf00      	nop
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}

0801698c <__NVIC_EnableIRQ>:
{
 801698c:	b480      	push	{r7}
 801698e:	b083      	sub	sp, #12
 8016990:	af00      	add	r7, sp, #0
 8016992:	4603      	mov	r3, r0
 8016994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801699a:	2b00      	cmp	r3, #0
 801699c:	db0d      	blt.n	80169ba <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801699e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	f003 021f 	and.w	r2, r3, #31
 80169a8:	4907      	ldr	r1, [pc, #28]	; (80169c8 <__NVIC_EnableIRQ+0x3c>)
 80169aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169ae:	095b      	lsrs	r3, r3, #5
 80169b0:	2001      	movs	r0, #1
 80169b2:	fa00 f202 	lsl.w	r2, r0, r2
 80169b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80169ba:	bf00      	nop
 80169bc:	370c      	adds	r7, #12
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr
 80169c6:	bf00      	nop
 80169c8:	e000e100 	.word	0xe000e100

080169cc <__NVIC_DisableIRQ>:
{
 80169cc:	b480      	push	{r7}
 80169ce:	b083      	sub	sp, #12
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	4603      	mov	r3, r0
 80169d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80169d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	db12      	blt.n	8016a04 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80169de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169e2:	b2db      	uxtb	r3, r3
 80169e4:	f003 021f 	and.w	r2, r3, #31
 80169e8:	4909      	ldr	r1, [pc, #36]	; (8016a10 <__NVIC_DisableIRQ+0x44>)
 80169ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169ee:	095b      	lsrs	r3, r3, #5
 80169f0:	2001      	movs	r0, #1
 80169f2:	fa00 f202 	lsl.w	r2, r0, r2
 80169f6:	3320      	adds	r3, #32
 80169f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80169fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8016a00:	f3bf 8f6f 	isb	sy
}
 8016a04:	bf00      	nop
 8016a06:	370c      	adds	r7, #12
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a0e:	4770      	bx	lr
 8016a10:	e000e100 	.word	0xe000e100

08016a14 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8016a14:	b480      	push	{r7}
 8016a16:	b085      	sub	sp, #20
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	60f8      	str	r0, [r7, #12]
 8016a1c:	60b9      	str	r1, [r7, #8]
 8016a1e:	607a      	str	r2, [r7, #4]
 8016a20:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8016a2c:	68ba      	ldr	r2, [r7, #8]
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	430a      	orrs	r2, r1
 8016a34:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a3c:	f023 0107 	bic.w	r1, r3, #7
 8016a40:	687a      	ldr	r2, [r7, #4]
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	430a      	orrs	r2, r1
 8016a48:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8016a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016a58:	6839      	ldr	r1, [r7, #0]
 8016a5a:	68fa      	ldr	r2, [r7, #12]
 8016a5c:	6812      	ldr	r2, [r2, #0]
 8016a5e:	430b      	orrs	r3, r1
 8016a60:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8016a62:	2300      	movs	r3, #0
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	3714      	adds	r7, #20
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr

08016a70 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* hdma2d)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8016a78:	f7f8 fc54 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7ff ff64 	bl	801694c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8016a84:	bf00      	nop
 8016a86:	3708      	adds	r7, #8
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}

08016a8c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* hdma2d)
{
 8016a8c:	b480      	push	{r7}
 8016a8e:	b083      	sub	sp, #12
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 8016a94:	bf00      	nop
 8016a96:	370c      	adds	r7, #12
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr

08016aa0 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	3318      	adds	r3, #24
 8016aac:	4618      	mov	r0, r3
 8016aae:	f7f9 fb1d 	bl	80100ec <_ZN8touchgfx9colortypeC1Ev>
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	3708      	adds	r7, #8
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	bd80      	pop	{r7, pc}

08016abc <_ZN10STM32F4DMAC1Ev>:

}

STM32F4DMA::STM32F4DMA()
 8016abc:	b5b0      	push	{r4, r5, r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016ac4:	687a      	ldr	r2, [r7, #4]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	330c      	adds	r3, #12
 8016aca:	4619      	mov	r1, r3
 8016acc:	4610      	mov	r0, r2
 8016ace:	f7ff ff23 	bl	8016918 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016ad2:	4a0e      	ldr	r2, [pc, #56]	; (8016b0c <_ZN10STM32F4DMAC1Ev+0x50>)
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	601a      	str	r2, [r3, #0]
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f103 000c 	add.w	r0, r3, #12
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	3320      	adds	r3, #32
 8016ae2:	2260      	movs	r2, #96	; 0x60
 8016ae4:	4619      	mov	r1, r3
 8016ae6:	f003 f8fb 	bl	8019ce0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	3320      	adds	r3, #32
 8016aee:	245f      	movs	r4, #95	; 0x5f
 8016af0:	461d      	mov	r5, r3
 8016af2:	2c00      	cmp	r4, #0
 8016af4:	db05      	blt.n	8016b02 <_ZN10STM32F4DMAC1Ev+0x46>
 8016af6:	4628      	mov	r0, r5
 8016af8:	f7ff ffd2 	bl	8016aa0 <_ZN8touchgfx6BlitOpC1Ev>
 8016afc:	3520      	adds	r5, #32
 8016afe:	3c01      	subs	r4, #1
 8016b00:	e7f7      	b.n	8016af2 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	4618      	mov	r0, r3
 8016b06:	3708      	adds	r7, #8
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8016b0c:	08020af4 	.word	0x08020af4

08016b10 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	4a0b      	ldr	r2, [pc, #44]	; (8016b48 <_ZN10STM32F4DMAD1Ev+0x38>)
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8016b1e:	480b      	ldr	r0, [pc, #44]	; (8016b4c <_ZN10STM32F4DMAD1Ev+0x3c>)
 8016b20:	f7eb fd16 	bl	8002550 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016b24:	205a      	movs	r0, #90	; 0x5a
 8016b26:	f7ff ff51 	bl	80169cc <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	330c      	adds	r3, #12
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f000 faaa 	bl	8017088 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	4618      	mov	r0, r3
 8016b38:	f7ff fece 	bl	80168d8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	4618      	mov	r0, r3
 8016b40:	3708      	adds	r7, #8
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	08020af4 	.word	0x08020af4
 8016b4c:	20009ba8 	.word	0x20009ba8

08016b50 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
}
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f7ff ffd9 	bl	8016b10 <_ZN10STM32F4DMAD1Ev>
 8016b5e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f007 fe95 	bl	801e892 <_ZdlPvj>
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	3708      	adds	r7, #8
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	bd80      	pop	{r7, pc}
	...

08016b74 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b082      	sub	sp, #8
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8016b7c:	4b09      	ldr	r3, [pc, #36]	; (8016ba4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8016b7e:	4a0a      	ldr	r2, [pc, #40]	; (8016ba8 <_ZN10STM32F4DMA10initializeEv+0x34>)
 8016b80:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8016b82:	4808      	ldr	r0, [pc, #32]	; (8016ba4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8016b84:	f7eb fc9a 	bl	80024bc <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8016b88:	4b06      	ldr	r3, [pc, #24]	; (8016ba4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8016b8a:	4a08      	ldr	r2, [pc, #32]	; (8016bac <_ZN10STM32F4DMA10initializeEv+0x38>)
 8016b8c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8016b8e:	4b05      	ldr	r3, [pc, #20]	; (8016ba4 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8016b90:	4a07      	ldr	r2, [pc, #28]	; (8016bb0 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 8016b92:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8016b94:	205a      	movs	r0, #90	; 0x5a
 8016b96:	f7ff fef9 	bl	801698c <__NVIC_EnableIRQ>
}
 8016b9a:	bf00      	nop
 8016b9c:	3708      	adds	r7, #8
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	20009ba8 	.word	0x20009ba8
 8016ba8:	4002b000 	.word	0x4002b000
 8016bac:	08016a71 	.word	0x08016a71
 8016bb0:	08016a8d 	.word	0x08016a8d

08016bb4 <_ZN10STM32F4DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F4DMA::getBlitCaps()
{
 8016bb4:	b480      	push	{r7}
 8016bb6:	b083      	sub	sp, #12
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 8016bbc:	4b07      	ldr	r3, [pc, #28]	; (8016bdc <_ZN10STM32F4DMA11getBlitCapsEv+0x28>)
 8016bbe:	781b      	ldrb	r3, [r3, #0]
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d001      	beq.n	8016bca <_ZN10STM32F4DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	e001      	b.n	8016bce <_ZN10STM32F4DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 8016bca:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 8016bce:	4618      	mov	r0, r3
 8016bd0:	370c      	adds	r7, #12
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd8:	4770      	bx	lr
 8016bda:	bf00      	nop
 8016bdc:	20009cf4 	.word	0x20009cf4

08016be0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016be0:	b590      	push	{r4, r7, lr}
 8016be2:	b08d      	sub	sp, #52	; 0x34
 8016be4:	af02      	add	r7, sp, #8
 8016be6:	6078      	str	r0, [r7, #4]
 8016be8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8016bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016bee:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016bf8:	2b20      	cmp	r3, #32
 8016bfa:	d007      	beq.n	8016c0c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8016bfc:	683b      	ldr	r3, [r7, #0]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	2b40      	cmp	r3, #64	; 0x40
 8016c02:	d003      	beq.n	8016c0c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	2b04      	cmp	r3, #4
 8016c0a:	d101      	bne.n	8016c10 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	e000      	b.n	8016c12 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8016c10:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016c12:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8016c18:	2b80      	cmp	r3, #128	; 0x80
 8016c1a:	d004      	beq.n	8016c26 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8016c1c:	683b      	ldr	r3, [r7, #0]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016c24:	d101      	bne.n	8016c2a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8016c26:	2301      	movs	r3, #1
 8016c28:	e000      	b.n	8016c2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8016c2a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016c2c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016c2e:	f7f8 fb85 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 8016c32:	4602      	mov	r2, r0
 8016c34:	6813      	ldr	r3, [r2, #0]
 8016c36:	3320      	adds	r3, #32
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	4610      	mov	r0, r2
 8016c3c:	4798      	blx	r3
 8016c3e:	4603      	mov	r3, r0
 8016c40:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	2b40      	cmp	r3, #64	; 0x40
 8016c48:	d01d      	beq.n	8016c86 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016c4a:	2b40      	cmp	r3, #64	; 0x40
 8016c4c:	d804      	bhi.n	8016c58 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8016c4e:	2b04      	cmp	r3, #4
 8016c50:	d00e      	beq.n	8016c70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8016c52:	2b20      	cmp	r3, #32
 8016c54:	d017      	beq.n	8016c86 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016c56:	e019      	b.n	8016c8c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8016c58:	2b80      	cmp	r3, #128	; 0x80
 8016c5a:	d003      	beq.n	8016c64 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8016c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016c60:	d003      	beq.n	8016c6a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8016c62:	e013      	b.n	8016c8c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016c64:	230a      	movs	r3, #10
 8016c66:	623b      	str	r3, [r7, #32]
        break;
 8016c68:	e01a      	b.n	8016ca0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8016c6a:	2309      	movs	r3, #9
 8016c6c:	623b      	str	r3, [r7, #32]
        break;
 8016c6e:	e017      	b.n	8016ca0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016c74:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016c76:	7f7b      	ldrb	r3, [r7, #29]
 8016c78:	2b10      	cmp	r3, #16
 8016c7a:	d101      	bne.n	8016c80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8016c7c:	2302      	movs	r3, #2
 8016c7e:	e000      	b.n	8016c82 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8016c80:	2301      	movs	r3, #1
 8016c82:	623b      	str	r3, [r7, #32]
        break;
 8016c84:	e00c      	b.n	8016ca0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016c86:	2300      	movs	r3, #0
 8016c88:	623b      	str	r3, [r7, #32]
        break;
 8016c8a:	e009      	b.n	8016ca0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016c90:	7f7b      	ldrb	r3, [r7, #29]
 8016c92:	2b10      	cmp	r3, #16
 8016c94:	d101      	bne.n	8016c9a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8016c96:	2302      	movs	r3, #2
 8016c98:	e000      	b.n	8016c9c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	623b      	str	r3, [r7, #32]
        break;
 8016c9e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init! */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016ca0:	4a76      	ldr	r2, [pc, #472]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca4:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016ca6:	7f7b      	ldrb	r3, [r7, #29]
 8016ca8:	2b10      	cmp	r3, #16
 8016caa:	d101      	bne.n	8016cb0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8016cac:	2302      	movs	r3, #2
 8016cae:	e000      	b.n	8016cb2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	4a72      	ldr	r2, [pc, #456]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016cb4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	8adb      	ldrh	r3, [r3, #22]
 8016cba:	461a      	mov	r2, r3
 8016cbc:	683b      	ldr	r3, [r7, #0]
 8016cbe:	8a1b      	ldrh	r3, [r3, #16]
 8016cc0:	1ad3      	subs	r3, r2, r3
 8016cc2:	461a      	mov	r2, r3
 8016cc4:	4b6d      	ldr	r3, [pc, #436]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016cc6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016cc8:	7f7b      	ldrb	r3, [r7, #29]
 8016cca:	2b10      	cmp	r3, #16
 8016ccc:	d101      	bne.n	8016cd2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8016cce:	2202      	movs	r2, #2
 8016cd0:	e000      	b.n	8016cd4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8016cd2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016cd4:	683b      	ldr	r3, [r7, #0]
 8016cd6:	8adb      	ldrh	r3, [r3, #22]
 8016cd8:	4619      	mov	r1, r3
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	8a1b      	ldrh	r3, [r3, #16]
 8016cde:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ce2:	4866      	ldr	r0, [pc, #408]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016ce4:	f7ff fe96 	bl	8016a14 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016ce8:	4a64      	ldr	r2, [pc, #400]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016cea:	6a3b      	ldr	r3, [r7, #32]
 8016cec:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8016cee:	683b      	ldr	r3, [r7, #0]
 8016cf0:	8a9b      	ldrh	r3, [r3, #20]
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	8a1b      	ldrh	r3, [r3, #16]
 8016cf8:	1ad3      	subs	r3, r2, r3
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	4b5f      	ldr	r3, [pc, #380]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016cfe:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8016d00:	7ffb      	ldrb	r3, [r7, #31]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d103      	bne.n	8016d0e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8016d06:	7fbb      	ldrb	r3, [r7, #30]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	f000 8082 	beq.w	8016e12 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8016d0e:	683b      	ldr	r3, [r7, #0]
 8016d10:	7f1b      	ldrb	r3, [r3, #28]
 8016d12:	2bff      	cmp	r3, #255	; 0xff
 8016d14:	d008      	beq.n	8016d28 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8016d16:	4b59      	ldr	r3, [pc, #356]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016d18:	2202      	movs	r2, #2
 8016d1a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8016d1c:	683b      	ldr	r3, [r7, #0]
 8016d1e:	7f1b      	ldrb	r3, [r3, #28]
 8016d20:	461a      	mov	r2, r3
 8016d22:	4b56      	ldr	r3, [pc, #344]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016d24:	635a      	str	r2, [r3, #52]	; 0x34
 8016d26:	e002      	b.n	8016d2e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8016d28:	4b54      	ldr	r3, [pc, #336]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8016d2e:	7fbb      	ldrb	r3, [r7, #30]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d059      	beq.n	8016de8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8016d34:	7f7b      	ldrb	r3, [r7, #29]
 8016d36:	2b10      	cmp	r3, #16
 8016d38:	d14a      	bne.n	8016dd0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	3318      	adds	r3, #24
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7f9 fb81 	bl	8010446 <_ZNK8touchgfx9colortypecvtEv>
 8016d44:	4603      	mov	r3, r0
 8016d46:	12db      	asrs	r3, r3, #11
 8016d48:	f003 021f 	and.w	r2, r3, #31
 8016d4c:	4613      	mov	r3, r2
 8016d4e:	021b      	lsls	r3, r3, #8
 8016d50:	1a9b      	subs	r3, r3, r2
 8016d52:	4a4b      	ldr	r2, [pc, #300]	; (8016e80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016d54:	fb82 1203 	smull	r1, r2, r2, r3
 8016d58:	441a      	add	r2, r3
 8016d5a:	1112      	asrs	r2, r2, #4
 8016d5c:	17db      	asrs	r3, r3, #31
 8016d5e:	1ad3      	subs	r3, r2, r3
 8016d60:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016d62:	683b      	ldr	r3, [r7, #0]
 8016d64:	3318      	adds	r3, #24
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7f9 fb6d 	bl	8010446 <_ZNK8touchgfx9colortypecvtEv>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	115b      	asrs	r3, r3, #5
 8016d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016d74:	4613      	mov	r3, r2
 8016d76:	021b      	lsls	r3, r3, #8
 8016d78:	1a9b      	subs	r3, r3, r2
 8016d7a:	4a42      	ldr	r2, [pc, #264]	; (8016e84 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8016d80:	441a      	add	r2, r3
 8016d82:	1152      	asrs	r2, r2, #5
 8016d84:	17db      	asrs	r3, r3, #31
 8016d86:	1ad3      	subs	r3, r2, r3
 8016d88:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	3318      	adds	r3, #24
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7f9 fb59 	bl	8010446 <_ZNK8touchgfx9colortypecvtEv>
 8016d94:	4603      	mov	r3, r0
 8016d96:	f003 021f 	and.w	r2, r3, #31
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	021b      	lsls	r3, r3, #8
 8016d9e:	1a9b      	subs	r3, r3, r2
 8016da0:	4a37      	ldr	r2, [pc, #220]	; (8016e80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016da2:	fb82 1203 	smull	r1, r2, r2, r3
 8016da6:	441a      	add	r2, r3
 8016da8:	1112      	asrs	r2, r2, #4
 8016daa:	17db      	asrs	r3, r3, #31
 8016dac:	1ad3      	subs	r3, r2, r3
 8016dae:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	7f1b      	ldrb	r3, [r3, #28]
 8016db4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	061a      	lsls	r2, r3, #24
 8016dba:	69bb      	ldr	r3, [r7, #24]
 8016dbc:	041b      	lsls	r3, r3, #16
 8016dbe:	431a      	orrs	r2, r3
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	021b      	lsls	r3, r3, #8
 8016dc4:	431a      	orrs	r2, r3
 8016dc6:	693b      	ldr	r3, [r7, #16]
 8016dc8:	4313      	orrs	r3, r2
 8016dca:	4a2c      	ldr	r2, [pc, #176]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016dcc:	6353      	str	r3, [r2, #52]	; 0x34
 8016dce:	e00b      	b.n	8016de8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8016dd0:	683b      	ldr	r3, [r7, #0]
 8016dd2:	3318      	adds	r3, #24
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7ff fd38 	bl	801684a <_ZNK8touchgfx9colortype10getColor32Ev>
 8016dda:	4602      	mov	r2, r0
 8016ddc:	683b      	ldr	r3, [r7, #0]
 8016dde:	7f1b      	ldrb	r3, [r3, #28]
 8016de0:	061b      	lsls	r3, r3, #24
 8016de2:	4313      	orrs	r3, r2
 8016de4:	4a25      	ldr	r2, [pc, #148]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016de6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	8adb      	ldrh	r3, [r3, #22]
 8016dec:	461a      	mov	r2, r3
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	8a1b      	ldrh	r3, [r3, #16]
 8016df2:	1ad3      	subs	r3, r2, r3
 8016df4:	461a      	mov	r2, r3
 8016df6:	4b21      	ldr	r3, [pc, #132]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016df8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016dfa:	7f7b      	ldrb	r3, [r7, #29]
 8016dfc:	2b10      	cmp	r3, #16
 8016dfe:	d101      	bne.n	8016e04 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8016e00:	2302      	movs	r3, #2
 8016e02:	e000      	b.n	8016e06 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8016e04:	2301      	movs	r3, #1
 8016e06:	4a1d      	ldr	r2, [pc, #116]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e08:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016e0a:	2100      	movs	r1, #0
 8016e0c:	481b      	ldr	r0, [pc, #108]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e0e:	f7eb fe1f 	bl	8002a50 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8016e12:	2101      	movs	r1, #1
 8016e14:	4819      	ldr	r0, [pc, #100]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e16:	f7eb fe1b 	bl	8002a50 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8016e1a:	7ffb      	ldrb	r3, [r7, #31]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d102      	bne.n	8016e26 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8016e20:	7fbb      	ldrb	r3, [r7, #30]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d015      	beq.n	8016e52 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016e2a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016e30:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016e36:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016e3c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016e3e:	683b      	ldr	r3, [r7, #0]
 8016e40:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016e42:	9301      	str	r3, [sp, #4]
 8016e44:	9200      	str	r2, [sp, #0]
 8016e46:	4623      	mov	r3, r4
 8016e48:	4602      	mov	r2, r0
 8016e4a:	480c      	ldr	r0, [pc, #48]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e4c:	f7eb fc23 	bl	8002696 <HAL_DMA2D_BlendingStart_IT>
 8016e50:	e00f      	b.n	8016e72 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016e56:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016e5c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016e62:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016e68:	9300      	str	r3, [sp, #0]
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	4803      	ldr	r0, [pc, #12]	; (8016e7c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e6e:	f7eb fbdf 	bl	8002630 <HAL_DMA2D_Start_IT>
    }
}
 8016e72:	bf00      	nop
 8016e74:	372c      	adds	r7, #44	; 0x2c
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd90      	pop	{r4, r7, pc}
 8016e7a:	bf00      	nop
 8016e7c:	20009ba8 	.word	0x20009ba8
 8016e80:	84210843 	.word	0x84210843
 8016e84:	82082083 	.word	0x82082083

08016e88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8016e88:	b590      	push	{r4, r7, lr}
 8016e8a:	b08d      	sub	sp, #52	; 0x34
 8016e8c:	af02      	add	r7, sp, #8
 8016e8e:	6078      	str	r0, [r7, #4]
 8016e90:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016e92:	f7f8 fa53 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 8016e96:	4602      	mov	r2, r0
 8016e98:	6813      	ldr	r3, [r2, #0]
 8016e9a:	3320      	adds	r3, #32
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	4610      	mov	r0, r2
 8016ea0:	4798      	blx	r3
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016ea6:	7ffb      	ldrb	r3, [r7, #31]
 8016ea8:	2b10      	cmp	r3, #16
 8016eaa:	d101      	bne.n	8016eb0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8016eac:	2302      	movs	r3, #2
 8016eae:	e000      	b.n	8016eb2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8016eb8:	7ffb      	ldrb	r3, [r7, #31]
 8016eba:	2b10      	cmp	r3, #16
 8016ebc:	d149      	bne.n	8016f52 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016ebe:	683b      	ldr	r3, [r7, #0]
 8016ec0:	3318      	adds	r3, #24
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7f9 fabf 	bl	8010446 <_ZNK8touchgfx9colortypecvtEv>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	12db      	asrs	r3, r3, #11
 8016ecc:	f003 021f 	and.w	r2, r3, #31
 8016ed0:	4613      	mov	r3, r2
 8016ed2:	021b      	lsls	r3, r3, #8
 8016ed4:	1a9b      	subs	r3, r3, r2
 8016ed6:	4a69      	ldr	r2, [pc, #420]	; (801707c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8016ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8016edc:	441a      	add	r2, r3
 8016ede:	1112      	asrs	r2, r2, #4
 8016ee0:	17db      	asrs	r3, r3, #31
 8016ee2:	1ad3      	subs	r3, r2, r3
 8016ee4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	3318      	adds	r3, #24
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7f9 faab 	bl	8010446 <_ZNK8touchgfx9colortypecvtEv>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	115b      	asrs	r3, r3, #5
 8016ef4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016ef8:	4613      	mov	r3, r2
 8016efa:	021b      	lsls	r3, r3, #8
 8016efc:	1a9b      	subs	r3, r3, r2
 8016efe:	4a60      	ldr	r2, [pc, #384]	; (8017080 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8016f00:	fb82 1203 	smull	r1, r2, r2, r3
 8016f04:	441a      	add	r2, r3
 8016f06:	1152      	asrs	r2, r2, #5
 8016f08:	17db      	asrs	r3, r3, #31
 8016f0a:	1ad3      	subs	r3, r2, r3
 8016f0c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	3318      	adds	r3, #24
 8016f12:	4618      	mov	r0, r3
 8016f14:	f7f9 fa97 	bl	8010446 <_ZNK8touchgfx9colortypecvtEv>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	f003 021f 	and.w	r2, r3, #31
 8016f1e:	4613      	mov	r3, r2
 8016f20:	021b      	lsls	r3, r3, #8
 8016f22:	1a9b      	subs	r3, r3, r2
 8016f24:	4a55      	ldr	r2, [pc, #340]	; (801707c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8016f26:	fb82 1203 	smull	r1, r2, r2, r3
 8016f2a:	441a      	add	r2, r3
 8016f2c:	1112      	asrs	r2, r2, #4
 8016f2e:	17db      	asrs	r3, r3, #31
 8016f30:	1ad3      	subs	r3, r2, r3
 8016f32:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	7f1b      	ldrb	r3, [r3, #28]
 8016f38:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	061a      	lsls	r2, r3, #24
 8016f3e:	697b      	ldr	r3, [r7, #20]
 8016f40:	041b      	lsls	r3, r3, #16
 8016f42:	431a      	orrs	r2, r3
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	021b      	lsls	r3, r3, #8
 8016f48:	4313      	orrs	r3, r2
 8016f4a:	68fa      	ldr	r2, [r7, #12]
 8016f4c:	4313      	orrs	r3, r2
 8016f4e:	623b      	str	r3, [r7, #32]
 8016f50:	e00b      	b.n	8016f6a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	7f1b      	ldrb	r3, [r3, #28]
 8016f56:	061b      	lsls	r3, r3, #24
 8016f58:	461c      	mov	r4, r3
 8016f5a:	683b      	ldr	r3, [r7, #0]
 8016f5c:	3318      	adds	r3, #24
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f7ff fc73 	bl	801684a <_ZNK8touchgfx9colortype10getColor32Ev>
 8016f64:	4603      	mov	r3, r0
 8016f66:	4323      	orrs	r3, r4
 8016f68:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	2b08      	cmp	r3, #8
 8016f70:	d103      	bne.n	8016f7a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016f78:	e003      	b.n	8016f82 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8016f7a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8016f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016f80:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init! */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016f82:	4a40      	ldr	r2, [pc, #256]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f86:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016f88:	7ffb      	ldrb	r3, [r7, #31]
 8016f8a:	2b10      	cmp	r3, #16
 8016f8c:	d101      	bne.n	8016f92 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8016f8e:	2302      	movs	r3, #2
 8016f90:	e000      	b.n	8016f94 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8016f92:	2301      	movs	r3, #1
 8016f94:	4a3b      	ldr	r2, [pc, #236]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016f96:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	8adb      	ldrh	r3, [r3, #22]
 8016f9c:	461a      	mov	r2, r3
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	8a1b      	ldrh	r3, [r3, #16]
 8016fa2:	1ad3      	subs	r3, r2, r3
 8016fa4:	461a      	mov	r2, r3
 8016fa6:	4b37      	ldr	r3, [pc, #220]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016fa8:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016faa:	7ffb      	ldrb	r3, [r7, #31]
 8016fac:	2b10      	cmp	r3, #16
 8016fae:	d101      	bne.n	8016fb4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8016fb0:	2202      	movs	r2, #2
 8016fb2:	e000      	b.n	8016fb6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8016fb4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	8adb      	ldrh	r3, [r3, #22]
 8016fba:	4619      	mov	r1, r3
 8016fbc:	683b      	ldr	r3, [r7, #0]
 8016fbe:	8a1b      	ldrh	r3, [r3, #16]
 8016fc0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016fc4:	482f      	ldr	r0, [pc, #188]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016fc6:	f7ff fd25 	bl	8016a14 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8016fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016fd0:	d11e      	bne.n	8017010 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8016fd2:	4b2c      	ldr	r3, [pc, #176]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016fd4:	2201      	movs	r2, #1
 8016fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8016fd8:	4a2a      	ldr	r2, [pc, #168]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016fda:	6a3b      	ldr	r3, [r7, #32]
 8016fdc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8016fde:	4b29      	ldr	r3, [pc, #164]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016fe0:	2209      	movs	r2, #9
 8016fe2:	62da      	str	r2, [r3, #44]	; 0x2c

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	8adb      	ldrh	r3, [r3, #22]
 8016fe8:	461a      	mov	r2, r3
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	8a1b      	ldrh	r3, [r3, #16]
 8016fee:	1ad3      	subs	r3, r2, r3
 8016ff0:	461a      	mov	r2, r3
 8016ff2:	4b24      	ldr	r3, [pc, #144]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016ff4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016ff6:	7ffb      	ldrb	r3, [r7, #31]
 8016ff8:	2b10      	cmp	r3, #16
 8016ffa:	d101      	bne.n	8017000 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8016ffc:	2302      	movs	r3, #2
 8016ffe:	e000      	b.n	8017002 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8017000:	2301      	movs	r3, #1
 8017002:	4a20      	ldr	r2, [pc, #128]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017004:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8017006:	2100      	movs	r1, #0
 8017008:	481e      	ldr	r0, [pc, #120]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801700a:	f7eb fd21 	bl	8002a50 <HAL_DMA2D_ConfigLayer>
 801700e:	e005      	b.n	801701c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8017010:	4a1c      	ldr	r2, [pc, #112]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017012:	69bb      	ldr	r3, [r7, #24]
 8017014:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8017016:	4b1b      	ldr	r3, [pc, #108]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017018:	2200      	movs	r2, #0
 801701a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801701c:	2101      	movs	r1, #1
 801701e:	4819      	ldr	r0, [pc, #100]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017020:	f7eb fd16 	bl	8002a50 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8017024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801702a:	d115      	bne.n	8017058 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017030:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017036:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801703c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017042:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017048:	9301      	str	r3, [sp, #4]
 801704a:	9200      	str	r2, [sp, #0]
 801704c:	4623      	mov	r3, r4
 801704e:	4602      	mov	r2, r0
 8017050:	480c      	ldr	r0, [pc, #48]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017052:	f7eb fb20 	bl	8002696 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8017056:	e00d      	b.n	8017074 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	68db      	ldr	r3, [r3, #12]
 801705c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8017062:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8017068:	9300      	str	r3, [sp, #0]
 801706a:	460b      	mov	r3, r1
 801706c:	6a39      	ldr	r1, [r7, #32]
 801706e:	4805      	ldr	r0, [pc, #20]	; (8017084 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017070:	f7eb fade 	bl	8002630 <HAL_DMA2D_Start_IT>
}
 8017074:	bf00      	nop
 8017076:	372c      	adds	r7, #44	; 0x2c
 8017078:	46bd      	mov	sp, r7
 801707a:	bd90      	pop	{r4, r7, pc}
 801707c:	84210843 	.word	0x84210843
 8017080:	82082083 	.word	0x82082083
 8017084:	20009ba8 	.word	0x20009ba8

08017088 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8017088:	b580      	push	{r7, lr}
 801708a:	b082      	sub	sp, #8
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
 8017090:	4a05      	ldr	r2, [pc, #20]	; (80170a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	601a      	str	r2, [r3, #0]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	4618      	mov	r0, r3
 801709a:	f7ff fbe3 	bl	8016864 <_ZN8touchgfx9DMA_QueueD1Ev>
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	4618      	mov	r0, r3
 80170a2:	3708      	adds	r7, #8
 80170a4:	46bd      	mov	sp, r7
 80170a6:	bd80      	pop	{r7, pc}
 80170a8:	08021564 	.word	0x08021564

080170ac <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b082      	sub	sp, #8
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f7ff ffe7 	bl	8017088 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80170ba:	2114      	movs	r1, #20
 80170bc:	6878      	ldr	r0, [r7, #4]
 80170be:	f007 fbe8 	bl	801e892 <_ZdlPvj>
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	4618      	mov	r0, r3
 80170c6:	3708      	adds	r7, #8
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}

080170cc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80170cc:	b480      	push	{r7}
 80170ce:	b083      	sub	sp, #12
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
 80170d4:	460b      	mov	r3, r1
 80170d6:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	78fa      	ldrb	r2, [r7, #3]
 80170dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2201      	movs	r2, #1
 80170e4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80170e8:	bf00      	nop
 80170ea:	370c      	adds	r7, #12
 80170ec:	46bd      	mov	sp, r7
 80170ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f2:	4770      	bx	lr

080170f4 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b082      	sub	sp, #8
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	3318      	adds	r3, #24
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	6878      	ldr	r0, [r7, #4]
 8017106:	4798      	blx	r3
    }
 8017108:	bf00      	nop
 801710a:	3708      	adds	r7, #8
 801710c:	46bd      	mov	sp, r7
 801710e:	bd80      	pop	{r7, pc}

08017110 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8017110:	b580      	push	{r7, lr}
 8017112:	b082      	sub	sp, #8
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	685a      	ldr	r2, [r3, #4]
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	685b      	ldr	r3, [r3, #4]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	4610      	mov	r0, r2
 8017126:	4798      	blx	r3
 8017128:	4603      	mov	r3, r0
    };
 801712a:	4618      	mov	r0, r3
 801712c:	3708      	adds	r7, #8
 801712e:	46bd      	mov	sp, r7
 8017130:	bd80      	pop	{r7, pc}

08017132 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8017132:	b480      	push	{r7}
 8017134:	b083      	sub	sp, #12
 8017136:	af00      	add	r7, sp, #0
 8017138:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8017140:	3301      	adds	r3, #1
 8017142:	b2da      	uxtb	r2, r3
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    };
 801714a:	bf00      	nop
 801714c:	370c      	adds	r7, #12
 801714e:	46bd      	mov	sp, r7
 8017150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017154:	4770      	bx	lr

08017156 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8017156:	b580      	push	{r7, lr}
 8017158:	b082      	sub	sp, #8
 801715a:	af00      	add	r7, sp, #0
 801715c:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f002 fc80 	bl	8019a64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	339c      	adds	r3, #156	; 0x9c
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	6878      	ldr	r0, [r7, #4]
 801716e:	4798      	blx	r3
    }
 8017170:	bf00      	nop
 8017172:	3708      	adds	r7, #8
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}

08017178 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8017178:	b480      	push	{r7}
 801717a:	b083      	sub	sp, #12
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
        return false;
 8017182:	2300      	movs	r3, #0
    }
 8017184:	4618      	mov	r0, r3
 8017186:	370c      	adds	r7, #12
 8017188:	46bd      	mov	sp, r7
 801718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718e:	4770      	bx	lr

08017190 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8017190:	b590      	push	{r4, r7, lr}
 8017192:	b08b      	sub	sp, #44	; 0x2c
 8017194:	af00      	add	r7, sp, #0
 8017196:	60f8      	str	r0, [r7, #12]
 8017198:	60b9      	str	r1, [r7, #8]
 801719a:	4611      	mov	r1, r2
 801719c:	461a      	mov	r2, r3
 801719e:	460b      	mov	r3, r1
 80171a0:	80fb      	strh	r3, [r7, #6]
 80171a2:	4613      	mov	r3, r2
 80171a4:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 80171a6:	f7f8 f8c9 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 80171aa:	4602      	mov	r2, r0
 80171ac:	6813      	ldr	r3, [r2, #0]
 80171ae:	3328      	adds	r3, #40	; 0x28
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	4610      	mov	r0, r2
 80171b4:	4798      	blx	r3
 80171b6:	4603      	mov	r3, r0
 80171b8:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80171ba:	8b7b      	ldrh	r3, [r7, #26]
 80171bc:	4a3d      	ldr	r2, [pc, #244]	; (80172b4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80171be:	8812      	ldrh	r2, [r2, #0]
 80171c0:	fb02 f303 	mul.w	r3, r2, r3
 80171c4:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80171ca:	2300      	movs	r3, #0
 80171cc:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80171ce:	2300      	movs	r3, #0
 80171d0:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80171d2:	797b      	ldrb	r3, [r7, #5]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d005      	beq.n	80171e4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80171d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171da:	697b      	ldr	r3, [r7, #20]
 80171dc:	4413      	add	r3, r2
 80171de:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80171e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e2:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 80171e4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d005      	beq.n	80171f8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80171ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171ee:	697b      	ldr	r3, [r7, #20]
 80171f0:	4413      	add	r3, r2
 80171f2:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 80171f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f6:	61fb      	str	r3, [r7, #28]
        switch (depth)
 80171f8:	88fb      	ldrh	r3, [r7, #6]
 80171fa:	3b01      	subs	r3, #1
 80171fc:	2b1f      	cmp	r3, #31
 80171fe:	d84d      	bhi.n	801729c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8017200:	a201      	add	r2, pc, #4	; (adr r2, 8017208 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8017202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017206:	bf00      	nop
 8017208:	08017289 	.word	0x08017289
 801720c:	08017289 	.word	0x08017289
 8017210:	0801729d 	.word	0x0801729d
 8017214:	08017289 	.word	0x08017289
 8017218:	0801729d 	.word	0x0801729d
 801721c:	0801729d 	.word	0x0801729d
 8017220:	0801729d 	.word	0x0801729d
 8017224:	08017289 	.word	0x08017289
 8017228:	0801729d 	.word	0x0801729d
 801722c:	0801729d 	.word	0x0801729d
 8017230:	0801729d 	.word	0x0801729d
 8017234:	0801729d 	.word	0x0801729d
 8017238:	0801729d 	.word	0x0801729d
 801723c:	0801729d 	.word	0x0801729d
 8017240:	0801729d 	.word	0x0801729d
 8017244:	08017289 	.word	0x08017289
 8017248:	0801729d 	.word	0x0801729d
 801724c:	0801729d 	.word	0x0801729d
 8017250:	0801729d 	.word	0x0801729d
 8017254:	0801729d 	.word	0x0801729d
 8017258:	0801729d 	.word	0x0801729d
 801725c:	0801729d 	.word	0x0801729d
 8017260:	0801729d 	.word	0x0801729d
 8017264:	08017289 	.word	0x08017289
 8017268:	0801729d 	.word	0x0801729d
 801726c:	0801729d 	.word	0x0801729d
 8017270:	0801729d 	.word	0x0801729d
 8017274:	0801729d 	.word	0x0801729d
 8017278:	0801729d 	.word	0x0801729d
 801727c:	0801729d 	.word	0x0801729d
 8017280:	0801729d 	.word	0x0801729d
 8017284:	08017289 	.word	0x08017289
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	3380      	adds	r3, #128	; 0x80
 801728e:	681c      	ldr	r4, [r3, #0]
 8017290:	69fb      	ldr	r3, [r7, #28]
 8017292:	6a3a      	ldr	r2, [r7, #32]
 8017294:	68b9      	ldr	r1, [r7, #8]
 8017296:	68f8      	ldr	r0, [r7, #12]
 8017298:	47a0      	blx	r4
            break;
 801729a:	e006      	b.n	80172aa <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 801729c:	4b06      	ldr	r3, [pc, #24]	; (80172b8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 801729e:	4a07      	ldr	r2, [pc, #28]	; (80172bc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80172a0:	f240 3152 	movw	r1, #850	; 0x352
 80172a4:	4806      	ldr	r0, [pc, #24]	; (80172c0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80172a6:	f007 fb11 	bl	801e8cc <__assert_func>
    }
 80172aa:	bf00      	nop
 80172ac:	372c      	adds	r7, #44	; 0x2c
 80172ae:	46bd      	mov	sp, r7
 80172b0:	bd90      	pop	{r4, r7, pc}
 80172b2:	bf00      	nop
 80172b4:	20009d6a 	.word	0x20009d6a
 80172b8:	0801feb0 	.word	0x0801feb0
 80172bc:	08020c20 	.word	0x08020c20
 80172c0:	0801fed0 	.word	0x0801fed0

080172c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b084      	sub	sp, #16
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	60f8      	str	r0, [r7, #12]
 80172cc:	60b9      	str	r1, [r7, #8]
 80172ce:	607a      	str	r2, [r7, #4]
 80172d0:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d106      	bne.n	80172e6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80172d8:	4b11      	ldr	r3, [pc, #68]	; (8017320 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80172da:	4a12      	ldr	r2, [pc, #72]	; (8017324 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80172dc:	f44f 7159 	mov.w	r1, #868	; 0x364
 80172e0:	4811      	ldr	r0, [pc, #68]	; (8017328 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80172e2:	f007 faf3 	bl	801e8cc <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	68ba      	ldr	r2, [r7, #8]
 80172ea:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	687a      	ldr	r2, [r7, #4]
 80172f0:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	683a      	ldr	r2, [r7, #0]
 80172f6:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	bf14      	ite	ne
 80172fe:	2301      	movne	r3, #1
 8017300:	2300      	moveq	r3, #0
 8017302:	b2da      	uxtb	r2, r3
 8017304:	4b09      	ldr	r3, [pc, #36]	; (801732c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8017306:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	2b00      	cmp	r3, #0
 801730c:	bf14      	ite	ne
 801730e:	2301      	movne	r3, #1
 8017310:	2300      	moveq	r3, #0
 8017312:	b2da      	uxtb	r2, r3
 8017314:	4b06      	ldr	r3, [pc, #24]	; (8017330 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8017316:	701a      	strb	r2, [r3, #0]
    }
 8017318:	bf00      	nop
 801731a:	3710      	adds	r7, #16
 801731c:	46bd      	mov	sp, r7
 801731e:	bd80      	pop	{r7, pc}
 8017320:	0801ff1c 	.word	0x0801ff1c
 8017324:	08020c74 	.word	0x08020c74
 8017328:	0801fed0 	.word	0x0801fed0
 801732c:	20009d6c 	.word	0x20009d6c
 8017330:	20009d6d 	.word	0x20009d6d

08017334 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	460b      	mov	r3, r1
 801733e:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017344:	2b00      	cmp	r3, #0
 8017346:	d004      	beq.n	8017352 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801734c:	887a      	ldrh	r2, [r7, #2]
 801734e:	4610      	mov	r0, r2
 8017350:	4798      	blx	r3
        }
    }
 8017352:	bf00      	nop
 8017354:	3708      	adds	r7, #8
 8017356:	46bd      	mov	sp, r7
 8017358:	bd80      	pop	{r7, pc}

0801735a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *        not used, then the getTFTCurrentLine function is never called and can be
     *        disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 801735a:	b480      	push	{r7}
 801735c:	b083      	sub	sp, #12
 801735e:	af00      	add	r7, sp, #0
 8017360:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8017362:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8017366:	4618      	mov	r0, r3
 8017368:	370c      	adds	r7, #12
 801736a:	46bd      	mov	sp, r7
 801736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017370:	4770      	bx	lr

08017372 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8017372:	b580      	push	{r7, lr}
 8017374:	b082      	sub	sp, #8
 8017376:	af00      	add	r7, sp, #0
 8017378:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	685a      	ldr	r2, [r3, #4]
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	685b      	ldr	r3, [r3, #4]
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	3318      	adds	r3, #24
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	4610      	mov	r0, r2
 801738a:	4798      	blx	r3
 801738c:	4603      	mov	r3, r0
    }
 801738e:	4618      	mov	r0, r3
 8017390:	3708      	adds	r7, #8
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}
	...

08017398 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8017398:	b480      	push	{r7}
 801739a:	b083      	sub	sp, #12
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d017      	beq.n	80173e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80173b0:	4b1a      	ldr	r3, [pc, #104]	; (801741c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d12a      	bne.n	801740e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80173b8:	4b19      	ldr	r3, [pc, #100]	; (8017420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80173ba:	881a      	ldrh	r2, [r3, #0]
 80173bc:	4b19      	ldr	r3, [pc, #100]	; (8017424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80173be:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80173c0:	4b19      	ldr	r3, [pc, #100]	; (8017428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80173c2:	881a      	ldrh	r2, [r3, #0]
 80173c4:	4b19      	ldr	r3, [pc, #100]	; (801742c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80173c6:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80173c8:	4b16      	ldr	r3, [pc, #88]	; (8017424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80173ca:	881a      	ldrh	r2, [r3, #0]
 80173cc:	4b16      	ldr	r3, [pc, #88]	; (8017428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80173ce:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80173d0:	4b16      	ldr	r3, [pc, #88]	; (801742c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80173d2:	881a      	ldrh	r2, [r3, #0]
 80173d4:	4b12      	ldr	r3, [pc, #72]	; (8017420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80173d6:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80173d8:	4b10      	ldr	r3, [pc, #64]	; (801741c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80173da:	2201      	movs	r2, #1
 80173dc:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80173de:	e016      	b.n	801740e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80173e0:	4b0e      	ldr	r3, [pc, #56]	; (801741c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d012      	beq.n	801740e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80173e8:	4b0f      	ldr	r3, [pc, #60]	; (8017428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80173ea:	881a      	ldrh	r2, [r3, #0]
 80173ec:	4b0d      	ldr	r3, [pc, #52]	; (8017424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80173ee:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80173f0:	4b0b      	ldr	r3, [pc, #44]	; (8017420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80173f2:	881a      	ldrh	r2, [r3, #0]
 80173f4:	4b0d      	ldr	r3, [pc, #52]	; (801742c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80173f6:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80173f8:	4b0c      	ldr	r3, [pc, #48]	; (801742c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80173fa:	881a      	ldrh	r2, [r3, #0]
 80173fc:	4b0a      	ldr	r3, [pc, #40]	; (8017428 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80173fe:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8017400:	4b08      	ldr	r3, [pc, #32]	; (8017424 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8017402:	881a      	ldrh	r2, [r3, #0]
 8017404:	4b06      	ldr	r3, [pc, #24]	; (8017420 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8017406:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8017408:	4b04      	ldr	r3, [pc, #16]	; (801741c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801740a:	2200      	movs	r2, #0
 801740c:	701a      	strb	r2, [r3, #0]
    }
 801740e:	bf00      	nop
 8017410:	370c      	adds	r7, #12
 8017412:	46bd      	mov	sp, r7
 8017414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017418:	4770      	bx	lr
 801741a:	bf00      	nop
 801741c:	20009d66 	.word	0x20009d66
 8017420:	20009d62 	.word	0x20009d62
 8017424:	20009d68 	.word	0x20009d68
 8017428:	20009d64 	.word	0x20009d64
 801742c:	20009d6a 	.word	0x20009d6a

08017430 <__NVIC_EnableIRQ>:
{
 8017430:	b480      	push	{r7}
 8017432:	b083      	sub	sp, #12
 8017434:	af00      	add	r7, sp, #0
 8017436:	4603      	mov	r3, r0
 8017438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801743a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801743e:	2b00      	cmp	r3, #0
 8017440:	db0d      	blt.n	801745e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017446:	b2db      	uxtb	r3, r3
 8017448:	f003 021f 	and.w	r2, r3, #31
 801744c:	4907      	ldr	r1, [pc, #28]	; (801746c <__NVIC_EnableIRQ+0x3c>)
 801744e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017452:	095b      	lsrs	r3, r3, #5
 8017454:	2001      	movs	r0, #1
 8017456:	fa00 f202 	lsl.w	r2, r0, r2
 801745a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801745e:	bf00      	nop
 8017460:	370c      	adds	r7, #12
 8017462:	46bd      	mov	sp, r7
 8017464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017468:	4770      	bx	lr
 801746a:	bf00      	nop
 801746c:	e000e100 	.word	0xe000e100

08017470 <__NVIC_DisableIRQ>:
{
 8017470:	b480      	push	{r7}
 8017472:	b083      	sub	sp, #12
 8017474:	af00      	add	r7, sp, #0
 8017476:	4603      	mov	r3, r0
 8017478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801747a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801747e:	2b00      	cmp	r3, #0
 8017480:	db12      	blt.n	80174a8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017486:	b2db      	uxtb	r3, r3
 8017488:	f003 021f 	and.w	r2, r3, #31
 801748c:	4909      	ldr	r1, [pc, #36]	; (80174b4 <__NVIC_DisableIRQ+0x44>)
 801748e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017492:	095b      	lsrs	r3, r3, #5
 8017494:	2001      	movs	r0, #1
 8017496:	fa00 f202 	lsl.w	r2, r0, r2
 801749a:	3320      	adds	r3, #32
 801749c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80174a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80174a4:	f3bf 8f6f 	isb	sy
}
 80174a8:	bf00      	nop
 80174aa:	370c      	adds	r7, #12
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr
 80174b4:	e000e100 	.word	0xe000e100

080174b8 <__NVIC_SetPriority>:
{
 80174b8:	b480      	push	{r7}
 80174ba:	b083      	sub	sp, #12
 80174bc:	af00      	add	r7, sp, #0
 80174be:	4603      	mov	r3, r0
 80174c0:	6039      	str	r1, [r7, #0]
 80174c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80174c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	db0c      	blt.n	80174e6 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	b2db      	uxtb	r3, r3
 80174d0:	4a0e      	ldr	r2, [pc, #56]	; (801750c <__NVIC_SetPriority+0x54>)
 80174d2:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80174d6:	4608      	mov	r0, r1
 80174d8:	011b      	lsls	r3, r3, #4
 80174da:	b2d9      	uxtb	r1, r3
 80174dc:	1813      	adds	r3, r2, r0
 80174de:	460a      	mov	r2, r1
 80174e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80174e4:	e00c      	b.n	8017500 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80174e6:	683b      	ldr	r3, [r7, #0]
 80174e8:	b2da      	uxtb	r2, r3
 80174ea:	4909      	ldr	r1, [pc, #36]	; (8017510 <__NVIC_SetPriority+0x58>)
 80174ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174f0:	b2db      	uxtb	r3, r3
 80174f2:	f003 030f 	and.w	r3, r3, #15
 80174f6:	3b04      	subs	r3, #4
 80174f8:	0112      	lsls	r2, r2, #4
 80174fa:	b2d2      	uxtb	r2, r2
 80174fc:	440b      	add	r3, r1
 80174fe:	761a      	strb	r2, [r3, #24]
}
 8017500:	bf00      	nop
 8017502:	370c      	adds	r7, #12
 8017504:	46bd      	mov	sp, r7
 8017506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750a:	4770      	bx	lr
 801750c:	e000e100 	.word	0xe000e100
 8017510:	e000ed00 	.word	0xe000ed00

08017514 <_ZNK14STM32F4HAL_DSI17getTFTFrameBufferEv>:

static bool doubleBufferingEnabled = false;
static uint16_t* currFbBase = 0;
static uint16_t bitDepth = 0;
uint16_t* STM32F4HAL_DSI::getTFTFrameBuffer() const
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
    return currFbBase;
 801751c:	4b03      	ldr	r3, [pc, #12]	; (801752c <_ZNK14STM32F4HAL_DSI17getTFTFrameBufferEv+0x18>)
 801751e:	681b      	ldr	r3, [r3, #0]
}
 8017520:	4618      	mov	r0, r3
 8017522:	370c      	adds	r7, #12
 8017524:	46bd      	mov	sp, r7
 8017526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752a:	4770      	bx	lr
 801752c:	20009d00 	.word	0x20009d00

08017530 <_ZN14STM32F4HAL_DSI26setFrameBufferStartAddressEPvtbb>:

void STM32F4HAL_DSI::setFrameBufferStartAddress(void* adr, uint16_t depth, bool useDoubleBuffering, bool useAnimationStorage)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b086      	sub	sp, #24
 8017534:	af02      	add	r7, sp, #8
 8017536:	60f8      	str	r0, [r7, #12]
 8017538:	60b9      	str	r1, [r7, #8]
 801753a:	4611      	mov	r1, r2
 801753c:	461a      	mov	r2, r3
 801753e:	460b      	mov	r3, r1
 8017540:	80fb      	strh	r3, [r7, #6]
 8017542:	4613      	mov	r3, r2
 8017544:	717b      	strb	r3, [r7, #5]
    // Make note of whether we are using double buffering.
    doubleBufferingEnabled = useDoubleBuffering;
 8017546:	4a0b      	ldr	r2, [pc, #44]	; (8017574 <_ZN14STM32F4HAL_DSI26setFrameBufferStartAddressEPvtbb+0x44>)
 8017548:	797b      	ldrb	r3, [r7, #5]
 801754a:	7013      	strb	r3, [r2, #0]
    currFbBase = (uint16_t*)adr;
 801754c:	4a0a      	ldr	r2, [pc, #40]	; (8017578 <_ZN14STM32F4HAL_DSI26setFrameBufferStartAddressEPvtbb+0x48>)
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	6013      	str	r3, [r2, #0]
     bitDepth = depth;
 8017552:	4a0a      	ldr	r2, [pc, #40]	; (801757c <_ZN14STM32F4HAL_DSI26setFrameBufferStartAddressEPvtbb+0x4c>)
 8017554:	88fb      	ldrh	r3, [r7, #6]
 8017556:	8013      	strh	r3, [r2, #0]
    HAL::setFrameBufferStartAddress(adr, depth, useDoubleBuffering, useAnimationStorage);
 8017558:	68f8      	ldr	r0, [r7, #12]
 801755a:	7979      	ldrb	r1, [r7, #5]
 801755c:	88fa      	ldrh	r2, [r7, #6]
 801755e:	7e3b      	ldrb	r3, [r7, #24]
 8017560:	9300      	str	r3, [sp, #0]
 8017562:	460b      	mov	r3, r1
 8017564:	68b9      	ldr	r1, [r7, #8]
 8017566:	f7ff fe13 	bl	8017190 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>
}
 801756a:	bf00      	nop
 801756c:	3710      	adds	r7, #16
 801756e:	46bd      	mov	sp, r7
 8017570:	bd80      	pop	{r7, pc}
 8017572:	bf00      	nop
 8017574:	20009cfc 	.word	0x20009cfc
 8017578:	20009d00 	.word	0x20009d00
 801757c:	20009d04 	.word	0x20009d04

08017580 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt>:

void STM32F4HAL_DSI::setTFTFrameBuffer(uint16_t* adr)
{
 8017580:	b480      	push	{r7}
 8017582:	b085      	sub	sp, #20
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
 8017588:	6039      	str	r1, [r7, #0]
    if (doubleBufferingEnabled)
 801758a:	4b21      	ldr	r3, [pc, #132]	; (8017610 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x90>)
 801758c:	781b      	ldrb	r3, [r3, #0]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d038      	beq.n	8017604 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x84>
    {
        __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8017592:	2300      	movs	r3, #0
 8017594:	60fb      	str	r3, [r7, #12]
 8017596:	4b1f      	ldr	r3, [pc, #124]	; (8017614 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x94>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801759e:	4b1d      	ldr	r3, [pc, #116]	; (8017614 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x94>)
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	f022 0208 	bic.w	r2, r2, #8
 80175a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80175aa:	4b1a      	ldr	r3, [pc, #104]	; (8017614 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x94>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80175b2:	f003 0308 	and.w	r3, r3, #8
 80175b6:	60fb      	str	r3, [r7, #12]
 80175b8:	68fb      	ldr	r3, [r7, #12]
        LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)adr;
 80175ba:	4b17      	ldr	r3, [pc, #92]	; (8017618 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x98>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	3384      	adds	r3, #132	; 0x84
 80175c0:	461a      	mov	r2, r3
 80175c2:	683b      	ldr	r3, [r7, #0]
 80175c4:	6293      	str	r3, [r2, #40]	; 0x28
        __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80175c6:	4b14      	ldr	r3, [pc, #80]	; (8017618 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x98>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80175cc:	4b12      	ldr	r3, [pc, #72]	; (8017618 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x98>)
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	f042 0201 	orr.w	r2, r2, #1
 80175d4:	625a      	str	r2, [r3, #36]	; 0x24
        currFbBase = adr;
 80175d6:	4a11      	ldr	r2, [pc, #68]	; (801761c <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x9c>)
 80175d8:	683b      	ldr	r3, [r7, #0]
 80175da:	6013      	str	r3, [r2, #0]
        __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 80175dc:	2300      	movs	r3, #0
 80175de:	60bb      	str	r3, [r7, #8]
 80175e0:	4b0c      	ldr	r3, [pc, #48]	; (8017614 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x94>)
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80175e8:	4b0a      	ldr	r3, [pc, #40]	; (8017614 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x94>)
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	f042 0208 	orr.w	r2, r2, #8
 80175f0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80175f4:	4b07      	ldr	r3, [pc, #28]	; (8017614 <_ZN14STM32F4HAL_DSI17setTFTFrameBufferEPt+0x94>)
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80175fc:	f003 0308 	and.w	r3, r3, #8
 8017600:	60bb      	str	r3, [r7, #8]
 8017602:	68bb      	ldr	r3, [r7, #8]
    }
}
 8017604:	bf00      	nop
 8017606:	3714      	adds	r7, #20
 8017608:	46bd      	mov	sp, r7
 801760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760e:	4770      	bx	lr
 8017610:	20009cfc 	.word	0x20009cfc
 8017614:	20009be8 	.word	0x20009be8
 8017618:	20009b00 	.word	0x20009b00
 801761c:	20009d00 	.word	0x20009d00

08017620 <_ZN14STM32F4HAL_DSI19configureInterruptsEv>:

void STM32F4HAL_DSI::configureInterrupts()
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b082      	sub	sp, #8
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 7);
 8017628:	2107      	movs	r1, #7
 801762a:	205a      	movs	r0, #90	; 0x5a
 801762c:	f7ff ff44 	bl	80174b8 <__NVIC_SetPriority>
    NVIC_SetPriority(DSI_IRQn, 7);
 8017630:	2107      	movs	r1, #7
 8017632:	205c      	movs	r0, #92	; 0x5c
 8017634:	f7ff ff40 	bl	80174b8 <__NVIC_SetPriority>
}
 8017638:	bf00      	nop
 801763a:	3708      	adds	r7, #8
 801763c:	46bd      	mov	sp, r7
 801763e:	bd80      	pop	{r7, pc}

08017640 <_ZN14STM32F4HAL_DSI28enableLCDControllerInterruptEv>:

/* Enable LCD line interrupt, when entering video (active) area */ 
void STM32F4HAL_DSI::enableLCDControllerInterrupt()
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b082      	sub	sp, #8
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
    LCD_ReqTear();
 8017648:	f7fe f90a 	bl	8015860 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 801764c:	4b12      	ldr	r3, [pc, #72]	; (8017698 <_ZN14STM32F4HAL_DSI28enableLCDControllerInterruptEv+0x58>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2202      	movs	r2, #2
 8017652:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8017656:	4b10      	ldr	r3, [pc, #64]	; (8017698 <_ZN14STM32F4HAL_DSI28enableLCDControllerInterruptEv+0x58>)
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	2201      	movs	r2, #1
 801765c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8017660:	4b0d      	ldr	r3, [pc, #52]	; (8017698 <_ZN14STM32F4HAL_DSI28enableLCDControllerInterruptEv+0x58>)
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8017668:	4b0b      	ldr	r3, [pc, #44]	; (8017698 <_ZN14STM32F4HAL_DSI28enableLCDControllerInterruptEv+0x58>)
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	f042 0201 	orr.w	r2, r2, #1
 8017670:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8017674:	4b08      	ldr	r3, [pc, #32]	; (8017698 <_ZN14STM32F4HAL_DSI28enableLCDControllerInterruptEv+0x58>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 801767c:	4b06      	ldr	r3, [pc, #24]	; (8017698 <_ZN14STM32F4HAL_DSI28enableLCDControllerInterruptEv+0x58>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f042 0202 	orr.w	r2, r2, #2
 8017684:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8017688:	4b04      	ldr	r3, [pc, #16]	; (801769c <_ZN14STM32F4HAL_DSI28enableLCDControllerInterruptEv+0x5c>)
 801768a:	2203      	movs	r2, #3
 801768c:	635a      	str	r2, [r3, #52]	; 0x34
}
 801768e:	bf00      	nop
 8017690:	3708      	adds	r7, #8
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	20009be8 	.word	0x20009be8
 801769c:	40016800 	.word	0x40016800

080176a0 <_ZN14STM32F4HAL_DSI17disableInterruptsEv>:

void STM32F4HAL_DSI::disableInterrupts()
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80176a8:	205a      	movs	r0, #90	; 0x5a
 80176aa:	f7ff fee1 	bl	8017470 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DSI_IRQn);
 80176ae:	205c      	movs	r0, #92	; 0x5c
 80176b0:	f7ff fede 	bl	8017470 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 80176b4:	2059      	movs	r0, #89	; 0x59
 80176b6:	f7ff fedb 	bl	8017470 <__NVIC_DisableIRQ>
}
 80176ba:	bf00      	nop
 80176bc:	3708      	adds	r7, #8
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}

080176c2 <_ZN14STM32F4HAL_DSI16enableInterruptsEv>:

void STM32F4HAL_DSI::enableInterrupts()
{
 80176c2:	b580      	push	{r7, lr}
 80176c4:	b082      	sub	sp, #8
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80176ca:	205a      	movs	r0, #90	; 0x5a
 80176cc:	f7ff feb0 	bl	8017430 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DSI_IRQn);
 80176d0:	205c      	movs	r0, #92	; 0x5c
 80176d2:	f7ff fead 	bl	8017430 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 80176d6:	2059      	movs	r0, #89	; 0x59
 80176d8:	f7ff feaa 	bl	8017430 <__NVIC_EnableIRQ>
}
 80176dc:	bf00      	nop
 80176de:	3708      	adds	r7, #8
 80176e0:	46bd      	mov	sp, r7
 80176e2:	bd80      	pop	{r7, pc}

080176e4 <_ZN14STM32F4HAL_DSI10beginFrameEv>:

bool STM32F4HAL_DSI::beginFrame()
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b082      	sub	sp, #8
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]
    refreshRequested = false;
 80176ec:	4b05      	ldr	r3, [pc, #20]	; (8017704 <_ZN14STM32F4HAL_DSI10beginFrameEv+0x20>)
 80176ee:	2200      	movs	r2, #0
 80176f0:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	4618      	mov	r0, r3
 80176f6:	f001 fc57 	bl	8018fa8 <_ZN8touchgfx3HAL10beginFrameEv>
 80176fa:	4603      	mov	r3, r0
}
 80176fc:	4618      	mov	r0, r3
 80176fe:	3708      	adds	r7, #8
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}
 8017704:	20009cf6 	.word	0x20009cf6

08017708 <_ZN14STM32F4HAL_DSI8endFrameEv>:

void STM32F4HAL_DSI::endFrame()
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b082      	sub	sp, #8
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	4618      	mov	r0, r3
 8017714:	f001 fc54 	bl	8018fc0 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801771e:	2b00      	cmp	r3, #0
 8017720:	d002      	beq.n	8017728 <_ZN14STM32F4HAL_DSI8endFrameEv+0x20>
    {
        refreshRequested = true;
 8017722:	4b03      	ldr	r3, [pc, #12]	; (8017730 <_ZN14STM32F4HAL_DSI8endFrameEv+0x28>)
 8017724:	2201      	movs	r2, #1
 8017726:	701a      	strb	r2, [r3, #0]
    }
}
 8017728:	bf00      	nop
 801772a:	3708      	adds	r7, #8
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}
 8017730:	20009cf6 	.word	0x20009cf6

08017734 <HAL_DSI_TearingEffectCallback>:

extern "C"
void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b082      	sub	sp, #8
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
    GPIO::set(GPIO::VSYNC_FREQ);
 801773c:	2000      	movs	r0, #0
 801773e:	f000 fad2 	bl	8017ce6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>

    HAL::getInstance()->vSync();
 8017742:	f7f7 fdef 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 8017746:	4603      	mov	r3, r0
 8017748:	4618      	mov	r0, r3
 801774a:	f7ff fcf2 	bl	8017132 <_ZN8touchgfx3HAL5vSyncEv>
    OSWrappers::signalVSync();
 801774e:	f7f8 fef3 	bl	8010538 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

    if (!doubleBufferingEnabled && HAL::getInstance())
 8017752:	4b2f      	ldr	r3, [pc, #188]	; (8017810 <HAL_DSI_TearingEffectCallback+0xdc>)
 8017754:	781b      	ldrb	r3, [r3, #0]
 8017756:	f083 0301 	eor.w	r3, r3, #1
 801775a:	b2db      	uxtb	r3, r3
 801775c:	2b00      	cmp	r3, #0
 801775e:	d006      	beq.n	801776e <HAL_DSI_TearingEffectCallback+0x3a>
 8017760:	f7f7 fde0 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 8017764:	4603      	mov	r3, r0
 8017766:	2b00      	cmp	r3, #0
 8017768:	d001      	beq.n	801776e <HAL_DSI_TearingEffectCallback+0x3a>
 801776a:	2301      	movs	r3, #1
 801776c:	e000      	b.n	8017770 <HAL_DSI_TearingEffectCallback+0x3c>
 801776e:	2300      	movs	r3, #0
 8017770:	2b00      	cmp	r3, #0
 8017772:	d009      	beq.n	8017788 <HAL_DSI_TearingEffectCallback+0x54>
    {
        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8017774:	f7f7 fdd6 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 8017778:	4602      	mov	r2, r0
 801777a:	4b26      	ldr	r3, [pc, #152]	; (8017814 <HAL_DSI_TearingEffectCallback+0xe0>)
 801777c:	781b      	ldrb	r3, [r3, #0]
 801777e:	b2db      	uxtb	r3, r3
 8017780:	4619      	mov	r1, r3
 8017782:	4610      	mov	r0, r2
 8017784:	f7fd fe48 	bl	8015418 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
    }

    if (refreshRequested && !displayRefreshing)
 8017788:	4b22      	ldr	r3, [pc, #136]	; (8017814 <HAL_DSI_TearingEffectCallback+0xe0>)
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	b2db      	uxtb	r3, r3
 801778e:	2b00      	cmp	r3, #0
 8017790:	d009      	beq.n	80177a6 <HAL_DSI_TearingEffectCallback+0x72>
 8017792:	4b21      	ldr	r3, [pc, #132]	; (8017818 <HAL_DSI_TearingEffectCallback+0xe4>)
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	b2db      	uxtb	r3, r3
 8017798:	f083 0301 	eor.w	r3, r3, #1
 801779c:	b2db      	uxtb	r3, r3
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d001      	beq.n	80177a6 <HAL_DSI_TearingEffectCallback+0x72>
 80177a2:	2301      	movs	r3, #1
 80177a4:	e000      	b.n	80177a8 <HAL_DSI_TearingEffectCallback+0x74>
 80177a6:	2300      	movs	r3, #0
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d029      	beq.n	8017800 <HAL_DSI_TearingEffectCallback+0xcc>
    {
        // We have an update pending.
        if (doubleBufferingEnabled && HAL::getInstance())
 80177ac:	4b18      	ldr	r3, [pc, #96]	; (8017810 <HAL_DSI_TearingEffectCallback+0xdc>)
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d006      	beq.n	80177c2 <HAL_DSI_TearingEffectCallback+0x8e>
 80177b4:	f7f7 fdb6 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 80177b8:	4603      	mov	r3, r0
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d001      	beq.n	80177c2 <HAL_DSI_TearingEffectCallback+0x8e>
 80177be:	2301      	movs	r3, #1
 80177c0:	e000      	b.n	80177c4 <HAL_DSI_TearingEffectCallback+0x90>
 80177c2:	2300      	movs	r3, #0
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d005      	beq.n	80177d4 <HAL_DSI_TearingEffectCallback+0xa0>
        {
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80177c8:	f7f7 fdac 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 80177cc:	4603      	mov	r3, r0
 80177ce:	4618      	mov	r0, r3
 80177d0:	f002 f948 	bl	8019a64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        }

        // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
        updateRegion = 0;
 80177d4:	4b11      	ldr	r3, [pc, #68]	; (801781c <HAL_DSI_TearingEffectCallback+0xe8>)
 80177d6:	2200      	movs	r2, #0
 80177d8:	601a      	str	r2, [r3, #0]

        //Set update region based on bit depth of framebuffer. 16pp or 24bpp.
        if (bitDepth == 24)
 80177da:	4b11      	ldr	r3, [pc, #68]	; (8017820 <HAL_DSI_TearingEffectCallback+0xec>)
 80177dc:	881b      	ldrh	r3, [r3, #0]
 80177de:	2b18      	cmp	r3, #24
 80177e0:	d102      	bne.n	80177e8 <HAL_DSI_TearingEffectCallback+0xb4>
        {
            LCD_SetUpdateRegionLeft();
 80177e2:	f7fe f87d 	bl	80158e0 <LCD_SetUpdateRegionLeft>
 80177e6:	e004      	b.n	80177f2 <HAL_DSI_TearingEffectCallback+0xbe>
        }
        //Default to 16 bpp
        else
        {
            LCD_SetUpdateRegion(updateRegion);
 80177e8:	4b0c      	ldr	r3, [pc, #48]	; (801781c <HAL_DSI_TearingEffectCallback+0xe8>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	4618      	mov	r0, r3
 80177ee:	f7fe f85d 	bl	80158ac <LCD_SetUpdateRegion>
        }

        // Transfer a quarter screen of pixel data.
        HAL_DSI_Refresh(hdsi);
 80177f2:	6878      	ldr	r0, [r7, #4]
 80177f4:	f7ec f83e 	bl	8003874 <HAL_DSI_Refresh>
        displayRefreshing = true;
 80177f8:	4b07      	ldr	r3, [pc, #28]	; (8017818 <HAL_DSI_TearingEffectCallback+0xe4>)
 80177fa:	2201      	movs	r2, #1
 80177fc:	701a      	strb	r2, [r3, #0]
    } else
    {
        GPIO::clear(GPIO::VSYNC_FREQ);
    }
}
 80177fe:	e002      	b.n	8017806 <HAL_DSI_TearingEffectCallback+0xd2>
        GPIO::clear(GPIO::VSYNC_FREQ);
 8017800:	2000      	movs	r0, #0
 8017802:	f000 fa7b 	bl	8017cfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
}
 8017806:	bf00      	nop
 8017808:	3708      	adds	r7, #8
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}
 801780e:	bf00      	nop
 8017810:	20009cfc 	.word	0x20009cfc
 8017814:	20009cf6 	.word	0x20009cf6
 8017818:	20009cf5 	.word	0x20009cf5
 801781c:	20009cf8 	.word	0x20009cf8
 8017820:	20009d04 	.word	0x20009d04

08017824 <HAL_DSI_EndOfRefreshCallback>:

extern "C"
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b08a      	sub	sp, #40	; 0x28
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
    if (displayRefreshing)
 801782c:	4b85      	ldr	r3, [pc, #532]	; (8017a44 <HAL_DSI_EndOfRefreshCallback+0x220>)
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	b2db      	uxtb	r3, r3
 8017832:	2b00      	cmp	r3, #0
 8017834:	f000 8161 	beq.w	8017afa <HAL_DSI_EndOfRefreshCallback+0x2d6>
    {
        if (bitDepth == 24)
 8017838:	4b83      	ldr	r3, [pc, #524]	; (8017a48 <HAL_DSI_EndOfRefreshCallback+0x224>)
 801783a:	881b      	ldrh	r3, [r3, #0]
 801783c:	2b18      	cmp	r3, #24
 801783e:	f040 80a5 	bne.w	801798c <HAL_DSI_EndOfRefreshCallback+0x168>
        {
            if (updateRegion == 0)
 8017842:	4b82      	ldr	r3, [pc, #520]	; (8017a4c <HAL_DSI_EndOfRefreshCallback+0x228>)
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	2b00      	cmp	r3, #0
 8017848:	bf0c      	ite	eq
 801784a:	2301      	moveq	r3, #1
 801784c:	2300      	movne	r3, #0
 801784e:	b2db      	uxtb	r3, r3
 8017850:	2b00      	cmp	r3, #0
 8017852:	d04b      	beq.n	80178ec <HAL_DSI_EndOfRefreshCallback+0xc8>
            {
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8017854:	2300      	movs	r3, #0
 8017856:	627b      	str	r3, [r7, #36]	; 0x24
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	f022 0208 	bic.w	r2, r2, #8
 8017868:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017874:	f003 0308 	and.w	r3, r3, #8
 8017878:	627b      	str	r3, [r7, #36]	; 0x24
 801787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 801787c:	4b74      	ldr	r3, [pc, #464]	; (8017a50 <HAL_DSI_EndOfRefreshCallback+0x22c>)
 801787e:	881b      	ldrh	r3, [r3, #0]
 8017880:	085b      	lsrs	r3, r3, #1
 8017882:	b29b      	uxth	r3, r3
 8017884:	461a      	mov	r2, r3
 8017886:	4613      	mov	r3, r2
 8017888:	005b      	lsls	r3, r3, #1
 801788a:	4413      	add	r3, r2
 801788c:	4618      	mov	r0, r3
 801788e:	4b71      	ldr	r3, [pc, #452]	; (8017a54 <HAL_DSI_EndOfRefreshCallback+0x230>)
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	4619      	mov	r1, r3
 8017894:	4b70      	ldr	r3, [pc, #448]	; (8017a58 <HAL_DSI_EndOfRefreshCallback+0x234>)
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	3384      	adds	r3, #132	; 0x84
 801789a:	461a      	mov	r2, r3
 801789c:	1843      	adds	r3, r0, r1
 801789e:	6293      	str	r3, [r2, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80178a0:	4b6d      	ldr	r3, [pc, #436]	; (8017a58 <HAL_DSI_EndOfRefreshCallback+0x234>)
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80178a6:	4b6c      	ldr	r3, [pc, #432]	; (8017a58 <HAL_DSI_EndOfRefreshCallback+0x234>)
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	f042 0201 	orr.w	r2, r2, #1
 80178ae:	625a      	str	r2, [r3, #36]	; 0x24
                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 80178b0:	f7fe f82a 	bl	8015908 <LCD_SetUpdateRegionRight>
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80178b4:	2300      	movs	r3, #0
 80178b6:	623b      	str	r3, [r7, #32]
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	f042 0208 	orr.w	r2, r2, #8
 80178c8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80178d4:	f003 0308 	and.w	r3, r3, #8
 80178d8:	623b      	str	r3, [r7, #32]
 80178da:	6a3b      	ldr	r3, [r7, #32]
                updateRegion = 1;
 80178dc:	4b5b      	ldr	r3, [pc, #364]	; (8017a4c <HAL_DSI_EndOfRefreshCallback+0x228>)
 80178de:	2201      	movs	r2, #1
 80178e0:	601a      	str	r2, [r3, #0]
                HAL_DSI_Refresh(hdsi);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7eb ffc5 	bl	8003874 <HAL_DSI_Refresh>
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
}
 80178ea:	e106      	b.n	8017afa <HAL_DSI_EndOfRefreshCallback+0x2d6>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80178ec:	2300      	movs	r3, #0
 80178ee:	61fb      	str	r3, [r7, #28]
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	f022 0208 	bic.w	r2, r2, #8
 8017900:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801790c:	f003 0308 	and.w	r3, r3, #8
 8017910:	61fb      	str	r3, [r7, #28]
 8017912:	69fb      	ldr	r3, [r7, #28]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8017914:	4b4f      	ldr	r3, [pc, #316]	; (8017a54 <HAL_DSI_EndOfRefreshCallback+0x230>)
 8017916:	681a      	ldr	r2, [r3, #0]
 8017918:	4b4f      	ldr	r3, [pc, #316]	; (8017a58 <HAL_DSI_EndOfRefreshCallback+0x234>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	3384      	adds	r3, #132	; 0x84
 801791e:	629a      	str	r2, [r3, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8017920:	4b4d      	ldr	r3, [pc, #308]	; (8017a58 <HAL_DSI_EndOfRefreshCallback+0x234>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017926:	4b4c      	ldr	r3, [pc, #304]	; (8017a58 <HAL_DSI_EndOfRefreshCallback+0x234>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	f042 0201 	orr.w	r2, r2, #1
 801792e:	625a      	str	r2, [r3, #36]	; 0x24
                LCD_SetUpdateRegionLeft(); //Set display column to 0-399
 8017930:	f7fd ffd6 	bl	80158e0 <LCD_SetUpdateRegionLeft>
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8017934:	2300      	movs	r3, #0
 8017936:	61bb      	str	r3, [r7, #24]
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	f042 0208 	orr.w	r2, r2, #8
 8017948:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017954:	f003 0308 	and.w	r3, r3, #8
 8017958:	61bb      	str	r3, [r7, #24]
 801795a:	69bb      	ldr	r3, [r7, #24]
                GPIO::clear(GPIO::VSYNC_FREQ);
 801795c:	2000      	movs	r0, #0
 801795e:	f000 f9cd 	bl	8017cfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                displayRefreshing = false;
 8017962:	4b38      	ldr	r3, [pc, #224]	; (8017a44 <HAL_DSI_EndOfRefreshCallback+0x220>)
 8017964:	2200      	movs	r2, #0
 8017966:	701a      	strb	r2, [r3, #0]
                if (HAL::getInstance())
 8017968:	f7f7 fcdc 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 801796c:	4603      	mov	r3, r0
 801796e:	2b00      	cmp	r3, #0
 8017970:	bf14      	ite	ne
 8017972:	2301      	movne	r3, #1
 8017974:	2300      	moveq	r3, #0
 8017976:	b2db      	uxtb	r3, r3
 8017978:	2b00      	cmp	r3, #0
 801797a:	f000 80be 	beq.w	8017afa <HAL_DSI_EndOfRefreshCallback+0x2d6>
                    HAL::getInstance()->frontPorchEntered();
 801797e:	f7f7 fcd1 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 8017982:	4603      	mov	r3, r0
 8017984:	4618      	mov	r0, r3
 8017986:	f7ff fbb5 	bl	80170f4 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 801798a:	e0b6      	b.n	8017afa <HAL_DSI_EndOfRefreshCallback+0x2d6>
            updateRegion++;
 801798c:	4b2f      	ldr	r3, [pc, #188]	; (8017a4c <HAL_DSI_EndOfRefreshCallback+0x228>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	3301      	adds	r3, #1
 8017992:	4a2e      	ldr	r2, [pc, #184]	; (8017a4c <HAL_DSI_EndOfRefreshCallback+0x228>)
 8017994:	6013      	str	r3, [r2, #0]
            if (updateRegion < 4)
 8017996:	4b2d      	ldr	r3, [pc, #180]	; (8017a4c <HAL_DSI_EndOfRefreshCallback+0x228>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	2b03      	cmp	r3, #3
 801799c:	bfd4      	ite	le
 801799e:	2301      	movle	r3, #1
 80179a0:	2300      	movgt	r3, #0
 80179a2:	b2db      	uxtb	r3, r3
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d059      	beq.n	8017a5c <HAL_DSI_EndOfRefreshCallback+0x238>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80179a8:	2300      	movs	r3, #0
 80179aa:	617b      	str	r3, [r7, #20]
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	f022 0208 	bic.w	r2, r2, #8
 80179bc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80179c8:	f003 0308 	and.w	r3, r3, #8
 80179cc:	617b      	str	r3, [r7, #20]
 80179ce:	697b      	ldr	r3, [r7, #20]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase + (updateRegion * HAL::FRAME_BUFFER_WIDTH) / 2;
 80179d0:	4b1f      	ldr	r3, [pc, #124]	; (8017a50 <HAL_DSI_EndOfRefreshCallback+0x22c>)
 80179d2:	881b      	ldrh	r3, [r3, #0]
 80179d4:	461a      	mov	r2, r3
 80179d6:	4b1d      	ldr	r3, [pc, #116]	; (8017a4c <HAL_DSI_EndOfRefreshCallback+0x228>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	fb03 f302 	mul.w	r3, r3, r2
 80179de:	0fda      	lsrs	r2, r3, #31
 80179e0:	4413      	add	r3, r2
 80179e2:	105b      	asrs	r3, r3, #1
 80179e4:	4618      	mov	r0, r3
 80179e6:	4b1b      	ldr	r3, [pc, #108]	; (8017a54 <HAL_DSI_EndOfRefreshCallback+0x230>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	4619      	mov	r1, r3
 80179ec:	4b1a      	ldr	r3, [pc, #104]	; (8017a58 <HAL_DSI_EndOfRefreshCallback+0x234>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	3384      	adds	r3, #132	; 0x84
 80179f2:	461a      	mov	r2, r3
 80179f4:	1843      	adds	r3, r0, r1
 80179f6:	6293      	str	r3, [r2, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80179f8:	4b17      	ldr	r3, [pc, #92]	; (8017a58 <HAL_DSI_EndOfRefreshCallback+0x234>)
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179fe:	4b16      	ldr	r3, [pc, #88]	; (8017a58 <HAL_DSI_EndOfRefreshCallback+0x234>)
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	f042 0201 	orr.w	r2, r2, #1
 8017a06:	625a      	str	r2, [r3, #36]	; 0x24
                LCD_SetUpdateRegion(updateRegion);
 8017a08:	4b10      	ldr	r3, [pc, #64]	; (8017a4c <HAL_DSI_EndOfRefreshCallback+0x228>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7fd ff4d 	bl	80158ac <LCD_SetUpdateRegion>
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8017a12:	2300      	movs	r3, #0
 8017a14:	613b      	str	r3, [r7, #16]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	f042 0208 	orr.w	r2, r2, #8
 8017a26:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017a32:	f003 0308 	and.w	r3, r3, #8
 8017a36:	613b      	str	r3, [r7, #16]
 8017a38:	693b      	ldr	r3, [r7, #16]
                HAL_DSI_Refresh(hdsi);
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7eb ff19 	bl	8003874 <HAL_DSI_Refresh>
}
 8017a42:	e05a      	b.n	8017afa <HAL_DSI_EndOfRefreshCallback+0x2d6>
 8017a44:	20009cf5 	.word	0x20009cf5
 8017a48:	20009d04 	.word	0x20009d04
 8017a4c:	20009cf8 	.word	0x20009cf8
 8017a50:	20009d68 	.word	0x20009d68
 8017a54:	20009d00 	.word	0x20009d00
 8017a58:	20009b00 	.word	0x20009b00
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	60fb      	str	r3, [r7, #12]
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	f022 0208 	bic.w	r2, r2, #8
 8017a70:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017a7c:	f003 0308 	and.w	r3, r3, #8
 8017a80:	60fb      	str	r3, [r7, #12]
 8017a82:	68fb      	ldr	r3, [r7, #12]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8017a84:	4b1f      	ldr	r3, [pc, #124]	; (8017b04 <HAL_DSI_EndOfRefreshCallback+0x2e0>)
 8017a86:	681a      	ldr	r2, [r3, #0]
 8017a88:	4b1f      	ldr	r3, [pc, #124]	; (8017b08 <HAL_DSI_EndOfRefreshCallback+0x2e4>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	3384      	adds	r3, #132	; 0x84
 8017a8e:	629a      	str	r2, [r3, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8017a90:	4b1d      	ldr	r3, [pc, #116]	; (8017b08 <HAL_DSI_EndOfRefreshCallback+0x2e4>)
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017a96:	4b1c      	ldr	r3, [pc, #112]	; (8017b08 <HAL_DSI_EndOfRefreshCallback+0x2e4>)
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	f042 0201 	orr.w	r2, r2, #1
 8017a9e:	625a      	str	r2, [r3, #36]	; 0x24
                LCD_SetUpdateRegion(0);
 8017aa0:	2000      	movs	r0, #0
 8017aa2:	f7fd ff03 	bl	80158ac <LCD_SetUpdateRegion>
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	60bb      	str	r3, [r7, #8]
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	f042 0208 	orr.w	r2, r2, #8
 8017aba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017ac6:	f003 0308 	and.w	r3, r3, #8
 8017aca:	60bb      	str	r3, [r7, #8]
 8017acc:	68bb      	ldr	r3, [r7, #8]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8017ace:	2000      	movs	r0, #0
 8017ad0:	f000 f914 	bl	8017cfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                displayRefreshing = false;
 8017ad4:	4b0d      	ldr	r3, [pc, #52]	; (8017b0c <HAL_DSI_EndOfRefreshCallback+0x2e8>)
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	701a      	strb	r2, [r3, #0]
                if (HAL::getInstance())
 8017ada:	f7f7 fc23 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	bf14      	ite	ne
 8017ae4:	2301      	movne	r3, #1
 8017ae6:	2300      	moveq	r3, #0
 8017ae8:	b2db      	uxtb	r3, r3
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d005      	beq.n	8017afa <HAL_DSI_EndOfRefreshCallback+0x2d6>
                    HAL::getInstance()->frontPorchEntered();
 8017aee:	f7f7 fc19 	bl	800f324 <_ZN8touchgfx3HAL11getInstanceEv>
 8017af2:	4603      	mov	r3, r0
 8017af4:	4618      	mov	r0, r3
 8017af6:	f7ff fafd 	bl	80170f4 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 8017afa:	bf00      	nop
 8017afc:	3728      	adds	r7, #40	; 0x28
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	20009d00 	.word	0x20009d00
 8017b08:	20009b00 	.word	0x20009b00
 8017b0c:	20009cf5 	.word	0x20009cf5

08017b10 <_ZN8touchgfx22STM32F4Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F4Instrumentation::init()
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b092      	sub	sp, #72	; 0x48
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8017b18:	2300      	movs	r3, #0
 8017b1a:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t pFLatency;

    __TIM1_CLK_ENABLE();
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	60fb      	str	r3, [r7, #12]
 8017b20:	4b42      	ldr	r3, [pc, #264]	; (8017c2c <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x11c>)
 8017b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b24:	4a41      	ldr	r2, [pc, #260]	; (8017c2c <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x11c>)
 8017b26:	f043 0301 	orr.w	r3, r3, #1
 8017b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8017b2c:	4b3f      	ldr	r3, [pc, #252]	; (8017c2c <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x11c>)
 8017b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b30:	f003 0301 	and.w	r3, r3, #1
 8017b34:	60fb      	str	r3, [r7, #12]
 8017b36:	68fb      	ldr	r3, [r7, #12]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017b38:	f107 0318 	add.w	r3, r7, #24
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	601a      	str	r2, [r3, #0]
 8017b40:	605a      	str	r2, [r3, #4]
 8017b42:	609a      	str	r2, [r3, #8]
 8017b44:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017b46:	f107 0310 	add.w	r3, r7, #16
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	601a      	str	r2, [r3, #0]
 8017b4e:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 8017b50:	4b37      	ldr	r3, [pc, #220]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017b52:	4a38      	ldr	r2, [pc, #224]	; (8017c34 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x124>)
 8017b54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8017b56:	4b36      	ldr	r3, [pc, #216]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017b58:	2200      	movs	r2, #0
 8017b5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017b5c:	4b34      	ldr	r3, [pc, #208]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017b5e:	2200      	movs	r2, #0
 8017b60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8017b62:	4b33      	ldr	r3, [pc, #204]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017b64:	2200      	movs	r2, #0
 8017b66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017b68:	4b31      	ldr	r3, [pc, #196]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017b6e:	4b30      	ldr	r3, [pc, #192]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017b70:	2200      	movs	r2, #0
 8017b72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017b74:	4b2e      	ldr	r3, [pc, #184]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017b76:	2200      	movs	r2, #0
 8017b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8017b7a:	482d      	ldr	r0, [pc, #180]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017b7c:	f7f2 f95e 	bl	8009e3c <HAL_TIM_Base_Init>
 8017b80:	4603      	mov	r3, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	bf14      	ite	ne
 8017b86:	2301      	movne	r3, #1
 8017b88:	2300      	moveq	r3, #0
 8017b8a:	b2db      	uxtb	r3, r3
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d001      	beq.n	8017b94 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x84>
  {
    Error_Handler( );
 8017b90:	f7e9 f9e4 	bl	8000f5c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017b98:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017b9a:	f107 0318 	add.w	r3, r7, #24
 8017b9e:	4619      	mov	r1, r3
 8017ba0:	4823      	ldr	r0, [pc, #140]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017ba2:	f7f2 fac6 	bl	800a132 <HAL_TIM_ConfigClockSource>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	bf14      	ite	ne
 8017bac:	2301      	movne	r3, #1
 8017bae:	2300      	moveq	r3, #0
 8017bb0:	b2db      	uxtb	r3, r3
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d001      	beq.n	8017bba <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xaa>
  {
    Error_Handler( );
 8017bb6:	f7e9 f9d1 	bl	8000f5c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017bba:	2300      	movs	r3, #0
 8017bbc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017bc2:	f107 0310 	add.w	r3, r7, #16
 8017bc6:	4619      	mov	r1, r3
 8017bc8:	4819      	ldr	r0, [pc, #100]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017bca:	f7f2 fccb 	bl	800a564 <HAL_TIMEx_MasterConfigSynchronization>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	bf14      	ite	ne
 8017bd4:	2301      	movne	r3, #1
 8017bd6:	2300      	moveq	r3, #0
 8017bd8:	b2db      	uxtb	r3, r3
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d001      	beq.n	8017be2 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xd2>
  {
    Error_Handler( );
 8017bde:	f7e9 f9bd 	bl	8000f5c <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017be2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017bea:	4611      	mov	r1, r2
 8017bec:	4618      	mov	r0, r3
 8017bee:	f7ef fd8f 	bl	8007710 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8017bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bf4:	643b      	str	r3, [r7, #64]	; 0x40

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8017bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d103      	bne.n	8017c04 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xf4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 8017bfc:	f7ef fd60 	bl	80076c0 <HAL_RCC_GetPCLK1Freq>
 8017c00:	6478      	str	r0, [r7, #68]	; 0x44
 8017c02:	e004      	b.n	8017c0e <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xfe>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8017c04:	f7ef fd5c 	bl	80076c0 <HAL_RCC_GetPCLK1Freq>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	005b      	lsls	r3, r3, #1
 8017c0c:	647b      	str	r3, [r7, #68]	; 0x44

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 8017c0e:	f7ef fd4b 	bl	80076a8 <HAL_RCC_GetHCLKFreq>
 8017c12:	4602      	mov	r2, r0
 8017c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c16:	fbb2 f2f3 	udiv	r2, r2, r3
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 8017c1e:	4804      	ldr	r0, [pc, #16]	; (8017c30 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8017c20:	f7f2 f937 	bl	8009e92 <HAL_TIM_Base_Start>
}
 8017c24:	bf00      	nop
 8017c26:	3748      	adds	r7, #72	; 0x48
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	40023800 	.word	0x40023800
 8017c30:	20009d08 	.word	0x20009d08
 8017c34:	40010000 	.word	0x40010000

08017c38 <_ZN8touchgfx22STM32F4Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F4Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8017c38:	b480      	push	{r7}
 8017c3a:	b085      	sub	sp, #20
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	60f8      	str	r0, [r7, #12]
 8017c40:	60b9      	str	r1, [r7, #8]
 8017c42:	607a      	str	r2, [r7, #4]
 8017c44:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8017c46:	687a      	ldr	r2, [r7, #4]
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	1ad2      	subs	r2, r2, r3
 8017c4c:	683b      	ldr	r3, [r7, #0]
 8017c4e:	085b      	lsrs	r3, r3, #1
 8017c50:	441a      	add	r2, r3
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017c58:	4618      	mov	r0, r3
 8017c5a:	3714      	adds	r7, #20
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c62:	4770      	bx	lr

08017c64 <_ZN8touchgfx22STM32F4Instrumentation12getCPUCyclesEv>:

unsigned int STM32F4Instrumentation::getCPUCycles()
{
 8017c64:	b480      	push	{r7}
 8017c66:	b083      	sub	sp, #12
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 8017c6c:	4b06      	ldr	r3, [pc, #24]	; (8017c88 <_ZN8touchgfx22STM32F4Instrumentation12getCPUCyclesEv+0x24>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c72:	687a      	ldr	r2, [r7, #4]
 8017c74:	68d2      	ldr	r2, [r2, #12]
 8017c76:	fb02 f303 	mul.w	r3, r2, r3
}
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	370c      	adds	r7, #12
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c84:	4770      	bx	lr
 8017c86:	bf00      	nop
 8017c88:	20009d08 	.word	0x20009d08

08017c8c <_ZN8touchgfx22STM32F4Instrumentation12setMCUActiveEb>:

void STM32F4Instrumentation::setMCUActive(bool active)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b082      	sub	sp, #8
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	460b      	mov	r3, r1
 8017c96:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8017c98:	78fb      	ldrb	r3, [r7, #3]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d00f      	beq.n	8017cbe <_ZN8touchgfx22STM32F4Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	3310      	adds	r3, #16
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	6878      	ldr	r0, [r7, #4]
 8017ca8:	4798      	blx	r3
 8017caa:	4602      	mov	r2, r0
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	689b      	ldr	r3, [r3, #8]
 8017cb0:	1ad2      	subs	r2, r2, r3
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	685b      	ldr	r3, [r3, #4]
 8017cb6:	441a      	add	r2, r3
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8017cbc:	e008      	b.n	8017cd0 <_ZN8touchgfx22STM32F4Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	3310      	adds	r3, #16
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	6878      	ldr	r0, [r7, #4]
 8017cc8:	4798      	blx	r3
 8017cca:	4602      	mov	r2, r0
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	609a      	str	r2, [r3, #8]
}
 8017cd0:	bf00      	nop
 8017cd2:	3708      	adds	r7, #8
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}

08017cd8 <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 8017cd8:	b480      	push	{r7}
 8017cda:	af00      	add	r7, sp, #0
  
    /* USER CODE BEGIN GPIO::init */

    /* USER CODE END GPIO::init */
}
 8017cdc:	bf00      	nop
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce4:	4770      	bx	lr

08017ce6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO::GPIO_ID id)
{
 8017ce6:	b480      	push	{r7}
 8017ce8:	b083      	sub	sp, #12
 8017cea:	af00      	add	r7, sp, #0
 8017cec:	4603      	mov	r3, r0
 8017cee:	71fb      	strb	r3, [r7, #7]
  
    /* USER CODE BEGIN GPIO::set */

    /* USER CODE END GPIO::set */
}
 8017cf0:	bf00      	nop
 8017cf2:	370c      	adds	r7, #12
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cfa:	4770      	bx	lr

08017cfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO::GPIO_ID id)
{
 8017cfc:	b480      	push	{r7}
 8017cfe:	b083      	sub	sp, #12
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	4603      	mov	r3, r0
 8017d04:	71fb      	strb	r3, [r7, #7]

    /* USER CODE BEGIN GPIO::clear */
    
    /* USER CODE END GPIO::clear */
}
 8017d06:	bf00      	nop
 8017d08:	370c      	adds	r7, #12
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d10:	4770      	bx	lr

08017d12 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO::GPIO_ID id)
{
 8017d12:	b480      	push	{r7}
 8017d14:	b083      	sub	sp, #12
 8017d16:	af00      	add	r7, sp, #0
 8017d18:	4603      	mov	r3, r0
 8017d1a:	71fb      	strb	r3, [r7, #7]
   
    /* USER CODE BEGIN GPIO::toggle */

    /* USER CODE END GPIO::toggle */
}
 8017d1c:	bf00      	nop
 8017d1e:	370c      	adds	r7, #12
 8017d20:	46bd      	mov	sp, r7
 8017d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d26:	4770      	bx	lr

08017d28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017d2c:	2201      	movs	r2, #1
 8017d2e:	490e      	ldr	r1, [pc, #56]	; (8017d68 <MX_USB_HOST_Init+0x40>)
 8017d30:	480e      	ldr	r0, [pc, #56]	; (8017d6c <MX_USB_HOST_Init+0x44>)
 8017d32:	f7f5 fccb 	bl	800d6cc <USBH_Init>
 8017d36:	4603      	mov	r3, r0
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d001      	beq.n	8017d40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017d3c:	f7e9 f90e 	bl	8000f5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017d40:	490b      	ldr	r1, [pc, #44]	; (8017d70 <MX_USB_HOST_Init+0x48>)
 8017d42:	480a      	ldr	r0, [pc, #40]	; (8017d6c <MX_USB_HOST_Init+0x44>)
 8017d44:	f7f5 fd5d 	bl	800d802 <USBH_RegisterClass>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d001      	beq.n	8017d52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017d4e:	f7e9 f905 	bl	8000f5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017d52:	4806      	ldr	r0, [pc, #24]	; (8017d6c <MX_USB_HOST_Init+0x44>)
 8017d54:	f7f5 fde2 	bl	800d91c <USBH_Start>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d001      	beq.n	8017d62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017d5e:	f7e9 f8fd 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017d62:	bf00      	nop
 8017d64:	bd80      	pop	{r7, pc}
 8017d66:	bf00      	nop
 8017d68:	08017d75 	.word	0x08017d75
 8017d6c:	2000a358 	.word	0x2000a358
 8017d70:	20000034 	.word	0x20000034

08017d74 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017d74:	b480      	push	{r7}
 8017d76:	b083      	sub	sp, #12
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	6078      	str	r0, [r7, #4]
 8017d7c:	460b      	mov	r3, r1
 8017d7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017d80:	78fb      	ldrb	r3, [r7, #3]
 8017d82:	3b01      	subs	r3, #1
 8017d84:	2b04      	cmp	r3, #4
 8017d86:	d819      	bhi.n	8017dbc <USBH_UserProcess+0x48>
 8017d88:	a201      	add	r2, pc, #4	; (adr r2, 8017d90 <USBH_UserProcess+0x1c>)
 8017d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d8e:	bf00      	nop
 8017d90:	08017dbd 	.word	0x08017dbd
 8017d94:	08017dad 	.word	0x08017dad
 8017d98:	08017dbd 	.word	0x08017dbd
 8017d9c:	08017db5 	.word	0x08017db5
 8017da0:	08017da5 	.word	0x08017da5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017da4:	4b09      	ldr	r3, [pc, #36]	; (8017dcc <USBH_UserProcess+0x58>)
 8017da6:	2203      	movs	r2, #3
 8017da8:	701a      	strb	r2, [r3, #0]
  break;
 8017daa:	e008      	b.n	8017dbe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017dac:	4b07      	ldr	r3, [pc, #28]	; (8017dcc <USBH_UserProcess+0x58>)
 8017dae:	2202      	movs	r2, #2
 8017db0:	701a      	strb	r2, [r3, #0]
  break;
 8017db2:	e004      	b.n	8017dbe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017db4:	4b05      	ldr	r3, [pc, #20]	; (8017dcc <USBH_UserProcess+0x58>)
 8017db6:	2201      	movs	r2, #1
 8017db8:	701a      	strb	r2, [r3, #0]
  break;
 8017dba:	e000      	b.n	8017dbe <USBH_UserProcess+0x4a>

  default:
  break;
 8017dbc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8017dbe:	bf00      	nop
 8017dc0:	370c      	adds	r7, #12
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc8:	4770      	bx	lr
 8017dca:	bf00      	nop
 8017dcc:	20009d48 	.word	0x20009d48

08017dd0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b08a      	sub	sp, #40	; 0x28
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017dd8:	f107 0314 	add.w	r3, r7, #20
 8017ddc:	2200      	movs	r2, #0
 8017dde:	601a      	str	r2, [r3, #0]
 8017de0:	605a      	str	r2, [r3, #4]
 8017de2:	609a      	str	r2, [r3, #8]
 8017de4:	60da      	str	r2, [r3, #12]
 8017de6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017df0:	d147      	bne.n	8017e82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017df2:	2300      	movs	r3, #0
 8017df4:	613b      	str	r3, [r7, #16]
 8017df6:	4b25      	ldr	r3, [pc, #148]	; (8017e8c <HAL_HCD_MspInit+0xbc>)
 8017df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dfa:	4a24      	ldr	r2, [pc, #144]	; (8017e8c <HAL_HCD_MspInit+0xbc>)
 8017dfc:	f043 0301 	orr.w	r3, r3, #1
 8017e00:	6313      	str	r3, [r2, #48]	; 0x30
 8017e02:	4b22      	ldr	r3, [pc, #136]	; (8017e8c <HAL_HCD_MspInit+0xbc>)
 8017e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e06:	f003 0301 	and.w	r3, r3, #1
 8017e0a:	613b      	str	r3, [r7, #16]
 8017e0c:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS 
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8017e0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8017e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e14:	2302      	movs	r3, #2
 8017e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017e1c:	2303      	movs	r3, #3
 8017e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017e20:	230a      	movs	r3, #10
 8017e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017e24:	f107 0314 	add.w	r3, r7, #20
 8017e28:	4619      	mov	r1, r3
 8017e2a:	4819      	ldr	r0, [pc, #100]	; (8017e90 <HAL_HCD_MspInit+0xc0>)
 8017e2c:	f7eb fe2a 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8017e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e36:	2302      	movs	r3, #2
 8017e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8017e3e:	f107 0314 	add.w	r3, r7, #20
 8017e42:	4619      	mov	r1, r3
 8017e44:	4812      	ldr	r0, [pc, #72]	; (8017e90 <HAL_HCD_MspInit+0xc0>)
 8017e46:	f7eb fe1d 	bl	8003a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017e4a:	4b10      	ldr	r3, [pc, #64]	; (8017e8c <HAL_HCD_MspInit+0xbc>)
 8017e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e4e:	4a0f      	ldr	r2, [pc, #60]	; (8017e8c <HAL_HCD_MspInit+0xbc>)
 8017e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e54:	6353      	str	r3, [r2, #52]	; 0x34
 8017e56:	2300      	movs	r3, #0
 8017e58:	60fb      	str	r3, [r7, #12]
 8017e5a:	4b0c      	ldr	r3, [pc, #48]	; (8017e8c <HAL_HCD_MspInit+0xbc>)
 8017e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e5e:	4a0b      	ldr	r2, [pc, #44]	; (8017e8c <HAL_HCD_MspInit+0xbc>)
 8017e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017e64:	6453      	str	r3, [r2, #68]	; 0x44
 8017e66:	4b09      	ldr	r3, [pc, #36]	; (8017e8c <HAL_HCD_MspInit+0xbc>)
 8017e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017e6e:	60fb      	str	r3, [r7, #12]
 8017e70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017e72:	2200      	movs	r2, #0
 8017e74:	2105      	movs	r1, #5
 8017e76:	2043      	movs	r0, #67	; 0x43
 8017e78:	f7ea fa3a 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017e7c:	2043      	movs	r0, #67	; 0x43
 8017e7e:	f7ea fa53 	bl	8002328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017e82:	bf00      	nop
 8017e84:	3728      	adds	r7, #40	; 0x28
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}
 8017e8a:	bf00      	nop
 8017e8c:	40023800 	.word	0x40023800
 8017e90:	40020000 	.word	0x40020000

08017e94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b082      	sub	sp, #8
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	f7f6 f88d 	bl	800dfc2 <USBH_LL_IncTimer>
}
 8017ea8:	bf00      	nop
 8017eaa:	3708      	adds	r7, #8
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bd80      	pop	{r7, pc}

08017eb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b082      	sub	sp, #8
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f7f6 f8d2 	bl	800e068 <USBH_LL_Connect>
}
 8017ec4:	bf00      	nop
 8017ec6:	3708      	adds	r7, #8
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}

08017ecc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017eda:	4618      	mov	r0, r3
 8017edc:	f7f6 f8f8 	bl	800e0d0 <USBH_LL_Disconnect>
}
 8017ee0:	bf00      	nop
 8017ee2:	3708      	adds	r7, #8
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}

08017ee8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b082      	sub	sp, #8
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	460b      	mov	r3, r1
 8017ef2:	70fb      	strb	r3, [r7, #3]
 8017ef4:	4613      	mov	r3, r2
 8017ef6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017efe:	4618      	mov	r0, r3
 8017f00:	f7f6 f936 	bl	800e170 <USBH_LL_NotifyURBChange>
#endif
}
 8017f04:	bf00      	nop
 8017f06:	3708      	adds	r7, #8
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}

08017f0c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b082      	sub	sp, #8
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f7f6 f87b 	bl	800e016 <USBH_LL_PortEnabled>
} 
 8017f20:	bf00      	nop
 8017f22:	3708      	adds	r7, #8
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}

08017f28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b082      	sub	sp, #8
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017f36:	4618      	mov	r0, r3
 8017f38:	f7f6 f87b 	bl	800e032 <USBH_LL_PortDisabled>
} 
 8017f3c:	bf00      	nop
 8017f3e:	3708      	adds	r7, #8
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}

08017f44 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b082      	sub	sp, #8
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8017f52:	2b01      	cmp	r3, #1
 8017f54:	d12a      	bne.n	8017fac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8017f56:	4a18      	ldr	r2, [pc, #96]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	4a15      	ldr	r2, [pc, #84]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f62:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017f66:	4b14      	ldr	r3, [pc, #80]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017f6c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8017f6e:	4b12      	ldr	r3, [pc, #72]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f70:	2208      	movs	r2, #8
 8017f72:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8017f74:	4b10      	ldr	r3, [pc, #64]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f76:	2201      	movs	r2, #1
 8017f78:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017f7a:	4b0f      	ldr	r3, [pc, #60]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8017f80:	4b0d      	ldr	r3, [pc, #52]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f82:	2202      	movs	r2, #2
 8017f84:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017f86:	4b0c      	ldr	r3, [pc, #48]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f88:	2200      	movs	r2, #0
 8017f8a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017f8c:	480a      	ldr	r0, [pc, #40]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f8e:	f7ec f85e 	bl	800404e <HAL_HCD_Init>
 8017f92:	4603      	mov	r3, r0
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d001      	beq.n	8017f9c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8017f98:	f7e8 ffe0 	bl	8000f5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8017f9c:	4806      	ldr	r0, [pc, #24]	; (8017fb8 <USBH_LL_Init+0x74>)
 8017f9e:	f7ec fc59 	bl	8004854 <HAL_HCD_GetCurrentFrame>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	4619      	mov	r1, r3
 8017fa6:	6878      	ldr	r0, [r7, #4]
 8017fa8:	f7f5 fffc 	bl	800dfa4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8017fac:	2300      	movs	r3, #0
}
 8017fae:	4618      	mov	r0, r3
 8017fb0:	3708      	adds	r7, #8
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	bd80      	pop	{r7, pc}
 8017fb6:	bf00      	nop
 8017fb8:	2000a730 	.word	0x2000a730

08017fbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b084      	sub	sp, #16
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017fc8:	2300      	movs	r3, #0
 8017fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7ec fbc6 	bl	8004764 <HAL_HCD_Start>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017fdc:	7bfb      	ldrb	r3, [r7, #15]
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f000 f95c 	bl	801829c <USBH_Get_USB_Status>
 8017fe4:	4603      	mov	r3, r0
 8017fe6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017fea:	4618      	mov	r0, r3
 8017fec:	3710      	adds	r7, #16
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}

08017ff2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017ff2:	b580      	push	{r7, lr}
 8017ff4:	b084      	sub	sp, #16
 8017ff6:	af00      	add	r7, sp, #0
 8017ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017ffe:	2300      	movs	r3, #0
 8018000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018008:	4618      	mov	r0, r3
 801800a:	f7ec fbce 	bl	80047aa <HAL_HCD_Stop>
 801800e:	4603      	mov	r3, r0
 8018010:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018012:	7bfb      	ldrb	r3, [r7, #15]
 8018014:	4618      	mov	r0, r3
 8018016:	f000 f941 	bl	801829c <USBH_Get_USB_Status>
 801801a:	4603      	mov	r3, r0
 801801c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801801e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018020:	4618      	mov	r0, r3
 8018022:	3710      	adds	r7, #16
 8018024:	46bd      	mov	sp, r7
 8018026:	bd80      	pop	{r7, pc}

08018028 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b084      	sub	sp, #16
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8018030:	2301      	movs	r3, #1
 8018032:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801803a:	4618      	mov	r0, r3
 801803c:	f7ec fc18 	bl	8004870 <HAL_HCD_GetCurrentSpeed>
 8018040:	4603      	mov	r3, r0
 8018042:	2b01      	cmp	r3, #1
 8018044:	d007      	beq.n	8018056 <USBH_LL_GetSpeed+0x2e>
 8018046:	2b01      	cmp	r3, #1
 8018048:	d302      	bcc.n	8018050 <USBH_LL_GetSpeed+0x28>
 801804a:	2b02      	cmp	r3, #2
 801804c:	d006      	beq.n	801805c <USBH_LL_GetSpeed+0x34>
 801804e:	e008      	b.n	8018062 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8018050:	2300      	movs	r3, #0
 8018052:	73fb      	strb	r3, [r7, #15]
    break;
 8018054:	e008      	b.n	8018068 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8018056:	2301      	movs	r3, #1
 8018058:	73fb      	strb	r3, [r7, #15]
    break;
 801805a:	e005      	b.n	8018068 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 801805c:	2302      	movs	r3, #2
 801805e:	73fb      	strb	r3, [r7, #15]
    break;
 8018060:	e002      	b.n	8018068 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8018062:	2301      	movs	r3, #1
 8018064:	73fb      	strb	r3, [r7, #15]
    break;
 8018066:	bf00      	nop
  }
  return  speed;
 8018068:	7bfb      	ldrb	r3, [r7, #15]
}
 801806a:	4618      	mov	r0, r3
 801806c:	3710      	adds	r7, #16
 801806e:	46bd      	mov	sp, r7
 8018070:	bd80      	pop	{r7, pc}

08018072 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8018072:	b580      	push	{r7, lr}
 8018074:	b084      	sub	sp, #16
 8018076:	af00      	add	r7, sp, #0
 8018078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801807a:	2300      	movs	r3, #0
 801807c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801807e:	2300      	movs	r3, #0
 8018080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018088:	4618      	mov	r0, r3
 801808a:	f7ec fbab 	bl	80047e4 <HAL_HCD_ResetPort>
 801808e:	4603      	mov	r3, r0
 8018090:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8018092:	7bfb      	ldrb	r3, [r7, #15]
 8018094:	4618      	mov	r0, r3
 8018096:	f000 f901 	bl	801829c <USBH_Get_USB_Status>
 801809a:	4603      	mov	r3, r0
 801809c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801809e:	7bbb      	ldrb	r3, [r7, #14]
}
 80180a0:	4618      	mov	r0, r3
 80180a2:	3710      	adds	r7, #16
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bd80      	pop	{r7, pc}

080180a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b082      	sub	sp, #8
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
 80180b0:	460b      	mov	r3, r1
 80180b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80180ba:	78fa      	ldrb	r2, [r7, #3]
 80180bc:	4611      	mov	r1, r2
 80180be:	4618      	mov	r0, r3
 80180c0:	f7ec fbb3 	bl	800482a <HAL_HCD_HC_GetXferCount>
 80180c4:	4603      	mov	r3, r0
}
 80180c6:	4618      	mov	r0, r3
 80180c8:	3708      	adds	r7, #8
 80180ca:	46bd      	mov	sp, r7
 80180cc:	bd80      	pop	{r7, pc}

080180ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80180ce:	b590      	push	{r4, r7, lr}
 80180d0:	b089      	sub	sp, #36	; 0x24
 80180d2:	af04      	add	r7, sp, #16
 80180d4:	6078      	str	r0, [r7, #4]
 80180d6:	4608      	mov	r0, r1
 80180d8:	4611      	mov	r1, r2
 80180da:	461a      	mov	r2, r3
 80180dc:	4603      	mov	r3, r0
 80180de:	70fb      	strb	r3, [r7, #3]
 80180e0:	460b      	mov	r3, r1
 80180e2:	70bb      	strb	r3, [r7, #2]
 80180e4:	4613      	mov	r3, r2
 80180e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180e8:	2300      	movs	r3, #0
 80180ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80180ec:	2300      	movs	r3, #0
 80180ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80180f6:	787c      	ldrb	r4, [r7, #1]
 80180f8:	78ba      	ldrb	r2, [r7, #2]
 80180fa:	78f9      	ldrb	r1, [r7, #3]
 80180fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80180fe:	9302      	str	r3, [sp, #8]
 8018100:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018104:	9301      	str	r3, [sp, #4]
 8018106:	f897 3020 	ldrb.w	r3, [r7, #32]
 801810a:	9300      	str	r3, [sp, #0]
 801810c:	4623      	mov	r3, r4
 801810e:	f7ec f800 	bl	8004112 <HAL_HCD_HC_Init>
 8018112:	4603      	mov	r3, r0
 8018114:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8018116:	7bfb      	ldrb	r3, [r7, #15]
 8018118:	4618      	mov	r0, r3
 801811a:	f000 f8bf 	bl	801829c <USBH_Get_USB_Status>
 801811e:	4603      	mov	r3, r0
 8018120:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018122:	7bbb      	ldrb	r3, [r7, #14]
}
 8018124:	4618      	mov	r0, r3
 8018126:	3714      	adds	r7, #20
 8018128:	46bd      	mov	sp, r7
 801812a:	bd90      	pop	{r4, r7, pc}

0801812c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b084      	sub	sp, #16
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	460b      	mov	r3, r1
 8018136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018138:	2300      	movs	r3, #0
 801813a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801813c:	2300      	movs	r3, #0
 801813e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018146:	78fa      	ldrb	r2, [r7, #3]
 8018148:	4611      	mov	r1, r2
 801814a:	4618      	mov	r0, r3
 801814c:	f7ec f879 	bl	8004242 <HAL_HCD_HC_Halt>
 8018150:	4603      	mov	r3, r0
 8018152:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018154:	7bfb      	ldrb	r3, [r7, #15]
 8018156:	4618      	mov	r0, r3
 8018158:	f000 f8a0 	bl	801829c <USBH_Get_USB_Status>
 801815c:	4603      	mov	r3, r0
 801815e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018160:	7bbb      	ldrb	r3, [r7, #14]
}
 8018162:	4618      	mov	r0, r3
 8018164:	3710      	adds	r7, #16
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}

0801816a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801816a:	b590      	push	{r4, r7, lr}
 801816c:	b089      	sub	sp, #36	; 0x24
 801816e:	af04      	add	r7, sp, #16
 8018170:	6078      	str	r0, [r7, #4]
 8018172:	4608      	mov	r0, r1
 8018174:	4611      	mov	r1, r2
 8018176:	461a      	mov	r2, r3
 8018178:	4603      	mov	r3, r0
 801817a:	70fb      	strb	r3, [r7, #3]
 801817c:	460b      	mov	r3, r1
 801817e:	70bb      	strb	r3, [r7, #2]
 8018180:	4613      	mov	r3, r2
 8018182:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018184:	2300      	movs	r3, #0
 8018186:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018188:	2300      	movs	r3, #0
 801818a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8018192:	787c      	ldrb	r4, [r7, #1]
 8018194:	78ba      	ldrb	r2, [r7, #2]
 8018196:	78f9      	ldrb	r1, [r7, #3]
 8018198:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801819c:	9303      	str	r3, [sp, #12]
 801819e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80181a0:	9302      	str	r3, [sp, #8]
 80181a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a4:	9301      	str	r3, [sp, #4]
 80181a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80181aa:	9300      	str	r3, [sp, #0]
 80181ac:	4623      	mov	r3, r4
 80181ae:	f7ec f86b 	bl	8004288 <HAL_HCD_HC_SubmitRequest>
 80181b2:	4603      	mov	r3, r0
 80181b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80181b6:	7bfb      	ldrb	r3, [r7, #15]
 80181b8:	4618      	mov	r0, r3
 80181ba:	f000 f86f 	bl	801829c <USBH_Get_USB_Status>
 80181be:	4603      	mov	r3, r0
 80181c0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80181c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80181c4:	4618      	mov	r0, r3
 80181c6:	3714      	adds	r7, #20
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd90      	pop	{r4, r7, pc}

080181cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b082      	sub	sp, #8
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	460b      	mov	r3, r1
 80181d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80181de:	78fa      	ldrb	r2, [r7, #3]
 80181e0:	4611      	mov	r1, r2
 80181e2:	4618      	mov	r0, r3
 80181e4:	f7ec fb0c 	bl	8004800 <HAL_HCD_HC_GetURBState>
 80181e8:	4603      	mov	r3, r0
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3708      	adds	r7, #8
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}

080181f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80181f2:	b580      	push	{r7, lr}
 80181f4:	b082      	sub	sp, #8
 80181f6:	af00      	add	r7, sp, #0
 80181f8:	6078      	str	r0, [r7, #4]
 80181fa:	460b      	mov	r3, r1
 80181fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8018204:	2b01      	cmp	r3, #1
 8018206:	d103      	bne.n	8018210 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8018208:	78fb      	ldrb	r3, [r7, #3]
 801820a:	4618      	mov	r0, r3
 801820c:	f000 f872 	bl	80182f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8018210:	20c8      	movs	r0, #200	; 0xc8
 8018212:	f7e9 ff71 	bl	80020f8 <HAL_Delay>
  return USBH_OK;
 8018216:	2300      	movs	r3, #0
}
 8018218:	4618      	mov	r0, r3
 801821a:	3708      	adds	r7, #8
 801821c:	46bd      	mov	sp, r7
 801821e:	bd80      	pop	{r7, pc}

08018220 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8018220:	b480      	push	{r7}
 8018222:	b085      	sub	sp, #20
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
 8018228:	460b      	mov	r3, r1
 801822a:	70fb      	strb	r3, [r7, #3]
 801822c:	4613      	mov	r3, r2
 801822e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018236:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018238:	78fa      	ldrb	r2, [r7, #3]
 801823a:	68f9      	ldr	r1, [r7, #12]
 801823c:	4613      	mov	r3, r2
 801823e:	009b      	lsls	r3, r3, #2
 8018240:	4413      	add	r3, r2
 8018242:	00db      	lsls	r3, r3, #3
 8018244:	440b      	add	r3, r1
 8018246:	333b      	adds	r3, #59	; 0x3b
 8018248:	781b      	ldrb	r3, [r3, #0]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d00a      	beq.n	8018264 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801824e:	78fa      	ldrb	r2, [r7, #3]
 8018250:	68f9      	ldr	r1, [r7, #12]
 8018252:	4613      	mov	r3, r2
 8018254:	009b      	lsls	r3, r3, #2
 8018256:	4413      	add	r3, r2
 8018258:	00db      	lsls	r3, r3, #3
 801825a:	440b      	add	r3, r1
 801825c:	3350      	adds	r3, #80	; 0x50
 801825e:	78ba      	ldrb	r2, [r7, #2]
 8018260:	701a      	strb	r2, [r3, #0]
 8018262:	e009      	b.n	8018278 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8018264:	78fa      	ldrb	r2, [r7, #3]
 8018266:	68f9      	ldr	r1, [r7, #12]
 8018268:	4613      	mov	r3, r2
 801826a:	009b      	lsls	r3, r3, #2
 801826c:	4413      	add	r3, r2
 801826e:	00db      	lsls	r3, r3, #3
 8018270:	440b      	add	r3, r1
 8018272:	3351      	adds	r3, #81	; 0x51
 8018274:	78ba      	ldrb	r2, [r7, #2]
 8018276:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8018278:	2300      	movs	r3, #0
}
 801827a:	4618      	mov	r0, r3
 801827c:	3714      	adds	r7, #20
 801827e:	46bd      	mov	sp, r7
 8018280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018284:	4770      	bx	lr

08018286 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8018286:	b580      	push	{r7, lr}
 8018288:	b082      	sub	sp, #8
 801828a:	af00      	add	r7, sp, #0
 801828c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801828e:	6878      	ldr	r0, [r7, #4]
 8018290:	f7e9 ff32 	bl	80020f8 <HAL_Delay>
}
 8018294:	bf00      	nop
 8018296:	3708      	adds	r7, #8
 8018298:	46bd      	mov	sp, r7
 801829a:	bd80      	pop	{r7, pc}

0801829c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801829c:	b480      	push	{r7}
 801829e:	b085      	sub	sp, #20
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	4603      	mov	r3, r0
 80182a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80182a6:	2300      	movs	r3, #0
 80182a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80182aa:	79fb      	ldrb	r3, [r7, #7]
 80182ac:	2b03      	cmp	r3, #3
 80182ae:	d817      	bhi.n	80182e0 <USBH_Get_USB_Status+0x44>
 80182b0:	a201      	add	r2, pc, #4	; (adr r2, 80182b8 <USBH_Get_USB_Status+0x1c>)
 80182b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182b6:	bf00      	nop
 80182b8:	080182c9 	.word	0x080182c9
 80182bc:	080182cf 	.word	0x080182cf
 80182c0:	080182d5 	.word	0x080182d5
 80182c4:	080182db 	.word	0x080182db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80182c8:	2300      	movs	r3, #0
 80182ca:	73fb      	strb	r3, [r7, #15]
    break;
 80182cc:	e00b      	b.n	80182e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80182ce:	2302      	movs	r3, #2
 80182d0:	73fb      	strb	r3, [r7, #15]
    break;
 80182d2:	e008      	b.n	80182e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80182d4:	2301      	movs	r3, #1
 80182d6:	73fb      	strb	r3, [r7, #15]
    break;
 80182d8:	e005      	b.n	80182e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80182da:	2302      	movs	r3, #2
 80182dc:	73fb      	strb	r3, [r7, #15]
    break;
 80182de:	e002      	b.n	80182e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80182e0:	2302      	movs	r3, #2
 80182e2:	73fb      	strb	r3, [r7, #15]
    break;
 80182e4:	bf00      	nop
  }
  return usb_status;
 80182e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80182e8:	4618      	mov	r0, r3
 80182ea:	3714      	adds	r7, #20
 80182ec:	46bd      	mov	sp, r7
 80182ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f2:	4770      	bx	lr

080182f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b084      	sub	sp, #16
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	4603      	mov	r3, r0
 80182fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80182fe:	79fb      	ldrb	r3, [r7, #7]
 8018300:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8018302:	79fb      	ldrb	r3, [r7, #7]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d102      	bne.n	801830e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8018308:	2301      	movs	r3, #1
 801830a:	73fb      	strb	r3, [r7, #15]
 801830c:	e001      	b.n	8018312 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801830e:	2300      	movs	r3, #0
 8018310:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 8018312:	7bfb      	ldrb	r3, [r7, #15]
 8018314:	461a      	mov	r2, r3
 8018316:	2104      	movs	r1, #4
 8018318:	4803      	ldr	r0, [pc, #12]	; (8018328 <MX_DriverVbusFS+0x34>)
 801831a:	f7eb fe7f 	bl	800401c <HAL_GPIO_WritePin>
}
 801831e:	bf00      	nop
 8018320:	3710      	adds	r7, #16
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}
 8018326:	bf00      	nop
 8018328:	40020400 	.word	0x40020400

0801832c <debug_init>:


}

void debug_init(UART_HandleTypeDef* handler)
{
 801832c:	b480      	push	{r7}
 801832e:	b083      	sub	sp, #12
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
	pUart = handler;
 8018334:	4a04      	ldr	r2, [pc, #16]	; (8018348 <debug_init+0x1c>)
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6013      	str	r3, [r2, #0]
}
 801833a:	bf00      	nop
 801833c:	370c      	adds	r7, #12
 801833e:	46bd      	mov	sp, r7
 8018340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018344:	4770      	bx	lr
 8018346:	bf00      	nop
 8018348:	20009d4c 	.word	0x20009d4c

0801834c <debug_chr>:

//send chr via UART (platform dependent)
void debug_chr(char chr)
{
 801834c:	b480      	push	{r7}
 801834e:	b083      	sub	sp, #12
 8018350:	af00      	add	r7, sp, #0
 8018352:	4603      	mov	r3, r0
 8018354:	71fb      	strb	r3, [r7, #7]
	#if USE_HAL
	HAL_UART_Transmit(pUart,
	(uint8_t*)&chr, 1, 1000);
	#else
	while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 8018356:	bf00      	nop
 8018358:	4b09      	ldr	r3, [pc, #36]	; (8018380 <debug_chr+0x34>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018364:	2b80      	cmp	r3, #128	; 0x80
 8018366:	d1f7      	bne.n	8018358 <debug_chr+0xc>
	pUart->Instance->DR = (uint16_t)chr;
 8018368:	4b05      	ldr	r3, [pc, #20]	; (8018380 <debug_chr+0x34>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	79fa      	ldrb	r2, [r7, #7]
 8018370:	605a      	str	r2, [r3, #4]
	#endif
}
 8018372:	bf00      	nop
 8018374:	370c      	adds	r7, #12
 8018376:	46bd      	mov	sp, r7
 8018378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837c:	4770      	bx	lr
 801837e:	bf00      	nop
 8018380:	20009d4c 	.word	0x20009d4c

08018384 <rfid_configure>:
        SPI_HandleTypeDef *s,
        GPIO_TypeDef *cs_po,
        uint16_t cs_pi,
        GPIO_TypeDef *reset_po,
        uint16_t reset_pi
) {
 8018384:	b480      	push	{r7}
 8018386:	b085      	sub	sp, #20
 8018388:	af00      	add	r7, sp, #0
 801838a:	60f8      	str	r0, [r7, #12]
 801838c:	60b9      	str	r1, [r7, #8]
 801838e:	603b      	str	r3, [r7, #0]
 8018390:	4613      	mov	r3, r2
 8018392:	80fb      	strh	r3, [r7, #6]
    spi = s;
 8018394:	4a0a      	ldr	r2, [pc, #40]	; (80183c0 <rfid_configure+0x3c>)
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	6013      	str	r3, [r2, #0]
    cs_port = cs_po;
 801839a:	4a0a      	ldr	r2, [pc, #40]	; (80183c4 <rfid_configure+0x40>)
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	6013      	str	r3, [r2, #0]
    cs_pin = cs_pi;
 80183a0:	4a09      	ldr	r2, [pc, #36]	; (80183c8 <rfid_configure+0x44>)
 80183a2:	88fb      	ldrh	r3, [r7, #6]
 80183a4:	8013      	strh	r3, [r2, #0]
    reset_port = reset_po;
 80183a6:	4a09      	ldr	r2, [pc, #36]	; (80183cc <rfid_configure+0x48>)
 80183a8:	683b      	ldr	r3, [r7, #0]
 80183aa:	6013      	str	r3, [r2, #0]
    reset_pin = reset_pi;
 80183ac:	4a08      	ldr	r2, [pc, #32]	; (80183d0 <rfid_configure+0x4c>)
 80183ae:	8b3b      	ldrh	r3, [r7, #24]
 80183b0:	8013      	strh	r3, [r2, #0]
}
 80183b2:	bf00      	nop
 80183b4:	3714      	adds	r7, #20
 80183b6:	46bd      	mov	sp, r7
 80183b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183bc:	4770      	bx	lr
 80183be:	bf00      	nop
 80183c0:	20009d50 	.word	0x20009d50
 80183c4:	20009d54 	.word	0x20009d54
 80183c8:	20009d58 	.word	0x20009d58
 80183cc:	20009d5c 	.word	0x20009d5c
 80183d0:	20009d60 	.word	0x20009d60

080183d4 <rfid_init>:

void rfid_init() {
 80183d4:	b580      	push	{r7, lr}
 80183d6:	af00      	add	r7, sp, #0
    rfid_cs_write(GPIO_PIN_SET);
 80183d8:	2001      	movs	r0, #1
 80183da:	f000 f8d5 	bl	8018588 <rfid_cs_write>
    //HAL_Delay(5);
    //HAL_GPIO_WritePin(RFID_RESET_GPIO_Port, RFID_RESET_Pin, GPIO_PIN_SET);
    //HAL_Delay(50);
    //xprintf("reading %d",HAL_GPIO_ReadPin(RFID_RESET_GPIO_Port,RFID_RESET_Pin));

    rfid_reset();
 80183de:	f000 f9b5 	bl	801874c <rfid_reset>

    rfid_write_register(REG_T_MODE, 0x8D);
 80183e2:	218d      	movs	r1, #141	; 0x8d
 80183e4:	202a      	movs	r0, #42	; 0x2a
 80183e6:	f000 f973 	bl	80186d0 <rfid_write_register>

    // 48dB gain
    rfid_set_gain(0xff);
 80183ea:	20ff      	movs	r0, #255	; 0xff
 80183ec:	f000 f9cc 	bl	8018788 <rfid_set_gain>


    rfid_write_register(REG_RX_MODE, 0x00);
 80183f0:	2100      	movs	r1, #0
 80183f2:	2013      	movs	r0, #19
 80183f4:	f000 f96c 	bl	80186d0 <rfid_write_register>
    rfid_write_register(REG_MOD_WIDTH, 0x26);
 80183f8:	2126      	movs	r1, #38	; 0x26
 80183fa:	2024      	movs	r0, #36	; 0x24
 80183fc:	f000 f968 	bl	80186d0 <rfid_write_register>

    // When communicating with a PICC we need a timeout if something goes wrong.
    // f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
    // TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is REG_T_PRESCALER.
    rfid_write_register(REG_TX_MODE,
 8018400:	2180      	movs	r1, #128	; 0x80
 8018402:	2012      	movs	r0, #18
 8018404:	f000 f964 	bl	80186d0 <rfid_write_register>
                        0x80);            // TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
    rfid_write_register(REG_T_PRESCALER,
 8018408:	21a9      	movs	r1, #169	; 0xa9
 801840a:	202b      	movs	r0, #43	; 0x2b
 801840c:	f000 f960 	bl	80186d0 <rfid_write_register>
                        0xA9);        // TPreScaler = TModeReg[3..0]:REG_T_PRESCALER, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
    rfid_write_register(REG_T_RELOAD_H, 0x03);        // Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 8018410:	2103      	movs	r1, #3
 8018412:	202c      	movs	r0, #44	; 0x2c
 8018414:	f000 f95c 	bl	80186d0 <rfid_write_register>
    rfid_write_register(REG_T_RELOAD_L, 0xE8);
 8018418:	21e8      	movs	r1, #232	; 0xe8
 801841a:	202d      	movs	r0, #45	; 0x2d
 801841c:	f000 f958 	bl	80186d0 <rfid_write_register>

    rfid_write_register(REG_TX_ASK,
 8018420:	2140      	movs	r1, #64	; 0x40
 8018422:	2015      	movs	r0, #21
 8018424:	f000 f954 	bl	80186d0 <rfid_write_register>
                        0x40);        // Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
    rfid_write_register(REG_MODE,
 8018428:	213d      	movs	r1, #61	; 0x3d
 801842a:	2011      	movs	r0, #17
 801842c:	f000 f950 	bl	80186d0 <rfid_write_register>
                        0x3D);        // Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)



    rfid_antenna_on();        //Open the antenna
 8018430:	f000 f890 	bl	8018554 <rfid_antenna_on>
}
 8018434:	bf00      	nop
 8018436:	bd80      	pop	{r7, pc}

08018438 <rfid_self_test>:

void rfid_self_test() {
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0

    rfid_reset();
 801843e:	f000 f985 	bl	801874c <rfid_reset>

    rfid_set_bit_mask(REG_FIFO_LEVEL, 0x80);
 8018442:	2180      	movs	r1, #128	; 0x80
 8018444:	200a      	movs	r0, #10
 8018446:	f000 f84d 	bl	80184e4 <rfid_set_bit_mask>
    for (int i = 0; i < 25; i++) {
 801844a:	2300      	movs	r3, #0
 801844c:	60fb      	str	r3, [r7, #12]
 801844e:	e006      	b.n	801845e <rfid_self_test+0x26>
        rfid_write_register(REG_FIFO_DATA, 0x00);
 8018450:	2100      	movs	r1, #0
 8018452:	2009      	movs	r0, #9
 8018454:	f000 f93c 	bl	80186d0 <rfid_write_register>
    for (int i = 0; i < 25; i++) {
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	3301      	adds	r3, #1
 801845c:	60fb      	str	r3, [r7, #12]
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	2b18      	cmp	r3, #24
 8018462:	ddf5      	ble.n	8018450 <rfid_self_test+0x18>
    }

    rfid_write_register(REG_COMMAND, COM_MEM);
 8018464:	2101      	movs	r1, #1
 8018466:	2001      	movs	r0, #1
 8018468:	f000 f932 	bl	80186d0 <rfid_write_register>

    rfid_set_bit_mask(REG_FIFO_LEVEL, 0x80);
 801846c:	2180      	movs	r1, #128	; 0x80
 801846e:	200a      	movs	r0, #10
 8018470:	f000 f838 	bl	80184e4 <rfid_set_bit_mask>
    rfid_write_register(REG_AUTO_TEST, 0x09);
 8018474:	2109      	movs	r1, #9
 8018476:	2036      	movs	r0, #54	; 0x36
 8018478:	f000 f92a 	bl	80186d0 <rfid_write_register>

    rfid_write_register(REG_FIFO_DATA, 0x00);
 801847c:	2100      	movs	r1, #0
 801847e:	2009      	movs	r0, #9
 8018480:	f000 f926 	bl	80186d0 <rfid_write_register>

    rfid_write_register(REG_COMMAND, CMD_CALCCRC);
 8018484:	2103      	movs	r1, #3
 8018486:	2001      	movs	r0, #1
 8018488:	f000 f922 	bl	80186d0 <rfid_write_register>
    HAL_Delay(100);
 801848c:	2064      	movs	r0, #100	; 0x64
 801848e:	f7e9 fe33 	bl	80020f8 <HAL_Delay>

    int n = rfid_read_register(REG_FIFO_LEVEL);
 8018492:	200a      	movs	r0, #10
 8018494:	f000 f88e 	bl	80185b4 <rfid_read_register>
 8018498:	4603      	mov	r3, r0
 801849a:	607b      	str	r3, [r7, #4]
    xprintf("test resoult (%d uint8_ts):\r\n", n);
 801849c:	6879      	ldr	r1, [r7, #4]
 801849e:	480e      	ldr	r0, [pc, #56]	; (80184d8 <rfid_self_test+0xa0>)
 80184a0:	f000 fc0a 	bl	8018cb8 <xprintf>

    for (int i = 0; i < n; ++i) {
 80184a4:	2300      	movs	r3, #0
 80184a6:	60bb      	str	r3, [r7, #8]
 80184a8:	e00a      	b.n	80184c0 <rfid_self_test+0x88>
        xprintf("%02x ", rfid_read_register(REG_FIFO_DATA));
 80184aa:	2009      	movs	r0, #9
 80184ac:	f000 f882 	bl	80185b4 <rfid_read_register>
 80184b0:	4603      	mov	r3, r0
 80184b2:	4619      	mov	r1, r3
 80184b4:	4809      	ldr	r0, [pc, #36]	; (80184dc <rfid_self_test+0xa4>)
 80184b6:	f000 fbff 	bl	8018cb8 <xprintf>
    for (int i = 0; i < n; ++i) {
 80184ba:	68bb      	ldr	r3, [r7, #8]
 80184bc:	3301      	adds	r3, #1
 80184be:	60bb      	str	r3, [r7, #8]
 80184c0:	68ba      	ldr	r2, [r7, #8]
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	429a      	cmp	r2, r3
 80184c6:	dbf0      	blt.n	80184aa <rfid_self_test+0x72>
    }
    xprintf("\n\r");
 80184c8:	4805      	ldr	r0, [pc, #20]	; (80184e0 <rfid_self_test+0xa8>)
 80184ca:	f000 fbf5 	bl	8018cb8 <xprintf>
}
 80184ce:	bf00      	nop
 80184d0:	3710      	adds	r7, #16
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd80      	pop	{r7, pc}
 80184d6:	bf00      	nop
 80184d8:	0801ff54 	.word	0x0801ff54
 80184dc:	0801ff74 	.word	0x0801ff74
 80184e0:	0801ff7c 	.word	0x0801ff7c

080184e4 <rfid_set_bit_mask>:

void rfid_set_bit_mask(uint8_t reg, uint8_t mask) {
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b082      	sub	sp, #8
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	4603      	mov	r3, r0
 80184ec:	460a      	mov	r2, r1
 80184ee:	71fb      	strb	r3, [r7, #7]
 80184f0:	4613      	mov	r3, r2
 80184f2:	71bb      	strb	r3, [r7, #6]
    rfid_write_register(reg, rfid_read_register(reg) | mask);
 80184f4:	79fb      	ldrb	r3, [r7, #7]
 80184f6:	4618      	mov	r0, r3
 80184f8:	f000 f85c 	bl	80185b4 <rfid_read_register>
 80184fc:	4603      	mov	r3, r0
 80184fe:	461a      	mov	r2, r3
 8018500:	79bb      	ldrb	r3, [r7, #6]
 8018502:	4313      	orrs	r3, r2
 8018504:	b2da      	uxtb	r2, r3
 8018506:	79fb      	ldrb	r3, [r7, #7]
 8018508:	4611      	mov	r1, r2
 801850a:	4618      	mov	r0, r3
 801850c:	f000 f8e0 	bl	80186d0 <rfid_write_register>
}
 8018510:	bf00      	nop
 8018512:	3708      	adds	r7, #8
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}

08018518 <rfid_clear_bit_mask>:

void rfid_clear_bit_mask(uint8_t reg, uint8_t mask) {
 8018518:	b580      	push	{r7, lr}
 801851a:	b082      	sub	sp, #8
 801851c:	af00      	add	r7, sp, #0
 801851e:	4603      	mov	r3, r0
 8018520:	460a      	mov	r2, r1
 8018522:	71fb      	strb	r3, [r7, #7]
 8018524:	4613      	mov	r3, r2
 8018526:	71bb      	strb	r3, [r7, #6]
    rfid_write_register(reg, rfid_read_register(reg) & (~mask));
 8018528:	79fb      	ldrb	r3, [r7, #7]
 801852a:	4618      	mov	r0, r3
 801852c:	f000 f842 	bl	80185b4 <rfid_read_register>
 8018530:	4603      	mov	r3, r0
 8018532:	b25a      	sxtb	r2, r3
 8018534:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018538:	43db      	mvns	r3, r3
 801853a:	b25b      	sxtb	r3, r3
 801853c:	4013      	ands	r3, r2
 801853e:	b25b      	sxtb	r3, r3
 8018540:	b2da      	uxtb	r2, r3
 8018542:	79fb      	ldrb	r3, [r7, #7]
 8018544:	4611      	mov	r1, r2
 8018546:	4618      	mov	r0, r3
 8018548:	f000 f8c2 	bl	80186d0 <rfid_write_register>
}
 801854c:	bf00      	nop
 801854e:	3708      	adds	r7, #8
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}

08018554 <rfid_antenna_on>:

void rfid_antenna_on(void) {
 8018554:	b580      	push	{r7, lr}
 8018556:	b082      	sub	sp, #8
 8018558:	af00      	add	r7, sp, #0
    uint8_t temp;

    temp = rfid_read_register(REG_TX_CONTROL);
 801855a:	2014      	movs	r0, #20
 801855c:	f000 f82a 	bl	80185b4 <rfid_read_register>
 8018560:	4603      	mov	r3, r0
 8018562:	71fb      	strb	r3, [r7, #7]
    if (!(temp & 0x03)) {
 8018564:	79fb      	ldrb	r3, [r7, #7]
 8018566:	f003 0303 	and.w	r3, r3, #3
 801856a:	2b00      	cmp	r3, #0
 801856c:	d107      	bne.n	801857e <rfid_antenna_on+0x2a>
        rfid_set_bit_mask(REG_TX_CONTROL, temp | 0x03);
 801856e:	79fb      	ldrb	r3, [r7, #7]
 8018570:	f043 0303 	orr.w	r3, r3, #3
 8018574:	b2db      	uxtb	r3, r3
 8018576:	4619      	mov	r1, r3
 8018578:	2014      	movs	r0, #20
 801857a:	f7ff ffb3 	bl	80184e4 <rfid_set_bit_mask>
    }
}
 801857e:	bf00      	nop
 8018580:	3708      	adds	r7, #8
 8018582:	46bd      	mov	sp, r7
 8018584:	bd80      	pop	{r7, pc}
	...

08018588 <rfid_cs_write>:

uint8_t rfid_read_version() {
    return rfid_read_register(REG_VERSION);
}

void rfid_cs_write(uint8_t val) {
 8018588:	b580      	push	{r7, lr}
 801858a:	b082      	sub	sp, #8
 801858c:	af00      	add	r7, sp, #0
 801858e:	4603      	mov	r3, r0
 8018590:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(cs_port, cs_pin, val);
 8018592:	4b06      	ldr	r3, [pc, #24]	; (80185ac <rfid_cs_write+0x24>)
 8018594:	6818      	ldr	r0, [r3, #0]
 8018596:	4b06      	ldr	r3, [pc, #24]	; (80185b0 <rfid_cs_write+0x28>)
 8018598:	881b      	ldrh	r3, [r3, #0]
 801859a:	79fa      	ldrb	r2, [r7, #7]
 801859c:	4619      	mov	r1, r3
 801859e:	f7eb fd3d 	bl	800401c <HAL_GPIO_WritePin>
}
 80185a2:	bf00      	nop
 80185a4:	3708      	adds	r7, #8
 80185a6:	46bd      	mov	sp, r7
 80185a8:	bd80      	pop	{r7, pc}
 80185aa:	bf00      	nop
 80185ac:	20009d54 	.word	0x20009d54
 80185b0:	20009d58 	.word	0x20009d58

080185b4 <rfid_read_register>:

uint8_t rfid_read_register(uint8_t addr) {
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b086      	sub	sp, #24
 80185b8:	af02      	add	r7, sp, #8
 80185ba:	4603      	mov	r3, r0
 80185bc:	71fb      	strb	r3, [r7, #7]
    uint8_t val = 0x00;
 80185be:	2300      	movs	r3, #0
 80185c0:	73bb      	strb	r3, [r7, #14]

    //CS low
    rfid_cs_write(GPIO_PIN_RESET);
 80185c2:	2000      	movs	r0, #0
 80185c4:	f7ff ffe0 	bl	8018588 <rfid_cs_write>

    HAL_StatusTypeDef transmitStatus;
    addr = (addr << 1) | 0x80;
 80185c8:	79fb      	ldrb	r3, [r7, #7]
 80185ca:	005b      	lsls	r3, r3, #1
 80185cc:	b25b      	sxtb	r3, r3
 80185ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80185d2:	b25b      	sxtb	r3, r3
 80185d4:	b2db      	uxtb	r3, r3
 80185d6:	71fb      	strb	r3, [r7, #7]

    transmitStatus = HAL_SPI_Transmit(spi, &addr, 1, 1000);
 80185d8:	4b16      	ldr	r3, [pc, #88]	; (8018634 <rfid_read_register+0x80>)
 80185da:	6818      	ldr	r0, [r3, #0]
 80185dc:	1df9      	adds	r1, r7, #7
 80185de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80185e2:	2201      	movs	r2, #1
 80185e4:	f7f1 f8a7 	bl	8009736 <HAL_SPI_Transmit>
 80185e8:	4603      	mov	r3, r0
 80185ea:	73fb      	strb	r3, [r7, #15]

    if (transmitStatus != HAL_SPI_ERROR_NONE) {
 80185ec:	7bfb      	ldrb	r3, [r7, #15]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d002      	beq.n	80185f8 <rfid_read_register+0x44>
        xprintf("read register erorr");
 80185f2:	4811      	ldr	r0, [pc, #68]	; (8018638 <rfid_read_register+0x84>)
 80185f4:	f000 fb60 	bl	8018cb8 <xprintf>
    }

    uint8_t dummy = 0x00;
 80185f8:	2300      	movs	r3, #0
 80185fa:	737b      	strb	r3, [r7, #13]
    transmitStatus = HAL_SPI_TransmitReceive(spi, &dummy, &val, 1, 1000);
 80185fc:	4b0d      	ldr	r3, [pc, #52]	; (8018634 <rfid_read_register+0x80>)
 80185fe:	6818      	ldr	r0, [r3, #0]
 8018600:	f107 020e 	add.w	r2, r7, #14
 8018604:	f107 010d 	add.w	r1, r7, #13
 8018608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801860c:	9300      	str	r3, [sp, #0]
 801860e:	2301      	movs	r3, #1
 8018610:	f7f1 f9c5 	bl	800999e <HAL_SPI_TransmitReceive>
 8018614:	4603      	mov	r3, r0
 8018616:	73fb      	strb	r3, [r7, #15]
    if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8018618:	7bfb      	ldrb	r3, [r7, #15]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d002      	beq.n	8018624 <rfid_read_register+0x70>
        xprintf("read register erorr");
 801861e:	4806      	ldr	r0, [pc, #24]	; (8018638 <rfid_read_register+0x84>)
 8018620:	f000 fb4a 	bl	8018cb8 <xprintf>
    }

    //CS high
    rfid_cs_write(GPIO_PIN_SET);
 8018624:	2001      	movs	r0, #1
 8018626:	f7ff ffaf 	bl	8018588 <rfid_cs_write>

    return val;
 801862a:	7bbb      	ldrb	r3, [r7, #14]
}
 801862c:	4618      	mov	r0, r3
 801862e:	3710      	adds	r7, #16
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}
 8018634:	20009d50 	.word	0x20009d50
 8018638:	0801ff80 	.word	0x0801ff80

0801863c <rfid_read_register_many>:

void rfid_read_register_many(uint8_t addr, uint8_t count, uint8_t *tab, uint8_t rx_align) {
 801863c:	b590      	push	{r4, r7, lr}
 801863e:	b085      	sub	sp, #20
 8018640:	af00      	add	r7, sp, #0
 8018642:	603a      	str	r2, [r7, #0]
 8018644:	461a      	mov	r2, r3
 8018646:	4603      	mov	r3, r0
 8018648:	71fb      	strb	r3, [r7, #7]
 801864a:	460b      	mov	r3, r1
 801864c:	71bb      	strb	r3, [r7, #6]
 801864e:	4613      	mov	r3, r2
 8018650:	717b      	strb	r3, [r7, #5]
    if (count == 0) return;
 8018652:	79bb      	ldrb	r3, [r7, #6]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d037      	beq.n	80186c8 <rfid_read_register_many+0x8c>

    uint8_t index = 0;
 8018658:	2300      	movs	r3, #0
 801865a:	73fb      	strb	r3, [r7, #15]

    if (rx_align != 0) {
 801865c:	797b      	ldrb	r3, [r7, #5]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d02d      	beq.n	80186be <rfid_read_register_many+0x82>
        uint8_t mask = (0xFF << rx_align) & 0xFF;
 8018662:	797b      	ldrb	r3, [r7, #5]
 8018664:	22ff      	movs	r2, #255	; 0xff
 8018666:	fa02 f303 	lsl.w	r3, r2, r3
 801866a:	73bb      	strb	r3, [r7, #14]
        uint8_t value = rfid_read_register(addr);
 801866c:	79fb      	ldrb	r3, [r7, #7]
 801866e:	4618      	mov	r0, r3
 8018670:	f7ff ffa0 	bl	80185b4 <rfid_read_register>
 8018674:	4603      	mov	r3, r0
 8018676:	737b      	strb	r3, [r7, #13]
        tab[0] = (tab[0] & ~mask) | (value & mask);
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	781b      	ldrb	r3, [r3, #0]
 801867c:	b25a      	sxtb	r2, r3
 801867e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018682:	43db      	mvns	r3, r3
 8018684:	b25b      	sxtb	r3, r3
 8018686:	4013      	ands	r3, r2
 8018688:	b25a      	sxtb	r2, r3
 801868a:	7b79      	ldrb	r1, [r7, #13]
 801868c:	7bbb      	ldrb	r3, [r7, #14]
 801868e:	400b      	ands	r3, r1
 8018690:	b2db      	uxtb	r3, r3
 8018692:	b25b      	sxtb	r3, r3
 8018694:	4313      	orrs	r3, r2
 8018696:	b25b      	sxtb	r3, r3
 8018698:	b2da      	uxtb	r2, r3
 801869a:	683b      	ldr	r3, [r7, #0]
 801869c:	701a      	strb	r2, [r3, #0]
        index++;
 801869e:	7bfb      	ldrb	r3, [r7, #15]
 80186a0:	3301      	adds	r3, #1
 80186a2:	73fb      	strb	r3, [r7, #15]
    }

    for (; index < count; ++index) {
 80186a4:	e00b      	b.n	80186be <rfid_read_register_many+0x82>
        tab[index] = rfid_read_register(addr);
 80186a6:	7bfb      	ldrb	r3, [r7, #15]
 80186a8:	683a      	ldr	r2, [r7, #0]
 80186aa:	18d4      	adds	r4, r2, r3
 80186ac:	79fb      	ldrb	r3, [r7, #7]
 80186ae:	4618      	mov	r0, r3
 80186b0:	f7ff ff80 	bl	80185b4 <rfid_read_register>
 80186b4:	4603      	mov	r3, r0
 80186b6:	7023      	strb	r3, [r4, #0]
    for (; index < count; ++index) {
 80186b8:	7bfb      	ldrb	r3, [r7, #15]
 80186ba:	3301      	adds	r3, #1
 80186bc:	73fb      	strb	r3, [r7, #15]
 80186be:	7bfa      	ldrb	r2, [r7, #15]
 80186c0:	79bb      	ldrb	r3, [r7, #6]
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d3ef      	bcc.n	80186a6 <rfid_read_register_many+0x6a>
 80186c6:	e000      	b.n	80186ca <rfid_read_register_many+0x8e>
    if (count == 0) return;
 80186c8:	bf00      	nop
    }
}
 80186ca:	3714      	adds	r7, #20
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd90      	pop	{r4, r7, pc}

080186d0 <rfid_write_register>:

void rfid_write_register(uint8_t addr, uint8_t val) {
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b084      	sub	sp, #16
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	4603      	mov	r3, r0
 80186d8:	460a      	mov	r2, r1
 80186da:	71fb      	strb	r3, [r7, #7]
 80186dc:	4613      	mov	r3, r2
 80186de:	71bb      	strb	r3, [r7, #6]
    //CS low
    rfid_cs_write(GPIO_PIN_RESET);
 80186e0:	2000      	movs	r0, #0
 80186e2:	f7ff ff51 	bl	8018588 <rfid_cs_write>

    HAL_StatusTypeDef transmitStatus;

    //Send address ## HAL_MAX_DELAY --> infinite poll until process is successful
    addr = (addr << 1) & 0x7E;
 80186e6:	79fb      	ldrb	r3, [r7, #7]
 80186e8:	005b      	lsls	r3, r3, #1
 80186ea:	b2db      	uxtb	r3, r3
 80186ec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80186f0:	b2db      	uxtb	r3, r3
 80186f2:	71fb      	strb	r3, [r7, #7]

    transmitStatus = HAL_SPI_Transmit(spi, &addr, 1, HAL_MAX_DELAY);
 80186f4:	4b13      	ldr	r3, [pc, #76]	; (8018744 <rfid_write_register+0x74>)
 80186f6:	6818      	ldr	r0, [r3, #0]
 80186f8:	1df9      	adds	r1, r7, #7
 80186fa:	f04f 33ff 	mov.w	r3, #4294967295
 80186fe:	2201      	movs	r2, #1
 8018700:	f7f1 f819 	bl	8009736 <HAL_SPI_Transmit>
 8018704:	4603      	mov	r3, r0
 8018706:	73fb      	strb	r3, [r7, #15]
    if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8018708:	7bfb      	ldrb	r3, [r7, #15]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d002      	beq.n	8018714 <rfid_write_register+0x44>
        xprintf("write register error");
 801870e:	480e      	ldr	r0, [pc, #56]	; (8018748 <rfid_write_register+0x78>)
 8018710:	f000 fad2 	bl	8018cb8 <xprintf>

    }
    //Send data
    transmitStatus = HAL_SPI_Transmit(spi, &val, 1, HAL_MAX_DELAY);
 8018714:	4b0b      	ldr	r3, [pc, #44]	; (8018744 <rfid_write_register+0x74>)
 8018716:	6818      	ldr	r0, [r3, #0]
 8018718:	1db9      	adds	r1, r7, #6
 801871a:	f04f 33ff 	mov.w	r3, #4294967295
 801871e:	2201      	movs	r2, #1
 8018720:	f7f1 f809 	bl	8009736 <HAL_SPI_Transmit>
 8018724:	4603      	mov	r3, r0
 8018726:	73fb      	strb	r3, [r7, #15]
    if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8018728:	7bfb      	ldrb	r3, [r7, #15]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d002      	beq.n	8018734 <rfid_write_register+0x64>
        xprintf("write register error");
 801872e:	4806      	ldr	r0, [pc, #24]	; (8018748 <rfid_write_register+0x78>)
 8018730:	f000 fac2 	bl	8018cb8 <xprintf>
    }

    //CS high
    rfid_cs_write(GPIO_PIN_SET);
 8018734:	2001      	movs	r0, #1
 8018736:	f7ff ff27 	bl	8018588 <rfid_cs_write>
}
 801873a:	bf00      	nop
 801873c:	3710      	adds	r7, #16
 801873e:	46bd      	mov	sp, r7
 8018740:	bd80      	pop	{r7, pc}
 8018742:	bf00      	nop
 8018744:	20009d50 	.word	0x20009d50
 8018748:	0801ff94 	.word	0x0801ff94

0801874c <rfid_reset>:

void rfid_reset() {
 801874c:	b580      	push	{r7, lr}
 801874e:	b082      	sub	sp, #8
 8018750:	af00      	add	r7, sp, #0
    rfid_write_register(REG_COMMAND, COM_SOFT_RESET);
 8018752:	210f      	movs	r1, #15
 8018754:	2001      	movs	r0, #1
 8018756:	f7ff ffbb 	bl	80186d0 <rfid_write_register>
    uint8_t count = 0;
 801875a:	2300      	movs	r3, #0
 801875c:	71fb      	strb	r3, [r7, #7]
    do {
        // Wait for the PowerDown bit in CommandReg to be cleared (max 3x50ms)
        HAL_Delay(50);
 801875e:	2032      	movs	r0, #50	; 0x32
 8018760:	f7e9 fcca 	bl	80020f8 <HAL_Delay>
    } while ((rfid_read_register(REG_COMMAND) & (1 << 4)) && (++count) < 3);
 8018764:	2001      	movs	r0, #1
 8018766:	f7ff ff25 	bl	80185b4 <rfid_read_register>
 801876a:	4603      	mov	r3, r0
 801876c:	f003 0310 	and.w	r3, r3, #16
 8018770:	2b00      	cmp	r3, #0
 8018772:	d005      	beq.n	8018780 <rfid_reset+0x34>
 8018774:	79fb      	ldrb	r3, [r7, #7]
 8018776:	3301      	adds	r3, #1
 8018778:	71fb      	strb	r3, [r7, #7]
 801877a:	79fb      	ldrb	r3, [r7, #7]
 801877c:	2b02      	cmp	r3, #2
 801877e:	d9ee      	bls.n	801875e <rfid_reset+0x12>
}
 8018780:	bf00      	nop
 8018782:	3708      	adds	r7, #8
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}

08018788 <rfid_set_gain>:

void rfid_set_gain(uint8_t mask) {
 8018788:	b580      	push	{r7, lr}
 801878a:	b082      	sub	sp, #8
 801878c:	af00      	add	r7, sp, #0
 801878e:	4603      	mov	r3, r0
 8018790:	71fb      	strb	r3, [r7, #7]
    rfid_clear_bit_mask(REG_RECEIVER_GAIN, (0x07 << 4));        // clear needed to allow 000 pattern
 8018792:	2170      	movs	r1, #112	; 0x70
 8018794:	2026      	movs	r0, #38	; 0x26
 8018796:	f7ff febf 	bl	8018518 <rfid_clear_bit_mask>
    rfid_set_bit_mask(REG_RECEIVER_GAIN, mask & (0x07 << 4));
 801879a:	79fb      	ldrb	r3, [r7, #7]
 801879c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80187a0:	b2db      	uxtb	r3, r3
 80187a2:	4619      	mov	r1, r3
 80187a4:	2026      	movs	r0, #38	; 0x26
 80187a6:	f7ff fe9d 	bl	80184e4 <rfid_set_bit_mask>
}
 80187aa:	bf00      	nop
 80187ac:	3708      	adds	r7, #8
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}

080187b2 <rfid_is_new_card>:
    *sak = response_buffer[0];
    *size = 4;
    return MI_OK;
}

bool rfid_is_new_card() {
 80187b2:	b580      	push	{r7, lr}
 80187b4:	b082      	sub	sp, #8
 80187b6:	af00      	add	r7, sp, #0
    uint8_t tag_buffer[2];
    uint8_t buffer_size = 2;
 80187b8:	2302      	movs	r3, #2
 80187ba:	70fb      	strb	r3, [r7, #3]

    // reset transmissions rates
    rfid_write_register(REG_TX_MODE, 0x00);
 80187bc:	2100      	movs	r1, #0
 80187be:	2012      	movs	r0, #18
 80187c0:	f7ff ff86 	bl	80186d0 <rfid_write_register>
    rfid_write_register(REG_RX_MODE, 0x00);
 80187c4:	2100      	movs	r1, #0
 80187c6:	2013      	movs	r0, #19
 80187c8:	f7ff ff82 	bl	80186d0 <rfid_write_register>

    rfid_status_t status = rfid_reqa(tag_buffer, &buffer_size);
 80187cc:	1cfa      	adds	r2, r7, #3
 80187ce:	1d3b      	adds	r3, r7, #4
 80187d0:	4611      	mov	r1, r2
 80187d2:	4618      	mov	r0, r3
 80187d4:	f000 f80f 	bl	80187f6 <rfid_reqa>
 80187d8:	4603      	mov	r3, r0
 80187da:	71fb      	strb	r3, [r7, #7]
    //xprintf("status: %d\r\n", status);
    if (status == MI_OK || status == MI_COLLISION) {
 80187dc:	79fb      	ldrb	r3, [r7, #7]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d002      	beq.n	80187e8 <rfid_is_new_card+0x36>
 80187e2:	79fb      	ldrb	r3, [r7, #7]
 80187e4:	2b04      	cmp	r3, #4
 80187e6:	d101      	bne.n	80187ec <rfid_is_new_card+0x3a>
        return true;
 80187e8:	2301      	movs	r3, #1
 80187ea:	e000      	b.n	80187ee <rfid_is_new_card+0x3c>
    }
    return false;
 80187ec:	2300      	movs	r3, #0
}
 80187ee:	4618      	mov	r0, r3
 80187f0:	3708      	adds	r7, #8
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}

080187f6 <rfid_reqa>:

rfid_status_t rfid_reqa(
        uint8_t *response,
        uint8_t *response_size
) {
 80187f6:	b580      	push	{r7, lr}
 80187f8:	b082      	sub	sp, #8
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	6078      	str	r0, [r7, #4]
 80187fe:	6039      	str	r1, [r7, #0]
    return rfid_reqa_or_wupa(MIF_REQA, response, response_size);
 8018800:	683a      	ldr	r2, [r7, #0]
 8018802:	6879      	ldr	r1, [r7, #4]
 8018804:	2026      	movs	r0, #38	; 0x26
 8018806:	f000 f805 	bl	8018814 <rfid_reqa_or_wupa>
 801880a:	4603      	mov	r3, r0
}
 801880c:	4618      	mov	r0, r3
 801880e:	3708      	adds	r7, #8
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}

08018814 <rfid_reqa_or_wupa>:

rfid_status_t rfid_reqa_or_wupa(
        uint8_t command,                // MIF_REQA or MIF_WUPA
        uint8_t *response,
        uint8_t *response_size
) {
 8018814:	b580      	push	{r7, lr}
 8018816:	b08a      	sub	sp, #40	; 0x28
 8018818:	af04      	add	r7, sp, #16
 801881a:	4603      	mov	r3, r0
 801881c:	60b9      	str	r1, [r7, #8]
 801881e:	607a      	str	r2, [r7, #4]
 8018820:	73fb      	strb	r3, [r7, #15]
    if (response == NULL || *response_size < 2) {    // The ATQA response is 2 bytes long.
 8018822:	68bb      	ldr	r3, [r7, #8]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d003      	beq.n	8018830 <rfid_reqa_or_wupa+0x1c>
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	781b      	ldrb	r3, [r3, #0]
 801882c:	2b01      	cmp	r3, #1
 801882e:	d801      	bhi.n	8018834 <rfid_reqa_or_wupa+0x20>
        return MI_NO_ROOM;
 8018830:	2303      	movs	r3, #3
 8018832:	e024      	b.n	801887e <rfid_reqa_or_wupa+0x6a>
    }

    rfid_clear_bit_mask(REG_COLL, 0x80);
 8018834:	2180      	movs	r1, #128	; 0x80
 8018836:	200e      	movs	r0, #14
 8018838:	f7ff fe6e 	bl	8018518 <rfid_clear_bit_mask>
    //rfid_write_register(REG_BIT_FRAMING, 0x80);
    uint8_t valid_bits = 7;
 801883c:	2307      	movs	r3, #7
 801883e:	75bb      	strb	r3, [r7, #22]

    rfid_status_t status = rfid_transcive_data(&command, 1, response, response_size, &valid_bits, 0, false);
 8018840:	f107 000f 	add.w	r0, r7, #15
 8018844:	2300      	movs	r3, #0
 8018846:	9302      	str	r3, [sp, #8]
 8018848:	2300      	movs	r3, #0
 801884a:	9301      	str	r3, [sp, #4]
 801884c:	f107 0316 	add.w	r3, r7, #22
 8018850:	9300      	str	r3, [sp, #0]
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	68ba      	ldr	r2, [r7, #8]
 8018856:	2101      	movs	r1, #1
 8018858:	f000 f815 	bl	8018886 <rfid_transcive_data>
 801885c:	4603      	mov	r3, r0
 801885e:	75fb      	strb	r3, [r7, #23]

    if (status != MI_OK) {
 8018860:	7dfb      	ldrb	r3, [r7, #23]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d001      	beq.n	801886a <rfid_reqa_or_wupa+0x56>
        return status;
 8018866:	7dfb      	ldrb	r3, [r7, #23]
 8018868:	e009      	b.n	801887e <rfid_reqa_or_wupa+0x6a>
    }

    if (*response_size != 2 || valid_bits != 0) {
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	781b      	ldrb	r3, [r3, #0]
 801886e:	2b02      	cmp	r3, #2
 8018870:	d102      	bne.n	8018878 <rfid_reqa_or_wupa+0x64>
 8018872:	7dbb      	ldrb	r3, [r7, #22]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d001      	beq.n	801887c <rfid_reqa_or_wupa+0x68>
        return MI_ERR;
 8018878:	2301      	movs	r3, #1
 801887a:	e000      	b.n	801887e <rfid_reqa_or_wupa+0x6a>
    }

    return MI_OK;
 801887c:	2300      	movs	r3, #0
}
 801887e:	4618      	mov	r0, r3
 8018880:	3718      	adds	r7, #24
 8018882:	46bd      	mov	sp, r7
 8018884:	bd80      	pop	{r7, pc}

08018886 <rfid_transcive_data>:
        uint8_t *back_data,        ///< nullptr or pointer to buffer if data should be read back after executing the command.
        uint8_t *back_len,        ///< In: Max number of uint8_ts to write to *backData. Out: The number of uint8_ts returned.
        uint8_t *valid_bits,    ///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits.
        uint8_t rx_align,        ///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
        bool check_CRC        ///< In: True => The last two uint8_ts of the response is assumed to be a CRC_A that must be validated.
) {
 8018886:	b580      	push	{r7, lr}
 8018888:	b08a      	sub	sp, #40	; 0x28
 801888a:	af06      	add	r7, sp, #24
 801888c:	60f8      	str	r0, [r7, #12]
 801888e:	607a      	str	r2, [r7, #4]
 8018890:	603b      	str	r3, [r7, #0]
 8018892:	460b      	mov	r3, r1
 8018894:	72fb      	strb	r3, [r7, #11]
    return rfid_to_card(CMD_TRANSCEIVE, 0x30, send_data, send_len, back_data, back_len, valid_bits, rx_align,
 8018896:	7afa      	ldrb	r2, [r7, #11]
 8018898:	f897 3020 	ldrb.w	r3, [r7, #32]
 801889c:	9304      	str	r3, [sp, #16]
 801889e:	7f3b      	ldrb	r3, [r7, #28]
 80188a0:	9303      	str	r3, [sp, #12]
 80188a2:	69bb      	ldr	r3, [r7, #24]
 80188a4:	9302      	str	r3, [sp, #8]
 80188a6:	683b      	ldr	r3, [r7, #0]
 80188a8:	9301      	str	r3, [sp, #4]
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	9300      	str	r3, [sp, #0]
 80188ae:	4613      	mov	r3, r2
 80188b0:	68fa      	ldr	r2, [r7, #12]
 80188b2:	2130      	movs	r1, #48	; 0x30
 80188b4:	200c      	movs	r0, #12
 80188b6:	f000 f805 	bl	80188c4 <rfid_to_card>
 80188ba:	4603      	mov	r3, r0
                        check_CRC);
}
 80188bc:	4618      	mov	r0, r3
 80188be:	3710      	adds	r7, #16
 80188c0:	46bd      	mov	sp, r7
 80188c2:	bd80      	pop	{r7, pc}

080188c4 <rfid_to_card>:
                           uint8_t *back_data,        ///< nullptr or pointer to buffer if data should be read back after executing the command.
                           uint8_t *back_len,        ///< In: Max number of uint8_ts to write to *backData. Out: The number of uint8_ts returned.
                           uint8_t *valid_bits,    ///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits.
                           uint8_t rx_align,        ///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
                           bool check_CRC        ///< In: True => The last two uint8_ts of the response is assumed to be a CRC_A that must be validated.
) {
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b086      	sub	sp, #24
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	603a      	str	r2, [r7, #0]
 80188cc:	461a      	mov	r2, r3
 80188ce:	4603      	mov	r3, r0
 80188d0:	71fb      	strb	r3, [r7, #7]
 80188d2:	460b      	mov	r3, r1
 80188d4:	71bb      	strb	r3, [r7, #6]
 80188d6:	4613      	mov	r3, r2
 80188d8:	717b      	strb	r3, [r7, #5]
    // Prepare values for BitFramingReg
    uint8_t txLastBits = valid_bits ? *valid_bits : 0;
 80188da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d002      	beq.n	80188e6 <rfid_to_card+0x22>
 80188e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188e2:	781b      	ldrb	r3, [r3, #0]
 80188e4:	e000      	b.n	80188e8 <rfid_to_card+0x24>
 80188e6:	2300      	movs	r3, #0
 80188e8:	743b      	strb	r3, [r7, #16]
    uint8_t bitFraming =
            (rx_align << 4) + txLastBits;        // RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80188ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80188ee:	011b      	lsls	r3, r3, #4
 80188f0:	b2da      	uxtb	r2, r3
    uint8_t bitFraming =
 80188f2:	7c3b      	ldrb	r3, [r7, #16]
 80188f4:	4413      	add	r3, r2
 80188f6:	73fb      	strb	r3, [r7, #15]

    //rfid_write_register(REG_COMM_IE_N, 0x80);

    rfid_write_register(REG_COMMAND, CMD_IDLE);            // Stop any active command.
 80188f8:	2100      	movs	r1, #0
 80188fa:	2001      	movs	r0, #1
 80188fc:	f7ff fee8 	bl	80186d0 <rfid_write_register>
    rfid_write_register(REG_COMM_IRQ, 0x7F);                    // Clear all seven interrupt request bits
 8018900:	217f      	movs	r1, #127	; 0x7f
 8018902:	2004      	movs	r0, #4
 8018904:	f7ff fee4 	bl	80186d0 <rfid_write_register>
    rfid_write_register(REG_FIFO_LEVEL, 0x80);                // FlushBuffer = 1, FIFO initialization
 8018908:	2180      	movs	r1, #128	; 0x80
 801890a:	200a      	movs	r0, #10
 801890c:	f7ff fee0 	bl	80186d0 <rfid_write_register>
    for (int i = 0; i < send_len; ++i) {
 8018910:	2300      	movs	r3, #0
 8018912:	617b      	str	r3, [r7, #20]
 8018914:	e00a      	b.n	801892c <rfid_to_card+0x68>
        rfid_write_register(REG_FIFO_DATA, send_data[i]);
 8018916:	697b      	ldr	r3, [r7, #20]
 8018918:	683a      	ldr	r2, [r7, #0]
 801891a:	4413      	add	r3, r2
 801891c:	781b      	ldrb	r3, [r3, #0]
 801891e:	4619      	mov	r1, r3
 8018920:	2009      	movs	r0, #9
 8018922:	f7ff fed5 	bl	80186d0 <rfid_write_register>
    for (int i = 0; i < send_len; ++i) {
 8018926:	697b      	ldr	r3, [r7, #20]
 8018928:	3301      	adds	r3, #1
 801892a:	617b      	str	r3, [r7, #20]
 801892c:	797b      	ldrb	r3, [r7, #5]
 801892e:	697a      	ldr	r2, [r7, #20]
 8018930:	429a      	cmp	r2, r3
 8018932:	dbf0      	blt.n	8018916 <rfid_to_card+0x52>
    }
    //rfid_write_register(FIFODataReg, send_len, send_data);	// Write send_data to the FIFO
    rfid_write_register(REG_BIT_FRAMING, bitFraming);        // Bit adjustments
 8018934:	7bfb      	ldrb	r3, [r7, #15]
 8018936:	4619      	mov	r1, r3
 8018938:	200d      	movs	r0, #13
 801893a:	f7ff fec9 	bl	80186d0 <rfid_write_register>
    rfid_write_register(REG_COMMAND, command);                // Execute the command
 801893e:	79fb      	ldrb	r3, [r7, #7]
 8018940:	4619      	mov	r1, r3
 8018942:	2001      	movs	r0, #1
 8018944:	f7ff fec4 	bl	80186d0 <rfid_write_register>
    if (command == CMD_TRANSCEIVE) {
 8018948:	79fb      	ldrb	r3, [r7, #7]
 801894a:	2b0c      	cmp	r3, #12
 801894c:	d103      	bne.n	8018956 <rfid_to_card+0x92>
        rfid_set_bit_mask(REG_BIT_FRAMING, 0x80);    // StartSend=1, transmission of data starts
 801894e:	2180      	movs	r1, #128	; 0x80
 8018950:	200d      	movs	r0, #13
 8018952:	f7ff fdc7 	bl	80184e4 <rfid_set_bit_mask>
    // Each iteration of the do-while-loop takes 17.86μs.
    // TODO check/modify for other architectures than Arduino Uno 16bit


    uint16_t i;
    for (i = 2000; i > 0; i--) {
 8018956:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801895a:	827b      	strh	r3, [r7, #18]
 801895c:	e014      	b.n	8018988 <rfid_to_card+0xc4>
        uint8_t n = rfid_read_register(
 801895e:	2004      	movs	r0, #4
 8018960:	f7ff fe28 	bl	80185b4 <rfid_read_register>
 8018964:	4603      	mov	r3, r0
 8018966:	73bb      	strb	r3, [r7, #14]
                REG_COMM_IRQ);    // ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
        if (n & waitIRq) {                    // One of the interrupts that signal success has been set.
 8018968:	7bba      	ldrb	r2, [r7, #14]
 801896a:	79bb      	ldrb	r3, [r7, #6]
 801896c:	4013      	ands	r3, r2
 801896e:	b2db      	uxtb	r3, r3
 8018970:	2b00      	cmp	r3, #0
 8018972:	d10d      	bne.n	8018990 <rfid_to_card+0xcc>
            break;
        }
        if (n & 0x01) {                        // Timer interrupt - nothing received in 25ms
 8018974:	7bbb      	ldrb	r3, [r7, #14]
 8018976:	f003 0301 	and.w	r3, r3, #1
 801897a:	2b00      	cmp	r3, #0
 801897c:	d001      	beq.n	8018982 <rfid_to_card+0xbe>
            return MI_TIMEOUT;
 801897e:	2302      	movs	r3, #2
 8018980:	e08c      	b.n	8018a9c <rfid_to_card+0x1d8>
    for (i = 2000; i > 0; i--) {
 8018982:	8a7b      	ldrh	r3, [r7, #18]
 8018984:	3b01      	subs	r3, #1
 8018986:	827b      	strh	r3, [r7, #18]
 8018988:	8a7b      	ldrh	r3, [r7, #18]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d1e7      	bne.n	801895e <rfid_to_card+0x9a>
 801898e:	e000      	b.n	8018992 <rfid_to_card+0xce>
            break;
 8018990:	bf00      	nop
        }
        //xprintf("n: %02x\r\n", n);
    }

    // 35.7ms and nothing happend. Communication with the MFRC522 might be down.
    if (i == 0) {
 8018992:	8a7b      	ldrh	r3, [r7, #18]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d101      	bne.n	801899c <rfid_to_card+0xd8>
        //xprintf("nothing\r\n");
        return MI_TIMEOUT;
 8018998:	2302      	movs	r3, #2
 801899a:	e07f      	b.n	8018a9c <rfid_to_card+0x1d8>
    }

    // Stop now if any errors except collisions were detected.
    uint8_t errorRegValue = rfid_read_register(
 801899c:	2006      	movs	r0, #6
 801899e:	f7ff fe09 	bl	80185b4 <rfid_read_register>
 80189a2:	4603      	mov	r3, r0
 80189a4:	737b      	strb	r3, [r7, #13]
            REG_ERROR); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
    if (errorRegValue & 0x13) {     // BufferOvfl ParityErr ProtocolErr
 80189a6:	7b7b      	ldrb	r3, [r7, #13]
 80189a8:	f003 0313 	and.w	r3, r3, #19
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d001      	beq.n	80189b4 <rfid_to_card+0xf0>
        return MI_ERR;
 80189b0:	2301      	movs	r3, #1
 80189b2:	e073      	b.n	8018a9c <rfid_to_card+0x1d8>
    }

    uint8_t _validBits = 0;
 80189b4:	2300      	movs	r3, #0
 80189b6:	747b      	strb	r3, [r7, #17]

    // If the caller wants data back, get it from the MFRC522.
    if (back_data && back_len) {
 80189b8:	6a3b      	ldr	r3, [r7, #32]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d025      	beq.n	8018a0a <rfid_to_card+0x146>
 80189be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d022      	beq.n	8018a0a <rfid_to_card+0x146>
        uint8_t n = rfid_read_register(REG_FIFO_LEVEL);    // Number of uint8_ts in the FIFO
 80189c4:	200a      	movs	r0, #10
 80189c6:	f7ff fdf5 	bl	80185b4 <rfid_read_register>
 80189ca:	4603      	mov	r3, r0
 80189cc:	733b      	strb	r3, [r7, #12]

        if (n > *back_len) {
 80189ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d0:	781b      	ldrb	r3, [r3, #0]
 80189d2:	7b3a      	ldrb	r2, [r7, #12]
 80189d4:	429a      	cmp	r2, r3
 80189d6:	d901      	bls.n	80189dc <rfid_to_card+0x118>
            return MI_NO_ROOM;
 80189d8:	2303      	movs	r3, #3
 80189da:	e05f      	b.n	8018a9c <rfid_to_card+0x1d8>
        }
        *back_len = n;                                            // Number of uint8_ts returned
 80189dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189de:	7b3a      	ldrb	r2, [r7, #12]
 80189e0:	701a      	strb	r2, [r3, #0]
        //rfid_read_register(FIFODataReg, n, back_data, rx_align);	// Get received data from FIFO

        rfid_read_register_many(REG_FIFO_DATA, n, back_data, rx_align);
 80189e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80189e6:	7b39      	ldrb	r1, [r7, #12]
 80189e8:	6a3a      	ldr	r2, [r7, #32]
 80189ea:	2009      	movs	r0, #9
 80189ec:	f7ff fe26 	bl	801863c <rfid_read_register_many>

        _validBits = rfid_read_register(REG_CONTROL) &
 80189f0:	200c      	movs	r0, #12
 80189f2:	f7ff fddf 	bl	80185b4 <rfid_read_register>
 80189f6:	4603      	mov	r3, r0
 80189f8:	f003 0307 	and.w	r3, r3, #7
 80189fc:	747b      	strb	r3, [r7, #17]
                     0x07;        // RxLastBits[2:0] indicates the number of valid bits in the last received uint8_t. If this value is 000b, the whole uint8_t is valid.
        if (valid_bits) {
 80189fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d002      	beq.n	8018a0a <rfid_to_card+0x146>
            *valid_bits = _validBits;
 8018a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a06:	7c7a      	ldrb	r2, [r7, #17]
 8018a08:	701a      	strb	r2, [r3, #0]
        }
    }

    // Tell about collisions
    if (errorRegValue & 0x08) {        // CollErr
 8018a0a:	7b7b      	ldrb	r3, [r7, #13]
 8018a0c:	f003 0308 	and.w	r3, r3, #8
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d001      	beq.n	8018a18 <rfid_to_card+0x154>
        return MI_COLLISION;
 8018a14:	2304      	movs	r3, #4
 8018a16:	e041      	b.n	8018a9c <rfid_to_card+0x1d8>
    }

    // Perform CRC_A validation if requested.
    if (back_data && back_len && check_CRC) {
 8018a18:	6a3b      	ldr	r3, [r7, #32]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d03d      	beq.n	8018a9a <rfid_to_card+0x1d6>
 8018a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d03a      	beq.n	8018a9a <rfid_to_card+0x1d6>
 8018a24:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d036      	beq.n	8018a9a <rfid_to_card+0x1d6>

        // In this case a MIFARE Classic NAK is not OK.
        if (*back_len == 1 && _validBits == 4) {
 8018a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a2e:	781b      	ldrb	r3, [r3, #0]
 8018a30:	2b01      	cmp	r3, #1
 8018a32:	d104      	bne.n	8018a3e <rfid_to_card+0x17a>
 8018a34:	7c7b      	ldrb	r3, [r7, #17]
 8018a36:	2b04      	cmp	r3, #4
 8018a38:	d101      	bne.n	8018a3e <rfid_to_card+0x17a>
            return MI_NACK;
 8018a3a:	2306      	movs	r3, #6
 8018a3c:	e02e      	b.n	8018a9c <rfid_to_card+0x1d8>
        }
        // We need at least the CRC_A value and all 8 bits of the last uint8_t must be received.
        if (*back_len < 2 || _validBits != 0) {
 8018a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a40:	781b      	ldrb	r3, [r3, #0]
 8018a42:	2b01      	cmp	r3, #1
 8018a44:	d902      	bls.n	8018a4c <rfid_to_card+0x188>
 8018a46:	7c7b      	ldrb	r3, [r7, #17]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d001      	beq.n	8018a50 <rfid_to_card+0x18c>
            return MI_CRC_WRONG;
 8018a4c:	2305      	movs	r3, #5
 8018a4e:	e025      	b.n	8018a9c <rfid_to_card+0x1d8>
        }
        // Verify CRC_A - do our own calculation and store the control in controlBuffer.
        uint8_t controlBuffer[2];

        rfid_status_t status = rfid_calc_crc(&back_data[0], *back_len - 2, &controlBuffer[0]);
 8018a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a52:	781b      	ldrb	r3, [r3, #0]
 8018a54:	3b02      	subs	r3, #2
 8018a56:	b2db      	uxtb	r3, r3
 8018a58:	f107 0208 	add.w	r2, r7, #8
 8018a5c:	4619      	mov	r1, r3
 8018a5e:	6a38      	ldr	r0, [r7, #32]
 8018a60:	f000 f820 	bl	8018aa4 <rfid_calc_crc>
 8018a64:	4603      	mov	r3, r0
 8018a66:	72fb      	strb	r3, [r7, #11]
        // rfid_status_t = PCD_CalculateCRC(&back_data[0], *back_len - 2, &controlBuffer[0]);
        if (status != MI_OK) {
 8018a68:	7afb      	ldrb	r3, [r7, #11]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d001      	beq.n	8018a72 <rfid_to_card+0x1ae>
            return status;
 8018a6e:	7afb      	ldrb	r3, [r7, #11]
 8018a70:	e014      	b.n	8018a9c <rfid_to_card+0x1d8>
        }
        if ((back_data[*back_len - 2] != controlBuffer[0]) || (back_data[*back_len - 1] != controlBuffer[1])) {
 8018a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	3b02      	subs	r3, #2
 8018a78:	6a3a      	ldr	r2, [r7, #32]
 8018a7a:	4413      	add	r3, r2
 8018a7c:	781a      	ldrb	r2, [r3, #0]
 8018a7e:	7a3b      	ldrb	r3, [r7, #8]
 8018a80:	429a      	cmp	r2, r3
 8018a82:	d108      	bne.n	8018a96 <rfid_to_card+0x1d2>
 8018a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a86:	781b      	ldrb	r3, [r3, #0]
 8018a88:	3b01      	subs	r3, #1
 8018a8a:	6a3a      	ldr	r2, [r7, #32]
 8018a8c:	4413      	add	r3, r2
 8018a8e:	781a      	ldrb	r2, [r3, #0]
 8018a90:	7a7b      	ldrb	r3, [r7, #9]
 8018a92:	429a      	cmp	r2, r3
 8018a94:	d001      	beq.n	8018a9a <rfid_to_card+0x1d6>
            return MI_CRC_WRONG;
 8018a96:	2305      	movs	r3, #5
 8018a98:	e000      	b.n	8018a9c <rfid_to_card+0x1d8>
        }
    }

    return MI_OK;
 8018a9a:	2300      	movs	r3, #0
} // End PCD_CommunicateWithPICC()
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	3718      	adds	r7, #24
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}

08018aa4 <rfid_calc_crc>:



rfid_status_t rfid_calc_crc(uint8_t *tab, uint8_t len, uint8_t *out) {
 8018aa4:	b590      	push	{r4, r7, lr}
 8018aa6:	b087      	sub	sp, #28
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	60f8      	str	r0, [r7, #12]
 8018aac:	460b      	mov	r3, r1
 8018aae:	607a      	str	r2, [r7, #4]
 8018ab0:	72fb      	strb	r3, [r7, #11]

    rfid_clear_bit_mask(REG_DIV_IRQ, 0x04);                //CRCIrq = 0
 8018ab2:	2104      	movs	r1, #4
 8018ab4:	2005      	movs	r0, #5
 8018ab6:	f7ff fd2f 	bl	8018518 <rfid_clear_bit_mask>
    rfid_set_bit_mask(REG_FIFO_LEVEL, 0x80);            //Clear the FIFO pointer
 8018aba:	2180      	movs	r1, #128	; 0x80
 8018abc:	200a      	movs	r0, #10
 8018abe:	f7ff fd11 	bl	80184e4 <rfid_set_bit_mask>
    rfid_write_register(REG_COMMAND, CMD_IDLE);        // Stop any active command.
 8018ac2:	2100      	movs	r1, #0
 8018ac4:	2001      	movs	r0, #1
 8018ac6:	f7ff fe03 	bl	80186d0 <rfid_write_register>


    for (int i = 0; i < len; i++) {
 8018aca:	2300      	movs	r3, #0
 8018acc:	617b      	str	r3, [r7, #20]
 8018ace:	e00a      	b.n	8018ae6 <rfid_calc_crc+0x42>
        rfid_write_register(REG_FIFO_DATA, tab[i]);
 8018ad0:	697b      	ldr	r3, [r7, #20]
 8018ad2:	68fa      	ldr	r2, [r7, #12]
 8018ad4:	4413      	add	r3, r2
 8018ad6:	781b      	ldrb	r3, [r3, #0]
 8018ad8:	4619      	mov	r1, r3
 8018ada:	2009      	movs	r0, #9
 8018adc:	f7ff fdf8 	bl	80186d0 <rfid_write_register>
    for (int i = 0; i < len; i++) {
 8018ae0:	697b      	ldr	r3, [r7, #20]
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	617b      	str	r3, [r7, #20]
 8018ae6:	7afb      	ldrb	r3, [r7, #11]
 8018ae8:	697a      	ldr	r2, [r7, #20]
 8018aea:	429a      	cmp	r2, r3
 8018aec:	dbf0      	blt.n	8018ad0 <rfid_calc_crc+0x2c>
    }
    rfid_write_register(REG_COMMAND, CMD_CALCCRC);
 8018aee:	2103      	movs	r1, #3
 8018af0:	2001      	movs	r0, #1
 8018af2:	f7ff fded 	bl	80186d0 <rfid_write_register>

    uint8_t i = 0xFF;
 8018af6:	23ff      	movs	r3, #255	; 0xff
 8018af8:	74fb      	strb	r3, [r7, #19]
    uint8_t n;
    do {
        n = rfid_read_register(REG_DIV_IRQ);
 8018afa:	2005      	movs	r0, #5
 8018afc:	f7ff fd5a 	bl	80185b4 <rfid_read_register>
 8018b00:	4603      	mov	r3, r0
 8018b02:	74bb      	strb	r3, [r7, #18]
        i--;
 8018b04:	7cfb      	ldrb	r3, [r7, #19]
 8018b06:	3b01      	subs	r3, #1
 8018b08:	74fb      	strb	r3, [r7, #19]
    } while ((i != 0) && !(n & 0x04));            //CRCIrq = 1
 8018b0a:	7cfb      	ldrb	r3, [r7, #19]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d004      	beq.n	8018b1a <rfid_calc_crc+0x76>
 8018b10:	7cbb      	ldrb	r3, [r7, #18]
 8018b12:	f003 0304 	and.w	r3, r3, #4
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d0ef      	beq.n	8018afa <rfid_calc_crc+0x56>

    if (i == 0) {
 8018b1a:	7cfb      	ldrb	r3, [r7, #19]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d101      	bne.n	8018b24 <rfid_calc_crc+0x80>
        return MI_TIMEOUT;
 8018b20:	2302      	movs	r3, #2
 8018b22:	e00e      	b.n	8018b42 <rfid_calc_crc+0x9e>
    }

    out[0] = rfid_read_register(REG_CRC_RESULT_L);
 8018b24:	2022      	movs	r0, #34	; 0x22
 8018b26:	f7ff fd45 	bl	80185b4 <rfid_read_register>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	461a      	mov	r2, r3
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	701a      	strb	r2, [r3, #0]
    out[1] = rfid_read_register(REG_CRC_RESULT_M);
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	1c5c      	adds	r4, r3, #1
 8018b36:	2021      	movs	r0, #33	; 0x21
 8018b38:	f7ff fd3c 	bl	80185b4 <rfid_read_register>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	7023      	strb	r3, [r4, #0]

    return MI_OK;
 8018b40:	2300      	movs	r3, #0

}
 8018b42:	4618      	mov	r0, r3
 8018b44:	371c      	adds	r7, #28
 8018b46:	46bd      	mov	sp, r7
 8018b48:	bd90      	pop	{r4, r7, pc}

08018b4a <xputc>:




void xputc (char c)
{
 8018b4a:	b580      	push	{r7, lr}
 8018b4c:	b082      	sub	sp, #8
 8018b4e:	af00      	add	r7, sp, #0
 8018b50:	4603      	mov	r3, r0
 8018b52:	71fb      	strb	r3, [r7, #7]
	debug_chr(c);
 8018b54:	79fb      	ldrb	r3, [r7, #7]
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7ff fbf8 	bl	801834c <debug_chr>
}
 8018b5c:	bf00      	nop
 8018b5e:	3708      	adds	r7, #8
 8018b60:	46bd      	mov	sp, r7
 8018b62:	bd80      	pop	{r7, pc}

08018b64 <xputs>:




void xputs (const char* str)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b082      	sub	sp, #8
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
	while (*str)
 8018b6c:	e006      	b.n	8018b7c <xputs+0x18>
		xputc(*str++);
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	1c5a      	adds	r2, r3, #1
 8018b72:	607a      	str	r2, [r7, #4]
 8018b74:	781b      	ldrb	r3, [r3, #0]
 8018b76:	4618      	mov	r0, r3
 8018b78:	f7ff ffe7 	bl	8018b4a <xputc>
	while (*str)
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	781b      	ldrb	r3, [r3, #0]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d1f4      	bne.n	8018b6e <xputs+0xa>
}
 8018b84:	bf00      	nop
 8018b86:	3708      	adds	r7, #8
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}

08018b8c <xitoa>:




void xitoa (long val, int radix, int len)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b08c      	sub	sp, #48	; 0x30
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	60f8      	str	r0, [r7, #12]
 8018b94:	60b9      	str	r1, [r7, #8]
 8018b96:	607a      	str	r2, [r7, #4]
	uint8_t c, r, sgn = 0, pad = ' ';
 8018b98:	2300      	movs	r3, #0
 8018b9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8018b9e:	2320      	movs	r3, #32
 8018ba0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t s[20], i = 0;
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint32_t v;


	if (radix < 0) {
 8018baa:	68bb      	ldr	r3, [r7, #8]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	da0b      	bge.n	8018bc8 <xitoa+0x3c>
		radix = -radix;
 8018bb0:	68bb      	ldr	r3, [r7, #8]
 8018bb2:	425b      	negs	r3, r3
 8018bb4:	60bb      	str	r3, [r7, #8]
		if (val < 0) {
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	da05      	bge.n	8018bc8 <xitoa+0x3c>
			val = -val;
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	425b      	negs	r3, r3
 8018bc0:	60fb      	str	r3, [r7, #12]
			sgn = '-';
 8018bc2:	232d      	movs	r3, #45	; 0x2d
 8018bc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
	}
	v = val;
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	62bb      	str	r3, [r7, #40]	; 0x28
	r = radix;
 8018bcc:	68bb      	ldr	r3, [r7, #8]
 8018bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (len < 0) {
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	da05      	bge.n	8018be4 <xitoa+0x58>
		len = -len;
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	425b      	negs	r3, r3
 8018bdc:	607b      	str	r3, [r7, #4]
		pad = '0';
 8018bde:	2330      	movs	r3, #48	; 0x30
 8018be0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	}
	if (len > 20) return;
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	2b14      	cmp	r3, #20
 8018be8:	dc62      	bgt.n	8018cb0 <xitoa+0x124>
	do {
		c = (uint8_t)(v % r);
 8018bea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8018bf4:	fb02 f201 	mul.w	r2, r2, r1
 8018bf8:	1a9b      	subs	r3, r3, r2
 8018bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c >= 10) c += 7;
 8018bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c02:	2b09      	cmp	r3, #9
 8018c04:	d904      	bls.n	8018c10 <xitoa+0x84>
 8018c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c0a:	3307      	adds	r3, #7
 8018c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		c += '0';
 8018c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c14:	3330      	adds	r3, #48	; 0x30
 8018c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		s[i++] = c;
 8018c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018c1e:	1c5a      	adds	r2, r3, #1
 8018c20:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8018c24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018c28:	4413      	add	r3, r2
 8018c2a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018c2e:	f803 2c20 	strb.w	r2, [r3, #-32]
		v /= r;
 8018c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	} while (v);
 8018c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d1d2      	bne.n	8018bea <xitoa+0x5e>
	if (sgn) s[i++] = sgn;
 8018c44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d018      	beq.n	8018c7e <xitoa+0xf2>
 8018c4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018c50:	1c5a      	adds	r2, r3, #1
 8018c52:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8018c56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018c5a:	4413      	add	r3, r2
 8018c5c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8018c60:	f803 2c20 	strb.w	r2, [r3, #-32]
	while (i < len)
 8018c64:	e00b      	b.n	8018c7e <xitoa+0xf2>
		s[i++] = pad;
 8018c66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018c6a:	1c5a      	adds	r2, r3, #1
 8018c6c:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8018c70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018c74:	4413      	add	r3, r2
 8018c76:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8018c7a:	f803 2c20 	strb.w	r2, [r3, #-32]
	while (i < len)
 8018c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018c82:	687a      	ldr	r2, [r7, #4]
 8018c84:	429a      	cmp	r2, r3
 8018c86:	dcee      	bgt.n	8018c66 <xitoa+0xda>
	do
		xputc(s[--i]);
 8018c88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018c8c:	3b01      	subs	r3, #1
 8018c8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8018c92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018c96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018c9a:	4413      	add	r3, r2
 8018c9c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7ff ff52 	bl	8018b4a <xputc>
	while (i);
 8018ca6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d1ec      	bne.n	8018c88 <xitoa+0xfc>
 8018cae:	e000      	b.n	8018cb2 <xitoa+0x126>
	if (len > 20) return;
 8018cb0:	bf00      	nop
}
 8018cb2:	3730      	adds	r7, #48	; 0x30
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}

08018cb8 <xprintf>:

void xprintf (const char* str, ...)
{
 8018cb8:	b40f      	push	{r0, r1, r2, r3}
 8018cba:	b580      	push	{r7, lr}
 8018cbc:	b086      	sub	sp, #24
 8018cbe:	af00      	add	r7, sp, #0
	va_list arp;
	int d, r, w, s, l;


	va_start(arp, str);
 8018cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018cc4:	603b      	str	r3, [r7, #0]

	while ((d = *str++) != 0) {
 8018cc6:	e09f      	b.n	8018e08 <xprintf+0x150>
		if (d != '%') {
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	2b25      	cmp	r3, #37	; 0x25
 8018ccc:	d005      	beq.n	8018cda <xprintf+0x22>
			xputc(d); continue;
 8018cce:	697b      	ldr	r3, [r7, #20]
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	f7ff ff39 	bl	8018b4a <xputc>
 8018cd8:	e096      	b.n	8018e08 <xprintf+0x150>
		}
		d = *str++; w = r = s = l = 0;
 8018cda:	6a3b      	ldr	r3, [r7, #32]
 8018cdc:	1c5a      	adds	r2, r3, #1
 8018cde:	623a      	str	r2, [r7, #32]
 8018ce0:	781b      	ldrb	r3, [r3, #0]
 8018ce2:	617b      	str	r3, [r7, #20]
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	607b      	str	r3, [r7, #4]
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	60bb      	str	r3, [r7, #8]
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	613b      	str	r3, [r7, #16]
 8018cf0:	693b      	ldr	r3, [r7, #16]
 8018cf2:	60fb      	str	r3, [r7, #12]
		if (d == '0') {
 8018cf4:	697b      	ldr	r3, [r7, #20]
 8018cf6:	2b30      	cmp	r3, #48	; 0x30
 8018cf8:	d118      	bne.n	8018d2c <xprintf+0x74>
			d = *str++; s = 1;
 8018cfa:	6a3b      	ldr	r3, [r7, #32]
 8018cfc:	1c5a      	adds	r2, r3, #1
 8018cfe:	623a      	str	r2, [r7, #32]
 8018d00:	781b      	ldrb	r3, [r3, #0]
 8018d02:	617b      	str	r3, [r7, #20]
 8018d04:	2301      	movs	r3, #1
 8018d06:	60bb      	str	r3, [r7, #8]
		}
		while ((d >= '0')&&(d <= '9')) {
 8018d08:	e010      	b.n	8018d2c <xprintf+0x74>
			w += w * 10 + (d - '0');
 8018d0a:	68fa      	ldr	r2, [r7, #12]
 8018d0c:	4613      	mov	r3, r2
 8018d0e:	009b      	lsls	r3, r3, #2
 8018d10:	4413      	add	r3, r2
 8018d12:	005b      	lsls	r3, r3, #1
 8018d14:	461a      	mov	r2, r3
 8018d16:	697b      	ldr	r3, [r7, #20]
 8018d18:	3b30      	subs	r3, #48	; 0x30
 8018d1a:	4413      	add	r3, r2
 8018d1c:	68fa      	ldr	r2, [r7, #12]
 8018d1e:	4413      	add	r3, r2
 8018d20:	60fb      	str	r3, [r7, #12]
			d = *str++;
 8018d22:	6a3b      	ldr	r3, [r7, #32]
 8018d24:	1c5a      	adds	r2, r3, #1
 8018d26:	623a      	str	r2, [r7, #32]
 8018d28:	781b      	ldrb	r3, [r3, #0]
 8018d2a:	617b      	str	r3, [r7, #20]
		while ((d >= '0')&&(d <= '9')) {
 8018d2c:	697b      	ldr	r3, [r7, #20]
 8018d2e:	2b2f      	cmp	r3, #47	; 0x2f
 8018d30:	dd02      	ble.n	8018d38 <xprintf+0x80>
 8018d32:	697b      	ldr	r3, [r7, #20]
 8018d34:	2b39      	cmp	r3, #57	; 0x39
 8018d36:	dde8      	ble.n	8018d0a <xprintf+0x52>
		}
		if (s) w = -w;
 8018d38:	68bb      	ldr	r3, [r7, #8]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d002      	beq.n	8018d44 <xprintf+0x8c>
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	425b      	negs	r3, r3
 8018d42:	60fb      	str	r3, [r7, #12]
		if (d == 'l') {
 8018d44:	697b      	ldr	r3, [r7, #20]
 8018d46:	2b6c      	cmp	r3, #108	; 0x6c
 8018d48:	d106      	bne.n	8018d58 <xprintf+0xa0>
			l = 1;
 8018d4a:	2301      	movs	r3, #1
 8018d4c:	607b      	str	r3, [r7, #4]
			d = *str++;
 8018d4e:	6a3b      	ldr	r3, [r7, #32]
 8018d50:	1c5a      	adds	r2, r3, #1
 8018d52:	623a      	str	r2, [r7, #32]
 8018d54:	781b      	ldrb	r3, [r3, #0]
 8018d56:	617b      	str	r3, [r7, #20]
		}
		if (!d) break;
 8018d58:	697b      	ldr	r3, [r7, #20]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d05e      	beq.n	8018e1c <xprintf+0x164>
		if (d == 's') {
 8018d5e:	697b      	ldr	r3, [r7, #20]
 8018d60:	2b73      	cmp	r3, #115	; 0x73
 8018d62:	d107      	bne.n	8018d74 <xprintf+0xbc>
			xputs(va_arg(arp, char*));
 8018d64:	683b      	ldr	r3, [r7, #0]
 8018d66:	1d1a      	adds	r2, r3, #4
 8018d68:	603a      	str	r2, [r7, #0]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	f7ff fef9 	bl	8018b64 <xputs>
			continue;
 8018d72:	e049      	b.n	8018e08 <xprintf+0x150>
		}
		if (d == 'c') {
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	2b63      	cmp	r3, #99	; 0x63
 8018d78:	d108      	bne.n	8018d8c <xprintf+0xd4>
			xputc((char)va_arg(arp, int));
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	1d1a      	adds	r2, r3, #4
 8018d7e:	603a      	str	r2, [r7, #0]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	b2db      	uxtb	r3, r3
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7ff fee0 	bl	8018b4a <xputc>
			continue;
 8018d8a:	e03d      	b.n	8018e08 <xprintf+0x150>
		}
		if (d == 'u') r = 10;
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	2b75      	cmp	r3, #117	; 0x75
 8018d90:	d101      	bne.n	8018d96 <xprintf+0xde>
 8018d92:	230a      	movs	r3, #10
 8018d94:	613b      	str	r3, [r7, #16]
		if (d == 'd') r = -10;
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	2b64      	cmp	r3, #100	; 0x64
 8018d9a:	d102      	bne.n	8018da2 <xprintf+0xea>
 8018d9c:	f06f 0309 	mvn.w	r3, #9
 8018da0:	613b      	str	r3, [r7, #16]
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	2b58      	cmp	r3, #88	; 0x58
 8018da6:	d002      	beq.n	8018dae <xprintf+0xf6>
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	2b78      	cmp	r3, #120	; 0x78
 8018dac:	d101      	bne.n	8018db2 <xprintf+0xfa>
 8018dae:	2310      	movs	r3, #16
 8018db0:	613b      	str	r3, [r7, #16]
		if (d == 'b') r = 2;
 8018db2:	697b      	ldr	r3, [r7, #20]
 8018db4:	2b62      	cmp	r3, #98	; 0x62
 8018db6:	d101      	bne.n	8018dbc <xprintf+0x104>
 8018db8:	2302      	movs	r3, #2
 8018dba:	613b      	str	r3, [r7, #16]
		if (!r) break;
 8018dbc:	693b      	ldr	r3, [r7, #16]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d02e      	beq.n	8018e20 <xprintf+0x168>
		if (l) {
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d009      	beq.n	8018ddc <xprintf+0x124>
			xitoa((long)va_arg(arp, long), r, w);
 8018dc8:	683b      	ldr	r3, [r7, #0]
 8018dca:	1d1a      	adds	r2, r3, #4
 8018dcc:	603a      	str	r2, [r7, #0]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	68fa      	ldr	r2, [r7, #12]
 8018dd2:	6939      	ldr	r1, [r7, #16]
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f7ff fed9 	bl	8018b8c <xitoa>
 8018dda:	e015      	b.n	8018e08 <xprintf+0x150>
		} else {
			if (r > 0)
 8018ddc:	693b      	ldr	r3, [r7, #16]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	dd09      	ble.n	8018df6 <xprintf+0x13e>
				xitoa((unsigned long)va_arg(arp, int), r, w);
 8018de2:	683b      	ldr	r3, [r7, #0]
 8018de4:	1d1a      	adds	r2, r3, #4
 8018de6:	603a      	str	r2, [r7, #0]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	68fa      	ldr	r2, [r7, #12]
 8018dec:	6939      	ldr	r1, [r7, #16]
 8018dee:	4618      	mov	r0, r3
 8018df0:	f7ff fecc 	bl	8018b8c <xitoa>
 8018df4:	e008      	b.n	8018e08 <xprintf+0x150>
			else
				xitoa((long)va_arg(arp, int), r, w);
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	1d1a      	adds	r2, r3, #4
 8018dfa:	603a      	str	r2, [r7, #0]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	68fa      	ldr	r2, [r7, #12]
 8018e00:	6939      	ldr	r1, [r7, #16]
 8018e02:	4618      	mov	r0, r3
 8018e04:	f7ff fec2 	bl	8018b8c <xitoa>
	while ((d = *str++) != 0) {
 8018e08:	6a3b      	ldr	r3, [r7, #32]
 8018e0a:	1c5a      	adds	r2, r3, #1
 8018e0c:	623a      	str	r2, [r7, #32]
 8018e0e:	781b      	ldrb	r3, [r3, #0]
 8018e10:	617b      	str	r3, [r7, #20]
 8018e12:	697b      	ldr	r3, [r7, #20]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	f47f af57 	bne.w	8018cc8 <xprintf+0x10>
		}
	}

	va_end(arp);
}
 8018e1a:	e002      	b.n	8018e22 <xprintf+0x16a>
		if (!d) break;
 8018e1c:	bf00      	nop
 8018e1e:	e000      	b.n	8018e22 <xprintf+0x16a>
		if (!r) break;
 8018e20:	bf00      	nop
}
 8018e22:	bf00      	nop
 8018e24:	3718      	adds	r7, #24
 8018e26:	46bd      	mov	sp, r7
 8018e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018e2c:	b004      	add	sp, #16
 8018e2e:	4770      	bx	lr

08018e30 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8018e30:	8880      	ldrh	r0, [r0, #4]
 8018e32:	4770      	bx	lr

08018e34 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8018e34:	2300      	movs	r3, #0
 8018e36:	8083      	strh	r3, [r0, #4]
 8018e38:	4770      	bx	lr
	...

08018e3c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8018e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e3e:	6803      	ldr	r3, [r0, #0]
 8018e40:	4604      	mov	r4, r0
 8018e42:	460e      	mov	r6, r1
 8018e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e46:	2100      	movs	r1, #0
 8018e48:	4798      	blx	r3
 8018e4a:	6823      	ldr	r3, [r4, #0]
 8018e4c:	4605      	mov	r5, r0
 8018e4e:	6a1b      	ldr	r3, [r3, #32]
 8018e50:	4620      	mov	r0, r4
 8018e52:	4798      	blx	r3
 8018e54:	88a3      	ldrh	r3, [r4, #4]
 8018e56:	1b75      	subs	r5, r6, r5
 8018e58:	b2ad      	uxth	r5, r5
 8018e5a:	fbb5 f0f0 	udiv	r0, r5, r0
 8018e5e:	4298      	cmp	r0, r3
 8018e60:	b285      	uxth	r5, r0
 8018e62:	db05      	blt.n	8018e70 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 8018e64:	4b0e      	ldr	r3, [pc, #56]	; (8018ea0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8018e66:	4a0f      	ldr	r2, [pc, #60]	; (8018ea4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8018e68:	211e      	movs	r1, #30
 8018e6a:	480f      	ldr	r0, [pc, #60]	; (8018ea8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8018e6c:	f005 fd2e 	bl	801e8cc <__assert_func>
 8018e70:	6823      	ldr	r3, [r4, #0]
 8018e72:	2100      	movs	r1, #0
 8018e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e76:	4620      	mov	r0, r4
 8018e78:	4798      	blx	r3
 8018e7a:	6823      	ldr	r3, [r4, #0]
 8018e7c:	4607      	mov	r7, r0
 8018e7e:	6a1b      	ldr	r3, [r3, #32]
 8018e80:	4620      	mov	r0, r4
 8018e82:	4798      	blx	r3
 8018e84:	1bf6      	subs	r6, r6, r7
 8018e86:	b2b6      	uxth	r6, r6
 8018e88:	fbb6 f3f0 	udiv	r3, r6, r0
 8018e8c:	fb03 6610 	mls	r6, r3, r0, r6
 8018e90:	b11e      	cbz	r6, 8018e9a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 8018e92:	4b06      	ldr	r3, [pc, #24]	; (8018eac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 8018e94:	4a03      	ldr	r2, [pc, #12]	; (8018ea4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8018e96:	211f      	movs	r1, #31
 8018e98:	e7e7      	b.n	8018e6a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 8018e9a:	4628      	mov	r0, r5
 8018e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e9e:	bf00      	nop
 8018ea0:	08020cec 	.word	0x08020cec
 8018ea4:	08020e5a 	.word	0x08020e5a
 8018ea8:	08020d01 	.word	0x08020d01
 8018eac:	08020d2f 	.word	0x08020d2f

08018eb0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8018eb0:	b538      	push	{r3, r4, r5, lr}
 8018eb2:	6803      	ldr	r3, [r0, #0]
 8018eb4:	6a1b      	ldr	r3, [r3, #32]
 8018eb6:	460d      	mov	r5, r1
 8018eb8:	4604      	mov	r4, r0
 8018eba:	4798      	blx	r3
 8018ebc:	4285      	cmp	r5, r0
 8018ebe:	d905      	bls.n	8018ecc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8018ec0:	4b0c      	ldr	r3, [pc, #48]	; (8018ef4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8018ec2:	4a0d      	ldr	r2, [pc, #52]	; (8018ef8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018ec4:	212f      	movs	r1, #47	; 0x2f
 8018ec6:	480d      	ldr	r0, [pc, #52]	; (8018efc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8018ec8:	f005 fd00 	bl	801e8cc <__assert_func>
 8018ecc:	6823      	ldr	r3, [r4, #0]
 8018ece:	88a5      	ldrh	r5, [r4, #4]
 8018ed0:	69db      	ldr	r3, [r3, #28]
 8018ed2:	4620      	mov	r0, r4
 8018ed4:	4798      	blx	r3
 8018ed6:	4285      	cmp	r5, r0
 8018ed8:	db03      	blt.n	8018ee2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8018eda:	4b09      	ldr	r3, [pc, #36]	; (8018f00 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8018edc:	4a06      	ldr	r2, [pc, #24]	; (8018ef8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018ede:	2130      	movs	r1, #48	; 0x30
 8018ee0:	e7f1      	b.n	8018ec6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8018ee2:	6823      	ldr	r3, [r4, #0]
 8018ee4:	88a1      	ldrh	r1, [r4, #4]
 8018ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ee8:	4620      	mov	r0, r4
 8018eea:	4798      	blx	r3
 8018eec:	88a3      	ldrh	r3, [r4, #4]
 8018eee:	3301      	adds	r3, #1
 8018ef0:	80a3      	strh	r3, [r4, #4]
 8018ef2:	bd38      	pop	{r3, r4, r5, pc}
 8018ef4:	08020da9 	.word	0x08020da9
 8018ef8:	08020e9d 	.word	0x08020e9d
 8018efc:	08020d01 	.word	0x08020d01
 8018f00:	08020dc0 	.word	0x08020dc0

08018f04 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8018f04:	b570      	push	{r4, r5, r6, lr}
 8018f06:	6803      	ldr	r3, [r0, #0]
 8018f08:	6a1b      	ldr	r3, [r3, #32]
 8018f0a:	4616      	mov	r6, r2
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	460d      	mov	r5, r1
 8018f10:	4798      	blx	r3
 8018f12:	4286      	cmp	r6, r0
 8018f14:	d905      	bls.n	8018f22 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8018f16:	4b06      	ldr	r3, [pc, #24]	; (8018f30 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8018f18:	4a06      	ldr	r2, [pc, #24]	; (8018f34 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8018f1a:	4807      	ldr	r0, [pc, #28]	; (8018f38 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8018f1c:	2139      	movs	r1, #57	; 0x39
 8018f1e:	f005 fcd5 	bl	801e8cc <__assert_func>
 8018f22:	6823      	ldr	r3, [r4, #0]
 8018f24:	4629      	mov	r1, r5
 8018f26:	4620      	mov	r0, r4
 8018f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f2e:	4718      	bx	r3
 8018f30:	08020da9 	.word	0x08020da9
 8018f34:	08020e10 	.word	0x08020e10
 8018f38:	08020d01 	.word	0x08020d01

08018f3c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8018f3c:	4770      	bx	lr
	...

08018f40 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8018f40:	4a02      	ldr	r2, [pc, #8]	; (8018f4c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8018f42:	6002      	str	r2, [r0, #0]
 8018f44:	2200      	movs	r2, #0
 8018f46:	8082      	strh	r2, [r0, #4]
 8018f48:	4770      	bx	lr
 8018f4a:	bf00      	nop
 8018f4c:	08020de4 	.word	0x08020de4

08018f50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018f50:	b513      	push	{r0, r1, r4, lr}
 8018f52:	6803      	ldr	r3, [r0, #0]
 8018f54:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 8018f58:	2300      	movs	r3, #0
 8018f5a:	f8ad 3000 	strh.w	r3, [sp]
 8018f5e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018f62:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018f66:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018f6a:	466b      	mov	r3, sp
 8018f6c:	47a0      	blx	r4
 8018f6e:	b002      	add	sp, #8
 8018f70:	bd10      	pop	{r4, pc}

08018f72 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018f72:	2301      	movs	r3, #1
 8018f74:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018f78:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018f7c:	4770      	bx	lr

08018f7e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8018f7e:	2301      	movs	r3, #1
 8018f80:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018f84:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018f88:	4770      	bx	lr

08018f8a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018f8a:	6843      	ldr	r3, [r0, #4]
 8018f8c:	2201      	movs	r2, #1
 8018f8e:	725a      	strb	r2, [r3, #9]
 8018f90:	6840      	ldr	r0, [r0, #4]
 8018f92:	6803      	ldr	r3, [r0, #0]
 8018f94:	691b      	ldr	r3, [r3, #16]
 8018f96:	4718      	bx	r3

08018f98 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018f98:	6840      	ldr	r0, [r0, #4]
 8018f9a:	6803      	ldr	r3, [r0, #0]
 8018f9c:	689b      	ldr	r3, [r3, #8]
 8018f9e:	4718      	bx	r3

08018fa0 <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 8018fa0:	4770      	bx	lr

08018fa2 <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 8018fa2:	4608      	mov	r0, r1
 8018fa4:	4770      	bx	lr

08018fa6 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 8018fa6:	4770      	bx	lr

08018fa8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018fa8:	4b04      	ldr	r3, [pc, #16]	; (8018fbc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8018faa:	781b      	ldrb	r3, [r3, #0]
 8018fac:	b123      	cbz	r3, 8018fb8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018fae:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018fb2:	f080 0001 	eor.w	r0, r0, #1
 8018fb6:	4770      	bx	lr
 8018fb8:	2001      	movs	r0, #1
 8018fba:	4770      	bx	lr
 8018fbc:	20009d6c 	.word	0x20009d6c

08018fc0 <_ZN8touchgfx3HAL8endFrameEv>:
 8018fc0:	b510      	push	{r4, lr}
 8018fc2:	4604      	mov	r4, r0
 8018fc4:	6840      	ldr	r0, [r0, #4]
 8018fc6:	6803      	ldr	r3, [r0, #0]
 8018fc8:	689b      	ldr	r3, [r3, #8]
 8018fca:	4798      	blx	r3
 8018fcc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018fd0:	b113      	cbz	r3, 8018fd8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018fd8:	bd10      	pop	{r4, pc}

08018fda <_ZN8touchgfx3HAL9taskEntryEv>:
 8018fda:	b508      	push	{r3, lr}
 8018fdc:	6803      	ldr	r3, [r0, #0]
 8018fde:	4604      	mov	r4, r0
 8018fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018fe2:	4798      	blx	r3
 8018fe4:	6823      	ldr	r3, [r4, #0]
 8018fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fe8:	4620      	mov	r0, r4
 8018fea:	4798      	blx	r3
 8018fec:	f7f7 faca 	bl	8010584 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018ff0:	6823      	ldr	r3, [r4, #0]
 8018ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018ff4:	e7f8      	b.n	8018fe8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08018ff8 <_ZN8touchgfx3HAL4tickEv>:
 8018ff8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018ffa:	6803      	ldr	r3, [r0, #0]
 8018ffc:	4d5d      	ldr	r5, [pc, #372]	; (8019174 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018ffe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019002:	4604      	mov	r4, r0
 8019004:	4798      	blx	r3
 8019006:	2800      	cmp	r0, #0
 8019008:	f000 8092 	beq.w	8019130 <_ZN8touchgfx3HAL4tickEv+0x138>
 801900c:	2001      	movs	r0, #1
 801900e:	f7fe fe6a 	bl	8017ce6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019012:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8019016:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801901a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801901e:	2600      	movs	r6, #0
 8019020:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8019024:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8019028:	b133      	cbz	r3, 8019038 <_ZN8touchgfx3HAL4tickEv+0x40>
 801902a:	6823      	ldr	r3, [r4, #0]
 801902c:	4620      	mov	r0, r4
 801902e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019032:	4798      	blx	r3
 8019034:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8019038:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801903c:	6862      	ldr	r2, [r4, #4]
 801903e:	f083 0301 	eor.w	r3, r3, #1
 8019042:	7253      	strb	r3, [r2, #9]
 8019044:	2601      	movs	r6, #1
 8019046:	702e      	strb	r6, [r5, #0]
 8019048:	f001 f890 	bl	801a16c <_ZN8touchgfx11Application11getInstanceEv>
 801904c:	6803      	ldr	r3, [r0, #0]
 801904e:	4631      	mov	r1, r6
 8019050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019052:	4798      	blx	r3
 8019054:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019058:	b90b      	cbnz	r3, 801905e <_ZN8touchgfx3HAL4tickEv+0x66>
 801905a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801905e:	f001 f885 	bl	801a16c <_ZN8touchgfx11Application11getInstanceEv>
 8019062:	6803      	ldr	r3, [r0, #0]
 8019064:	695b      	ldr	r3, [r3, #20]
 8019066:	4798      	blx	r3
 8019068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801906a:	6803      	ldr	r3, [r0, #0]
 801906c:	691b      	ldr	r3, [r3, #16]
 801906e:	4798      	blx	r3
 8019070:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019074:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8019078:	3b01      	subs	r3, #1
 801907a:	b2db      	uxtb	r3, r3
 801907c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019080:	b10a      	cbz	r2, 8019086 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8019082:	2b00      	cmp	r3, #0
 8019084:	d1eb      	bne.n	801905e <_ZN8touchgfx3HAL4tickEv+0x66>
 8019086:	4a3c      	ldr	r2, [pc, #240]	; (8019178 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8019088:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801908c:	7813      	ldrb	r3, [r2, #0]
 801908e:	3301      	adds	r3, #1
 8019090:	b25b      	sxtb	r3, r3
 8019092:	4299      	cmp	r1, r3
 8019094:	7013      	strb	r3, [r2, #0]
 8019096:	dc10      	bgt.n	80190ba <_ZN8touchgfx3HAL4tickEv+0xc2>
 8019098:	68e0      	ldr	r0, [r4, #12]
 801909a:	2300      	movs	r3, #0
 801909c:	7013      	strb	r3, [r2, #0]
 801909e:	6803      	ldr	r3, [r0, #0]
 80190a0:	aa03      	add	r2, sp, #12
 80190a2:	68db      	ldr	r3, [r3, #12]
 80190a4:	a902      	add	r1, sp, #8
 80190a6:	4798      	blx	r3
 80190a8:	6823      	ldr	r3, [r4, #0]
 80190aa:	2800      	cmp	r0, #0
 80190ac:	d04c      	beq.n	8019148 <_ZN8touchgfx3HAL4tickEv+0x150>
 80190ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80190b2:	9a03      	ldr	r2, [sp, #12]
 80190b4:	9902      	ldr	r1, [sp, #8]
 80190b6:	4620      	mov	r0, r4
 80190b8:	4798      	blx	r3
 80190ba:	6960      	ldr	r0, [r4, #20]
 80190bc:	2300      	movs	r3, #0
 80190be:	f88d 3007 	strb.w	r3, [sp, #7]
 80190c2:	b130      	cbz	r0, 80190d2 <_ZN8touchgfx3HAL4tickEv+0xda>
 80190c4:	6803      	ldr	r3, [r0, #0]
 80190c6:	f10d 0107 	add.w	r1, sp, #7
 80190ca:	68db      	ldr	r3, [r3, #12]
 80190cc:	4798      	blx	r3
 80190ce:	2800      	cmp	r0, #0
 80190d0:	d149      	bne.n	8019166 <_ZN8touchgfx3HAL4tickEv+0x16e>
 80190d2:	f104 001c 	add.w	r0, r4, #28
 80190d6:	f005 fb2f 	bl	801e738 <_ZN8touchgfx8Gestures4tickEv>
 80190da:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80190de:	b30b      	cbz	r3, 8019124 <_ZN8touchgfx3HAL4tickEv+0x12c>
 80190e0:	6920      	ldr	r0, [r4, #16]
 80190e2:	6803      	ldr	r3, [r0, #0]
 80190e4:	691b      	ldr	r3, [r3, #16]
 80190e6:	4798      	blx	r3
 80190e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80190ea:	4606      	mov	r6, r0
 80190ec:	b903      	cbnz	r3, 80190f0 <_ZN8touchgfx3HAL4tickEv+0xf8>
 80190ee:	6720      	str	r0, [r4, #112]	; 0x70
 80190f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80190f2:	4a22      	ldr	r2, [pc, #136]	; (801917c <_ZN8touchgfx3HAL4tickEv+0x184>)
 80190f4:	1af3      	subs	r3, r6, r3
 80190f6:	4293      	cmp	r3, r2
 80190f8:	d914      	bls.n	8019124 <_ZN8touchgfx3HAL4tickEv+0x12c>
 80190fa:	6920      	ldr	r0, [r4, #16]
 80190fc:	6803      	ldr	r3, [r0, #0]
 80190fe:	699b      	ldr	r3, [r3, #24]
 8019100:	4798      	blx	r3
 8019102:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019104:	2264      	movs	r2, #100	; 0x64
 8019106:	1af3      	subs	r3, r6, r3
 8019108:	fbb3 f3f2 	udiv	r3, r3, r2
 801910c:	fbb0 f0f3 	udiv	r0, r0, r3
 8019110:	2800      	cmp	r0, #0
 8019112:	dc1e      	bgt.n	8019152 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8019114:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8019118:	6920      	ldr	r0, [r4, #16]
 801911a:	6803      	ldr	r3, [r0, #0]
 801911c:	2100      	movs	r1, #0
 801911e:	69db      	ldr	r3, [r3, #28]
 8019120:	4798      	blx	r3
 8019122:	6726      	str	r6, [r4, #112]	; 0x70
 8019124:	f001 f822 	bl	801a16c <_ZN8touchgfx11Application11getInstanceEv>
 8019128:	6803      	ldr	r3, [r0, #0]
 801912a:	2100      	movs	r1, #0
 801912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801912e:	4798      	blx	r3
 8019130:	6823      	ldr	r3, [r4, #0]
 8019132:	4620      	mov	r0, r4
 8019134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019138:	4798      	blx	r3
 801913a:	2001      	movs	r0, #1
 801913c:	f7fe fdde 	bl	8017cfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019140:	2300      	movs	r3, #0
 8019142:	702b      	strb	r3, [r5, #0]
 8019144:	b004      	add	sp, #16
 8019146:	bd70      	pop	{r4, r5, r6, pc}
 8019148:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801914c:	4620      	mov	r0, r4
 801914e:	4798      	blx	r3
 8019150:	e7b3      	b.n	80190ba <_ZN8touchgfx3HAL4tickEv+0xc2>
 8019152:	2863      	cmp	r0, #99	; 0x63
 8019154:	bfcb      	itete	gt
 8019156:	2300      	movgt	r3, #0
 8019158:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801915c:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8019160:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8019164:	e7d8      	b.n	8019118 <_ZN8touchgfx3HAL4tickEv+0x120>
 8019166:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019168:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801916c:	6803      	ldr	r3, [r0, #0]
 801916e:	68db      	ldr	r3, [r3, #12]
 8019170:	4798      	blx	r3
 8019172:	e7ae      	b.n	80190d2 <_ZN8touchgfx3HAL4tickEv+0xda>
 8019174:	20009d74 	.word	0x20009d74
 8019178:	20009d75 	.word	0x20009d75
 801917c:	05f5e100 	.word	0x05f5e100

08019180 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8019180:	f7f7 b9a0 	b.w	80104c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019184 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019184:	6581      	str	r1, [r0, #88]	; 0x58
 8019186:	301c      	adds	r0, #28
 8019188:	f005 bad4 	b.w	801e734 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801918c <_ZN8touchgfx3HAL5touchEll>:
 801918c:	b530      	push	{r4, r5, lr}
 801918e:	b085      	sub	sp, #20
 8019190:	4604      	mov	r4, r0
 8019192:	a802      	add	r0, sp, #8
 8019194:	9102      	str	r1, [sp, #8]
 8019196:	9203      	str	r2, [sp, #12]
 8019198:	f000 fe1c 	bl	8019dd4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801919c:	a903      	add	r1, sp, #12
 801919e:	a802      	add	r0, sp, #8
 80191a0:	f000 fe66 	bl	8019e70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80191a4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80191a8:	9d02      	ldr	r5, [sp, #8]
 80191aa:	9b03      	ldr	r3, [sp, #12]
 80191ac:	f104 001c 	add.w	r0, r4, #28
 80191b0:	b179      	cbz	r1, 80191d2 <_ZN8touchgfx3HAL5touchEll+0x46>
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	9300      	str	r3, [sp, #0]
 80191b6:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 80191ba:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80191be:	b2ab      	uxth	r3, r5
 80191c0:	f005 fac8 	bl	801e754 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80191c4:	b118      	cbz	r0, 80191ce <_ZN8touchgfx3HAL5touchEll+0x42>
 80191c6:	9b02      	ldr	r3, [sp, #8]
 80191c8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80191ca:	9b03      	ldr	r3, [sp, #12]
 80191cc:	6623      	str	r3, [r4, #96]	; 0x60
 80191ce:	b005      	add	sp, #20
 80191d0:	bd30      	pop	{r4, r5, pc}
 80191d2:	b29b      	uxth	r3, r3
 80191d4:	b2aa      	uxth	r2, r5
 80191d6:	f005 fb01 	bl	801e7dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80191da:	2301      	movs	r3, #1
 80191dc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80191e0:	e7f1      	b.n	80191c6 <_ZN8touchgfx3HAL5touchEll+0x3a>

080191e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80191e2:	b530      	push	{r4, r5, lr}
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d04e      	beq.n	8019286 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 80191e8:	ea81 0002 	eor.w	r0, r1, r2
 80191ec:	07c0      	lsls	r0, r0, #31
 80191ee:	d508      	bpl.n	8019202 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80191f0:	3a01      	subs	r2, #1
 80191f2:	440b      	add	r3, r1
 80191f4:	4299      	cmp	r1, r3
 80191f6:	d046      	beq.n	8019286 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 80191f8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80191fc:	f801 0b01 	strb.w	r0, [r1], #1
 8019200:	e7f8      	b.n	80191f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8019202:	07d5      	lsls	r5, r2, #31
 8019204:	bf42      	ittt	mi
 8019206:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801920a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801920e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8019212:	2b01      	cmp	r3, #1
 8019214:	d915      	bls.n	8019242 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8019216:	ea81 0002 	eor.w	r0, r1, r2
 801921a:	0784      	lsls	r4, r0, #30
 801921c:	d01f      	beq.n	801925e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801921e:	1e95      	subs	r5, r2, #2
 8019220:	460c      	mov	r4, r1
 8019222:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 8019226:	f824 0b02 	strh.w	r0, [r4], #2
 801922a:	1b18      	subs	r0, r3, r4
 801922c:	4408      	add	r0, r1
 801922e:	2801      	cmp	r0, #1
 8019230:	d8f7      	bhi.n	8019222 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 8019232:	1e98      	subs	r0, r3, #2
 8019234:	f020 0001 	bic.w	r0, r0, #1
 8019238:	3002      	adds	r0, #2
 801923a:	4401      	add	r1, r0
 801923c:	4402      	add	r2, r0
 801923e:	f003 0301 	and.w	r3, r3, #1
 8019242:	3a01      	subs	r2, #1
 8019244:	440b      	add	r3, r1
 8019246:	4299      	cmp	r1, r3
 8019248:	d01d      	beq.n	8019286 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801924a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801924e:	f801 0b01 	strb.w	r0, [r1], #1
 8019252:	e7f8      	b.n	8019246 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 8019254:	f855 4f04 	ldr.w	r4, [r5, #4]!
 8019258:	f840 4b04 	str.w	r4, [r0], #4
 801925c:	e008      	b.n	8019270 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801925e:	0790      	lsls	r0, r2, #30
 8019260:	d004      	beq.n	801926c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 8019262:	f832 0b02 	ldrh.w	r0, [r2], #2
 8019266:	f821 0b02 	strh.w	r0, [r1], #2
 801926a:	3b02      	subs	r3, #2
 801926c:	1f15      	subs	r5, r2, #4
 801926e:	4608      	mov	r0, r1
 8019270:	1a1c      	subs	r4, r3, r0
 8019272:	440c      	add	r4, r1
 8019274:	2c03      	cmp	r4, #3
 8019276:	d8ed      	bhi.n	8019254 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 8019278:	f023 0003 	bic.w	r0, r3, #3
 801927c:	4402      	add	r2, r0
 801927e:	4401      	add	r1, r0
 8019280:	f003 0303 	and.w	r3, r3, #3
 8019284:	e7dd      	b.n	8019242 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8019286:	2001      	movs	r0, #1
 8019288:	bd30      	pop	{r4, r5, pc}

0801928a <_ZN8touchgfx3HAL7noTouchEv>:
 801928a:	b510      	push	{r4, lr}
 801928c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8019290:	4604      	mov	r4, r0
 8019292:	b153      	cbz	r3, 80192aa <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019294:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8019298:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801929c:	2101      	movs	r1, #1
 801929e:	301c      	adds	r0, #28
 80192a0:	f005 fa9c 	bl	801e7dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80192a4:	2300      	movs	r3, #0
 80192a6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80192aa:	bd10      	pop	{r4, pc}

080192ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80192ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192b0:	4605      	mov	r5, r0
 80192b2:	6980      	ldr	r0, [r0, #24]
 80192b4:	b085      	sub	sp, #20
 80192b6:	460f      	mov	r7, r1
 80192b8:	4690      	mov	r8, r2
 80192ba:	4699      	mov	r9, r3
 80192bc:	b930      	cbnz	r0, 80192cc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80192be:	4b1f      	ldr	r3, [pc, #124]	; (801933c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80192c0:	4a1f      	ldr	r2, [pc, #124]	; (8019340 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80192c2:	f44f 7198 	mov.w	r1, #304	; 0x130
 80192c6:	481f      	ldr	r0, [pc, #124]	; (8019344 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80192c8:	f005 fb00 	bl	801e8cc <__assert_func>
 80192cc:	ac04      	add	r4, sp, #16
 80192ce:	2600      	movs	r6, #0
 80192d0:	f844 6d04 	str.w	r6, [r4, #-4]!
 80192d4:	6806      	ldr	r6, [r0, #0]
 80192d6:	9401      	str	r4, [sp, #4]
 80192d8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80192dc:	9400      	str	r4, [sp, #0]
 80192de:	6834      	ldr	r4, [r6, #0]
 80192e0:	47a0      	blx	r4
 80192e2:	4c19      	ldr	r4, [pc, #100]	; (8019348 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80192e4:	4606      	mov	r6, r0
 80192e6:	f8a4 9000 	strh.w	r9, [r4]
 80192ea:	f7f6 f827 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 80192ee:	6803      	ldr	r3, [r0, #0]
 80192f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192f2:	4798      	blx	r3
 80192f4:	280b      	cmp	r0, #11
 80192f6:	d80e      	bhi.n	8019316 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80192f8:	e8df f000 	tbb	[pc, r0]
 80192fc:	1a1a1106 	.word	0x1a1a1106
 8019300:	1a1a1a1a 	.word	0x1a1a1a1a
 8019304:	1a1a1a1a 	.word	0x1a1a1a1a
 8019308:	8823      	ldrh	r3, [r4, #0]
 801930a:	fb08 7203 	mla	r2, r8, r3, r7
 801930e:	9b03      	ldr	r3, [sp, #12]
 8019310:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8019314:	63eb      	str	r3, [r5, #60]	; 0x3c
 8019316:	4630      	mov	r0, r6
 8019318:	b005      	add	sp, #20
 801931a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801931e:	8822      	ldrh	r2, [r4, #0]
 8019320:	9b03      	ldr	r3, [sp, #12]
 8019322:	fb08 7202 	mla	r2, r8, r2, r7
 8019326:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801932a:	1a9a      	subs	r2, r3, r2
 801932c:	63ea      	str	r2, [r5, #60]	; 0x3c
 801932e:	e7f2      	b.n	8019316 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8019330:	4b06      	ldr	r3, [pc, #24]	; (801934c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8019332:	4a03      	ldr	r2, [pc, #12]	; (8019340 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8019334:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8019338:	e7c5      	b.n	80192c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801933a:	bf00      	nop
 801933c:	08020f49 	.word	0x08020f49
 8019340:	08021266 	.word	0x08021266
 8019344:	08020f8e 	.word	0x08020f8e
 8019348:	20009d68 	.word	0x20009d68
 801934c:	08020fb4 	.word	0x08020fb4

08019350 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8019350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019354:	4698      	mov	r8, r3
 8019356:	6803      	ldr	r3, [r0, #0]
 8019358:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801935a:	4b10      	ldr	r3, [pc, #64]	; (801939c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x4c>)
 801935c:	b087      	sub	sp, #28
 801935e:	f8b3 9000 	ldrh.w	r9, [r3]
 8019362:	460e      	mov	r6, r1
 8019364:	4617      	mov	r7, r2
 8019366:	4604      	mov	r4, r0
 8019368:	f7f5 ffe8 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 801936c:	6803      	ldr	r3, [r0, #0]
 801936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019370:	4798      	blx	r3
 8019372:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019376:	9302      	str	r3, [sp, #8]
 8019378:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801937c:	9301      	str	r3, [sp, #4]
 801937e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019382:	9004      	str	r0, [sp, #16]
 8019384:	9300      	str	r3, [sp, #0]
 8019386:	f8cd 900c 	str.w	r9, [sp, #12]
 801938a:	4643      	mov	r3, r8
 801938c:	463a      	mov	r2, r7
 801938e:	4631      	mov	r1, r6
 8019390:	4620      	mov	r0, r4
 8019392:	47a8      	blx	r5
 8019394:	b007      	add	sp, #28
 8019396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801939a:	bf00      	nop
 801939c:	20009d68 	.word	0x20009d68

080193a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80193a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a4:	b089      	sub	sp, #36	; 0x24
 80193a6:	4606      	mov	r6, r0
 80193a8:	4610      	mov	r0, r2
 80193aa:	460c      	mov	r4, r1
 80193ac:	4691      	mov	r9, r2
 80193ae:	9303      	str	r3, [sp, #12]
 80193b0:	f002 fbf8 	bl	801bba4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80193b4:	2800      	cmp	r0, #0
 80193b6:	f000 808e 	beq.w	80194d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x136>
 80193ba:	4f4e      	ldr	r7, [pc, #312]	; (80194f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80193bc:	f8df a138 	ldr.w	sl, [pc, #312]	; 80194f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80193c0:	6838      	ldr	r0, [r7, #0]
 80193c2:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80194fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80193c6:	6802      	ldr	r2, [r0, #0]
 80193c8:	6a12      	ldr	r2, [r2, #32]
 80193ca:	4790      	blx	r2
 80193cc:	6838      	ldr	r0, [r7, #0]
 80193ce:	6802      	ldr	r2, [r0, #0]
 80193d0:	ad08      	add	r5, sp, #32
 80193d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80193d4:	4790      	blx	r2
 80193d6:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80193da:	f8ba 3000 	ldrh.w	r3, [sl]
 80193de:	9300      	str	r3, [sp, #0]
 80193e0:	4628      	mov	r0, r5
 80193e2:	f8b8 3000 	ldrh.w	r3, [r8]
 80193e6:	9301      	str	r3, [sp, #4]
 80193e8:	f002 fc9c 	bl	801bd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80193ec:	f8aa 0000 	strh.w	r0, [sl]
 80193f0:	4628      	mov	r0, r5
 80193f2:	f002 fcd1 	bl	801bd98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80193f6:	f8d7 a000 	ldr.w	sl, [r7]
 80193fa:	f8a8 0000 	strh.w	r0, [r8]
 80193fe:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8019402:	9302      	str	r3, [sp, #8]
 8019404:	4648      	mov	r0, r9
 8019406:	f8da 703c 	ldr.w	r7, [sl, #60]	; 0x3c
 801940a:	f002 fbcb 	bl	801bba4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801940e:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
 8019412:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 8019416:	6822      	ldr	r2, [r4, #0]
 8019418:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801941c:	f8d2 b034 	ldr.w	fp, [r2, #52]	; 0x34
 8019420:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8019424:	2200      	movs	r2, #0
 8019426:	4611      	mov	r1, r2
 8019428:	4620      	mov	r0, r4
 801942a:	47d8      	blx	fp
 801942c:	2201      	movs	r2, #1
 801942e:	9b03      	ldr	r3, [sp, #12]
 8019430:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8019434:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8019438:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801943c:	1d21      	adds	r1, r4, #4
 801943e:	b11a      	cbz	r2, 8019448 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xa8>
 8019440:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8019444:	2a00      	cmp	r2, #0
 8019446:	d14b      	bne.n	80194e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 8019448:	6808      	ldr	r0, [r1, #0]
 801944a:	6849      	ldr	r1, [r1, #4]
 801944c:	ab06      	add	r3, sp, #24
 801944e:	c303      	stmia	r3!, {r0, r1}
 8019450:	4628      	mov	r0, r5
 8019452:	f002 fdb7 	bl	801bfc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019456:	4680      	mov	r8, r0
 8019458:	f7f5 ff70 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 801945c:	6802      	ldr	r2, [r0, #0]
 801945e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019460:	4790      	blx	r2
 8019462:	4580      	cmp	r8, r0
 8019464:	d03a      	beq.n	80194dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13c>
 8019466:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8019468:	b150      	cbz	r0, 8019480 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe0>
 801946a:	4628      	mov	r0, r5
 801946c:	f002 fdaa 	bl	801bfc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019470:	4605      	mov	r5, r0
 8019472:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8019474:	6803      	ldr	r3, [r0, #0]
 8019476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019478:	4798      	blx	r3
 801947a:	1a2b      	subs	r3, r5, r0
 801947c:	4258      	negs	r0, r3
 801947e:	4158      	adcs	r0, r3
 8019480:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8019484:	6822      	ldr	r2, [r4, #0]
 8019486:	6963      	ldr	r3, [r4, #20]
 8019488:	9303      	str	r3, [sp, #12]
 801948a:	2500      	movs	r5, #0
 801948c:	6165      	str	r5, [r4, #20]
 801948e:	4620      	mov	r0, r4
 8019490:	6892      	ldr	r2, [r2, #8]
 8019492:	a906      	add	r1, sp, #24
 8019494:	4790      	blx	r2
 8019496:	9b03      	ldr	r3, [sp, #12]
 8019498:	6163      	str	r3, [r4, #20]
 801949a:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801949e:	6823      	ldr	r3, [r4, #0]
 80194a0:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80194a4:	4620      	mov	r0, r4
 80194a6:	4c13      	ldr	r4, [pc, #76]	; (80194f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80194a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80194aa:	4652      	mov	r2, sl
 80194ac:	4649      	mov	r1, r9
 80194ae:	4798      	blx	r3
 80194b0:	6820      	ldr	r0, [r4, #0]
 80194b2:	9b02      	ldr	r3, [sp, #8]
 80194b4:	6403      	str	r3, [r0, #64]	; 0x40
 80194b6:	4b10      	ldr	r3, [pc, #64]	; (80194f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80194b8:	f8bd 2000 	ldrh.w	r2, [sp]
 80194bc:	801a      	strh	r2, [r3, #0]
 80194be:	4b0f      	ldr	r3, [pc, #60]	; (80194fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80194c0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80194c4:	801a      	strh	r2, [r3, #0]
 80194c6:	6803      	ldr	r3, [r0, #0]
 80194c8:	63c7      	str	r7, [r0, #60]	; 0x3c
 80194ca:	6a1b      	ldr	r3, [r3, #32]
 80194cc:	4798      	blx	r3
 80194ce:	6820      	ldr	r0, [r4, #0]
 80194d0:	6803      	ldr	r3, [r0, #0]
 80194d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194d4:	4798      	blx	r3
 80194d6:	b009      	add	sp, #36	; 0x24
 80194d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194dc:	2000      	movs	r0, #0
 80194de:	e7cf      	b.n	8019480 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe0>
 80194e0:	6808      	ldr	r0, [r1, #0]
 80194e2:	6849      	ldr	r1, [r1, #4]
 80194e4:	aa06      	add	r2, sp, #24
 80194e6:	c203      	stmia	r2!, {r0, r1}
 80194e8:	4619      	mov	r1, r3
 80194ea:	a806      	add	r0, sp, #24
 80194ec:	f7f6 f802 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 80194f0:	e7ae      	b.n	8019450 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xb0>
 80194f2:	bf00      	nop
 80194f4:	20009d70 	.word	0x20009d70
 80194f8:	20009d68 	.word	0x20009d68
 80194fc:	20009d6a 	.word	0x20009d6a

08019500 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8019500:	b510      	push	{r4, lr}
 8019502:	4b07      	ldr	r3, [pc, #28]	; (8019520 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8019504:	781b      	ldrb	r3, [r3, #0]
 8019506:	4604      	mov	r4, r0
 8019508:	b12b      	cbz	r3, 8019516 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 801950a:	6803      	ldr	r3, [r0, #0]
 801950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801950e:	4798      	blx	r3
 8019510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019512:	4283      	cmp	r3, r0
 8019514:	d001      	beq.n	801951a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019516:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019518:	bd10      	pop	{r4, pc}
 801951a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801951c:	bd10      	pop	{r4, pc}
 801951e:	bf00      	nop
 8019520:	20009d6c 	.word	0x20009d6c

08019524 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019524:	b510      	push	{r4, lr}
 8019526:	4b0a      	ldr	r3, [pc, #40]	; (8019550 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 8019528:	781b      	ldrb	r3, [r3, #0]
 801952a:	4604      	mov	r4, r0
 801952c:	b12b      	cbz	r3, 801953a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 801952e:	f7f6 ffbb 	bl	80104a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019532:	4620      	mov	r0, r4
 8019534:	f7ff ffe4 	bl	8019500 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019538:	bd10      	pop	{r4, pc}
 801953a:	6840      	ldr	r0, [r0, #4]
 801953c:	f000 fbdc 	bl	8019cf8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019540:	2800      	cmp	r0, #0
 8019542:	d0f4      	beq.n	801952e <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 8019544:	6862      	ldr	r2, [r4, #4]
 8019546:	7a53      	ldrb	r3, [r2, #9]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d0fc      	beq.n	8019546 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801954c:	e7ef      	b.n	801952e <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801954e:	bf00      	nop
 8019550:	20009d6c 	.word	0x20009d6c

08019554 <_ZN8touchgfx3HAL10initializeEv>:
 8019554:	b510      	push	{r4, lr}
 8019556:	4604      	mov	r4, r0
 8019558:	f7f6 ff82 	bl	8010460 <_ZN8touchgfx10OSWrappers10initializeEv>
 801955c:	6860      	ldr	r0, [r4, #4]
 801955e:	6803      	ldr	r3, [r0, #0]
 8019560:	68db      	ldr	r3, [r3, #12]
 8019562:	4798      	blx	r3
 8019564:	68e0      	ldr	r0, [r4, #12]
 8019566:	6803      	ldr	r3, [r0, #0]
 8019568:	689b      	ldr	r3, [r3, #8]
 801956a:	4798      	blx	r3
 801956c:	6823      	ldr	r3, [r4, #0]
 801956e:	4620      	mov	r0, r4
 8019570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019576:	4718      	bx	r3

08019578 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8019578:	b508      	push	{r3, lr}
 801957a:	290b      	cmp	r1, #11
 801957c:	d816      	bhi.n	80195ac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x34>
 801957e:	e8df f001 	tbb	[pc, r1]
 8019582:	080a      	.short	0x080a
 8019584:	0c0c0c06 	.word	0x0c0c0c06
 8019588:	1313130c 	.word	0x1313130c
 801958c:	1313      	.short	0x1313
 801958e:	2020      	movs	r0, #32
 8019590:	bd08      	pop	{r3, pc}
 8019592:	2018      	movs	r0, #24
 8019594:	bd08      	pop	{r3, pc}
 8019596:	2010      	movs	r0, #16
 8019598:	bd08      	pop	{r3, pc}
 801959a:	4b05      	ldr	r3, [pc, #20]	; (80195b0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x38>)
 801959c:	4a05      	ldr	r2, [pc, #20]	; (80195b4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801959e:	4806      	ldr	r0, [pc, #24]	; (80195b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80195a0:	f240 213b 	movw	r1, #571	; 0x23b
 80195a4:	f005 f992 	bl	801e8cc <__assert_func>
 80195a8:	2008      	movs	r0, #8
 80195aa:	bd08      	pop	{r3, pc}
 80195ac:	2000      	movs	r0, #0
 80195ae:	bd08      	pop	{r3, pc}
 80195b0:	08021087 	.word	0x08021087
 80195b4:	08021428 	.word	0x08021428
 80195b8:	08020f8e 	.word	0x08020f8e

080195bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80195bc:	b570      	push	{r4, r5, r6, lr}
 80195be:	460d      	mov	r5, r1
 80195c0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80195c4:	4616      	mov	r6, r2
 80195c6:	461c      	mov	r4, r3
 80195c8:	f7ff ffd6 	bl	8019578 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80195cc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80195d0:	10c0      	asrs	r0, r0, #3
 80195d2:	fb06 5101 	mla	r1, r6, r1, r5
 80195d6:	fb00 4001 	mla	r0, r0, r1, r4
 80195da:	bd70      	pop	{r4, r5, r6, pc}

080195dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80195dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195e0:	b08a      	sub	sp, #40	; 0x28
 80195e2:	f04f 0e00 	mov.w	lr, #0
 80195e6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80195ea:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80195ee:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80195f2:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80195f6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80195fa:	f8cd e020 	str.w	lr, [sp, #32]
 80195fe:	f1b8 0f02 	cmp.w	r8, #2
 8019602:	4604      	mov	r4, r0
 8019604:	469a      	mov	sl, r3
 8019606:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801960a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801960e:	d031      	beq.n	8019674 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 8019610:	2bff      	cmp	r3, #255	; 0xff
 8019612:	d12d      	bne.n	8019670 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x94>
 8019614:	4570      	cmp	r0, lr
 8019616:	bf14      	ite	ne
 8019618:	2004      	movne	r0, #4
 801961a:	2001      	moveq	r0, #1
 801961c:	9002      	str	r0, [sp, #8]
 801961e:	9204      	str	r2, [sp, #16]
 8019620:	4620      	mov	r0, r4
 8019622:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8019626:	9103      	str	r1, [sp, #12]
 8019628:	f8ad 201c 	strh.w	r2, [sp, #28]
 801962c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019630:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019634:	f8ad 501a 	strh.w	r5, [sp, #26]
 8019638:	f7ff ff62 	bl	8019500 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801963c:	9701      	str	r7, [sp, #4]
 801963e:	4603      	mov	r3, r0
 8019640:	f8cd 9000 	str.w	r9, [sp]
 8019644:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8019648:	4651      	mov	r1, sl
 801964a:	4620      	mov	r0, r4
 801964c:	f7ff ffb6 	bl	80195bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019650:	f8ad 901e 	strh.w	r9, [sp, #30]
 8019654:	9005      	str	r0, [sp, #20]
 8019656:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801965a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801965e:	b106      	cbz	r6, 8019662 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 8019660:	b98d      	cbnz	r5, 8019686 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 8019662:	4b13      	ldr	r3, [pc, #76]	; (80196b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8019664:	4a13      	ldr	r2, [pc, #76]	; (80196b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8019666:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801966a:	4813      	ldr	r0, [pc, #76]	; (80196b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801966c:	f005 f92e 	bl	801e8cc <__assert_func>
 8019670:	2004      	movs	r0, #4
 8019672:	e7d3      	b.n	801961c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019674:	2bff      	cmp	r3, #255	; 0xff
 8019676:	d104      	bne.n	8019682 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa6>
 8019678:	2800      	cmp	r0, #0
 801967a:	bf14      	ite	ne
 801967c:	2040      	movne	r0, #64	; 0x40
 801967e:	2020      	moveq	r0, #32
 8019680:	e7cc      	b.n	801961c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019682:	2040      	movs	r0, #64	; 0x40
 8019684:	e7ca      	b.n	801961c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019686:	6823      	ldr	r3, [r4, #0]
 8019688:	9d02      	ldr	r5, [sp, #8]
 801968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801968c:	4620      	mov	r0, r4
 801968e:	4798      	blx	r3
 8019690:	4228      	tst	r0, r5
 8019692:	d104      	bne.n	801969e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc2>
 8019694:	4b09      	ldr	r3, [pc, #36]	; (80196bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8019696:	4a07      	ldr	r2, [pc, #28]	; (80196b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8019698:	f240 11bd 	movw	r1, #445	; 0x1bd
 801969c:	e7e5      	b.n	801966a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8e>
 801969e:	6860      	ldr	r0, [r4, #4]
 80196a0:	6803      	ldr	r3, [r0, #0]
 80196a2:	a902      	add	r1, sp, #8
 80196a4:	685b      	ldr	r3, [r3, #4]
 80196a6:	4798      	blx	r3
 80196a8:	b00a      	add	sp, #40	; 0x28
 80196aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196ae:	bf00      	nop
 80196b0:	0802100a 	.word	0x0802100a
 80196b4:	080212ca 	.word	0x080212ca
 80196b8:	08020f8e 	.word	0x08020f8e
 80196bc:	08021042 	.word	0x08021042

080196c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80196c0:	b510      	push	{r4, lr}
 80196c2:	b08a      	sub	sp, #40	; 0x28
 80196c4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80196c8:	9408      	str	r4, [sp, #32]
 80196ca:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80196ce:	9407      	str	r4, [sp, #28]
 80196d0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80196d4:	9406      	str	r4, [sp, #24]
 80196d6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80196da:	9405      	str	r4, [sp, #20]
 80196dc:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80196e0:	9404      	str	r4, [sp, #16]
 80196e2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80196e6:	9403      	str	r4, [sp, #12]
 80196e8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80196ec:	9402      	str	r4, [sp, #8]
 80196ee:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80196f2:	e88d 0018 	stmia.w	sp, {r3, r4}
 80196f6:	4613      	mov	r3, r2
 80196f8:	2200      	movs	r2, #0
 80196fa:	f7ff ff6f 	bl	80195dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80196fe:	b00a      	add	sp, #40	; 0x28
 8019700:	bd10      	pop	{r4, pc}
	...

08019704 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8019704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019706:	b08b      	sub	sp, #44	; 0x2c
 8019708:	4616      	mov	r6, r2
 801970a:	460d      	mov	r5, r1
 801970c:	461f      	mov	r7, r3
 801970e:	4604      	mov	r4, r0
 8019710:	f7f5 fe14 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 8019714:	6803      	ldr	r3, [r0, #0]
 8019716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019718:	4798      	blx	r3
 801971a:	4b0e      	ldr	r3, [pc, #56]	; (8019754 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801971c:	9008      	str	r0, [sp, #32]
 801971e:	9007      	str	r0, [sp, #28]
 8019720:	881b      	ldrh	r3, [r3, #0]
 8019722:	9306      	str	r3, [sp, #24]
 8019724:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019728:	9305      	str	r3, [sp, #20]
 801972a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801972e:	9304      	str	r3, [sp, #16]
 8019730:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019734:	9303      	str	r3, [sp, #12]
 8019736:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801973a:	9302      	str	r3, [sp, #8]
 801973c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019740:	9301      	str	r3, [sp, #4]
 8019742:	9700      	str	r7, [sp, #0]
 8019744:	4633      	mov	r3, r6
 8019746:	2200      	movs	r2, #0
 8019748:	4629      	mov	r1, r5
 801974a:	4620      	mov	r0, r4
 801974c:	f7ff ff46 	bl	80195dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019750:	b00b      	add	sp, #44	; 0x2c
 8019752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019754:	20009d68 	.word	0x20009d68

08019758 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8019758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801975c:	461f      	mov	r7, r3
 801975e:	4b14      	ldr	r3, [pc, #80]	; (80197b0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8019760:	b08a      	sub	sp, #40	; 0x28
 8019762:	4616      	mov	r6, r2
 8019764:	f8b3 8000 	ldrh.w	r8, [r3]
 8019768:	460d      	mov	r5, r1
 801976a:	4604      	mov	r4, r0
 801976c:	f7f5 fde6 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 8019770:	6803      	ldr	r3, [r0, #0]
 8019772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019774:	4798      	blx	r3
 8019776:	2302      	movs	r3, #2
 8019778:	9307      	str	r3, [sp, #28]
 801977a:	2301      	movs	r3, #1
 801977c:	9305      	str	r3, [sp, #20]
 801977e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019782:	9304      	str	r3, [sp, #16]
 8019784:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019788:	9303      	str	r3, [sp, #12]
 801978a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801978e:	9302      	str	r3, [sp, #8]
 8019790:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019794:	9008      	str	r0, [sp, #32]
 8019796:	9301      	str	r3, [sp, #4]
 8019798:	f8cd 8018 	str.w	r8, [sp, #24]
 801979c:	9700      	str	r7, [sp, #0]
 801979e:	4633      	mov	r3, r6
 80197a0:	2200      	movs	r2, #0
 80197a2:	4629      	mov	r1, r5
 80197a4:	4620      	mov	r0, r4
 80197a6:	f7ff ff19 	bl	80195dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80197aa:	b00a      	add	sp, #40	; 0x28
 80197ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197b0:	20009d68 	.word	0x20009d68

080197b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80197b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b8:	b08b      	sub	sp, #44	; 0x2c
 80197ba:	469b      	mov	fp, r3
 80197bc:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80197c0:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80197c4:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80197c8:	2fff      	cmp	r7, #255	; 0xff
 80197ca:	bf0c      	ite	eq
 80197cc:	2302      	moveq	r3, #2
 80197ce:	2308      	movne	r3, #8
 80197d0:	2600      	movs	r6, #0
 80197d2:	4604      	mov	r4, r0
 80197d4:	4689      	mov	r9, r1
 80197d6:	4692      	mov	sl, r2
 80197d8:	9302      	str	r3, [sp, #8]
 80197da:	9608      	str	r6, [sp, #32]
 80197dc:	9603      	str	r6, [sp, #12]
 80197de:	f7ff fe8f 	bl	8019500 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80197e2:	9501      	str	r5, [sp, #4]
 80197e4:	4603      	mov	r3, r0
 80197e6:	465a      	mov	r2, fp
 80197e8:	4651      	mov	r1, sl
 80197ea:	f8cd 8000 	str.w	r8, [sp]
 80197ee:	4620      	mov	r0, r4
 80197f0:	f7ff fee4 	bl	80195bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80197f4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80197f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80197fc:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8019800:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019804:	6823      	ldr	r3, [r4, #0]
 8019806:	9005      	str	r0, [sp, #20]
 8019808:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801980c:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8019810:	f8ad 601c 	strh.w	r6, [sp, #28]
 8019814:	f8ad 801e 	strh.w	r8, [sp, #30]
 8019818:	f8cd 9020 	str.w	r9, [sp, #32]
 801981c:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8019820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019822:	9d02      	ldr	r5, [sp, #8]
 8019824:	4620      	mov	r0, r4
 8019826:	4798      	blx	r3
 8019828:	4228      	tst	r0, r5
 801982a:	d106      	bne.n	801983a <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x86>
 801982c:	4b07      	ldr	r3, [pc, #28]	; (801984c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801982e:	4a08      	ldr	r2, [pc, #32]	; (8019850 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8019830:	4808      	ldr	r0, [pc, #32]	; (8019854 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0xa0>)
 8019832:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8019836:	f005 f849 	bl	801e8cc <__assert_func>
 801983a:	6860      	ldr	r0, [r4, #4]
 801983c:	6803      	ldr	r3, [r0, #0]
 801983e:	a902      	add	r1, sp, #8
 8019840:	685b      	ldr	r3, [r3, #4]
 8019842:	4798      	blx	r3
 8019844:	b00b      	add	sp, #44	; 0x2c
 8019846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801984a:	bf00      	nop
 801984c:	08021042 	.word	0x08021042
 8019850:	08021393 	.word	0x08021393
 8019854:	08020f8e 	.word	0x08020f8e

08019858 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801985c:	461f      	mov	r7, r3
 801985e:	4b0b      	ldr	r3, [pc, #44]	; (801988c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019860:	460d      	mov	r5, r1
 8019862:	f8b3 8000 	ldrh.w	r8, [r3]
 8019866:	4616      	mov	r6, r2
 8019868:	4604      	mov	r4, r0
 801986a:	f7f5 fd67 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 801986e:	6803      	ldr	r3, [r0, #0]
 8019870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019872:	4798      	blx	r3
 8019874:	f8cd 8000 	str.w	r8, [sp]
 8019878:	9001      	str	r0, [sp, #4]
 801987a:	463b      	mov	r3, r7
 801987c:	4632      	mov	r2, r6
 801987e:	4629      	mov	r1, r5
 8019880:	4620      	mov	r0, r4
 8019882:	f7ff fe9b 	bl	80195bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019886:	b002      	add	sp, #8
 8019888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801988c:	20009d68 	.word	0x20009d68

08019890 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8019890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019894:	b088      	sub	sp, #32
 8019896:	4698      	mov	r8, r3
 8019898:	2300      	movs	r3, #0
 801989a:	9306      	str	r3, [sp, #24]
 801989c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80198a0:	9300      	str	r3, [sp, #0]
 80198a2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80198a6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80198aa:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80198ae:	f8ad 3014 	strh.w	r3, [sp, #20]
 80198b2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80198b6:	9101      	str	r1, [sp, #4]
 80198b8:	4617      	mov	r7, r2
 80198ba:	4604      	mov	r4, r0
 80198bc:	f88d 301c 	strb.w	r3, [sp, #28]
 80198c0:	f8ad 6010 	strh.w	r6, [sp, #16]
 80198c4:	f8ad 5012 	strh.w	r5, [sp, #18]
 80198c8:	f7ff fe1a 	bl	8019500 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80198cc:	4642      	mov	r2, r8
 80198ce:	4603      	mov	r3, r0
 80198d0:	4639      	mov	r1, r7
 80198d2:	4620      	mov	r0, r4
 80198d4:	f7ff ffc0 	bl	8019858 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80198d8:	4b16      	ldr	r3, [pc, #88]	; (8019934 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80198da:	9003      	str	r0, [sp, #12]
 80198dc:	881b      	ldrh	r3, [r3, #0]
 80198de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80198e2:	f7f5 fd2b 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 80198e6:	6803      	ldr	r3, [r0, #0]
 80198e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ea:	4798      	blx	r3
 80198ec:	f88d 001e 	strb.w	r0, [sp, #30]
 80198f0:	f88d 001d 	strb.w	r0, [sp, #29]
 80198f4:	b106      	cbz	r6, 80198f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80198f6:	b935      	cbnz	r5, 8019906 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80198f8:	4b0f      	ldr	r3, [pc, #60]	; (8019938 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80198fa:	4a10      	ldr	r2, [pc, #64]	; (801993c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80198fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019900:	480f      	ldr	r0, [pc, #60]	; (8019940 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8019902:	f004 ffe3 	bl	801e8cc <__assert_func>
 8019906:	6823      	ldr	r3, [r4, #0]
 8019908:	9d00      	ldr	r5, [sp, #0]
 801990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801990c:	4620      	mov	r0, r4
 801990e:	4798      	blx	r3
 8019910:	4228      	tst	r0, r5
 8019912:	d104      	bne.n	801991e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8019914:	4b0b      	ldr	r3, [pc, #44]	; (8019944 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8019916:	4a09      	ldr	r2, [pc, #36]	; (801993c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8019918:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 801991c:	e7f0      	b.n	8019900 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801991e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019920:	6860      	ldr	r0, [r4, #4]
 8019922:	9306      	str	r3, [sp, #24]
 8019924:	6803      	ldr	r3, [r0, #0]
 8019926:	4669      	mov	r1, sp
 8019928:	685b      	ldr	r3, [r3, #4]
 801992a:	4798      	blx	r3
 801992c:	b008      	add	sp, #32
 801992e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019932:	bf00      	nop
 8019934:	20009d68 	.word	0x20009d68
 8019938:	0802100a 	.word	0x0802100a
 801993c:	0802117c 	.word	0x0802117c
 8019940:	08020f8e 	.word	0x08020f8e
 8019944:	08021042 	.word	0x08021042

08019948 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019948:	b570      	push	{r4, r5, r6, lr}
 801994a:	4b22      	ldr	r3, [pc, #136]	; (80199d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801994c:	781b      	ldrb	r3, [r3, #0]
 801994e:	b08a      	sub	sp, #40	; 0x28
 8019950:	4604      	mov	r4, r0
 8019952:	e88d 0006 	stmia.w	sp, {r1, r2}
 8019956:	b933      	cbnz	r3, 8019966 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 8019958:	4b1f      	ldr	r3, [pc, #124]	; (80199d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801995a:	4a20      	ldr	r2, [pc, #128]	; (80199dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801995c:	4820      	ldr	r0, [pc, #128]	; (80199e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801995e:	f240 2105 	movw	r1, #517	; 0x205
 8019962:	f004 ffb3 	bl	801e8cc <__assert_func>
 8019966:	2300      	movs	r3, #0
 8019968:	9308      	str	r3, [sp, #32]
 801996a:	2301      	movs	r3, #1
 801996c:	9302      	str	r3, [sp, #8]
 801996e:	6803      	ldr	r3, [r0, #0]
 8019970:	f8bd 5000 	ldrh.w	r5, [sp]
 8019974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019976:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801997a:	4798      	blx	r3
 801997c:	4632      	mov	r2, r6
 801997e:	4629      	mov	r1, r5
 8019980:	4603      	mov	r3, r0
 8019982:	4620      	mov	r0, r4
 8019984:	f7ff ff68 	bl	8019858 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801998a:	9305      	str	r3, [sp, #20]
 801998c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019990:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019994:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019998:	f8ad 301a 	strh.w	r3, [sp, #26]
 801999c:	4b11      	ldr	r3, [pc, #68]	; (80199e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801999e:	9003      	str	r0, [sp, #12]
 80199a0:	881b      	ldrh	r3, [r3, #0]
 80199a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80199a6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80199aa:	f7f5 fcc7 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 80199ae:	6803      	ldr	r3, [r0, #0]
 80199b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199b2:	4798      	blx	r3
 80199b4:	23ff      	movs	r3, #255	; 0xff
 80199b6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80199ba:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80199be:	6860      	ldr	r0, [r4, #4]
 80199c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80199c4:	6803      	ldr	r3, [r0, #0]
 80199c6:	a902      	add	r1, sp, #8
 80199c8:	685b      	ldr	r3, [r3, #4]
 80199ca:	4798      	blx	r3
 80199cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80199ce:	b00a      	add	sp, #40	; 0x28
 80199d0:	bd70      	pop	{r4, r5, r6, pc}
 80199d2:	bf00      	nop
 80199d4:	20009d6d 	.word	0x20009d6d
 80199d8:	08020edb 	.word	0x08020edb
 80199dc:	08021220 	.word	0x08021220
 80199e0:	08020f8e 	.word	0x08020f8e
 80199e4:	20009d68 	.word	0x20009d68

080199e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80199e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199ea:	b08b      	sub	sp, #44	; 0x2c
 80199ec:	461d      	mov	r5, r3
 80199ee:	2300      	movs	r3, #0
 80199f0:	9308      	str	r3, [sp, #32]
 80199f2:	2301      	movs	r3, #1
 80199f4:	e88d 0006 	stmia.w	sp, {r1, r2}
 80199f8:	9302      	str	r3, [sp, #8]
 80199fa:	6803      	ldr	r3, [r0, #0]
 80199fc:	f8bd 6000 	ldrh.w	r6, [sp]
 8019a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a02:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019a06:	4604      	mov	r4, r0
 8019a08:	4798      	blx	r3
 8019a0a:	463a      	mov	r2, r7
 8019a0c:	4631      	mov	r1, r6
 8019a0e:	4603      	mov	r3, r0
 8019a10:	4620      	mov	r0, r4
 8019a12:	f7ff ff21 	bl	8019858 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019a16:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019a1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019a1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019a22:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019a26:	4b0e      	ldr	r3, [pc, #56]	; (8019a60 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x78>)
 8019a28:	9003      	str	r0, [sp, #12]
 8019a2a:	881b      	ldrh	r3, [r3, #0]
 8019a2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a32:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019a36:	9505      	str	r5, [sp, #20]
 8019a38:	f7f5 fc80 	bl	800f33c <_ZN8touchgfx3HAL3lcdEv>
 8019a3c:	6803      	ldr	r3, [r0, #0]
 8019a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a40:	4798      	blx	r3
 8019a42:	23ff      	movs	r3, #255	; 0xff
 8019a44:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019a48:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019a4c:	6860      	ldr	r0, [r4, #4]
 8019a4e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019a52:	6803      	ldr	r3, [r0, #0]
 8019a54:	a902      	add	r1, sp, #8
 8019a56:	685b      	ldr	r3, [r3, #4]
 8019a58:	4798      	blx	r3
 8019a5a:	4628      	mov	r0, r5
 8019a5c:	b00b      	add	sp, #44	; 0x2c
 8019a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a60:	20009d68 	.word	0x20009d68

08019a64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019a64:	b570      	push	{r4, r5, r6, lr}
 8019a66:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8019a6a:	4604      	mov	r4, r0
 8019a6c:	b19b      	cbz	r3, 8019a96 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019a6e:	2002      	movs	r0, #2
 8019a70:	f7fe f94f 	bl	8017d12 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019a74:	2300      	movs	r3, #0
 8019a76:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019a7a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8019a7e:	6823      	ldr	r3, [r4, #0]
 8019a80:	4620      	mov	r0, r4
 8019a82:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 8019a86:	f7ff fd3b 	bl	8019500 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019a8a:	462b      	mov	r3, r5
 8019a8c:	4601      	mov	r1, r0
 8019a8e:	4620      	mov	r0, r4
 8019a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a94:	4718      	bx	r3
 8019a96:	bd70      	pop	{r4, r5, r6, pc}

08019a98 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8019a98:	b570      	push	{r4, r5, r6, lr}
 8019a9a:	4605      	mov	r5, r0
 8019a9c:	460c      	mov	r4, r1
 8019a9e:	2003      	movs	r0, #3
 8019aa0:	b149      	cbz	r1, 8019ab6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8019aa2:	f7fe f920 	bl	8017ce6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019aa6:	6928      	ldr	r0, [r5, #16]
 8019aa8:	b168      	cbz	r0, 8019ac6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8019aaa:	6803      	ldr	r3, [r0, #0]
 8019aac:	695b      	ldr	r3, [r3, #20]
 8019aae:	2101      	movs	r1, #1
 8019ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ab4:	4718      	bx	r3
 8019ab6:	f7fe f921 	bl	8017cfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019aba:	6928      	ldr	r0, [r5, #16]
 8019abc:	b118      	cbz	r0, 8019ac6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8019abe:	6803      	ldr	r3, [r0, #0]
 8019ac0:	4621      	mov	r1, r4
 8019ac2:	695b      	ldr	r3, [r3, #20]
 8019ac4:	e7f4      	b.n	8019ab0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8019ac6:	bd70      	pop	{r4, r5, r6, pc}

08019ac8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019ac8:	4770      	bx	lr

08019aca <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019aca:	68c2      	ldr	r2, [r0, #12]
 8019acc:	6900      	ldr	r0, [r0, #16]
 8019ace:	1a13      	subs	r3, r2, r0
 8019ad0:	4258      	negs	r0, r3
 8019ad2:	4158      	adcs	r0, r3
 8019ad4:	4770      	bx	lr

08019ad6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019ad6:	68c2      	ldr	r2, [r0, #12]
 8019ad8:	6903      	ldr	r3, [r0, #16]
 8019ada:	1a9b      	subs	r3, r3, r2
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	bfdc      	itt	le
 8019ae0:	6882      	ldrle	r2, [r0, #8]
 8019ae2:	189b      	addle	r3, r3, r2
 8019ae4:	2b01      	cmp	r3, #1
 8019ae6:	bfcc      	ite	gt
 8019ae8:	2000      	movgt	r0, #0
 8019aea:	2001      	movle	r0, #1
 8019aec:	4770      	bx	lr

08019aee <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019aee:	6902      	ldr	r2, [r0, #16]
 8019af0:	6840      	ldr	r0, [r0, #4]
 8019af2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019af6:	4770      	bx	lr

08019af8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019af8:	6803      	ldr	r3, [r0, #0]
 8019afa:	691b      	ldr	r3, [r3, #16]
 8019afc:	4718      	bx	r3

08019afe <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019afe:	4770      	bx	lr

08019b00 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019b00:	4770      	bx	lr
	...

08019b04 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019b04:	b570      	push	{r4, r5, r6, lr}
 8019b06:	2301      	movs	r3, #1
 8019b08:	7203      	strb	r3, [r0, #8]
 8019b0a:	4604      	mov	r4, r0
 8019b0c:	6840      	ldr	r0, [r0, #4]
 8019b0e:	6803      	ldr	r3, [r0, #0]
 8019b10:	699b      	ldr	r3, [r3, #24]
 8019b12:	4798      	blx	r3
 8019b14:	6803      	ldr	r3, [r0, #0]
 8019b16:	2b08      	cmp	r3, #8
 8019b18:	4605      	mov	r5, r0
 8019b1a:	d01e      	beq.n	8019b5a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8019b1c:	d80b      	bhi.n	8019b36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019b1e:	2b02      	cmp	r3, #2
 8019b20:	d027      	beq.n	8019b72 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019b22:	2b04      	cmp	r3, #4
 8019b24:	d011      	beq.n	8019b4a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8019b26:	2b01      	cmp	r3, #1
 8019b28:	d028      	beq.n	8019b7c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019b2a:	4b17      	ldr	r3, [pc, #92]	; (8019b88 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8019b2c:	4a17      	ldr	r2, [pc, #92]	; (8019b8c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8019b2e:	4818      	ldr	r0, [pc, #96]	; (8019b90 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8019b30:	218b      	movs	r1, #139	; 0x8b
 8019b32:	f004 fecb 	bl	801e8cc <__assert_func>
 8019b36:	2b40      	cmp	r3, #64	; 0x40
 8019b38:	d020      	beq.n	8019b7c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019b3a:	d801      	bhi.n	8019b40 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019b3c:	2b20      	cmp	r3, #32
 8019b3e:	e7f3      	b.n	8019b28 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019b40:	2b80      	cmp	r3, #128	; 0x80
 8019b42:	d01b      	beq.n	8019b7c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019b48:	e7ee      	b.n	8019b28 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019b4a:	6823      	ldr	r3, [r4, #0]
 8019b4c:	7f01      	ldrb	r1, [r0, #28]
 8019b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b50:	4620      	mov	r0, r4
 8019b52:	4798      	blx	r3
 8019b54:	6823      	ldr	r3, [r4, #0]
 8019b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b58:	e006      	b.n	8019b68 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019b5a:	6823      	ldr	r3, [r4, #0]
 8019b5c:	7f01      	ldrb	r1, [r0, #28]
 8019b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b60:	4620      	mov	r0, r4
 8019b62:	4798      	blx	r3
 8019b64:	6823      	ldr	r3, [r4, #0]
 8019b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b68:	4629      	mov	r1, r5
 8019b6a:	4620      	mov	r0, r4
 8019b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b70:	4718      	bx	r3
 8019b72:	6823      	ldr	r3, [r4, #0]
 8019b74:	4620      	mov	r0, r4
 8019b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b78:	4798      	blx	r3
 8019b7a:	e7f3      	b.n	8019b64 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8019b7c:	6823      	ldr	r3, [r4, #0]
 8019b7e:	4620      	mov	r0, r4
 8019b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b82:	4798      	blx	r3
 8019b84:	e7e6      	b.n	8019b54 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8019b86:	bf00      	nop
 8019b88:	08021471 	.word	0x08021471
 8019b8c:	08021580 	.word	0x08021580
 8019b90:	08021496 	.word	0x08021496

08019b94 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019b94:	b570      	push	{r4, r5, r6, lr}
 8019b96:	4604      	mov	r4, r0
 8019b98:	460e      	mov	r6, r1
 8019b9a:	6860      	ldr	r0, [r4, #4]
 8019b9c:	6803      	ldr	r3, [r0, #0]
 8019b9e:	685b      	ldr	r3, [r3, #4]
 8019ba0:	4798      	blx	r3
 8019ba2:	2800      	cmp	r0, #0
 8019ba4:	d1f9      	bne.n	8019b9a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019ba6:	4d0b      	ldr	r5, [pc, #44]	; (8019bd4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8019ba8:	6828      	ldr	r0, [r5, #0]
 8019baa:	6803      	ldr	r3, [r0, #0]
 8019bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019bae:	4798      	blx	r3
 8019bb0:	f7f6 fc96 	bl	80104e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019bb4:	6860      	ldr	r0, [r4, #4]
 8019bb6:	6803      	ldr	r3, [r0, #0]
 8019bb8:	4631      	mov	r1, r6
 8019bba:	689b      	ldr	r3, [r3, #8]
 8019bbc:	4798      	blx	r3
 8019bbe:	6823      	ldr	r3, [r4, #0]
 8019bc0:	4620      	mov	r0, r4
 8019bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bc4:	4798      	blx	r3
 8019bc6:	6828      	ldr	r0, [r5, #0]
 8019bc8:	6803      	ldr	r3, [r0, #0]
 8019bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bd0:	4718      	bx	r3
 8019bd2:	bf00      	nop
 8019bd4:	20009d70 	.word	0x20009d70

08019bd8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019bd8:	b508      	push	{r3, lr}
 8019bda:	f7f6 fc65 	bl	80104a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019be2:	f7f6 bc6f 	b.w	80104c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019be6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019be6:	b570      	push	{r4, r5, r6, lr}
 8019be8:	4604      	mov	r4, r0
 8019bea:	6840      	ldr	r0, [r0, #4]
 8019bec:	6803      	ldr	r3, [r0, #0]
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	4798      	blx	r3
 8019bf2:	4605      	mov	r5, r0
 8019bf4:	b908      	cbnz	r0, 8019bfa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 8019bf6:	7a23      	ldrb	r3, [r4, #8]
 8019bf8:	b973      	cbnz	r3, 8019c18 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 8019bfa:	6860      	ldr	r0, [r4, #4]
 8019bfc:	6803      	ldr	r3, [r0, #0]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	4798      	blx	r3
 8019c02:	b928      	cbnz	r0, 8019c10 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 8019c04:	6823      	ldr	r3, [r4, #0]
 8019c06:	4620      	mov	r0, r4
 8019c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c0e:	4718      	bx	r3
 8019c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c14:	f7f6 bc70 	b.w	80104f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 8019c18:	6860      	ldr	r0, [r4, #4]
 8019c1a:	6803      	ldr	r3, [r0, #0]
 8019c1c:	695b      	ldr	r3, [r3, #20]
 8019c1e:	4798      	blx	r3
 8019c20:	7225      	strb	r5, [r4, #8]
 8019c22:	e7ea      	b.n	8019bfa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

08019c24 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019c24:	b510      	push	{r4, lr}
 8019c26:	68c4      	ldr	r4, [r0, #12]
 8019c28:	6902      	ldr	r2, [r0, #16]
 8019c2a:	1b12      	subs	r2, r2, r4
 8019c2c:	2a00      	cmp	r2, #0
 8019c2e:	bfdc      	itt	le
 8019c30:	6883      	ldrle	r3, [r0, #8]
 8019c32:	18d2      	addle	r2, r2, r3
 8019c34:	2a01      	cmp	r2, #1
 8019c36:	dd18      	ble.n	8019c6a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8019c38:	6843      	ldr	r3, [r0, #4]
 8019c3a:	f101 021c 	add.w	r2, r1, #28
 8019c3e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8019c42:	f851 4b04 	ldr.w	r4, [r1], #4
 8019c46:	f843 4b04 	str.w	r4, [r3], #4
 8019c4a:	4291      	cmp	r1, r2
 8019c4c:	d1f9      	bne.n	8019c42 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8019c4e:	880a      	ldrh	r2, [r1, #0]
 8019c50:	801a      	strh	r2, [r3, #0]
 8019c52:	788a      	ldrb	r2, [r1, #2]
 8019c54:	709a      	strb	r2, [r3, #2]
 8019c56:	68c3      	ldr	r3, [r0, #12]
 8019c58:	6882      	ldr	r2, [r0, #8]
 8019c5a:	f3bf 8f5b 	dmb	ish
 8019c5e:	3301      	adds	r3, #1
 8019c60:	4293      	cmp	r3, r2
 8019c62:	bfa8      	it	ge
 8019c64:	1a9b      	subge	r3, r3, r2
 8019c66:	60c3      	str	r3, [r0, #12]
 8019c68:	bd10      	pop	{r4, pc}
 8019c6a:	4b03      	ldr	r3, [pc, #12]	; (8019c78 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019c6c:	4a03      	ldr	r2, [pc, #12]	; (8019c7c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8019c6e:	4804      	ldr	r0, [pc, #16]	; (8019c80 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8019c70:	2139      	movs	r1, #57	; 0x39
 8019c72:	f004 fe2b 	bl	801e8cc <__assert_func>
 8019c76:	bf00      	nop
 8019c78:	080214bc 	.word	0x080214bc
 8019c7c:	080215b0 	.word	0x080215b0
 8019c80:	08021496 	.word	0x08021496

08019c84 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019c84:	b510      	push	{r4, lr}
 8019c86:	6803      	ldr	r3, [r0, #0]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	4604      	mov	r4, r0
 8019c8c:	4798      	blx	r3
 8019c8e:	b128      	cbz	r0, 8019c9c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8019c90:	4b07      	ldr	r3, [pc, #28]	; (8019cb0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8019c92:	4a08      	ldr	r2, [pc, #32]	; (8019cb4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8019c94:	4808      	ldr	r0, [pc, #32]	; (8019cb8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019c96:	213f      	movs	r1, #63	; 0x3f
 8019c98:	f004 fe18 	bl	801e8cc <__assert_func>
 8019c9c:	6923      	ldr	r3, [r4, #16]
 8019c9e:	68a2      	ldr	r2, [r4, #8]
 8019ca0:	f3bf 8f5b 	dmb	ish
 8019ca4:	3301      	adds	r3, #1
 8019ca6:	4293      	cmp	r3, r2
 8019ca8:	bfa8      	it	ge
 8019caa:	1a9b      	subge	r3, r3, r2
 8019cac:	6123      	str	r3, [r4, #16]
 8019cae:	bd10      	pop	{r4, pc}
 8019cb0:	080214df 	.word	0x080214df
 8019cb4:	080215fe 	.word	0x080215fe
 8019cb8:	08021496 	.word	0x08021496

08019cbc <_ZN8touchgfx13DMA_Interface5startEv>:
 8019cbc:	b510      	push	{r4, lr}
 8019cbe:	4604      	mov	r4, r0
 8019cc0:	6840      	ldr	r0, [r0, #4]
 8019cc2:	6803      	ldr	r3, [r0, #0]
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	4798      	blx	r3
 8019cc8:	b948      	cbnz	r0, 8019cde <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019cca:	7a63      	ldrb	r3, [r4, #9]
 8019ccc:	b13b      	cbz	r3, 8019cde <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019cce:	7a23      	ldrb	r3, [r4, #8]
 8019cd0:	b92b      	cbnz	r3, 8019cde <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019cd2:	6823      	ldr	r3, [r4, #0]
 8019cd4:	4620      	mov	r0, r4
 8019cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cdc:	4718      	bx	r3
 8019cde:	bd10      	pop	{r4, pc}

08019ce0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019ce0:	b510      	push	{r4, lr}
 8019ce2:	6082      	str	r2, [r0, #8]
 8019ce4:	4c03      	ldr	r4, [pc, #12]	; (8019cf4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019ce6:	6004      	str	r4, [r0, #0]
 8019ce8:	2200      	movs	r2, #0
 8019cea:	6041      	str	r1, [r0, #4]
 8019cec:	60c2      	str	r2, [r0, #12]
 8019cee:	6102      	str	r2, [r0, #16]
 8019cf0:	bd10      	pop	{r4, pc}
 8019cf2:	bf00      	nop
 8019cf4:	08021564 	.word	0x08021564

08019cf8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019cf8:	6840      	ldr	r0, [r0, #4]
 8019cfa:	6803      	ldr	r3, [r0, #0]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	4718      	bx	r3

08019d00 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019d00:	2b02      	cmp	r3, #2
 8019d02:	d00e      	beq.n	8019d22 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8019d04:	2b03      	cmp	r3, #3
 8019d06:	d012      	beq.n	8019d2e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 8019d08:	2b01      	cmp	r3, #1
 8019d0a:	d003      	beq.n	8019d14 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8019d0c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019d10:	1850      	adds	r0, r2, r1
 8019d12:	4770      	bx	lr
 8019d14:	8803      	ldrh	r3, [r0, #0]
 8019d16:	8880      	ldrh	r0, [r0, #4]
 8019d18:	4418      	add	r0, r3
 8019d1a:	b200      	sxth	r0, r0
 8019d1c:	1a80      	subs	r0, r0, r2
 8019d1e:	3801      	subs	r0, #1
 8019d20:	4770      	bx	lr
 8019d22:	8803      	ldrh	r3, [r0, #0]
 8019d24:	8880      	ldrh	r0, [r0, #4]
 8019d26:	4418      	add	r0, r3
 8019d28:	b200      	sxth	r0, r0
 8019d2a:	1a40      	subs	r0, r0, r1
 8019d2c:	e7f7      	b.n	8019d1e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019d2e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8019d32:	4410      	add	r0, r2
 8019d34:	4770      	bx	lr

08019d36 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019d36:	2b02      	cmp	r3, #2
 8019d38:	d008      	beq.n	8019d4c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8019d3a:	2b03      	cmp	r3, #3
 8019d3c:	d00d      	beq.n	8019d5a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019d3e:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8019d42:	2b01      	cmp	r3, #1
 8019d44:	bf14      	ite	ne
 8019d46:	1880      	addne	r0, r0, r2
 8019d48:	1840      	addeq	r0, r0, r1
 8019d4a:	4770      	bx	lr
 8019d4c:	8843      	ldrh	r3, [r0, #2]
 8019d4e:	88c0      	ldrh	r0, [r0, #6]
 8019d50:	4418      	add	r0, r3
 8019d52:	b200      	sxth	r0, r0
 8019d54:	1a80      	subs	r0, r0, r2
 8019d56:	3801      	subs	r0, #1
 8019d58:	4770      	bx	lr
 8019d5a:	8843      	ldrh	r3, [r0, #2]
 8019d5c:	88c0      	ldrh	r0, [r0, #6]
 8019d5e:	4418      	add	r0, r3
 8019d60:	b200      	sxth	r0, r0
 8019d62:	1a40      	subs	r0, r0, r1
 8019d64:	e7f7      	b.n	8019d56 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

08019d66 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8019d66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d68:	f8dd c014 	ldr.w	ip, [sp, #20]
 8019d6c:	9c06      	ldr	r4, [sp, #24]
 8019d6e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8019d72:	1e05      	subs	r5, r0, #0
 8019d74:	bfba      	itte	lt
 8019d76:	f04f 37ff 	movlt.w	r7, #4294967295
 8019d7a:	426d      	neglt	r5, r5
 8019d7c:	2701      	movge	r7, #1
 8019d7e:	f1bc 0f00 	cmp.w	ip, #0
 8019d82:	bfb8      	it	lt
 8019d84:	f1cc 0c00 	rsblt	ip, ip, #0
 8019d88:	f04f 0601 	mov.w	r6, #1
 8019d8c:	fa4c f001 	asr.w	r0, ip, r1
 8019d90:	fa06 f101 	lsl.w	r1, r6, r1
 8019d94:	f101 31ff 	add.w	r1, r1, #4294967295
 8019d98:	ea01 010c 	and.w	r1, r1, ip
 8019d9c:	bfb8      	it	lt
 8019d9e:	427f      	neglt	r7, r7
 8019da0:	434d      	muls	r5, r1
 8019da2:	2c00      	cmp	r4, #0
 8019da4:	f8de 1000 	ldr.w	r1, [lr]
 8019da8:	bfb8      	it	lt
 8019daa:	4264      	neglt	r4, r4
 8019dac:	fb03 1300 	mla	r3, r3, r0, r1
 8019db0:	fb95 f1f4 	sdiv	r1, r5, r4
 8019db4:	fb04 5511 	mls	r5, r4, r1, r5
 8019db8:	441d      	add	r5, r3
 8019dba:	fb95 f3f4 	sdiv	r3, r5, r4
 8019dbe:	fb04 5413 	mls	r4, r4, r3, r5
 8019dc2:	4419      	add	r1, r3
 8019dc4:	bfb8      	it	lt
 8019dc6:	427f      	neglt	r7, r7
 8019dc8:	fb02 1000 	mla	r0, r2, r0, r1
 8019dcc:	f8ce 4000 	str.w	r4, [lr]
 8019dd0:	4378      	muls	r0, r7
 8019dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019dd4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dd8:	4c24      	ldr	r4, [pc, #144]	; (8019e6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8019dda:	6807      	ldr	r7, [r0, #0]
 8019ddc:	69a3      	ldr	r3, [r4, #24]
 8019dde:	b086      	sub	sp, #24
 8019de0:	4605      	mov	r5, r0
 8019de2:	b92b      	cbnz	r3, 8019df0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8019de4:	6840      	ldr	r0, [r0, #4]
 8019de6:	602f      	str	r7, [r5, #0]
 8019de8:	6068      	str	r0, [r5, #4]
 8019dea:	b006      	add	sp, #24
 8019dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019df0:	68a2      	ldr	r2, [r4, #8]
 8019df2:	6820      	ldr	r0, [r4, #0]
 8019df4:	ae06      	add	r6, sp, #24
 8019df6:	f04f 0802 	mov.w	r8, #2
 8019dfa:	fb93 f1f8 	sdiv	r1, r3, r8
 8019dfe:	440a      	add	r2, r1
 8019e00:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019e04:	69e1      	ldr	r1, [r4, #28]
 8019e06:	9301      	str	r3, [sp, #4]
 8019e08:	9700      	str	r7, [sp, #0]
 8019e0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019e0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019e0e:	9602      	str	r6, [sp, #8]
 8019e10:	f7ff ffa9 	bl	8019d66 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019e14:	69a3      	ldr	r3, [r4, #24]
 8019e16:	9301      	str	r3, [sp, #4]
 8019e18:	686b      	ldr	r3, [r5, #4]
 8019e1a:	9300      	str	r3, [sp, #0]
 8019e1c:	4607      	mov	r7, r0
 8019e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019e20:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8019e22:	6a21      	ldr	r1, [r4, #32]
 8019e24:	9602      	str	r6, [sp, #8]
 8019e26:	6860      	ldr	r0, [r4, #4]
 8019e28:	f7ff ff9d 	bl	8019d66 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019e2c:	6963      	ldr	r3, [r4, #20]
 8019e2e:	69a2      	ldr	r2, [r4, #24]
 8019e30:	fb92 f8f8 	sdiv	r8, r2, r8
 8019e34:	4443      	add	r3, r8
 8019e36:	9305      	str	r3, [sp, #20]
 8019e38:	682b      	ldr	r3, [r5, #0]
 8019e3a:	9201      	str	r2, [sp, #4]
 8019e3c:	9300      	str	r3, [sp, #0]
 8019e3e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019e40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019e42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019e44:	9602      	str	r6, [sp, #8]
 8019e46:	4407      	add	r7, r0
 8019e48:	68e0      	ldr	r0, [r4, #12]
 8019e4a:	f7ff ff8c 	bl	8019d66 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019e4e:	69a3      	ldr	r3, [r4, #24]
 8019e50:	9301      	str	r3, [sp, #4]
 8019e52:	686b      	ldr	r3, [r5, #4]
 8019e54:	9300      	str	r3, [sp, #0]
 8019e56:	4680      	mov	r8, r0
 8019e58:	9602      	str	r6, [sp, #8]
 8019e5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8019e5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019e5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019e60:	6920      	ldr	r0, [r4, #16]
 8019e62:	f7ff ff80 	bl	8019d66 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019e66:	4440      	add	r0, r8
 8019e68:	e7bd      	b.n	8019de6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8019e6a:	bf00      	nop
 8019e6c:	20009d78 	.word	0x20009d78

08019e70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019e70:	b510      	push	{r4, lr}
 8019e72:	4b07      	ldr	r3, [pc, #28]	; (8019e90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019e74:	781b      	ldrb	r3, [r3, #0]
 8019e76:	2b01      	cmp	r3, #1
 8019e78:	d108      	bne.n	8019e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019e7a:	4b06      	ldr	r3, [pc, #24]	; (8019e94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019e7c:	880c      	ldrh	r4, [r1, #0]
 8019e7e:	881b      	ldrh	r3, [r3, #0]
 8019e80:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019e84:	3b01      	subs	r3, #1
 8019e86:	1b1b      	subs	r3, r3, r4
 8019e88:	8003      	strh	r3, [r0, #0]
 8019e8a:	800a      	strh	r2, [r1, #0]
 8019e8c:	bd10      	pop	{r4, pc}
 8019e8e:	bf00      	nop
 8019e90:	20009d66 	.word	0x20009d66
 8019e94:	20009d6a 	.word	0x20009d6a

08019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019e98:	b510      	push	{r4, lr}
 8019e9a:	4b07      	ldr	r3, [pc, #28]	; (8019eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019e9c:	781b      	ldrb	r3, [r3, #0]
 8019e9e:	2b01      	cmp	r3, #1
 8019ea0:	d108      	bne.n	8019eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019ea2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019ea6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019eaa:	8003      	strh	r3, [r0, #0]
 8019eac:	8893      	ldrh	r3, [r2, #4]
 8019eae:	3b01      	subs	r3, #1
 8019eb0:	1b1b      	subs	r3, r3, r4
 8019eb2:	800b      	strh	r3, [r1, #0]
 8019eb4:	bd10      	pop	{r4, pc}
 8019eb6:	bf00      	nop
 8019eb8:	20009d66 	.word	0x20009d66

08019ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019ebc:	b513      	push	{r0, r1, r4, lr}
 8019ebe:	4b0a      	ldr	r3, [pc, #40]	; (8019ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 8019ec0:	f9b3 4000 	ldrsh.w	r4, [r3]
 8019ec4:	4b09      	ldr	r3, [pc, #36]	; (8019eec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 8019ec6:	f8ad 4004 	strh.w	r4, [sp, #4]
 8019eca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ece:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	466a      	mov	r2, sp
 8019ed6:	f8ad 3000 	strh.w	r3, [sp]
 8019eda:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019ede:	f7ff ffdb 	bl	8019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019ee2:	b002      	add	sp, #8
 8019ee4:	bd10      	pop	{r4, pc}
 8019ee6:	bf00      	nop
 8019ee8:	20009d62 	.word	0x20009d62
 8019eec:	20009d64 	.word	0x20009d64

08019ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019ef0:	b510      	push	{r4, lr}
 8019ef2:	4b0a      	ldr	r3, [pc, #40]	; (8019f1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019ef4:	781b      	ldrb	r3, [r3, #0]
 8019ef6:	2b01      	cmp	r3, #1
 8019ef8:	460a      	mov	r2, r1
 8019efa:	d10d      	bne.n	8019f18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019efc:	8881      	ldrh	r1, [r0, #4]
 8019efe:	8803      	ldrh	r3, [r0, #0]
 8019f00:	440b      	add	r3, r1
 8019f02:	4601      	mov	r1, r0
 8019f04:	3b01      	subs	r3, #1
 8019f06:	f821 3b02 	strh.w	r3, [r1], #2
 8019f0a:	f7ff ffc5 	bl	8019e98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019f0e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019f12:	88c2      	ldrh	r2, [r0, #6]
 8019f14:	8082      	strh	r2, [r0, #4]
 8019f16:	80c3      	strh	r3, [r0, #6]
 8019f18:	bd10      	pop	{r4, pc}
 8019f1a:	bf00      	nop
 8019f1c:	20009d66 	.word	0x20009d66

08019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019f20:	b507      	push	{r0, r1, r2, lr}
 8019f22:	4b0a      	ldr	r3, [pc, #40]	; (8019f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8019f24:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019f28:	4b09      	ldr	r3, [pc, #36]	; (8019f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 8019f2a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019f2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f32:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019f36:	2300      	movs	r3, #0
 8019f38:	4669      	mov	r1, sp
 8019f3a:	f8ad 3000 	strh.w	r3, [sp]
 8019f3e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019f42:	f7ff ffd5 	bl	8019ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019f46:	b003      	add	sp, #12
 8019f48:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f4c:	20009d62 	.word	0x20009d62
 8019f50:	20009d64 	.word	0x20009d64

08019f54 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019f54:	4b03      	ldr	r3, [pc, #12]	; (8019f64 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019f56:	6818      	ldr	r0, [r3, #0]
 8019f58:	b110      	cbz	r0, 8019f60 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019f5a:	6803      	ldr	r3, [r0, #0]
 8019f5c:	699b      	ldr	r3, [r3, #24]
 8019f5e:	4718      	bx	r3
 8019f60:	4770      	bx	lr
 8019f62:	bf00      	nop
 8019f64:	20009dc8 	.word	0x20009dc8

08019f68 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019f68:	4770      	bx	lr
	...

08019f6c <_ZN8touchgfx11Application4drawEv>:
 8019f6c:	b507      	push	{r0, r1, r2, lr}
 8019f6e:	4b0b      	ldr	r3, [pc, #44]	; (8019f9c <_ZN8touchgfx11Application4drawEv+0x30>)
 8019f70:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019f74:	4b0a      	ldr	r3, [pc, #40]	; (8019fa0 <_ZN8touchgfx11Application4drawEv+0x34>)
 8019f76:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019f7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f7e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019f82:	2300      	movs	r3, #0
 8019f84:	f8ad 3000 	strh.w	r3, [sp]
 8019f88:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019f8c:	6803      	ldr	r3, [r0, #0]
 8019f8e:	4669      	mov	r1, sp
 8019f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f92:	4798      	blx	r3
 8019f94:	b003      	add	sp, #12
 8019f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f9a:	bf00      	nop
 8019f9c:	20009d62 	.word	0x20009d62
 8019fa0:	20009d64 	.word	0x20009d64

08019fa4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019fa4:	4b03      	ldr	r3, [pc, #12]	; (8019fb4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019fa6:	6818      	ldr	r0, [r3, #0]
 8019fa8:	b110      	cbz	r0, 8019fb0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019faa:	6803      	ldr	r3, [r0, #0]
 8019fac:	69db      	ldr	r3, [r3, #28]
 8019fae:	4718      	bx	r3
 8019fb0:	4770      	bx	lr
 8019fb2:	bf00      	nop
 8019fb4:	20009dc8 	.word	0x20009dc8

08019fb8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019fb8:	4b03      	ldr	r3, [pc, #12]	; (8019fc8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019fba:	6818      	ldr	r0, [r3, #0]
 8019fbc:	b110      	cbz	r0, 8019fc4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019fbe:	6803      	ldr	r3, [r0, #0]
 8019fc0:	6a1b      	ldr	r3, [r3, #32]
 8019fc2:	4718      	bx	r3
 8019fc4:	4770      	bx	lr
 8019fc6:	bf00      	nop
 8019fc8:	20009dc8 	.word	0x20009dc8

08019fcc <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019fcc:	4b03      	ldr	r3, [pc, #12]	; (8019fdc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019fce:	6818      	ldr	r0, [r3, #0]
 8019fd0:	b110      	cbz	r0, 8019fd8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019fd2:	6803      	ldr	r3, [r0, #0]
 8019fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fd6:	4718      	bx	r3
 8019fd8:	4770      	bx	lr
 8019fda:	bf00      	nop
 8019fdc:	20009dc8 	.word	0x20009dc8

08019fe0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fe4:	4d3b      	ldr	r5, [pc, #236]	; (801a0d4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8019fe6:	4604      	mov	r4, r0
 8019fe8:	6828      	ldr	r0, [r5, #0]
 8019fea:	2800      	cmp	r0, #0
 8019fec:	d046      	beq.n	801a07c <_ZN8touchgfx11Application15handleTickEventEv+0x9c>
 8019fee:	7a03      	ldrb	r3, [r0, #8]
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d143      	bne.n	801a07c <_ZN8touchgfx11Application15handleTickEventEv+0x9c>
 8019ff4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8019ff8:	6803      	ldr	r3, [r0, #0]
 8019ffa:	689b      	ldr	r3, [r3, #8]
 8019ffc:	e03b      	b.n	801a076 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8019ffe:	3b01      	subs	r3, #1
 801a000:	f04f 0c00 	mov.w	ip, #0
 801a004:	1c5a      	adds	r2, r3, #1
 801a006:	d031      	beq.n	801a06c <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801a008:	18e2      	adds	r2, r4, r3
 801a00a:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801a00e:	bb59      	cbnz	r1, 801a068 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801a010:	b298      	uxth	r0, r3
 801a012:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801a016:	1d25      	adds	r5, r4, #4
 801a018:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801a01c:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801a020:	428a      	cmp	r2, r1
 801a022:	dd14      	ble.n	801a04e <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801a024:	682e      	ldr	r6, [r5, #0]
 801a026:	45b0      	cmp	r8, r6
 801a028:	d106      	bne.n	801a038 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801a02a:	46ae      	mov	lr, r5
 801a02c:	460e      	mov	r6, r1
 801a02e:	2e1e      	cmp	r6, #30
 801a030:	dd05      	ble.n	801a03e <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801a032:	3a01      	subs	r2, #1
 801a034:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801a038:	3101      	adds	r1, #1
 801a03a:	3504      	adds	r5, #4
 801a03c:	e7ee      	b.n	801a01c <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801a03e:	3601      	adds	r6, #1
 801a040:	f8de 7004 	ldr.w	r7, [lr, #4]
 801a044:	f84e 7b04 	str.w	r7, [lr], #4
 801a048:	42b2      	cmp	r2, r6
 801a04a:	dcf0      	bgt.n	801a02e <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801a04c:	e7f1      	b.n	801a032 <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801a04e:	4290      	cmp	r0, r2
 801a050:	da07      	bge.n	801a062 <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801a052:	1821      	adds	r1, r4, r0
 801a054:	3001      	adds	r0, #1
 801a056:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801a05a:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a05e:	b280      	uxth	r0, r0
 801a060:	e7f5      	b.n	801a04e <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801a062:	4422      	add	r2, r4
 801a064:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801a068:	3b01      	subs	r3, #1
 801a06a:	e7cb      	b.n	801a004 <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801a06c:	4b1a      	ldr	r3, [pc, #104]	; (801a0d8 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>)
 801a06e:	6818      	ldr	r0, [r3, #0]
 801a070:	b368      	cbz	r0, 801a0ce <_ZN8touchgfx11Application15handleTickEventEv+0xee>
 801a072:	6803      	ldr	r3, [r0, #0]
 801a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a07a:	4718      	bx	r3
 801a07c:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801a080:	b913      	cbnz	r3, 801a088 <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 801a082:	b108      	cbz	r0, 801a088 <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 801a084:	7a03      	ldrb	r3, [r0, #8]
 801a086:	b9a3      	cbnz	r3, 801a0b2 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801a088:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801a08c:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801a090:	2600      	movs	r6, #0
 801a092:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801a096:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801a09a:	429e      	cmp	r6, r3
 801a09c:	daaf      	bge.n	8019ffe <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801a09e:	f817 3b01 	ldrb.w	r3, [r7], #1
 801a0a2:	b123      	cbz	r3, 801a0ae <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801a0a4:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801a0a8:	6803      	ldr	r3, [r0, #0]
 801a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a0ac:	4798      	blx	r3
 801a0ae:	3601      	adds	r6, #1
 801a0b0:	e7f1      	b.n	801a096 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801a0b2:	4b09      	ldr	r3, [pc, #36]	; (801a0d8 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>)
 801a0b4:	6818      	ldr	r0, [r3, #0]
 801a0b6:	b110      	cbz	r0, 801a0be <_ZN8touchgfx11Application15handleTickEventEv+0xde>
 801a0b8:	6803      	ldr	r3, [r0, #0]
 801a0ba:	691b      	ldr	r3, [r3, #16]
 801a0bc:	4798      	blx	r3
 801a0be:	6828      	ldr	r0, [r5, #0]
 801a0c0:	6803      	ldr	r3, [r0, #0]
 801a0c2:	68db      	ldr	r3, [r3, #12]
 801a0c4:	4798      	blx	r3
 801a0c6:	2301      	movs	r3, #1
 801a0c8:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801a0cc:	e7dc      	b.n	801a088 <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 801a0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0d2:	bf00      	nop
 801a0d4:	20009dcc 	.word	0x20009dcc
 801a0d8:	20009dc8 	.word	0x20009dc8

0801a0dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a0dc:	b570      	push	{r4, r5, r6, lr}
 801a0de:	4606      	mov	r6, r0
 801a0e0:	460c      	mov	r4, r1
 801a0e2:	b929      	cbnz	r1, 801a0f0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a0e4:	4b0c      	ldr	r3, [pc, #48]	; (801a118 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a0e6:	4a0d      	ldr	r2, [pc, #52]	; (801a11c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a0e8:	480d      	ldr	r0, [pc, #52]	; (801a120 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a0ea:	2163      	movs	r1, #99	; 0x63
 801a0ec:	f004 fbee 	bl	801e8cc <__assert_func>
 801a0f0:	4d0c      	ldr	r5, [pc, #48]	; (801a124 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a0f8:	6828      	ldr	r0, [r5, #0]
 801a0fa:	b110      	cbz	r0, 801a102 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a0fc:	6803      	ldr	r3, [r0, #0]
 801a0fe:	695b      	ldr	r3, [r3, #20]
 801a100:	4798      	blx	r3
 801a102:	602c      	str	r4, [r5, #0]
 801a104:	6823      	ldr	r3, [r4, #0]
 801a106:	4620      	mov	r0, r4
 801a108:	68db      	ldr	r3, [r3, #12]
 801a10a:	4798      	blx	r3
 801a10c:	6833      	ldr	r3, [r6, #0]
 801a10e:	4630      	mov	r0, r6
 801a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a116:	4718      	bx	r3
 801a118:	0802162e 	.word	0x0802162e
 801a11c:	080216f8 	.word	0x080216f8
 801a120:	08021638 	.word	0x08021638
 801a124:	20009dc8 	.word	0x20009dc8

0801a128 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a128:	b570      	push	{r4, r5, r6, lr}
 801a12a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a12e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a132:	42ac      	cmp	r4, r5
 801a134:	db18      	blt.n	801a168 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a136:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a13a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a13e:	429a      	cmp	r2, r3
 801a140:	db12      	blt.n	801a168 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a142:	8886      	ldrh	r6, [r0, #4]
 801a144:	4435      	add	r5, r6
 801a146:	888e      	ldrh	r6, [r1, #4]
 801a148:	4434      	add	r4, r6
 801a14a:	b22d      	sxth	r5, r5
 801a14c:	b224      	sxth	r4, r4
 801a14e:	42a5      	cmp	r5, r4
 801a150:	db0a      	blt.n	801a168 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a152:	88c0      	ldrh	r0, [r0, #6]
 801a154:	4418      	add	r0, r3
 801a156:	88cb      	ldrh	r3, [r1, #6]
 801a158:	441a      	add	r2, r3
 801a15a:	b200      	sxth	r0, r0
 801a15c:	b212      	sxth	r2, r2
 801a15e:	4290      	cmp	r0, r2
 801a160:	bfb4      	ite	lt
 801a162:	2000      	movlt	r0, #0
 801a164:	2001      	movge	r0, #1
 801a166:	bd70      	pop	{r4, r5, r6, pc}
 801a168:	2000      	movs	r0, #0
 801a16a:	bd70      	pop	{r4, r5, r6, pc}

0801a16c <_ZN8touchgfx11Application11getInstanceEv>:
 801a16c:	4b01      	ldr	r3, [pc, #4]	; (801a174 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a16e:	6818      	ldr	r0, [r3, #0]
 801a170:	4770      	bx	lr
 801a172:	bf00      	nop
 801a174:	20009dd0 	.word	0x20009dd0

0801a178 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a178:	2300      	movs	r3, #0
 801a17a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a17e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a182:	30a8      	adds	r0, #168	; 0xa8
 801a184:	f802 3b01 	strb.w	r3, [r2], #1
 801a188:	4282      	cmp	r2, r0
 801a18a:	d1fb      	bne.n	801a184 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a18c:	4770      	bx	lr

0801a18e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a18e:	4603      	mov	r3, r0
 801a190:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a194:	2200      	movs	r2, #0
 801a196:	801a      	strh	r2, [r3, #0]
 801a198:	805a      	strh	r2, [r3, #2]
 801a19a:	809a      	strh	r2, [r3, #4]
 801a19c:	80da      	strh	r2, [r3, #6]
 801a19e:	3308      	adds	r3, #8
 801a1a0:	428b      	cmp	r3, r1
 801a1a2:	d1f8      	bne.n	801a196 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a1a4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a1a8:	4770      	bx	lr
	...

0801a1ac <_ZN8touchgfx11ApplicationC1Ev>:
 801a1ac:	b570      	push	{r4, r5, r6, lr}
 801a1ae:	4b16      	ldr	r3, [pc, #88]	; (801a208 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801a1b0:	6003      	str	r3, [r0, #0]
 801a1b2:	2500      	movs	r5, #0
 801a1b4:	4604      	mov	r4, r0
 801a1b6:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801a1ba:	30a8      	adds	r0, #168	; 0xa8
 801a1bc:	f7ff ffe7 	bl	801a18e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a1c0:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a1c4:	f7ff ffe3 	bl	801a18e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a1c8:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801a1cc:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801a1d0:	490e      	ldr	r1, [pc, #56]	; (801a20c <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801a1d2:	480f      	ldr	r0, [pc, #60]	; (801a210 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801a1d4:	4e0f      	ldr	r6, [pc, #60]	; (801a214 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801a1d6:	f004 fa5d 	bl	801e694 <CRC_Lock>
 801a1da:	4b0f      	ldr	r3, [pc, #60]	; (801a218 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a1dc:	b158      	cbz	r0, 801a1f6 <_ZN8touchgfx11ApplicationC1Ev+0x4a>
 801a1de:	801d      	strh	r5, [r3, #0]
 801a1e0:	4a0e      	ldr	r2, [pc, #56]	; (801a21c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	6013      	str	r3, [r2, #0]
 801a1e6:	4a0e      	ldr	r2, [pc, #56]	; (801a220 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a1e8:	6033      	str	r3, [r6, #0]
 801a1ea:	4620      	mov	r0, r4
 801a1ec:	6013      	str	r3, [r2, #0]
 801a1ee:	f7ff ffc3 	bl	801a178 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a1f2:	4620      	mov	r0, r4
 801a1f4:	bd70      	pop	{r4, r5, r6, pc}
 801a1f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a1fa:	2002      	movs	r0, #2
 801a1fc:	801a      	strh	r2, [r3, #0]
 801a1fe:	6030      	str	r0, [r6, #0]
 801a200:	f000 ff38 	bl	801b074 <_ZN8touchgfx6Screen4drawEv>
 801a204:	e7ec      	b.n	801a1e0 <_ZN8touchgfx11ApplicationC1Ev+0x34>
 801a206:	bf00      	nop
 801a208:	080216c4 	.word	0x080216c4
 801a20c:	b5e8b5cd 	.word	0xb5e8b5cd
 801a210:	f407a5c2 	.word	0xf407a5c2
 801a214:	20009dc8 	.word	0x20009dc8
 801a218:	2000008a 	.word	0x2000008a
 801a21c:	20009dd0 	.word	0x20009dd0
 801a220:	20009dcc 	.word	0x20009dcc

0801a224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a224:	2300      	movs	r3, #0
 801a226:	8003      	strh	r3, [r0, #0]
 801a228:	8043      	strh	r3, [r0, #2]
 801a22a:	8083      	strh	r3, [r0, #4]
 801a22c:	80c3      	strh	r3, [r0, #6]
 801a22e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801a232:	429a      	cmp	r2, r3
 801a234:	b530      	push	{r4, r5, lr}
 801a236:	da12      	bge.n	801a25e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801a238:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801a23c:	3b01      	subs	r3, #1
 801a23e:	6825      	ldr	r5, [r4, #0]
 801a240:	6005      	str	r5, [r0, #0]
 801a242:	b29b      	uxth	r3, r3
 801a244:	6865      	ldr	r5, [r4, #4]
 801a246:	6045      	str	r5, [r0, #4]
 801a248:	429a      	cmp	r2, r3
 801a24a:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801a24e:	da06      	bge.n	801a25e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801a250:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801a254:	681d      	ldr	r5, [r3, #0]
 801a256:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801a25a:	685d      	ldr	r5, [r3, #4]
 801a25c:	6065      	str	r5, [r4, #4]
 801a25e:	bd30      	pop	{r4, r5, pc}

0801a260 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a262:	e88d 0006 	stmia.w	sp, {r1, r2}
 801a266:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a26a:	2a07      	cmp	r2, #7
 801a26c:	4604      	mov	r4, r0
 801a26e:	466b      	mov	r3, sp
 801a270:	dd06      	ble.n	801a280 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a272:	4b09      	ldr	r3, [pc, #36]	; (801a298 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a274:	4a09      	ldr	r2, [pc, #36]	; (801a29c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a276:	480a      	ldr	r0, [pc, #40]	; (801a2a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a278:	f44f 7102 	mov.w	r1, #520	; 0x208
 801a27c:	f004 fb26 	bl	801e8cc <__assert_func>
 801a280:	1c51      	adds	r1, r2, #1
 801a282:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a286:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a28a:	cb03      	ldmia	r3!, {r0, r1}
 801a28c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a290:	6069      	str	r1, [r5, #4]
 801a292:	b003      	add	sp, #12
 801a294:	bd30      	pop	{r4, r5, pc}
 801a296:	bf00      	nop
 801a298:	08021662 	.word	0x08021662
 801a29c:	0802173c 	.word	0x0802173c
 801a2a0:	08021691 	.word	0x08021691

0801a2a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a2a8:	b089      	sub	sp, #36	; 0x24
 801a2aa:	4606      	mov	r6, r0
 801a2ac:	4668      	mov	r0, sp
 801a2ae:	466c      	mov	r4, sp
 801a2b0:	e88d 0006 	stmia.w	sp, {r1, r2}
 801a2b4:	f7f5 fa26 	bl	800f704 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a2b8:	bbb0      	cbnz	r0, 801a328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801a2ba:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801a2be:	b1fd      	cbz	r5, 801a300 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801a2c0:	3d01      	subs	r5, #1
 801a2c2:	af04      	add	r7, sp, #16
 801a2c4:	f04f 090a 	mov.w	r9, #10
 801a2c8:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801a2cc:	ab02      	add	r3, sp, #8
 801a2ce:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a2d2:	6851      	ldr	r1, [r2, #4]
 801a2d4:	c303      	stmia	r3!, {r0, r1}
 801a2d6:	4621      	mov	r1, r4
 801a2d8:	a802      	add	r0, sp, #8
 801a2da:	fa1f f885 	uxth.w	r8, r5
 801a2de:	f7ff ff23 	bl	801a128 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a2e2:	bb08      	cbnz	r0, 801a328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801a2e4:	a902      	add	r1, sp, #8
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	f7ff ff1e 	bl	801a128 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a2ec:	b1f8      	cbz	r0, 801a32e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801a2ee:	4642      	mov	r2, r8
 801a2f0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a2f4:	a806      	add	r0, sp, #24
 801a2f6:	f7ff ff95 	bl	801a224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a2fa:	f115 35ff 	adds.w	r5, r5, #4294967295
 801a2fe:	d2e3      	bcs.n	801a2c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801a300:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801a304:	2b08      	cmp	r3, #8
 801a306:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801a30a:	d108      	bne.n	801a31e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801a30c:	4629      	mov	r1, r5
 801a30e:	a806      	add	r0, sp, #24
 801a310:	2207      	movs	r2, #7
 801a312:	f7ff ff87 	bl	801a224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a316:	a906      	add	r1, sp, #24
 801a318:	4620      	mov	r0, r4
 801a31a:	f7f5 f967 	bl	800f5ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a31e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a322:	4628      	mov	r0, r5
 801a324:	f7ff ff9c 	bl	801a260 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a328:	b009      	add	sp, #36	; 0x24
 801a32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a32e:	4621      	mov	r1, r4
 801a330:	a802      	add	r0, sp, #8
 801a332:	f7f5 f898 	bl	800f466 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a336:	b150      	cbz	r0, 801a34e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801a338:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a33c:	a806      	add	r0, sp, #24
 801a33e:	4642      	mov	r2, r8
 801a340:	f7ff ff70 	bl	801a224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a344:	a902      	add	r1, sp, #8
 801a346:	4620      	mov	r0, r4
 801a348:	f7f5 f950 	bl	800f5ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a34c:	e7d5      	b.n	801a2fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801a34e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a352:	e887 0003 	stmia.w	r7, {r0, r1}
 801a356:	a902      	add	r1, sp, #8
 801a358:	4638      	mov	r0, r7
 801a35a:	f7f5 f947 	bl	800f5ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a35e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a362:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a366:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a36a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a36e:	fb13 f302 	smulbb	r3, r3, r2
 801a372:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a376:	fb11 f102 	smulbb	r1, r1, r2
 801a37a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801a37e:	fb12 1100 	smlabb	r1, r2, r0, r1
 801a382:	220b      	movs	r2, #11
 801a384:	fb09 f303 	mul.w	r3, r9, r3
 801a388:	434a      	muls	r2, r1
 801a38a:	4293      	cmp	r3, r2
 801a38c:	dab5      	bge.n	801a2fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801a38e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801a392:	a806      	add	r0, sp, #24
 801a394:	4642      	mov	r2, r8
 801a396:	f7ff ff45 	bl	801a224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a39a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a39e:	e884 0003 	stmia.w	r4, {r0, r1}
 801a3a2:	e7aa      	b.n	801a2fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801a3a4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a3a4:	b530      	push	{r4, r5, lr}
 801a3a6:	4b1b      	ldr	r3, [pc, #108]	; (801a414 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801a3a8:	b085      	sub	sp, #20
 801a3aa:	460c      	mov	r4, r1
 801a3ac:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a3b0:	4b19      	ldr	r3, [pc, #100]	; (801a418 <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801a3b2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a3b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3ba:	6861      	ldr	r1, [r4, #4]
 801a3bc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a3c0:	2300      	movs	r3, #0
 801a3c2:	4605      	mov	r5, r0
 801a3c4:	6820      	ldr	r0, [r4, #0]
 801a3c6:	f8ad 3000 	strh.w	r3, [sp]
 801a3ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a3ce:	ab02      	add	r3, sp, #8
 801a3d0:	c303      	stmia	r3!, {r0, r1}
 801a3d2:	4669      	mov	r1, sp
 801a3d4:	a802      	add	r0, sp, #8
 801a3d6:	f7f5 f88d 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 801a3da:	ab02      	add	r3, sp, #8
 801a3dc:	cb03      	ldmia	r3!, {r0, r1}
 801a3de:	4b0f      	ldr	r3, [pc, #60]	; (801a41c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801a3e0:	6020      	str	r0, [r4, #0]
 801a3e2:	6818      	ldr	r0, [r3, #0]
 801a3e4:	6061      	str	r1, [r4, #4]
 801a3e6:	b138      	cbz	r0, 801a3f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801a3e8:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801a3ec:	b133      	cbz	r3, 801a3fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801a3ee:	6821      	ldr	r1, [r4, #0]
 801a3f0:	6862      	ldr	r2, [r4, #4]
 801a3f2:	4628      	mov	r0, r5
 801a3f4:	f7ff ff56 	bl	801a2a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a3f8:	b005      	add	sp, #20
 801a3fa:	bd30      	pop	{r4, r5, pc}
 801a3fc:	6803      	ldr	r3, [r0, #0]
 801a3fe:	4621      	mov	r1, r4
 801a400:	689b      	ldr	r3, [r3, #8]
 801a402:	4798      	blx	r3
 801a404:	4b06      	ldr	r3, [pc, #24]	; (801a420 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801a406:	6818      	ldr	r0, [r3, #0]
 801a408:	6803      	ldr	r3, [r0, #0]
 801a40a:	4621      	mov	r1, r4
 801a40c:	695b      	ldr	r3, [r3, #20]
 801a40e:	4798      	blx	r3
 801a410:	e7f2      	b.n	801a3f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801a412:	bf00      	nop
 801a414:	20009d62 	.word	0x20009d62
 801a418:	20009d64 	.word	0x20009d64
 801a41c:	20009dc8 	.word	0x20009dc8
 801a420:	20009d70 	.word	0x20009d70

0801a424 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801a424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a428:	4604      	mov	r4, r0
 801a42a:	b09a      	sub	sp, #104	; 0x68
 801a42c:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801a430:	b129      	cbz	r1, 801a43e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801a432:	2300      	movs	r3, #0
 801a434:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801a438:	b01a      	add	sp, #104	; 0x68
 801a43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a43e:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801a442:	2b00      	cmp	r3, #0
 801a444:	d0f8      	beq.n	801a438 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a446:	4fc6      	ldr	r7, [pc, #792]	; (801a760 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33c>)
 801a448:	a809      	add	r0, sp, #36	; 0x24
 801a44a:	f7ff fea0 	bl	801a18e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a44e:	883d      	ldrh	r5, [r7, #0]
 801a450:	462e      	mov	r6, r5
 801a452:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a456:	429e      	cmp	r6, r3
 801a458:	db10      	blt.n	801a47c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801a45a:	462e      	mov	r6, r5
 801a45c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a460:	429e      	cmp	r6, r3
 801a462:	da17      	bge.n	801a494 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801a464:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a468:	4620      	mov	r0, r4
 801a46a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a46e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a472:	3601      	adds	r6, #1
 801a474:	f7ff ff16 	bl	801a2a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a478:	b2b6      	uxth	r6, r6
 801a47a:	e7ef      	b.n	801a45c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801a47c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a480:	a809      	add	r0, sp, #36	; 0x24
 801a482:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801a486:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a48a:	3601      	adds	r6, #1
 801a48c:	f7ff fee8 	bl	801a260 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a490:	b2b6      	uxth	r6, r6
 801a492:	e7de      	b.n	801a452 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801a494:	4eb3      	ldr	r6, [pc, #716]	; (801a764 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x340>)
 801a496:	6833      	ldr	r3, [r6, #0]
 801a498:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a49c:	2b01      	cmp	r3, #1
 801a49e:	f040 80a5 	bne.w	801a5ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1c8>
 801a4a2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a4a6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801a4aa:	33aa      	adds	r3, #170	; 0xaa
 801a4ac:	f04f 0900 	mov.w	r9, #0
 801a4b0:	42a8      	cmp	r0, r5
 801a4b2:	f103 0308 	add.w	r3, r3, #8
 801a4b6:	dd0a      	ble.n	801a4ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801a4b8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a4bc:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801a4c0:	440a      	add	r2, r1
 801a4c2:	b212      	sxth	r2, r2
 801a4c4:	4591      	cmp	r9, r2
 801a4c6:	bfb8      	it	lt
 801a4c8:	4691      	movlt	r9, r2
 801a4ca:	3501      	adds	r5, #1
 801a4cc:	e7f0      	b.n	801a4b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801a4ce:	4ba6      	ldr	r3, [pc, #664]	; (801a768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x344>)
 801a4d0:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 801a774 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x350>
 801a4d4:	881d      	ldrh	r5, [r3, #0]
 801a4d6:	08ed      	lsrs	r5, r5, #3
 801a4d8:	2300      	movs	r3, #0
 801a4da:	2d01      	cmp	r5, #1
 801a4dc:	bfb8      	it	lt
 801a4de:	2501      	movlt	r5, #1
 801a4e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a4e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a4e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a4ec:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a4f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a4f4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a4f8:	6830      	ldr	r0, [r6, #0]
 801a4fa:	4413      	add	r3, r2
 801a4fc:	b21b      	sxth	r3, r3
 801a4fe:	4599      	cmp	r9, r3
 801a500:	6803      	ldr	r3, [r0, #0]
 801a502:	dd49      	ble.n	801a598 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x174>
 801a504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a508:	4798      	blx	r3
 801a50a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a50e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a512:	4413      	add	r3, r2
 801a514:	b21b      	sxth	r3, r3
 801a516:	18ea      	adds	r2, r5, r3
 801a518:	4290      	cmp	r0, r2
 801a51a:	f280 812f 	bge.w	801a77c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x358>
 801a51e:	4581      	cmp	r9, r0
 801a520:	f340 812c 	ble.w	801a77c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x358>
 801a524:	4298      	cmp	r0, r3
 801a526:	da02      	bge.n	801a52e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10a>
 801a528:	2b00      	cmp	r3, #0
 801a52a:	f300 812a 	bgt.w	801a782 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x35e>
 801a52e:	6830      	ldr	r0, [r6, #0]
 801a530:	6803      	ldr	r3, [r0, #0]
 801a532:	2101      	movs	r1, #1
 801a534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a538:	4798      	blx	r3
 801a53a:	e7d9      	b.n	801a4f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801a53c:	4548      	cmp	r0, r9
 801a53e:	bfa8      	it	ge
 801a540:	4648      	movge	r0, r9
 801a542:	f9b8 2000 	ldrsh.w	r2, [r8]
 801a546:	f8b7 a000 	ldrh.w	sl, [r7]
 801a54a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a54e:	2100      	movs	r1, #0
 801a550:	1ac0      	subs	r0, r0, r3
 801a552:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a556:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a55a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a55e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a562:	459a      	cmp	sl, r3
 801a564:	dac4      	bge.n	801a4f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801a566:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a56a:	ab07      	add	r3, sp, #28
 801a56c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a570:	6851      	ldr	r1, [r2, #4]
 801a572:	c303      	stmia	r3!, {r0, r1}
 801a574:	a807      	add	r0, sp, #28
 801a576:	a905      	add	r1, sp, #20
 801a578:	f7f4 ffbc 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 801a57c:	a807      	add	r0, sp, #28
 801a57e:	f7f5 f8c1 	bl	800f704 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a582:	b920      	cbnz	r0, 801a58e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16a>
 801a584:	6823      	ldr	r3, [r4, #0]
 801a586:	a907      	add	r1, sp, #28
 801a588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a58a:	4620      	mov	r0, r4
 801a58c:	4798      	blx	r3
 801a58e:	f10a 0a01 	add.w	sl, sl, #1
 801a592:	fa1f fa8a 	uxth.w	sl, sl
 801a596:	e7e2      	b.n	801a55e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x13a>
 801a598:	69db      	ldr	r3, [r3, #28]
 801a59a:	4798      	blx	r3
 801a59c:	4b73      	ldr	r3, [pc, #460]	; (801a76c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x348>)
 801a59e:	6818      	ldr	r0, [r3, #0]
 801a5a0:	b148      	cbz	r0, 801a5b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x192>
 801a5a2:	6803      	ldr	r3, [r0, #0]
 801a5a4:	689a      	ldr	r2, [r3, #8]
 801a5a6:	6833      	ldr	r3, [r6, #0]
 801a5a8:	f893 1076 	ldrb.w	r1, [r3, #118]	; 0x76
 801a5ac:	b109      	cbz	r1, 801a5b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x18e>
 801a5ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801a5b0:	b901      	cbnz	r1, 801a5b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x190>
 801a5b2:	6899      	ldr	r1, [r3, #8]
 801a5b4:	4790      	blx	r2
 801a5b6:	4b6e      	ldr	r3, [pc, #440]	; (801a770 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x34c>)
 801a5b8:	781b      	ldrb	r3, [r3, #0]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	f43f af3c 	beq.w	801a438 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	883d      	ldrh	r5, [r7, #0]
 801a5c4:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801a5c8:	34ea      	adds	r4, #234	; 0xea
 801a5ca:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801a5ce:	429d      	cmp	r5, r3
 801a5d0:	f6bf af32 	bge.w	801a438 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a5d4:	ab1a      	add	r3, sp, #104	; 0x68
 801a5d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a5da:	3b44      	subs	r3, #68	; 0x44
 801a5dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	3501      	adds	r5, #1
 801a5e4:	f7ff fe3c 	bl	801a260 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a5e8:	b2ad      	uxth	r5, r5
 801a5ea:	e7ee      	b.n	801a5ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801a5ec:	2b02      	cmp	r3, #2
 801a5ee:	f040 809f 	bne.w	801a730 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>
 801a5f2:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801a778 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x354>
 801a5f6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a5fa:	429d      	cmp	r5, r3
 801a5fc:	dace      	bge.n	801a59c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x178>
 801a5fe:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a602:	ab03      	add	r3, sp, #12
 801a604:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a608:	6851      	ldr	r1, [r2, #4]
 801a60a:	c303      	stmia	r3!, {r0, r1}
 801a60c:	f899 3000 	ldrb.w	r3, [r9]
 801a610:	2b01      	cmp	r3, #1
 801a612:	d102      	bne.n	801a61a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 801a614:	a803      	add	r0, sp, #12
 801a616:	f7ff fc83 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a61a:	a803      	add	r0, sp, #12
 801a61c:	f7f5 f872 	bl	800f704 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a620:	2800      	cmp	r0, #0
 801a622:	d17e      	bne.n	801a722 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fe>
 801a624:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a628:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a62c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a630:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a634:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a638:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a63c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a640:	4680      	mov	r8, r0
 801a642:	f8bd a012 	ldrh.w	sl, [sp, #18]
 801a646:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 801a64a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a64e:	6830      	ldr	r0, [r6, #0]
 801a650:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801a654:	f8d0 c000 	ldr.w	ip, [r0]
 801a658:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801a65c:	44d6      	add	lr, sl
 801a65e:	ebae 0e02 	sub.w	lr, lr, r2
 801a662:	fa1f fe8e 	uxth.w	lr, lr
 801a666:	f8cd e000 	str.w	lr, [sp]
 801a66a:	f8dc a084 	ldr.w	sl, [ip, #132]	; 0x84
 801a66e:	47d0      	blx	sl
 801a670:	f899 3000 	ldrb.w	r3, [r9]
 801a674:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a678:	2b01      	cmp	r3, #1
 801a67a:	d155      	bne.n	801a728 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>
 801a67c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a680:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a684:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a688:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a68c:	3b01      	subs	r3, #1
 801a68e:	4418      	add	r0, r3
 801a690:	f8ad 000a 	strh.w	r0, [sp, #10]
 801a694:	f10d 010a 	add.w	r1, sp, #10
 801a698:	a802      	add	r0, sp, #8
 801a69a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801a69e:	f8ad 8020 	strh.w	r8, [sp, #32]
 801a6a2:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801a6a6:	f7ff fbe3 	bl	8019e70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801a6aa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a6ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a6b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a6b6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801a6ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a6be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a6c2:	4413      	add	r3, r2
 801a6c4:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a6c8:	f10d 010a 	add.w	r1, sp, #10
 801a6cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a6d0:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a6d4:	a802      	add	r0, sp, #8
 801a6d6:	f7ff fbcb 	bl	8019e70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801a6da:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a6de:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801a6e2:	3301      	adds	r3, #1
 801a6e4:	1a9b      	subs	r3, r3, r2
 801a6e6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a6ea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a6ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a6f2:	1a9b      	subs	r3, r3, r2
 801a6f4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a6f8:	6823      	ldr	r3, [r4, #0]
 801a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6fc:	a907      	add	r1, sp, #28
 801a6fe:	4620      	mov	r0, r4
 801a700:	4798      	blx	r3
 801a702:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a706:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a70a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801a70e:	4413      	add	r3, r2
 801a710:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a714:	440a      	add	r2, r1
 801a716:	b21b      	sxth	r3, r3
 801a718:	b212      	sxth	r2, r2
 801a71a:	4293      	cmp	r3, r2
 801a71c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a720:	db8f      	blt.n	801a642 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21e>
 801a722:	3501      	adds	r5, #1
 801a724:	b2ad      	uxth	r5, r5
 801a726:	e766      	b.n	801a5f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801a728:	6823      	ldr	r3, [r4, #0]
 801a72a:	a905      	add	r1, sp, #20
 801a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a72e:	e7e6      	b.n	801a6fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2da>
 801a730:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a734:	429d      	cmp	r5, r3
 801a736:	f6bf af31 	bge.w	801a59c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x178>
 801a73a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a73e:	ab07      	add	r3, sp, #28
 801a740:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a744:	6851      	ldr	r1, [r2, #4]
 801a746:	c303      	stmia	r3!, {r0, r1}
 801a748:	a807      	add	r0, sp, #28
 801a74a:	f7f4 ffdb 	bl	800f704 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a74e:	b920      	cbnz	r0, 801a75a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x336>
 801a750:	6823      	ldr	r3, [r4, #0]
 801a752:	a907      	add	r1, sp, #28
 801a754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a756:	4620      	mov	r0, r4
 801a758:	4798      	blx	r3
 801a75a:	3501      	adds	r5, #1
 801a75c:	b2ad      	uxth	r5, r5
 801a75e:	e7e7      	b.n	801a730 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>
 801a760:	2000008a 	.word	0x2000008a
 801a764:	20009d70 	.word	0x20009d70
 801a768:	20009d64 	.word	0x20009d64
 801a76c:	20009dc4 	.word	0x20009dc4
 801a770:	20009d6c 	.word	0x20009d6c
 801a774:	20009d62 	.word	0x20009d62
 801a778:	20009d66 	.word	0x20009d66
 801a77c:	4298      	cmp	r0, r3
 801a77e:	f6bf aedd 	bge.w	801a53c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x118>
 801a782:	4648      	mov	r0, r9
 801a784:	e6dd      	b.n	801a542 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x11e>
 801a786:	bf00      	nop

0801a788 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801a788:	2000      	movs	r0, #0
 801a78a:	4770      	bx	lr

0801a78c <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801a78c:	2000      	movs	r0, #0
 801a78e:	4770      	bx	lr

0801a790 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a790:	b508      	push	{r3, lr}
 801a792:	6803      	ldr	r3, [r0, #0]
 801a794:	68db      	ldr	r3, [r3, #12]
 801a796:	4798      	blx	r3
 801a798:	b140      	cbz	r0, 801a7ac <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801a79a:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801a79e:	7a83      	ldrb	r3, [r0, #10]
 801a7a0:	2a00      	cmp	r2, #0
 801a7a2:	bfb4      	ite	lt
 801a7a4:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801a7a8:	2000      	movge	r0, #0
 801a7aa:	4318      	orrs	r0, r3
 801a7ac:	bd08      	pop	{r3, pc}
	...

0801a7b0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801a7b0:	b40e      	push	{r1, r2, r3}
 801a7b2:	b533      	push	{r0, r1, r4, r5, lr}
 801a7b4:	ab05      	add	r3, sp, #20
 801a7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7ba:	9301      	str	r3, [sp, #4]
 801a7bc:	4b09      	ldr	r3, [pc, #36]	; (801a7e4 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x34>)
 801a7be:	685c      	ldr	r4, [r3, #4]
 801a7c0:	f014 0f01 	tst.w	r4, #1
 801a7c4:	ea4f 0464 	mov.w	r4, r4, asr #1
 801a7c8:	bf1b      	ittet	ne
 801a7ca:	681b      	ldrne	r3, [r3, #0]
 801a7cc:	5901      	ldrne	r1, [r0, r4]
 801a7ce:	681d      	ldreq	r5, [r3, #0]
 801a7d0:	58cd      	ldrne	r5, [r1, r3]
 801a7d2:	9b01      	ldr	r3, [sp, #4]
 801a7d4:	2100      	movs	r1, #0
 801a7d6:	4420      	add	r0, r4
 801a7d8:	47a8      	blx	r5
 801a7da:	b002      	add	sp, #8
 801a7dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a7e0:	b003      	add	sp, #12
 801a7e2:	4770      	bx	lr
 801a7e4:	2000005c 	.word	0x2000005c

0801a7e8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801a7e8:	b40c      	push	{r2, r3}
 801a7ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a7ec:	ab06      	add	r3, sp, #24
 801a7ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7f2:	9301      	str	r3, [sp, #4]
 801a7f4:	4b09      	ldr	r3, [pc, #36]	; (801a81c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801a7f6:	685c      	ldr	r4, [r3, #4]
 801a7f8:	f014 0f01 	tst.w	r4, #1
 801a7fc:	ea4f 0464 	mov.w	r4, r4, asr #1
 801a800:	bf1b      	ittet	ne
 801a802:	681b      	ldrne	r3, [r3, #0]
 801a804:	5905      	ldrne	r5, [r0, r4]
 801a806:	681d      	ldreq	r5, [r3, #0]
 801a808:	58ed      	ldrne	r5, [r5, r3]
 801a80a:	9b01      	ldr	r3, [sp, #4]
 801a80c:	4420      	add	r0, r4
 801a80e:	47a8      	blx	r5
 801a810:	b003      	add	sp, #12
 801a812:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a816:	b002      	add	sp, #8
 801a818:	4770      	bx	lr
 801a81a:	bf00      	nop
 801a81c:	2000005c 	.word	0x2000005c

0801a820 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a820:	b40e      	push	{r1, r2, r3}
 801a822:	b530      	push	{r4, r5, lr}
 801a824:	b098      	sub	sp, #96	; 0x60
 801a826:	ab1b      	add	r3, sp, #108	; 0x6c
 801a828:	4604      	mov	r4, r0
 801a82a:	f853 5b04 	ldr.w	r5, [r3], #4
 801a82e:	9301      	str	r3, [sp, #4]
 801a830:	a802      	add	r0, sp, #8
 801a832:	f000 fff1 	bl	801b818 <_ZN8touchgfx12TextProviderC1Ev>
 801a836:	6823      	ldr	r3, [r4, #0]
 801a838:	4620      	mov	r0, r4
 801a83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a83c:	4798      	blx	r3
 801a83e:	9a01      	ldr	r2, [sp, #4]
 801a840:	4603      	mov	r3, r0
 801a842:	4629      	mov	r1, r5
 801a844:	a802      	add	r0, sp, #8
 801a846:	f001 f804 	bl	801b852 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a84a:	a802      	add	r0, sp, #8
 801a84c:	f001 f83a 	bl	801b8c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a850:	2401      	movs	r4, #1
 801a852:	b140      	cbz	r0, 801a866 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801a854:	280a      	cmp	r0, #10
 801a856:	bf08      	it	eq
 801a858:	3401      	addeq	r4, #1
 801a85a:	a802      	add	r0, sp, #8
 801a85c:	bf08      	it	eq
 801a85e:	b224      	sxtheq	r4, r4
 801a860:	f001 f830 	bl	801b8c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a864:	e7f5      	b.n	801a852 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801a866:	b2a0      	uxth	r0, r4
 801a868:	b018      	add	sp, #96	; 0x60
 801a86a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a86e:	b003      	add	sp, #12
 801a870:	4770      	bx	lr
	...

0801a874 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a874:	b40e      	push	{r1, r2, r3}
 801a876:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a878:	b098      	sub	sp, #96	; 0x60
 801a87a:	ab1d      	add	r3, sp, #116	; 0x74
 801a87c:	4605      	mov	r5, r0
 801a87e:	f853 4b04 	ldr.w	r4, [r3], #4
 801a882:	9300      	str	r3, [sp, #0]
 801a884:	a802      	add	r0, sp, #8
 801a886:	f000 ffc7 	bl	801b818 <_ZN8touchgfx12TextProviderC1Ev>
 801a88a:	682b      	ldr	r3, [r5, #0]
 801a88c:	4f24      	ldr	r7, [pc, #144]	; (801a920 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xac>)
 801a88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a890:	4628      	mov	r0, r5
 801a892:	4798      	blx	r3
 801a894:	ae18      	add	r6, sp, #96	; 0x60
 801a896:	4603      	mov	r3, r0
 801a898:	4621      	mov	r1, r4
 801a89a:	9a00      	ldr	r2, [sp, #0]
 801a89c:	a802      	add	r0, sp, #8
 801a89e:	2400      	movs	r4, #0
 801a8a0:	f000 ffd7 	bl	801b852 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a8a4:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801a8a8:	462a      	mov	r2, r5
 801a8aa:	4633      	mov	r3, r6
 801a8ac:	4621      	mov	r1, r4
 801a8ae:	a802      	add	r0, sp, #8
 801a8b0:	f001 f93a 	bl	801bb28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a8b4:	b370      	cbz	r0, 801a914 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>
 801a8b6:	280a      	cmp	r0, #10
 801a8b8:	d025      	beq.n	801a906 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 801a8ba:	9a01      	ldr	r2, [sp, #4]
 801a8bc:	b31a      	cbz	r2, 801a906 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 801a8be:	7b51      	ldrb	r1, [r2, #13]
 801a8c0:	f892 c008 	ldrb.w	ip, [r2, #8]
 801a8c4:	88ab      	ldrh	r3, [r5, #4]
 801a8c6:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a8ca:	bf14      	ite	ne
 801a8cc:	46be      	movne	lr, r7
 801a8ce:	f04f 0e00 	moveq.w	lr, #0
 801a8d2:	f011 0f20 	tst.w	r1, #32
 801a8d6:	bf14      	ite	ne
 801a8d8:	f44f 7080 	movne.w	r0, #256	; 0x100
 801a8dc:	2000      	moveq	r0, #0
 801a8de:	ea4e 0e0c 	orr.w	lr, lr, ip
 801a8e2:	ea40 000e 	orr.w	r0, r0, lr
 801a8e6:	f011 0f10 	tst.w	r1, #16
 801a8ea:	eba3 0300 	sub.w	r3, r3, r0
 801a8ee:	79d0      	ldrb	r0, [r2, #7]
 801a8f0:	bf14      	ite	ne
 801a8f2:	f44f 7280 	movne.w	r2, #256	; 0x100
 801a8f6:	2200      	moveq	r2, #0
 801a8f8:	4302      	orrs	r2, r0
 801a8fa:	fa12 f383 	uxtah	r3, r2, r3
 801a8fe:	b29b      	uxth	r3, r3
 801a900:	42a3      	cmp	r3, r4
 801a902:	bfc8      	it	gt
 801a904:	b21c      	sxthgt	r4, r3
 801a906:	4633      	mov	r3, r6
 801a908:	462a      	mov	r2, r5
 801a90a:	2100      	movs	r1, #0
 801a90c:	a802      	add	r0, sp, #8
 801a90e:	f001 f90b 	bl	801bb28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a912:	e7cf      	b.n	801a8b4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801a914:	b2a0      	uxth	r0, r4
 801a916:	b018      	add	sp, #96	; 0x60
 801a918:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a91c:	b003      	add	sp, #12
 801a91e:	4770      	bx	lr
 801a920:	fffffe00 	.word	0xfffffe00

0801a924 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a924:	b40e      	push	{r1, r2, r3}
 801a926:	b570      	push	{r4, r5, r6, lr}
 801a928:	b099      	sub	sp, #100	; 0x64
 801a92a:	ab1d      	add	r3, sp, #116	; 0x74
 801a92c:	4604      	mov	r4, r0
 801a92e:	f853 5b04 	ldr.w	r5, [r3], #4
 801a932:	9300      	str	r3, [sp, #0]
 801a934:	a802      	add	r0, sp, #8
 801a936:	f000 ff6f 	bl	801b818 <_ZN8touchgfx12TextProviderC1Ev>
 801a93a:	6823      	ldr	r3, [r4, #0]
 801a93c:	4620      	mov	r0, r4
 801a93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a940:	4798      	blx	r3
 801a942:	4629      	mov	r1, r5
 801a944:	4603      	mov	r3, r0
 801a946:	9a00      	ldr	r2, [sp, #0]
 801a948:	a802      	add	r0, sp, #8
 801a94a:	ad18      	add	r5, sp, #96	; 0x60
 801a94c:	f000 ff81 	bl	801b852 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a950:	2100      	movs	r1, #0
 801a952:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801a956:	4622      	mov	r2, r4
 801a958:	462b      	mov	r3, r5
 801a95a:	a802      	add	r0, sp, #8
 801a95c:	f001 f8e4 	bl	801bb28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a960:	26ff      	movs	r6, #255	; 0xff
 801a962:	b190      	cbz	r0, 801a98a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801a964:	280a      	cmp	r0, #10
 801a966:	d009      	beq.n	801a97c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801a968:	9a01      	ldr	r2, [sp, #4]
 801a96a:	b13a      	cbz	r2, 801a97c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801a96c:	7923      	ldrb	r3, [r4, #4]
 801a96e:	7a12      	ldrb	r2, [r2, #8]
 801a970:	1a9b      	subs	r3, r3, r2
 801a972:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801a976:	429e      	cmp	r6, r3
 801a978:	bfa8      	it	ge
 801a97a:	461e      	movge	r6, r3
 801a97c:	462b      	mov	r3, r5
 801a97e:	4622      	mov	r2, r4
 801a980:	2100      	movs	r1, #0
 801a982:	a802      	add	r0, sp, #8
 801a984:	f001 f8d0 	bl	801bb28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a988:	e7eb      	b.n	801a962 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801a98a:	4630      	mov	r0, r6
 801a98c:	b019      	add	sp, #100	; 0x64
 801a98e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a992:	b003      	add	sp, #12
 801a994:	4770      	bx	lr

0801a996 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a99a:	4607      	mov	r7, r0
 801a99c:	b099      	sub	sp, #100	; 0x64
 801a99e:	a802      	add	r0, sp, #8
 801a9a0:	4614      	mov	r4, r2
 801a9a2:	461d      	mov	r5, r3
 801a9a4:	468a      	mov	sl, r1
 801a9a6:	f000 ff37 	bl	801b818 <_ZN8touchgfx12TextProviderC1Ev>
 801a9aa:	683b      	ldr	r3, [r7, #0]
 801a9ac:	4638      	mov	r0, r7
 801a9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a9b0:	4798      	blx	r3
 801a9b2:	462a      	mov	r2, r5
 801a9b4:	4603      	mov	r3, r0
 801a9b6:	4621      	mov	r1, r4
 801a9b8:	a802      	add	r0, sp, #8
 801a9ba:	f000 ff4a 	bl	801b852 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a9be:	f04f 0800 	mov.w	r8, #0
 801a9c2:	46c1      	mov	r9, r8
 801a9c4:	4645      	mov	r5, r8
 801a9c6:	2300      	movs	r3, #0
 801a9c8:	9301      	str	r3, [sp, #4]
 801a9ca:	463a      	mov	r2, r7
 801a9cc:	ab01      	add	r3, sp, #4
 801a9ce:	4651      	mov	r1, sl
 801a9d0:	a802      	add	r0, sp, #8
 801a9d2:	f001 f8a9 	bl	801bb28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a9d6:	4606      	mov	r6, r0
 801a9d8:	b108      	cbz	r0, 801a9de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x48>
 801a9da:	280a      	cmp	r0, #10
 801a9dc:	d106      	bne.n	801a9ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x56>
 801a9de:	454d      	cmp	r5, r9
 801a9e0:	dd00      	ble.n	801a9e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4e>
 801a9e2:	46a9      	mov	r9, r5
 801a9e4:	2500      	movs	r5, #0
 801a9e6:	e018      	b.n	801aa1a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x84>
 801a9e8:	46b0      	mov	r8, r6
 801a9ea:	e7ec      	b.n	801a9c6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x30>
 801a9ec:	9a01      	ldr	r2, [sp, #4]
 801a9ee:	2a00      	cmp	r2, #0
 801a9f0:	d0fa      	beq.n	801a9e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a9f2:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801a9f6:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801a9fa:	8896      	ldrh	r6, [r2, #4]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	683b      	ldr	r3, [r7, #0]
 801aa00:	4641      	mov	r1, r8
 801aa02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa04:	4638      	mov	r0, r7
 801aa06:	bfb4      	ite	lt
 801aa08:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801aa0c:	2400      	movge	r4, #0
 801aa0e:	4798      	blx	r3
 801aa10:	ea44 040b 	orr.w	r4, r4, fp
 801aa14:	4404      	add	r4, r0
 801aa16:	4425      	add	r5, r4
 801aa18:	b2ad      	uxth	r5, r5
 801aa1a:	2e00      	cmp	r6, #0
 801aa1c:	d1e4      	bne.n	801a9e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801aa1e:	4648      	mov	r0, r9
 801aa20:	b019      	add	sp, #100	; 0x64
 801aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa26 <_ZNK8touchgfx8Drawable7getTypeEv>:
 801aa26:	2000      	movs	r0, #0
 801aa28:	4770      	bx	lr

0801aa2a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801aa2a:	b513      	push	{r0, r1, r4, lr}
 801aa2c:	1d01      	adds	r1, r0, #4
 801aa2e:	4603      	mov	r3, r0
 801aa30:	c903      	ldmia	r1, {r0, r1}
 801aa32:	e88d 0003 	stmia.w	sp, {r0, r1}
 801aa36:	2100      	movs	r1, #0
 801aa38:	f8ad 1000 	strh.w	r1, [sp]
 801aa3c:	f8ad 1002 	strh.w	r1, [sp, #2]
 801aa40:	6819      	ldr	r1, [r3, #0]
 801aa42:	4618      	mov	r0, r3
 801aa44:	690c      	ldr	r4, [r1, #16]
 801aa46:	4669      	mov	r1, sp
 801aa48:	47a0      	blx	r4
 801aa4a:	b002      	add	sp, #8
 801aa4c:	bd10      	pop	{r4, pc}

0801aa4e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801aa4e:	b538      	push	{r3, r4, r5, lr}
 801aa50:	680b      	ldr	r3, [r1, #0]
 801aa52:	460c      	mov	r4, r1
 801aa54:	68db      	ldr	r3, [r3, #12]
 801aa56:	4605      	mov	r5, r0
 801aa58:	4798      	blx	r3
 801aa5a:	6823      	ldr	r3, [r4, #0]
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa60:	4629      	mov	r1, r5
 801aa62:	4798      	blx	r3
 801aa64:	4628      	mov	r0, r5
 801aa66:	bd38      	pop	{r3, r4, r5, pc}

0801aa68 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801aa68:	b410      	push	{r4}
 801aa6a:	880a      	ldrh	r2, [r1, #0]
 801aa6c:	8884      	ldrh	r4, [r0, #4]
 801aa6e:	4422      	add	r2, r4
 801aa70:	800a      	strh	r2, [r1, #0]
 801aa72:	88c4      	ldrh	r4, [r0, #6]
 801aa74:	884a      	ldrh	r2, [r1, #2]
 801aa76:	4422      	add	r2, r4
 801aa78:	804a      	strh	r2, [r1, #2]
 801aa7a:	6940      	ldr	r0, [r0, #20]
 801aa7c:	b120      	cbz	r0, 801aa88 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801aa7e:	6803      	ldr	r3, [r0, #0]
 801aa80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa86:	4718      	bx	r3
 801aa88:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa8c:	4770      	bx	lr

0801aa8e <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801aa8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa90:	460b      	mov	r3, r1
 801aa92:	b085      	sub	sp, #20
 801aa94:	4604      	mov	r4, r0
 801aa96:	b901      	cbnz	r1, 801aa9a <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801aa98:	b1f2      	cbz	r2, 801aad8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801aa9a:	1d27      	adds	r7, r4, #4
 801aa9c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801aaa0:	e88d 0003 	stmia.w	sp, {r0, r1}
 801aaa4:	88e1      	ldrh	r1, [r4, #6]
 801aaa6:	440a      	add	r2, r1
 801aaa8:	88a1      	ldrh	r1, [r4, #4]
 801aaaa:	4419      	add	r1, r3
 801aaac:	6823      	ldr	r3, [r4, #0]
 801aaae:	b209      	sxth	r1, r1
 801aab0:	4620      	mov	r0, r4
 801aab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aab4:	b212      	sxth	r2, r2
 801aab6:	4798      	blx	r3
 801aab8:	e897 0003 	ldmia.w	r7, {r0, r1}
 801aabc:	ad02      	add	r5, sp, #8
 801aabe:	e885 0003 	stmia.w	r5, {r0, r1}
 801aac2:	6960      	ldr	r0, [r4, #20]
 801aac4:	b150      	cbz	r0, 801aadc <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801aac6:	6803      	ldr	r3, [r0, #0]
 801aac8:	4669      	mov	r1, sp
 801aaca:	691b      	ldr	r3, [r3, #16]
 801aacc:	4798      	blx	r3
 801aace:	6960      	ldr	r0, [r4, #20]
 801aad0:	6803      	ldr	r3, [r0, #0]
 801aad2:	691b      	ldr	r3, [r3, #16]
 801aad4:	4629      	mov	r1, r5
 801aad6:	4798      	blx	r3
 801aad8:	b005      	add	sp, #20
 801aada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aadc:	f7ff fb46 	bl	801a16c <_ZN8touchgfx11Application11getInstanceEv>
 801aae0:	6803      	ldr	r3, [r0, #0]
 801aae2:	4669      	mov	r1, sp
 801aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aae6:	4798      	blx	r3
 801aae8:	f7ff fb40 	bl	801a16c <_ZN8touchgfx11Application11getInstanceEv>
 801aaec:	6803      	ldr	r3, [r0, #0]
 801aaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaf0:	e7f0      	b.n	801aad4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801aaf2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801aaf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aaf4:	8882      	ldrh	r2, [r0, #4]
 801aaf6:	880b      	ldrh	r3, [r1, #0]
 801aaf8:	4413      	add	r3, r2
 801aafa:	800b      	strh	r3, [r1, #0]
 801aafc:	88c2      	ldrh	r2, [r0, #6]
 801aafe:	884b      	ldrh	r3, [r1, #2]
 801ab00:	4413      	add	r3, r2
 801ab02:	4602      	mov	r2, r0
 801ab04:	804b      	strh	r3, [r1, #2]
 801ab06:	4605      	mov	r5, r0
 801ab08:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801ab0c:	460c      	mov	r4, r1
 801ab0e:	6851      	ldr	r1, [r2, #4]
 801ab10:	466b      	mov	r3, sp
 801ab12:	c303      	stmia	r3!, {r0, r1}
 801ab14:	4621      	mov	r1, r4
 801ab16:	4668      	mov	r0, sp
 801ab18:	f7f4 fcec 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 801ab1c:	466b      	mov	r3, sp
 801ab1e:	cb03      	ldmia	r3!, {r0, r1}
 801ab20:	6020      	str	r0, [r4, #0]
 801ab22:	6061      	str	r1, [r4, #4]
 801ab24:	6968      	ldr	r0, [r5, #20]
 801ab26:	b128      	cbz	r0, 801ab34 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801ab28:	6803      	ldr	r3, [r0, #0]
 801ab2a:	691b      	ldr	r3, [r3, #16]
 801ab2c:	4621      	mov	r1, r4
 801ab2e:	4798      	blx	r3
 801ab30:	b003      	add	sp, #12
 801ab32:	bd30      	pop	{r4, r5, pc}
 801ab34:	f7ff fb1a 	bl	801a16c <_ZN8touchgfx11Application11getInstanceEv>
 801ab38:	6803      	ldr	r3, [r0, #0]
 801ab3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab3c:	e7f6      	b.n	801ab2c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801ab3e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ab3e:	b570      	push	{r4, r5, r6, lr}
 801ab40:	8882      	ldrh	r2, [r0, #4]
 801ab42:	880b      	ldrh	r3, [r1, #0]
 801ab44:	4413      	add	r3, r2
 801ab46:	800b      	strh	r3, [r1, #0]
 801ab48:	88c2      	ldrh	r2, [r0, #6]
 801ab4a:	884b      	ldrh	r3, [r1, #2]
 801ab4c:	460c      	mov	r4, r1
 801ab4e:	4413      	add	r3, r2
 801ab50:	804b      	strh	r3, [r1, #2]
 801ab52:	4605      	mov	r5, r0
 801ab54:	1d01      	adds	r1, r0, #4
 801ab56:	4620      	mov	r0, r4
 801ab58:	f7f4 fccc 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 801ab5c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ab60:	b163      	cbz	r3, 801ab7c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ab62:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ab66:	b933      	cbnz	r3, 801ab76 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801ab68:	bd70      	pop	{r4, r5, r6, pc}
 801ab6a:	6803      	ldr	r3, [r0, #0]
 801ab6c:	4621      	mov	r1, r4
 801ab6e:	6a1b      	ldr	r3, [r3, #32]
 801ab70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab74:	4718      	bx	r3
 801ab76:	6968      	ldr	r0, [r5, #20]
 801ab78:	2800      	cmp	r0, #0
 801ab7a:	d1f6      	bne.n	801ab6a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801ab7c:	bd70      	pop	{r4, r5, r6, pc}

0801ab7e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801ab7e:	b510      	push	{r4, lr}
 801ab80:	4604      	mov	r4, r0
 801ab82:	4608      	mov	r0, r1
 801ab84:	2300      	movs	r3, #0
 801ab86:	8023      	strh	r3, [r4, #0]
 801ab88:	8063      	strh	r3, [r4, #2]
 801ab8a:	6803      	ldr	r3, [r0, #0]
 801ab8c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ab90:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801ab94:	80a1      	strh	r1, [r4, #4]
 801ab96:	80e2      	strh	r2, [r4, #6]
 801ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab9a:	4621      	mov	r1, r4
 801ab9c:	4798      	blx	r3
 801ab9e:	4620      	mov	r0, r4
 801aba0:	bd10      	pop	{r4, pc}
	...

0801aba4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801aba4:	b530      	push	{r4, r5, lr}
 801aba6:	8083      	strh	r3, [r0, #4]
 801aba8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801abac:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801abb0:	7183      	strb	r3, [r0, #6]
 801abb2:	79c3      	ldrb	r3, [r0, #7]
 801abb4:	6101      	str	r1, [r0, #16]
 801abb6:	f365 0306 	bfi	r3, r5, #0, #7
 801abba:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801abbe:	8282      	strh	r2, [r0, #20]
 801abc0:	f365 13c7 	bfi	r3, r5, #7, #1
 801abc4:	71c3      	strb	r3, [r0, #7]
 801abc6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801abca:	7203      	strb	r3, [r0, #8]
 801abcc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801abd0:	7243      	strb	r3, [r0, #9]
 801abd2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801abd6:	8143      	strh	r3, [r0, #10]
 801abd8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801abdc:	8183      	strh	r3, [r0, #12]
 801abde:	4b01      	ldr	r3, [pc, #4]	; (801abe4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801abe0:	6003      	str	r3, [r0, #0]
 801abe2:	bd30      	pop	{r4, r5, pc}
 801abe4:	08021868 	.word	0x08021868

0801abe8 <_ZNK8touchgfx9ConstFont4findEt>:
 801abe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abea:	8a84      	ldrh	r4, [r0, #20]
 801abec:	2500      	movs	r5, #0
 801abee:	3c01      	subs	r4, #1
 801abf0:	260e      	movs	r6, #14
 801abf2:	42a5      	cmp	r5, r4
 801abf4:	dc0c      	bgt.n	801ac10 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801abf6:	192a      	adds	r2, r5, r4
 801abf8:	6903      	ldr	r3, [r0, #16]
 801abfa:	1052      	asrs	r2, r2, #1
 801abfc:	fb06 3302 	mla	r3, r6, r2, r3
 801ac00:	889f      	ldrh	r7, [r3, #4]
 801ac02:	42b9      	cmp	r1, r7
 801ac04:	da01      	bge.n	801ac0a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801ac06:	1e54      	subs	r4, r2, #1
 801ac08:	e7f3      	b.n	801abf2 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801ac0a:	dd02      	ble.n	801ac12 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801ac0c:	1c55      	adds	r5, r2, #1
 801ac0e:	e7f0      	b.n	801abf2 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801ac10:	2300      	movs	r3, #0
 801ac12:	4618      	mov	r0, r3
 801ac14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ac16 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801ac16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac18:	4605      	mov	r5, r0
 801ac1a:	4617      	mov	r7, r2
 801ac1c:	461e      	mov	r6, r3
 801ac1e:	f7ff ffe3 	bl	801abe8 <_ZNK8touchgfx9ConstFont4findEt>
 801ac22:	b9e0      	cbnz	r0, 801ac5e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801ac24:	b911      	cbnz	r1, 801ac2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801ac26:	2400      	movs	r4, #0
 801ac28:	4620      	mov	r0, r4
 801ac2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac2c:	290a      	cmp	r1, #10
 801ac2e:	d0fa      	beq.n	801ac26 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801ac30:	682b      	ldr	r3, [r5, #0]
 801ac32:	4628      	mov	r0, r5
 801ac34:	691b      	ldr	r3, [r3, #16]
 801ac36:	4798      	blx	r3
 801ac38:	4601      	mov	r1, r0
 801ac3a:	4628      	mov	r0, r5
 801ac3c:	f7ff ffd4 	bl	801abe8 <_ZNK8touchgfx9ConstFont4findEt>
 801ac40:	4604      	mov	r4, r0
 801ac42:	2800      	cmp	r0, #0
 801ac44:	d0ef      	beq.n	801ac26 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801ac46:	682b      	ldr	r3, [r5, #0]
 801ac48:	4621      	mov	r1, r4
 801ac4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ac4c:	4628      	mov	r0, r5
 801ac4e:	4798      	blx	r3
 801ac50:	6038      	str	r0, [r7, #0]
 801ac52:	682b      	ldr	r3, [r5, #0]
 801ac54:	4628      	mov	r0, r5
 801ac56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac58:	4798      	blx	r3
 801ac5a:	7030      	strb	r0, [r6, #0]
 801ac5c:	e7e4      	b.n	801ac28 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801ac5e:	4604      	mov	r4, r0
 801ac60:	e7f1      	b.n	801ac46 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801ac62 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801ac62:	2002      	movs	r0, #2
 801ac64:	4770      	bx	lr

0801ac66 <_ZN8touchgfx12GestureEventD1Ev>:
 801ac66:	4770      	bx	lr

0801ac68 <_ZN8touchgfx12GestureEventD0Ev>:
 801ac68:	b510      	push	{r4, lr}
 801ac6a:	210c      	movs	r1, #12
 801ac6c:	4604      	mov	r4, r0
 801ac6e:	f003 fe10 	bl	801e892 <_ZdlPvj>
 801ac72:	4620      	mov	r0, r4
 801ac74:	bd10      	pop	{r4, pc}
	...

0801ac78 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801ac78:	b530      	push	{r4, r5, lr}
 801ac7a:	460d      	mov	r5, r1
 801ac7c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ac7e:	b087      	sub	sp, #28
 801ac80:	4604      	mov	r4, r0
 801ac82:	b301      	cbz	r1, 801acc6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801ac84:	a801      	add	r0, sp, #4
 801ac86:	f7ff ff7a 	bl	801ab7e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ac8a:	892a      	ldrh	r2, [r5, #8]
 801ac8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ac90:	7928      	ldrb	r0, [r5, #4]
 801ac92:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ac96:	f88d 0010 	strb.w	r0, [sp, #16]
 801ac9a:	1ad2      	subs	r2, r2, r3
 801ac9c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ac9e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801aca0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801aca4:	441a      	add	r2, r3
 801aca6:	896b      	ldrh	r3, [r5, #10]
 801aca8:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801acac:	f8ad 2014 	strh.w	r2, [sp, #20]
 801acb0:	1b5b      	subs	r3, r3, r5
 801acb2:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801acb4:	442b      	add	r3, r5
 801acb6:	4d05      	ldr	r5, [pc, #20]	; (801accc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801acb8:	9503      	str	r5, [sp, #12]
 801acba:	f8ad 3016 	strh.w	r3, [sp, #22]
 801acbe:	6803      	ldr	r3, [r0, #0]
 801acc0:	a903      	add	r1, sp, #12
 801acc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801acc4:	4798      	blx	r3
 801acc6:	b007      	add	sp, #28
 801acc8:	bd30      	pop	{r4, r5, pc}
 801acca:	bf00      	nop
 801accc:	080218bc 	.word	0x080218bc

0801acd0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801acd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acd2:	460c      	mov	r4, r1
 801acd4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801acd6:	b089      	sub	sp, #36	; 0x24
 801acd8:	4605      	mov	r5, r0
 801acda:	2900      	cmp	r1, #0
 801acdc:	d053      	beq.n	801ad86 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801acde:	4668      	mov	r0, sp
 801ace0:	f7ff ff4d 	bl	801ab7e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ace4:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801ace6:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801ace8:	8922      	ldrh	r2, [r4, #8]
 801acea:	88e1      	ldrh	r1, [r4, #6]
 801acec:	443a      	add	r2, r7
 801acee:	4431      	add	r1, r6
 801acf0:	b212      	sxth	r2, r2
 801acf2:	b209      	sxth	r1, r1
 801acf4:	4668      	mov	r0, sp
 801acf6:	f7f4 fb87 	bl	800f408 <_ZNK8touchgfx4Rect9intersectEss>
 801acfa:	b1c8      	cbz	r0, 801ad30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801acfc:	89a2      	ldrh	r2, [r4, #12]
 801acfe:	8961      	ldrh	r1, [r4, #10]
 801ad00:	443a      	add	r2, r7
 801ad02:	4431      	add	r1, r6
 801ad04:	b212      	sxth	r2, r2
 801ad06:	b209      	sxth	r1, r1
 801ad08:	4668      	mov	r0, sp
 801ad0a:	f7f4 fb7d 	bl	800f408 <_ZNK8touchgfx4Rect9intersectEss>
 801ad0e:	b978      	cbnz	r0, 801ad30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801ad10:	4b1e      	ldr	r3, [pc, #120]	; (801ad8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801ad12:	9304      	str	r3, [sp, #16]
 801ad14:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ad18:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ad1c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ad20:	2302      	movs	r3, #2
 801ad22:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ad24:	f88d 3014 	strb.w	r3, [sp, #20]
 801ad28:	6803      	ldr	r3, [r0, #0]
 801ad2a:	a904      	add	r1, sp, #16
 801ad2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad2e:	4798      	blx	r3
 801ad30:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801ad32:	a802      	add	r0, sp, #8
 801ad34:	f7ff ff23 	bl	801ab7e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ad38:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ad3c:	88e0      	ldrh	r0, [r4, #6]
 801ad3e:	8961      	ldrh	r1, [r4, #10]
 801ad40:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801ad44:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801ad48:	8923      	ldrh	r3, [r4, #8]
 801ad4a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801ad4c:	7927      	ldrb	r7, [r4, #4]
 801ad4e:	f88d 7014 	strb.w	r7, [sp, #20]
 801ad52:	1a80      	subs	r0, r0, r2
 801ad54:	1a89      	subs	r1, r1, r2
 801ad56:	89a2      	ldrh	r2, [r4, #12]
 801ad58:	4c0d      	ldr	r4, [pc, #52]	; (801ad90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801ad5a:	9404      	str	r4, [sp, #16]
 801ad5c:	4470      	add	r0, lr
 801ad5e:	eba3 030c 	sub.w	r3, r3, ip
 801ad62:	eba2 020c 	sub.w	r2, r2, ip
 801ad66:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ad6a:	4433      	add	r3, r6
 801ad6c:	4471      	add	r1, lr
 801ad6e:	4432      	add	r2, r6
 801ad70:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ad72:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ad76:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ad7a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ad7e:	6803      	ldr	r3, [r0, #0]
 801ad80:	a904      	add	r1, sp, #16
 801ad82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ad84:	4798      	blx	r3
 801ad86:	b009      	add	sp, #36	; 0x24
 801ad88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad8a:	bf00      	nop
 801ad8c:	080203fc 	.word	0x080203fc
 801ad90:	080203e8 	.word	0x080203e8

0801ad94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad98:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801ad9a:	790b      	ldrb	r3, [r1, #4]
 801ad9c:	b0a1      	sub	sp, #132	; 0x84
 801ad9e:	4604      	mov	r4, r0
 801ada0:	460d      	mov	r5, r1
 801ada2:	b16a      	cbz	r2, 801adc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801ada4:	b963      	cbnz	r3, 801adc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801ada6:	b021      	add	sp, #132	; 0x84
 801ada8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adac:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801adb0:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801adb4:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801adb8:	1d20      	adds	r0, r4, #4
 801adba:	f7f4 fe31 	bl	800fa20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801adbe:	e0a1      	b.n	801af04 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x170>
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	f040 809f 	bne.w	801af04 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x170>
 801adc6:	4a65      	ldr	r2, [pc, #404]	; (801af5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801adc8:	6812      	ldr	r2, [r2, #0]
 801adca:	f892 b049 	ldrb.w	fp, [r2, #73]	; 0x49
 801adce:	86a3      	strh	r3, [r4, #52]	; 0x34
 801add0:	f1bb 0f03 	cmp.w	fp, #3
 801add4:	86e3      	strh	r3, [r4, #54]	; 0x36
 801add6:	dde9      	ble.n	801adac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801add8:	f1bb 0f0c 	cmp.w	fp, #12
 801addc:	6323      	str	r3, [r4, #48]	; 0x30
 801adde:	f04f 0303 	mov.w	r3, #3
 801ade2:	bfdc      	itt	le
 801ade4:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801ade8:	fb92 f3f3 	sdivle	r3, r2, r3
 801adec:	9300      	str	r3, [sp, #0]
 801adee:	4b5c      	ldr	r3, [pc, #368]	; (801af60 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801adf0:	495c      	ldr	r1, [pc, #368]	; (801af64 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801adf2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801adf6:	4b5c      	ldr	r3, [pc, #368]	; (801af68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801adf8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801adfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae00:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ae04:	ab0e      	add	r3, sp, #56	; 0x38
 801ae06:	2600      	movs	r6, #0
 801ae08:	2248      	movs	r2, #72	; 0x48
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801ae10:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801ae14:	f003 fdca 	bl	801e9ac <memcpy>
 801ae18:	f04f 32ff 	mov.w	r2, #4294967295
 801ae1c:	f8cd b008 	str.w	fp, [sp, #8]
 801ae20:	9206      	str	r2, [sp, #24]
 801ae22:	f04f 0a01 	mov.w	sl, #1
 801ae26:	9007      	str	r0, [sp, #28]
 801ae28:	9a00      	ldr	r2, [sp, #0]
 801ae2a:	9b02      	ldr	r3, [sp, #8]
 801ae2c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ae30:	f10a 32ff 	add.w	r2, sl, #4294967295
 801ae34:	9201      	str	r2, [sp, #4]
 801ae36:	9a07      	ldr	r2, [sp, #28]
 801ae38:	b29b      	uxth	r3, r3
 801ae3a:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801ae3e:	3f04      	subs	r7, #4
 801ae40:	9303      	str	r3, [sp, #12]
 801ae42:	2300      	movs	r3, #0
 801ae44:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801ae48:	9309      	str	r3, [sp, #36]	; 0x24
 801ae4a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801ae4e:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801ae52:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801ae56:	fb13 f302 	smulbb	r3, r3, r2
 801ae5a:	b29b      	uxth	r3, r3
 801ae5c:	9304      	str	r3, [sp, #16]
 801ae5e:	683b      	ldr	r3, [r7, #0]
 801ae60:	fb13 f302 	smulbb	r3, r3, r2
 801ae64:	b29b      	uxth	r3, r3
 801ae66:	9305      	str	r3, [sp, #20]
 801ae68:	9b04      	ldr	r3, [sp, #16]
 801ae6a:	4498      	add	r8, r3
 801ae6c:	9b05      	ldr	r3, [sp, #20]
 801ae6e:	4499      	add	r9, r3
 801ae70:	fa0f f888 	sxth.w	r8, r8
 801ae74:	fa0f f989 	sxth.w	r9, r9
 801ae78:	464a      	mov	r2, r9
 801ae7a:	4641      	mov	r1, r8
 801ae7c:	a80a      	add	r0, sp, #40	; 0x28
 801ae7e:	f7f4 fac3 	bl	800f408 <_ZNK8touchgfx4Rect9intersectEss>
 801ae82:	b380      	cbz	r0, 801aee6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801ae84:	4641      	mov	r1, r8
 801ae86:	ab09      	add	r3, sp, #36	; 0x24
 801ae88:	464a      	mov	r2, r9
 801ae8a:	1d20      	adds	r0, r4, #4
 801ae8c:	f7f4 fdc8 	bl	800fa20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ae90:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ae92:	b341      	cbz	r1, 801aee6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801ae94:	42b1      	cmp	r1, r6
 801ae96:	d026      	beq.n	801aee6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801ae98:	a80c      	add	r0, sp, #48	; 0x30
 801ae9a:	f7ff fe70 	bl	801ab7e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ae9e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801aea2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801aea6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801aeaa:	2002      	movs	r0, #2
 801aeac:	fb92 f2f0 	sdiv	r2, r2, r0
 801aeb0:	440a      	add	r2, r1
 801aeb2:	1a99      	subs	r1, r3, r2
 801aeb4:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801aeb8:	fb93 f3f0 	sdiv	r3, r3, r0
 801aebc:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801aec0:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801aec4:	4403      	add	r3, r0
 801aec6:	1ad3      	subs	r3, r2, r3
 801aec8:	435b      	muls	r3, r3
 801aeca:	9a06      	ldr	r2, [sp, #24]
 801aecc:	fb01 3301 	mla	r3, r1, r1, r3
 801aed0:	4293      	cmp	r3, r2
 801aed2:	d208      	bcs.n	801aee6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801aed4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801aed8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801aeda:	86a2      	strh	r2, [r4, #52]	; 0x34
 801aedc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801aee0:	6326      	str	r6, [r4, #48]	; 0x30
 801aee2:	86e2      	strh	r2, [r4, #54]	; 0x36
 801aee4:	9306      	str	r3, [sp, #24]
 801aee6:	9b01      	ldr	r3, [sp, #4]
 801aee8:	3302      	adds	r3, #2
 801aeea:	2b08      	cmp	r3, #8
 801aeec:	9301      	str	r3, [sp, #4]
 801aeee:	f107 0710 	add.w	r7, r7, #16
 801aef2:	dda6      	ble.n	801ae42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xae>
 801aef4:	9b02      	ldr	r3, [sp, #8]
 801aef6:	445b      	add	r3, fp
 801aef8:	9302      	str	r3, [sp, #8]
 801aefa:	9b00      	ldr	r3, [sp, #0]
 801aefc:	f10a 0a01 	add.w	sl, sl, #1
 801af00:	4553      	cmp	r3, sl
 801af02:	da91      	bge.n	801ae28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801af04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801af06:	2900      	cmp	r1, #0
 801af08:	f43f af4d 	beq.w	801ada6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801af0c:	a80c      	add	r0, sp, #48	; 0x30
 801af0e:	f7ff fe36 	bl	801ab7e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801af12:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801af16:	88ea      	ldrh	r2, [r5, #6]
 801af18:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801af1c:	7929      	ldrb	r1, [r5, #4]
 801af1e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801af22:	1ad2      	subs	r2, r2, r3
 801af24:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801af26:	441a      	add	r2, r3
 801af28:	892b      	ldrh	r3, [r5, #8]
 801af2a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801af2e:	1a1b      	subs	r3, r3, r0
 801af30:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801af32:	4403      	add	r3, r0
 801af34:	480d      	ldr	r0, [pc, #52]	; (801af6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801af36:	900e      	str	r0, [sp, #56]	; 0x38
 801af38:	2600      	movs	r6, #0
 801af3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801af3c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801af40:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801af44:	6803      	ldr	r3, [r0, #0]
 801af46:	a90e      	add	r1, sp, #56	; 0x38
 801af48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af4a:	4798      	blx	r3
 801af4c:	792b      	ldrb	r3, [r5, #4]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	f43f af29 	beq.w	801ada6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801af54:	6326      	str	r6, [r4, #48]	; 0x30
 801af56:	86a6      	strh	r6, [r4, #52]	; 0x34
 801af58:	86e6      	strh	r6, [r4, #54]	; 0x36
 801af5a:	e724      	b.n	801ada6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801af5c:	20009d70 	.word	0x20009d70
 801af60:	20009d62 	.word	0x20009d62
 801af64:	0801ffac 	.word	0x0801ffac
 801af68:	20009d64 	.word	0x20009d64
 801af6c:	080203fc 	.word	0x080203fc

0801af70 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801af70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af72:	4604      	mov	r4, r0
 801af74:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801af78:	3201      	adds	r2, #1
 801af7a:	d114      	bne.n	801afa6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801af7c:	6803      	ldr	r3, [r0, #0]
 801af7e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801af82:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801af86:	f8ad 1006 	strh.w	r1, [sp, #6]
 801af8a:	2200      	movs	r2, #0
 801af8c:	4669      	mov	r1, sp
 801af8e:	f8ad 2000 	strh.w	r2, [sp]
 801af92:	f8ad 2002 	strh.w	r2, [sp, #2]
 801af96:	f8ad 5004 	strh.w	r5, [sp, #4]
 801af9a:	6a1b      	ldr	r3, [r3, #32]
 801af9c:	4798      	blx	r3
 801af9e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801afa2:	e884 0003 	stmia.w	r4, {r0, r1}
 801afa6:	4620      	mov	r0, r4
 801afa8:	b003      	add	sp, #12
 801afaa:	bd30      	pop	{r4, r5, pc}

0801afac <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801afac:	b513      	push	{r0, r1, r4, lr}
 801afae:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801afb2:	3301      	adds	r3, #1
 801afb4:	4604      	mov	r4, r0
 801afb6:	d109      	bne.n	801afcc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801afb8:	4601      	mov	r1, r0
 801afba:	4668      	mov	r0, sp
 801afbc:	f7ff fddf 	bl	801ab7e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801afc0:	f8bd 3000 	ldrh.w	r3, [sp]
 801afc4:	8423      	strh	r3, [r4, #32]
 801afc6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801afca:	8463      	strh	r3, [r4, #34]	; 0x22
 801afcc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801afd0:	b002      	add	sp, #8
 801afd2:	bd10      	pop	{r4, pc}

0801afd4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801afd4:	b513      	push	{r0, r1, r4, lr}
 801afd6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801afda:	3301      	adds	r3, #1
 801afdc:	4604      	mov	r4, r0
 801afde:	d109      	bne.n	801aff4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801afe0:	4601      	mov	r1, r0
 801afe2:	4668      	mov	r0, sp
 801afe4:	f7ff fdcb 	bl	801ab7e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801afe8:	f8bd 3000 	ldrh.w	r3, [sp]
 801afec:	8423      	strh	r3, [r4, #32]
 801afee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801aff2:	8463      	strh	r3, [r4, #34]	; 0x22
 801aff4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801aff8:	b002      	add	sp, #8
 801affa:	bd10      	pop	{r4, pc}

0801affc <_ZN8touchgfx6ScreenC1Ev>:
 801affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801affe:	4605      	mov	r5, r0
 801b000:	4b18      	ldr	r3, [pc, #96]	; (801b064 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b002:	f845 3b04 	str.w	r3, [r5], #4
 801b006:	2301      	movs	r3, #1
 801b008:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801b00c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801b010:	4b15      	ldr	r3, [pc, #84]	; (801b068 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b012:	4916      	ldr	r1, [pc, #88]	; (801b06c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801b014:	f9b3 7000 	ldrsh.w	r7, [r3]
 801b018:	4b15      	ldr	r3, [pc, #84]	; (801b070 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801b01a:	6041      	str	r1, [r0, #4]
 801b01c:	2200      	movs	r2, #0
 801b01e:	8102      	strh	r2, [r0, #8]
 801b020:	8142      	strh	r2, [r0, #10]
 801b022:	8182      	strh	r2, [r0, #12]
 801b024:	81c2      	strh	r2, [r0, #14]
 801b026:	8202      	strh	r2, [r0, #16]
 801b028:	8242      	strh	r2, [r0, #18]
 801b02a:	8282      	strh	r2, [r0, #20]
 801b02c:	82c2      	strh	r2, [r0, #22]
 801b02e:	6182      	str	r2, [r0, #24]
 801b030:	61c2      	str	r2, [r0, #28]
 801b032:	6202      	str	r2, [r0, #32]
 801b034:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801b038:	62c2      	str	r2, [r0, #44]	; 0x2c
 801b03a:	6302      	str	r2, [r0, #48]	; 0x30
 801b03c:	8682      	strh	r2, [r0, #52]	; 0x34
 801b03e:	86c2      	strh	r2, [r0, #54]	; 0x36
 801b040:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b044:	4611      	mov	r1, r2
 801b046:	4604      	mov	r4, r0
 801b048:	4628      	mov	r0, r5
 801b04a:	f7f4 f814 	bl	800f076 <_ZN8touchgfx8Drawable5setXYEss>
 801b04e:	4639      	mov	r1, r7
 801b050:	4628      	mov	r0, r5
 801b052:	f7f4 f82e 	bl	800f0b2 <_ZN8touchgfx8Drawable8setWidthEs>
 801b056:	4628      	mov	r0, r5
 801b058:	4631      	mov	r1, r6
 801b05a:	f7f4 f839 	bl	800f0d0 <_ZN8touchgfx8Drawable9setHeightEs>
 801b05e:	4620      	mov	r0, r4
 801b060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b062:	bf00      	nop
 801b064:	080218d0 	.word	0x080218d0
 801b068:	20009d62 	.word	0x20009d62
 801b06c:	080202c0 	.word	0x080202c0
 801b070:	20009d64 	.word	0x20009d64

0801b074 <_ZN8touchgfx6Screen4drawEv>:
 801b074:	b507      	push	{r0, r1, r2, lr}
 801b076:	4b0b      	ldr	r3, [pc, #44]	; (801b0a4 <_ZN8touchgfx6Screen4drawEv+0x30>)
 801b078:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b07c:	4b0a      	ldr	r3, [pc, #40]	; (801b0a8 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801b07e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b082:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b086:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b08a:	2300      	movs	r3, #0
 801b08c:	f8ad 3000 	strh.w	r3, [sp]
 801b090:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b094:	6803      	ldr	r3, [r0, #0]
 801b096:	4669      	mov	r1, sp
 801b098:	689b      	ldr	r3, [r3, #8]
 801b09a:	4798      	blx	r3
 801b09c:	b003      	add	sp, #12
 801b09e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b0a2:	bf00      	nop
 801b0a4:	20009d62 	.word	0x20009d62
 801b0a8:	20009d64 	.word	0x20009d64

0801b0ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0b0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b0b4:	b087      	sub	sp, #28
 801b0b6:	4681      	mov	r9, r0
 801b0b8:	460c      	mov	r4, r1
 801b0ba:	4615      	mov	r5, r2
 801b0bc:	b16b      	cbz	r3, 801b0da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b0be:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b0c2:	b153      	cbz	r3, 801b0da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b0c4:	4628      	mov	r0, r5
 801b0c6:	f7ff ff53 	bl	801af70 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b0ca:	4621      	mov	r1, r4
 801b0cc:	f7f4 f9cb 	bl	800f466 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b0d0:	69eb      	ldr	r3, [r5, #28]
 801b0d2:	b928      	cbnz	r0, 801b0e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801b0d4:	461d      	mov	r5, r3
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d1f4      	bne.n	801b0c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801b0da:	b007      	add	sp, #28
 801b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0e0:	ae02      	add	r6, sp, #8
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d04a      	beq.n	801b17c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801b0e6:	682b      	ldr	r3, [r5, #0]
 801b0e8:	4629      	mov	r1, r5
 801b0ea:	68db      	ldr	r3, [r3, #12]
 801b0ec:	4668      	mov	r0, sp
 801b0ee:	4798      	blx	r3
 801b0f0:	4628      	mov	r0, r5
 801b0f2:	f7ff ff5b 	bl	801afac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b0f6:	f8bd 7000 	ldrh.w	r7, [sp]
 801b0fa:	4407      	add	r7, r0
 801b0fc:	4628      	mov	r0, r5
 801b0fe:	f7ff ff69 	bl	801afd4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b102:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b106:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801b10a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801b10e:	4418      	add	r0, r3
 801b110:	4621      	mov	r1, r4
 801b112:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801b116:	f8ad 000a 	strh.w	r0, [sp, #10]
 801b11a:	b23f      	sxth	r7, r7
 801b11c:	4630      	mov	r0, r6
 801b11e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b122:	f8ad 7008 	strh.w	r7, [sp, #8]
 801b126:	f7f4 f9e5 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 801b12a:	4628      	mov	r0, r5
 801b12c:	f7ff ff20 	bl	801af70 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b130:	4602      	mov	r2, r0
 801b132:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b136:	ab04      	add	r3, sp, #16
 801b138:	e883 0003 	stmia.w	r3, {r0, r1}
 801b13c:	4611      	mov	r1, r2
 801b13e:	4618      	mov	r0, r3
 801b140:	f7f4 f9d8 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 801b144:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801b148:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b14c:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801b150:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801b154:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801b158:	455a      	cmp	r2, fp
 801b15a:	f040 8096 	bne.w	801b28a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801b15e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b162:	4553      	cmp	r3, sl
 801b164:	f040 8091 	bne.w	801b28a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801b168:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b16c:	4543      	cmp	r3, r8
 801b16e:	f040 808c 	bne.w	801b28a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801b172:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b176:	42bb      	cmp	r3, r7
 801b178:	f040 8087 	bne.w	801b28a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801b17c:	4628      	mov	r0, r5
 801b17e:	f7ff fef7 	bl	801af70 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b182:	6861      	ldr	r1, [r4, #4]
 801b184:	4602      	mov	r2, r0
 801b186:	6820      	ldr	r0, [r4, #0]
 801b188:	4633      	mov	r3, r6
 801b18a:	c303      	stmia	r3!, {r0, r1}
 801b18c:	4611      	mov	r1, r2
 801b18e:	4630      	mov	r0, r6
 801b190:	f7f4 f9b0 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 801b194:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d09e      	beq.n	801b0da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b19c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d09a      	beq.n	801b0da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b1a4:	4628      	mov	r0, r5
 801b1a6:	f7ff ff01 	bl	801afac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b1aa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b1ae:	1a18      	subs	r0, r3, r0
 801b1b0:	f8ad 0008 	strh.w	r0, [sp, #8]
 801b1b4:	4628      	mov	r0, r5
 801b1b6:	f7ff ff0d 	bl	801afd4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b1ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b1be:	1a18      	subs	r0, r3, r0
 801b1c0:	f8ad 000a 	strh.w	r0, [sp, #10]
 801b1c4:	682b      	ldr	r3, [r5, #0]
 801b1c6:	4631      	mov	r1, r6
 801b1c8:	689b      	ldr	r3, [r3, #8]
 801b1ca:	4628      	mov	r0, r5
 801b1cc:	4798      	blx	r3
 801b1ce:	e784      	b.n	801b0da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801b1d0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b1d4:	4553      	cmp	r3, sl
 801b1d6:	da10      	bge.n	801b1fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801b1d8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b1dc:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b1e0:	ebaa 0303 	sub.w	r3, sl, r3
 801b1e4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b1e8:	f8ad 2008 	strh.w	r2, [sp, #8]
 801b1ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b1f0:	69ea      	ldr	r2, [r5, #28]
 801b1f2:	4631      	mov	r1, r6
 801b1f4:	4648      	mov	r0, r9
 801b1f6:	f7ff ff59 	bl	801b0ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b1fa:	f9b4 3000 	ldrsh.w	r3, [r4]
 801b1fe:	455b      	cmp	r3, fp
 801b200:	da0e      	bge.n	801b220 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801b202:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b206:	ebab 0303 	sub.w	r3, fp, r3
 801b20a:	f8ad a00a 	strh.w	sl, [sp, #10]
 801b20e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b212:	f8ad 700e 	strh.w	r7, [sp, #14]
 801b216:	69ea      	ldr	r2, [r5, #28]
 801b218:	4631      	mov	r1, r6
 801b21a:	4648      	mov	r0, r9
 801b21c:	f7ff ff46 	bl	801b0ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b220:	8822      	ldrh	r2, [r4, #0]
 801b222:	88a3      	ldrh	r3, [r4, #4]
 801b224:	44d8      	add	r8, fp
 801b226:	4413      	add	r3, r2
 801b228:	b29b      	uxth	r3, r3
 801b22a:	fa1f f888 	uxth.w	r8, r8
 801b22e:	fa0f f288 	sxth.w	r2, r8
 801b232:	b219      	sxth	r1, r3
 801b234:	4291      	cmp	r1, r2
 801b236:	dd0e      	ble.n	801b256 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b238:	eba3 0308 	sub.w	r3, r3, r8
 801b23c:	f8ad 2008 	strh.w	r2, [sp, #8]
 801b240:	f8ad a00a 	strh.w	sl, [sp, #10]
 801b244:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b248:	f8ad 700e 	strh.w	r7, [sp, #14]
 801b24c:	69ea      	ldr	r2, [r5, #28]
 801b24e:	4631      	mov	r1, r6
 801b250:	4648      	mov	r0, r9
 801b252:	f7ff ff2b 	bl	801b0ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b256:	88e2      	ldrh	r2, [r4, #6]
 801b258:	8863      	ldrh	r3, [r4, #2]
 801b25a:	4457      	add	r7, sl
 801b25c:	4413      	add	r3, r2
 801b25e:	b29b      	uxth	r3, r3
 801b260:	b2bf      	uxth	r7, r7
 801b262:	b23a      	sxth	r2, r7
 801b264:	b219      	sxth	r1, r3
 801b266:	428a      	cmp	r2, r1
 801b268:	da88      	bge.n	801b17c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801b26a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b26e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b272:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b276:	1bdb      	subs	r3, r3, r7
 801b278:	f8ad 0008 	strh.w	r0, [sp, #8]
 801b27c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b280:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b284:	69ea      	ldr	r2, [r5, #28]
 801b286:	4631      	mov	r1, r6
 801b288:	e006      	b.n	801b298 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801b28a:	f1b8 0f00 	cmp.w	r8, #0
 801b28e:	d001      	beq.n	801b294 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801b290:	2f00      	cmp	r7, #0
 801b292:	d19d      	bne.n	801b1d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801b294:	69ea      	ldr	r2, [r5, #28]
 801b296:	4621      	mov	r1, r4
 801b298:	4648      	mov	r0, r9
 801b29a:	f7ff ff07 	bl	801b0ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b29e:	e76d      	b.n	801b17c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801b2a0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b2a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b2a2:	aa02      	add	r2, sp, #8
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	f842 3d04 	str.w	r3, [r2, #-4]!
 801b2aa:	4604      	mov	r4, r0
 801b2ac:	3004      	adds	r0, #4
 801b2ae:	460d      	mov	r5, r1
 801b2b0:	f7f4 fcb7 	bl	800fc22 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b2b4:	9a01      	ldr	r2, [sp, #4]
 801b2b6:	b11a      	cbz	r2, 801b2c0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801b2b8:	4629      	mov	r1, r5
 801b2ba:	4620      	mov	r0, r4
 801b2bc:	f7ff fef6 	bl	801b0ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b2c0:	b003      	add	sp, #12
 801b2c2:	bd30      	pop	{r4, r5, pc}

0801b2c4 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b2c6:	4602      	mov	r2, r0
 801b2c8:	4604      	mov	r4, r0
 801b2ca:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b2ce:	460d      	mov	r5, r1
 801b2d0:	6851      	ldr	r1, [r2, #4]
 801b2d2:	466b      	mov	r3, sp
 801b2d4:	c303      	stmia	r3!, {r0, r1}
 801b2d6:	4629      	mov	r1, r5
 801b2d8:	4668      	mov	r0, sp
 801b2da:	f7f4 f90b 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 801b2de:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b2e2:	4669      	mov	r1, sp
 801b2e4:	b123      	cbz	r3, 801b2f0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801b2e6:	4620      	mov	r0, r4
 801b2e8:	f7ff ffda 	bl	801b2a0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b2ec:	b003      	add	sp, #12
 801b2ee:	bd30      	pop	{r4, r5, pc}
 801b2f0:	1d20      	adds	r0, r4, #4
 801b2f2:	f7f4 fb2a 	bl	800f94a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b2f6:	e7f9      	b.n	801b2ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801b2f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b2f8:	680a      	ldr	r2, [r1, #0]
 801b2fa:	460b      	mov	r3, r1
 801b2fc:	6952      	ldr	r2, [r2, #20]
 801b2fe:	1d01      	adds	r1, r0, #4
 801b300:	4618      	mov	r0, r3
 801b302:	4710      	bx	r2

0801b304 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801b304:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b308:	4b05      	ldr	r3, [pc, #20]	; (801b320 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x1c>)
 801b30a:	bf08      	it	eq
 801b30c:	2300      	moveq	r3, #0
 801b30e:	f011 0f20 	tst.w	r1, #32
 801b312:	bf14      	ite	ne
 801b314:	f44f 7280 	movne.w	r2, #256	; 0x100
 801b318:	2200      	moveq	r2, #0
 801b31a:	4318      	orrs	r0, r3
 801b31c:	4310      	orrs	r0, r2
 801b31e:	4770      	bx	lr
 801b320:	fffffe00 	.word	0xfffffe00

0801b324 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801b324:	7b43      	ldrb	r3, [r0, #13]
 801b326:	7201      	strb	r1, [r0, #8]
 801b328:	b289      	uxth	r1, r1
 801b32a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801b32e:	05ca      	lsls	r2, r1, #23
 801b330:	bf48      	it	mi
 801b332:	f043 0320 	orrmi.w	r3, r3, #32
 801b336:	7343      	strb	r3, [r0, #13]
 801b338:	058b      	lsls	r3, r1, #22
 801b33a:	bf42      	ittt	mi
 801b33c:	7b43      	ldrbmi	r3, [r0, #13]
 801b33e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801b342:	7343      	strbmi	r3, [r0, #13]
 801b344:	4770      	bx	lr
	...

0801b348 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b34a:	4d1c      	ldr	r5, [pc, #112]	; (801b3bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801b34c:	4604      	mov	r4, r0
 801b34e:	2700      	movs	r7, #0
 801b350:	2601      	movs	r6, #1
 801b352:	6863      	ldr	r3, [r4, #4]
 801b354:	b93b      	cbnz	r3, 801b366 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801b356:	6821      	ldr	r1, [r4, #0]
 801b358:	2900      	cmp	r1, #0
 801b35a:	d02c      	beq.n	801b3b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801b35c:	6828      	ldr	r0, [r5, #0]
 801b35e:	6803      	ldr	r3, [r0, #0]
 801b360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b362:	4798      	blx	r3
 801b364:	6060      	str	r0, [r4, #4]
 801b366:	7c23      	ldrb	r3, [r4, #16]
 801b368:	b16b      	cbz	r3, 801b386 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801b36a:	68e3      	ldr	r3, [r4, #12]
 801b36c:	b12b      	cbz	r3, 801b37a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801b36e:	881a      	ldrh	r2, [r3, #0]
 801b370:	b11a      	cbz	r2, 801b37a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801b372:	1c9a      	adds	r2, r3, #2
 801b374:	60e2      	str	r2, [r4, #12]
 801b376:	8818      	ldrh	r0, [r3, #0]
 801b378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b37a:	6828      	ldr	r0, [r5, #0]
 801b37c:	7427      	strb	r7, [r4, #16]
 801b37e:	6803      	ldr	r3, [r0, #0]
 801b380:	6821      	ldr	r1, [r4, #0]
 801b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b384:	4798      	blx	r3
 801b386:	6863      	ldr	r3, [r4, #4]
 801b388:	881a      	ldrh	r2, [r3, #0]
 801b38a:	b1a2      	cbz	r2, 801b3b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801b38c:	2a02      	cmp	r2, #2
 801b38e:	f103 0202 	add.w	r2, r3, #2
 801b392:	6062      	str	r2, [r4, #4]
 801b394:	d1ef      	bne.n	801b376 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801b396:	6828      	ldr	r0, [r5, #0]
 801b398:	6803      	ldr	r3, [r0, #0]
 801b39a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b39c:	68a3      	ldr	r3, [r4, #8]
 801b39e:	1d19      	adds	r1, r3, #4
 801b3a0:	60a1      	str	r1, [r4, #8]
 801b3a2:	6819      	ldr	r1, [r3, #0]
 801b3a4:	4790      	blx	r2
 801b3a6:	60e0      	str	r0, [r4, #12]
 801b3a8:	2800      	cmp	r0, #0
 801b3aa:	d0d2      	beq.n	801b352 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801b3ac:	8803      	ldrh	r3, [r0, #0]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d0cf      	beq.n	801b352 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801b3b2:	7426      	strb	r6, [r4, #16]
 801b3b4:	e7cd      	b.n	801b352 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801b3b6:	2000      	movs	r0, #0
 801b3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3ba:	bf00      	nop
 801b3bc:	20009d70 	.word	0x20009d70

0801b3c0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3c2:	4605      	mov	r5, r0
 801b3c4:	4608      	mov	r0, r1
 801b3c6:	b301      	cbz	r1, 801b40a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x4a>
 801b3c8:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801b3cc:	460b      	mov	r3, r1
 801b3ce:	f101 0708 	add.w	r7, r1, #8
 801b3d2:	4622      	mov	r2, r4
 801b3d4:	6818      	ldr	r0, [r3, #0]
 801b3d6:	6859      	ldr	r1, [r3, #4]
 801b3d8:	4626      	mov	r6, r4
 801b3da:	c603      	stmia	r6!, {r0, r1}
 801b3dc:	3308      	adds	r3, #8
 801b3de:	42bb      	cmp	r3, r7
 801b3e0:	4634      	mov	r4, r6
 801b3e2:	d1f7      	bne.n	801b3d4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b3e4:	6818      	ldr	r0, [r3, #0]
 801b3e6:	6030      	str	r0, [r6, #0]
 801b3e8:	889b      	ldrh	r3, [r3, #4]
 801b3ea:	80b3      	strh	r3, [r6, #4]
 801b3ec:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801b3f0:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
 801b3f4:	f013 0f08 	tst.w	r3, #8
 801b3f8:	bf14      	ite	ne
 801b3fa:	f44f 7380 	movne.w	r3, #256	; 0x100
 801b3fe:	2300      	moveq	r3, #0
 801b400:	430b      	orrs	r3, r1
 801b402:	425b      	negs	r3, r3
 801b404:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801b408:	4610      	mov	r0, r2
 801b40a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b40c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b40c:	b538      	push	{r3, r4, r5, lr}
 801b40e:	460c      	mov	r4, r1
 801b410:	6811      	ldr	r1, [r2, #0]
 801b412:	4610      	mov	r0, r2
 801b414:	68cd      	ldr	r5, [r1, #12]
 801b416:	4619      	mov	r1, r3
 801b418:	47a8      	blx	r5
 801b41a:	2800      	cmp	r0, #0
 801b41c:	bf08      	it	eq
 801b41e:	4620      	moveq	r0, r4
 801b420:	bd38      	pop	{r3, r4, r5, pc}

0801b422 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b422:	b570      	push	{r4, r5, r6, lr}
 801b424:	8810      	ldrh	r0, [r2, #0]
 801b426:	4283      	cmp	r3, r0
 801b428:	db17      	blt.n	801b45a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b42a:	1e48      	subs	r0, r1, #1
 801b42c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b430:	4283      	cmp	r3, r0
 801b432:	dc12      	bgt.n	801b45a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b434:	2400      	movs	r4, #0
 801b436:	428c      	cmp	r4, r1
 801b438:	da0f      	bge.n	801b45a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b43a:	1860      	adds	r0, r4, r1
 801b43c:	1040      	asrs	r0, r0, #1
 801b43e:	0085      	lsls	r5, r0, #2
 801b440:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b444:	42b3      	cmp	r3, r6
 801b446:	dd02      	ble.n	801b44e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b448:	3001      	adds	r0, #1
 801b44a:	b284      	uxth	r4, r0
 801b44c:	e7f3      	b.n	801b436 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b44e:	d102      	bne.n	801b456 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801b450:	442a      	add	r2, r5
 801b452:	8850      	ldrh	r0, [r2, #2]
 801b454:	bd70      	pop	{r4, r5, r6, pc}
 801b456:	b281      	uxth	r1, r0
 801b458:	e7ed      	b.n	801b436 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b45a:	2000      	movs	r0, #0
 801b45c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b460 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801b460:	b510      	push	{r4, lr}
 801b462:	8ac3      	ldrh	r3, [r0, #22]
 801b464:	4299      	cmp	r1, r3
 801b466:	db05      	blt.n	801b474 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801b468:	4b07      	ldr	r3, [pc, #28]	; (801b488 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801b46a:	4a08      	ldr	r2, [pc, #32]	; (801b48c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801b46c:	4808      	ldr	r0, [pc, #32]	; (801b490 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801b46e:	21ee      	movs	r1, #238	; 0xee
 801b470:	f003 fa2c 	bl	801e8cc <__assert_func>
 801b474:	8a83      	ldrh	r3, [r0, #20]
 801b476:	240a      	movs	r4, #10
 801b478:	4419      	add	r1, r3
 801b47a:	fbb1 f3f4 	udiv	r3, r1, r4
 801b47e:	fb04 1113 	mls	r1, r4, r3, r1
 801b482:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801b486:	bd10      	pop	{r4, pc}
 801b488:	0802191d 	.word	0x0802191d
 801b48c:	08021d52 	.word	0x08021d52
 801b490:	0802192b 	.word	0x0802192b

0801b494 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801b494:	b508      	push	{r3, lr}
 801b496:	8ac3      	ldrh	r3, [r0, #22]
 801b498:	4299      	cmp	r1, r3
 801b49a:	db05      	blt.n	801b4a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801b49c:	4b07      	ldr	r3, [pc, #28]	; (801b4bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801b49e:	4a08      	ldr	r2, [pc, #32]	; (801b4c0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801b4a0:	4808      	ldr	r0, [pc, #32]	; (801b4c4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801b4a2:	21c4      	movs	r1, #196	; 0xc4
 801b4a4:	f003 fa12 	bl	801e8cc <__assert_func>
 801b4a8:	8a83      	ldrh	r3, [r0, #20]
 801b4aa:	220a      	movs	r2, #10
 801b4ac:	4419      	add	r1, r3
 801b4ae:	fbb1 f3f2 	udiv	r3, r1, r2
 801b4b2:	fb02 1113 	mls	r1, r2, r3, r1
 801b4b6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801b4ba:	bd08      	pop	{r3, pc}
 801b4bc:	0802191d 	.word	0x0802191d
 801b4c0:	08021a9e 	.word	0x08021a9e
 801b4c4:	0802192b 	.word	0x0802192b

0801b4c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4cc:	4604      	mov	r4, r0
 801b4ce:	4689      	mov	r9, r1
 801b4d0:	4616      	mov	r6, r2
 801b4d2:	b942      	cbnz	r2, 801b4e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801b4d4:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801b4d8:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801b4dc:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801b4e0:	4630      	mov	r0, r6
 801b4e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4e6:	8895      	ldrh	r5, [r2, #4]
 801b4e8:	4613      	mov	r3, r2
 801b4ea:	f100 0240 	add.w	r2, r0, #64	; 0x40
 801b4ee:	f106 0e08 	add.w	lr, r6, #8
 801b4f2:	4692      	mov	sl, r2
 801b4f4:	6818      	ldr	r0, [r3, #0]
 801b4f6:	6859      	ldr	r1, [r3, #4]
 801b4f8:	4617      	mov	r7, r2
 801b4fa:	c703      	stmia	r7!, {r0, r1}
 801b4fc:	3308      	adds	r3, #8
 801b4fe:	4573      	cmp	r3, lr
 801b500:	463a      	mov	r2, r7
 801b502:	d1f7      	bne.n	801b4f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2c>
 801b504:	6818      	ldr	r0, [r3, #0]
 801b506:	6038      	str	r0, [r7, #0]
 801b508:	889b      	ldrh	r3, [r3, #4]
 801b50a:	80bb      	strh	r3, [r7, #4]
 801b50c:	f894 b04d 	ldrb.w	fp, [r4, #77]	; 0x4d
 801b510:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 801b514:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801b518:	f01b 0f10 	tst.w	fp, #16
 801b51c:	442b      	add	r3, r5
 801b51e:	bf14      	ite	ne
 801b520:	f44f 7880 	movne.w	r8, #256	; 0x100
 801b524:	f04f 0800 	moveq.w	r8, #0
 801b528:	b29a      	uxth	r2, r3
 801b52a:	ea48 0801 	orr.w	r8, r8, r1
 801b52e:	2a1d      	cmp	r2, #29
 801b530:	fa1f f788 	uxth.w	r7, r8
 801b534:	d843      	bhi.n	801b5be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf6>
 801b536:	2301      	movs	r3, #1
 801b538:	4093      	lsls	r3, r2
 801b53a:	4a56      	ldr	r2, [pc, #344]	; (801b694 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>)
 801b53c:	4213      	tst	r3, r2
 801b53e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801b542:	d114      	bne.n	801b56e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801b544:	f413 7f60 	tst.w	r3, #896	; 0x380
 801b548:	d03d      	beq.n	801b5c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfe>
 801b54a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801b54e:	fa1f f888 	uxth.w	r8, r8
 801b552:	eba1 0108 	sub.w	r1, r1, r8
 801b556:	4650      	mov	r0, sl
 801b558:	b209      	sxth	r1, r1
 801b55a:	f7ff fee3 	bl	801b324 <_ZN8touchgfx9GlyphNode6setTopEs>
 801b55e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801b562:	1bc7      	subs	r7, r0, r7
 801b564:	eba7 0808 	sub.w	r8, r7, r8
 801b568:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
 801b56c:	e025      	b.n	801b5ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 801b56e:	2100      	movs	r1, #0
 801b570:	f104 001a 	add.w	r0, r4, #26
 801b574:	f7ff ff8e 	bl	801b494 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b578:	f640 6333 	movw	r3, #3635	; 0xe33
 801b57c:	4298      	cmp	r0, r3
 801b57e:	4601      	mov	r1, r0
 801b580:	d10a      	bne.n	801b598 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801b582:	f8d9 3000 	ldr.w	r3, [r9]
 801b586:	4648      	mov	r0, r9
 801b588:	68db      	ldr	r3, [r3, #12]
 801b58a:	4798      	blx	r3
 801b58c:	7b41      	ldrb	r1, [r0, #13]
 801b58e:	7a00      	ldrb	r0, [r0, #8]
 801b590:	f7ff feb8 	bl	801b304 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801b594:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801b598:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801b59c:	4439      	add	r1, r7
 801b59e:	4441      	add	r1, r8
 801b5a0:	b209      	sxth	r1, r1
 801b5a2:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801b5a6:	4650      	mov	r0, sl
 801b5a8:	f7ff febc 	bl	801b324 <_ZN8touchgfx9GlyphNode6setTopEs>
 801b5ac:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801b5b0:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801b5b4:	1a9b      	subs	r3, r3, r2
 801b5b6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801b5ba:	4656      	mov	r6, sl
 801b5bc:	e790      	b.n	801b4e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801b5be:	f640 631b 	movw	r3, #3611	; 0xe1b
 801b5c2:	429d      	cmp	r5, r3
 801b5c4:	d005      	beq.n	801b5d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x10a>
 801b5c6:	f025 0302 	bic.w	r3, r5, #2
 801b5ca:	f640 621d 	movw	r2, #3613	; 0xe1d
 801b5ce:	4293      	cmp	r3, r2
 801b5d0:	d11c      	bne.n	801b60c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801b5d2:	1e6b      	subs	r3, r5, #1
 801b5d4:	b29b      	uxth	r3, r3
 801b5d6:	464a      	mov	r2, r9
 801b5d8:	4631      	mov	r1, r6
 801b5da:	4620      	mov	r0, r4
 801b5dc:	f7ff ff16 	bl	801b40c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b5e0:	7b41      	ldrb	r1, [r0, #13]
 801b5e2:	7a00      	ldrb	r0, [r0, #8]
 801b5e4:	f7ff fe8e 	bl	801b304 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801b5e8:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801b5ec:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 801b5f0:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	bfb4      	ite	lt
 801b5f8:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801b5fc:	2300      	movge	r3, #0
 801b5fe:	4313      	orrs	r3, r2
 801b600:	115a      	asrs	r2, r3, #5
 801b602:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801b606:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b60a:	e036      	b.n	801b67a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b2>
 801b60c:	4659      	mov	r1, fp
 801b60e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801b612:	f7ff fe77 	bl	801b304 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801b616:	f025 0310 	bic.w	r3, r5, #16
 801b61a:	f640 6209 	movw	r2, #3593	; 0xe09
 801b61e:	4293      	cmp	r3, r2
 801b620:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801b624:	d003      	beq.n	801b62e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x166>
 801b626:	f640 6313 	movw	r3, #3603	; 0xe13
 801b62a:	429d      	cmp	r5, r3
 801b62c:	d12f      	bne.n	801b68e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c6>
 801b62e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801b632:	f01b 0f80 	tst.w	fp, #128	; 0x80
 801b636:	bf14      	ite	ne
 801b638:	f44f 7880 	movne.w	r8, #256	; 0x100
 801b63c:	f04f 0800 	moveq.w	r8, #0
 801b640:	ea48 0803 	orr.w	r8, r8, r3
 801b644:	f640 6313 	movw	r3, #3603	; 0xe13
 801b648:	429d      	cmp	r5, r3
 801b64a:	bf1a      	itte	ne
 801b64c:	f105 33ff 	addne.w	r3, r5, #4294967295
 801b650:	b29b      	uxthne	r3, r3
 801b652:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801b656:	464a      	mov	r2, r9
 801b658:	4631      	mov	r1, r6
 801b65a:	4620      	mov	r0, r4
 801b65c:	f7ff fed6 	bl	801b40c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b660:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801b664:	7a82      	ldrb	r2, [r0, #10]
 801b666:	2b00      	cmp	r3, #0
 801b668:	bfb4      	ite	lt
 801b66a:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801b66e:	2300      	movge	r3, #0
 801b670:	4313      	orrs	r3, r2
 801b672:	eba8 0803 	sub.w	r8, r8, r3
 801b676:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801b67a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801b67e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801b682:	f7ff fe3f 	bl	801b304 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801b686:	1bc0      	subs	r0, r0, r7
 801b688:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801b68c:	e795      	b.n	801b5ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 801b68e:	2300      	movs	r3, #0
 801b690:	e7b9      	b.n	801b606 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13e>
 801b692:	bf00      	nop
 801b694:	3fc00079 	.word	0x3fc00079

0801b698 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b69c:	460d      	mov	r5, r1
 801b69e:	2600      	movs	r6, #0
 801b6a0:	f102 3eff 	add.w	lr, r2, #4294967295
 801b6a4:	b2b1      	uxth	r1, r6
 801b6a6:	4291      	cmp	r1, r2
 801b6a8:	da1a      	bge.n	801b6e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x48>
 801b6aa:	ebae 0101 	sub.w	r1, lr, r1
 801b6ae:	b28c      	uxth	r4, r1
 801b6b0:	8b01      	ldrh	r1, [r0, #24]
 801b6b2:	f835 7b02 	ldrh.w	r7, [r5], #2
 801b6b6:	428c      	cmp	r4, r1
 801b6b8:	db05      	blt.n	801b6c6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2e>
 801b6ba:	4b14      	ldr	r3, [pc, #80]	; (801b70c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801b6bc:	4a14      	ldr	r2, [pc, #80]	; (801b710 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 801b6be:	4815      	ldr	r0, [pc, #84]	; (801b714 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7c>)
 801b6c0:	21c4      	movs	r1, #196	; 0xc4
 801b6c2:	f003 f903 	bl	801e8cc <__assert_func>
 801b6c6:	8ac1      	ldrh	r1, [r0, #22]
 801b6c8:	4421      	add	r1, r4
 801b6ca:	f001 0101 	and.w	r1, r1, #1
 801b6ce:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b6d2:	3601      	adds	r6, #1
 801b6d4:	8a49      	ldrh	r1, [r1, #18]
 801b6d6:	42b9      	cmp	r1, r7
 801b6d8:	d0e4      	beq.n	801b6a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xc>
 801b6da:	2000      	movs	r0, #0
 801b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6e0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801b6e4:	2600      	movs	r6, #0
 801b6e6:	441f      	add	r7, r3
 801b6e8:	f100 041a 	add.w	r4, r0, #26
 801b6ec:	b2b1      	uxth	r1, r6
 801b6ee:	42b9      	cmp	r1, r7
 801b6f0:	da09      	bge.n	801b706 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6e>
 801b6f2:	4620      	mov	r0, r4
 801b6f4:	f7ff fece 	bl	801b494 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801b6f8:	f835 8016 	ldrh.w	r8, [r5, r6, lsl #1]
 801b6fc:	4580      	cmp	r8, r0
 801b6fe:	f106 0601 	add.w	r6, r6, #1
 801b702:	d0f3      	beq.n	801b6ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x54>
 801b704:	e7e9      	b.n	801b6da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801b706:	2001      	movs	r0, #1
 801b708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b70c:	0802191d 	.word	0x0802191d
 801b710:	08021eb4 	.word	0x08021eb4
 801b714:	0802192b 	.word	0x0802192b

0801b718 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801b718:	b538      	push	{r3, r4, r5, lr}
 801b71a:	8ac3      	ldrh	r3, [r0, #22]
 801b71c:	428b      	cmp	r3, r1
 801b71e:	da05      	bge.n	801b72c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801b720:	4b08      	ldr	r3, [pc, #32]	; (801b744 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801b722:	4a09      	ldr	r2, [pc, #36]	; (801b748 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801b724:	4809      	ldr	r0, [pc, #36]	; (801b74c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801b726:	21c9      	movs	r1, #201	; 0xc9
 801b728:	f003 f8d0 	bl	801e8cc <__assert_func>
 801b72c:	8a82      	ldrh	r2, [r0, #20]
 801b72e:	250a      	movs	r5, #10
 801b730:	440a      	add	r2, r1
 801b732:	1a5b      	subs	r3, r3, r1
 801b734:	fbb2 f4f5 	udiv	r4, r2, r5
 801b738:	fb05 2214 	mls	r2, r5, r4, r2
 801b73c:	8282      	strh	r2, [r0, #20]
 801b73e:	82c3      	strh	r3, [r0, #22]
 801b740:	bd38      	pop	{r3, r4, r5, pc}
 801b742:	bf00      	nop
 801b744:	08021911 	.word	0x08021911
 801b748:	08021ccd 	.word	0x08021ccd
 801b74c:	0802192b 	.word	0x0802192b

0801b750 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801b750:	b538      	push	{r3, r4, r5, lr}
 801b752:	8ac3      	ldrh	r3, [r0, #22]
 801b754:	2b09      	cmp	r3, #9
 801b756:	d905      	bls.n	801b764 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801b758:	4b08      	ldr	r3, [pc, #32]	; (801b77c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801b75a:	4a09      	ldr	r2, [pc, #36]	; (801b780 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801b75c:	4809      	ldr	r0, [pc, #36]	; (801b784 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801b75e:	21e8      	movs	r1, #232	; 0xe8
 801b760:	f003 f8b4 	bl	801e8cc <__assert_func>
 801b764:	8a82      	ldrh	r2, [r0, #20]
 801b766:	250a      	movs	r5, #10
 801b768:	441a      	add	r2, r3
 801b76a:	fbb2 f4f5 	udiv	r4, r2, r5
 801b76e:	fb05 2214 	mls	r2, r5, r4, r2
 801b772:	3301      	adds	r3, #1
 801b774:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801b778:	82c3      	strh	r3, [r0, #22]
 801b77a:	bd38      	pop	{r3, r4, r5, pc}
 801b77c:	08021905 	.word	0x08021905
 801b780:	08021c1d 	.word	0x08021c1d
 801b784:	0802192b 	.word	0x0802192b

0801b788 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b788:	b538      	push	{r3, r4, r5, lr}
 801b78a:	4604      	mov	r4, r0
 801b78c:	f100 051a 	add.w	r5, r0, #26
 801b790:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b792:	2b0a      	cmp	r3, #10
 801b794:	d01c      	beq.n	801b7d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801b796:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801b798:	b962      	cbnz	r2, 801b7b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801b79a:	f104 051a 	add.w	r5, r4, #26
 801b79e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b7a0:	2b0a      	cmp	r3, #10
 801b7a2:	d015      	beq.n	801b7d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801b7a4:	4620      	mov	r0, r4
 801b7a6:	f7ff fdcf 	bl	801b348 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b7aa:	4601      	mov	r1, r0
 801b7ac:	4628      	mov	r0, r5
 801b7ae:	f7ff ffcf 	bl	801b750 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801b7b2:	e7f4      	b.n	801b79e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801b7b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b7b6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801b7ba:	3301      	adds	r3, #1
 801b7bc:	f003 0301 	and.w	r3, r3, #1
 801b7c0:	3a01      	subs	r2, #1
 801b7c2:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801b7c4:	86e3      	strh	r3, [r4, #54]	; 0x36
 801b7c6:	8722      	strh	r2, [r4, #56]	; 0x38
 801b7c8:	4628      	mov	r0, r5
 801b7ca:	f7ff ffc1 	bl	801b750 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801b7ce:	e7df      	b.n	801b790 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801b7d0:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b7d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801b7d4:	2300      	movs	r3, #0
 801b7d6:	b510      	push	{r4, lr}
 801b7d8:	6043      	str	r3, [r0, #4]
 801b7da:	60c3      	str	r3, [r0, #12]
 801b7dc:	7403      	strb	r3, [r0, #16]
 801b7de:	8603      	strh	r3, [r0, #48]	; 0x30
 801b7e0:	8303      	strh	r3, [r0, #24]
 801b7e2:	8703      	strh	r3, [r0, #56]	; 0x38
 801b7e4:	4604      	mov	r4, r0
 801b7e6:	f7ff ffcf 	bl	801b788 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b7ea:	4a0a      	ldr	r2, [pc, #40]	; (801b814 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801b7ec:	6813      	ldr	r3, [r2, #0]
 801b7ee:	4611      	mov	r1, r2
 801b7f0:	b913      	cbnz	r3, 801b7f8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801b7f2:	6852      	ldr	r2, [r2, #4]
 801b7f4:	07d2      	lsls	r2, r2, #31
 801b7f6:	d50c      	bpl.n	801b812 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3e>
 801b7f8:	6848      	ldr	r0, [r1, #4]
 801b7fa:	f010 0f01 	tst.w	r0, #1
 801b7fe:	ea4f 0060 	mov.w	r0, r0, asr #1
 801b802:	bf18      	it	ne
 801b804:	5822      	ldrne	r2, [r4, r0]
 801b806:	4420      	add	r0, r4
 801b808:	bf18      	it	ne
 801b80a:	58d3      	ldrne	r3, [r2, r3]
 801b80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b810:	4718      	bx	r3
 801b812:	bd10      	pop	{r4, pc}
 801b814:	20008aa4 	.word	0x20008aa4

0801b818 <_ZN8touchgfx12TextProviderC1Ev>:
 801b818:	b510      	push	{r4, lr}
 801b81a:	2300      	movs	r3, #0
 801b81c:	2201      	movs	r2, #1
 801b81e:	4604      	mov	r4, r0
 801b820:	6003      	str	r3, [r0, #0]
 801b822:	6043      	str	r3, [r0, #4]
 801b824:	60c3      	str	r3, [r0, #12]
 801b826:	7403      	strb	r3, [r0, #16]
 801b828:	82c3      	strh	r3, [r0, #22]
 801b82a:	8303      	strh	r3, [r0, #24]
 801b82c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b82e:	8603      	strh	r3, [r0, #48]	; 0x30
 801b830:	86c3      	strh	r3, [r0, #54]	; 0x36
 801b832:	8703      	strh	r3, [r0, #56]	; 0x38
 801b834:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b836:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801b83a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801b83e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801b842:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801b846:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801b84a:	f7ff ffc3 	bl	801b7d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b84e:	4620      	mov	r0, r4
 801b850:	bd10      	pop	{r4, pc}

0801b852 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801b852:	b410      	push	{r4}
 801b854:	6082      	str	r2, [r0, #8]
 801b856:	6001      	str	r1, [r0, #0]
 801b858:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b85a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b85e:	f7ff bfb9 	b.w	801b7d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801b864 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801b864:	b508      	push	{r3, lr}
 801b866:	88c2      	ldrh	r2, [r0, #6]
 801b868:	440a      	add	r2, r1
 801b86a:	2a02      	cmp	r2, #2
 801b86c:	dd05      	ble.n	801b87a <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801b86e:	4b06      	ldr	r3, [pc, #24]	; (801b888 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801b870:	4a06      	ldr	r2, [pc, #24]	; (801b88c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801b872:	4807      	ldr	r0, [pc, #28]	; (801b890 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801b874:	21dd      	movs	r1, #221	; 0xdd
 801b876:	f003 f829 	bl	801e8cc <__assert_func>
 801b87a:	8883      	ldrh	r3, [r0, #4]
 801b87c:	80c2      	strh	r2, [r0, #6]
 801b87e:	1a59      	subs	r1, r3, r1
 801b880:	f001 0101 	and.w	r1, r1, #1
 801b884:	8081      	strh	r1, [r0, #4]
 801b886:	bd08      	pop	{r3, pc}
 801b888:	08021957 	.word	0x08021957
 801b88c:	08021e2c 	.word	0x08021e2c
 801b890:	0802192b 	.word	0x0802192b

0801b894 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801b894:	b508      	push	{r3, lr}
 801b896:	88c3      	ldrh	r3, [r0, #6]
 801b898:	4299      	cmp	r1, r3
 801b89a:	db05      	blt.n	801b8a8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801b89c:	4b06      	ldr	r3, [pc, #24]	; (801b8b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801b89e:	4a07      	ldr	r2, [pc, #28]	; (801b8bc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801b8a0:	4807      	ldr	r0, [pc, #28]	; (801b8c0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801b8a2:	21ee      	movs	r1, #238	; 0xee
 801b8a4:	f003 f812 	bl	801e8cc <__assert_func>
 801b8a8:	8883      	ldrh	r3, [r0, #4]
 801b8aa:	4419      	add	r1, r3
 801b8ac:	f001 0101 	and.w	r1, r1, #1
 801b8b0:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801b8b4:	bd08      	pop	{r3, pc}
 801b8b6:	bf00      	nop
 801b8b8:	0802191d 	.word	0x0802191d
 801b8bc:	08021f86 	.word	0x08021f86
 801b8c0:	0802192b 	.word	0x0802192b

0801b8c4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b8c4:	b570      	push	{r4, r5, r6, lr}
 801b8c6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801b8c8:	4604      	mov	r4, r0
 801b8ca:	b92a      	cbnz	r2, 801b8d8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801b8cc:	4b12      	ldr	r3, [pc, #72]	; (801b918 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801b8ce:	4a13      	ldr	r2, [pc, #76]	; (801b91c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801b8d0:	4813      	ldr	r0, [pc, #76]	; (801b920 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801b8d2:	21cf      	movs	r1, #207	; 0xcf
 801b8d4:	f002 fffa 	bl	801e8cc <__assert_func>
 801b8d8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b8da:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801b8de:	260a      	movs	r6, #10
 801b8e0:	3301      	adds	r3, #1
 801b8e2:	8b4d      	ldrh	r5, [r1, #26]
 801b8e4:	fbb3 f1f6 	udiv	r1, r3, r6
 801b8e8:	3a01      	subs	r2, #1
 801b8ea:	fb06 3311 	mls	r3, r6, r1, r3
 801b8ee:	8602      	strh	r2, [r0, #48]	; 0x30
 801b8f0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b8f2:	f7ff ff49 	bl	801b788 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b8f6:	8b23      	ldrh	r3, [r4, #24]
 801b8f8:	2b02      	cmp	r3, #2
 801b8fa:	bf04      	itt	eq
 801b8fc:	2301      	moveq	r3, #1
 801b8fe:	8323      	strheq	r3, [r4, #24]
 801b900:	3412      	adds	r4, #18
 801b902:	4620      	mov	r0, r4
 801b904:	2101      	movs	r1, #1
 801b906:	f7ff ffad 	bl	801b864 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801b90a:	4620      	mov	r0, r4
 801b90c:	462a      	mov	r2, r5
 801b90e:	2100      	movs	r1, #0
 801b910:	f7ff ffc0 	bl	801b894 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801b914:	4628      	mov	r0, r5
 801b916:	bd70      	pop	{r4, r5, r6, pc}
 801b918:	080218fc 	.word	0x080218fc
 801b91c:	08021b71 	.word	0x08021b71
 801b920:	0802192b 	.word	0x0802192b

0801b924 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b924:	428a      	cmp	r2, r1
 801b926:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b92a:	4604      	mov	r4, r0
 801b92c:	460e      	mov	r6, r1
 801b92e:	4615      	mov	r5, r2
 801b930:	469a      	mov	sl, r3
 801b932:	dd2b      	ble.n	801b98c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801b934:	eba2 0801 	sub.w	r8, r2, r1
 801b938:	fa1f f888 	uxth.w	r8, r8
 801b93c:	2700      	movs	r7, #0
 801b93e:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801b942:	f04f 0b0a 	mov.w	fp, #10
 801b946:	b2bb      	uxth	r3, r7
 801b948:	4543      	cmp	r3, r8
 801b94a:	da1f      	bge.n	801b98c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801b94c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b94e:	3701      	adds	r7, #1
 801b950:	b92b      	cbnz	r3, 801b95e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x3a>
 801b952:	4b22      	ldr	r3, [pc, #136]	; (801b9dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801b954:	4a22      	ldr	r2, [pc, #136]	; (801b9e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801b956:	21d7      	movs	r1, #215	; 0xd7
 801b958:	4822      	ldr	r0, [pc, #136]	; (801b9e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801b95a:	f002 ffb7 	bl	801e8cc <__assert_func>
 801b95e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b960:	3b01      	subs	r3, #1
 801b962:	b29b      	uxth	r3, r3
 801b964:	441a      	add	r2, r3
 801b966:	8623      	strh	r3, [r4, #48]	; 0x30
 801b968:	fbb2 f3fb 	udiv	r3, r2, fp
 801b96c:	fb0b 2313 	mls	r3, fp, r3, r2
 801b970:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b974:	4648      	mov	r0, r9
 801b976:	8b5a      	ldrh	r2, [r3, #26]
 801b978:	9201      	str	r2, [sp, #4]
 801b97a:	2101      	movs	r1, #1
 801b97c:	f7ff ff72 	bl	801b864 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801b980:	9a01      	ldr	r2, [sp, #4]
 801b982:	2100      	movs	r1, #0
 801b984:	4648      	mov	r0, r9
 801b986:	f7ff ff85 	bl	801b894 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801b98a:	e7dc      	b.n	801b946 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801b98c:	f104 071a 	add.w	r7, r4, #26
 801b990:	4631      	mov	r1, r6
 801b992:	4638      	mov	r0, r7
 801b994:	f7ff fec0 	bl	801b718 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801b998:	260a      	movs	r6, #10
 801b99a:	b1c5      	cbz	r5, 801b9ce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801b99c:	3d01      	subs	r5, #1
 801b99e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b9a0:	b2ad      	uxth	r5, r5
 801b9a2:	2b09      	cmp	r3, #9
 801b9a4:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801b9a8:	dd03      	ble.n	801b9b2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801b9aa:	4b0f      	ldr	r3, [pc, #60]	; (801b9e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801b9ac:	4a0f      	ldr	r2, [pc, #60]	; (801b9ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801b9ae:	21dd      	movs	r1, #221	; 0xdd
 801b9b0:	e7d2      	b.n	801b958 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x34>
 801b9b2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801b9b4:	3109      	adds	r1, #9
 801b9b6:	3301      	adds	r3, #1
 801b9b8:	fbb1 f0f6 	udiv	r0, r1, r6
 801b9bc:	fb06 1110 	mls	r1, r6, r0, r1
 801b9c0:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801b9c2:	8623      	strh	r3, [r4, #48]	; 0x30
 801b9c4:	2100      	movs	r1, #0
 801b9c6:	4638      	mov	r0, r7
 801b9c8:	f7ff fd4a 	bl	801b460 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801b9cc:	e7e5      	b.n	801b99a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	b003      	add	sp, #12
 801b9d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9d6:	f7ff bed7 	b.w	801b788 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b9da:	bf00      	nop
 801b9dc:	080218fc 	.word	0x080218fc
 801b9e0:	080219f3 	.word	0x080219f3
 801b9e4:	0802192b 	.word	0x0802192b
 801b9e8:	08021957 	.word	0x08021957
 801b9ec:	0802196a 	.word	0x0802196a

0801b9f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b9f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f4:	4605      	mov	r5, r0
 801b9f6:	4616      	mov	r6, r2
 801b9f8:	1c8c      	adds	r4, r1, #2
 801b9fa:	8809      	ldrh	r1, [r1, #0]
 801b9fc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ba00:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ba04:	42b3      	cmp	r3, r6
 801ba06:	d124      	bne.n	801ba52 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ba08:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ba0c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ba10:	f001 070f 	and.w	r7, r1, #15
 801ba14:	f8cd 8000 	str.w	r8, [sp]
 801ba18:	464b      	mov	r3, r9
 801ba1a:	4652      	mov	r2, sl
 801ba1c:	4621      	mov	r1, r4
 801ba1e:	4628      	mov	r0, r5
 801ba20:	f7ff fe3a 	bl	801b698 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ba24:	4683      	mov	fp, r0
 801ba26:	b168      	cbz	r0, 801ba44 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ba28:	eb0a 0109 	add.w	r1, sl, r9
 801ba2c:	4441      	add	r1, r8
 801ba2e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ba32:	463a      	mov	r2, r7
 801ba34:	4649      	mov	r1, r9
 801ba36:	4628      	mov	r0, r5
 801ba38:	f7ff ff74 	bl	801b924 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ba3c:	4658      	mov	r0, fp
 801ba3e:	b003      	add	sp, #12
 801ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba44:	eb07 010a 	add.w	r1, r7, sl
 801ba48:	4449      	add	r1, r9
 801ba4a:	4441      	add	r1, r8
 801ba4c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ba50:	e7d2      	b.n	801b9f8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ba52:	f04f 0b00 	mov.w	fp, #0
 801ba56:	e7f1      	b.n	801ba3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ba58 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ba58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba5c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801ba5e:	886f      	ldrh	r7, [r5, #2]
 801ba60:	4604      	mov	r4, r0
 801ba62:	087f      	lsrs	r7, r7, #1
 801ba64:	260b      	movs	r6, #11
 801ba66:	f100 091a 	add.w	r9, r0, #26
 801ba6a:	3e01      	subs	r6, #1
 801ba6c:	d013      	beq.n	801ba96 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801ba6e:	2100      	movs	r1, #0
 801ba70:	4648      	mov	r0, r9
 801ba72:	f7ff fd0f 	bl	801b494 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ba76:	462a      	mov	r2, r5
 801ba78:	4680      	mov	r8, r0
 801ba7a:	4603      	mov	r3, r0
 801ba7c:	4639      	mov	r1, r7
 801ba7e:	4620      	mov	r0, r4
 801ba80:	f7ff fccf 	bl	801b422 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801ba84:	b138      	cbz	r0, 801ba96 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801ba86:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801ba8a:	4642      	mov	r2, r8
 801ba8c:	4620      	mov	r0, r4
 801ba8e:	f7ff ffaf 	bl	801b9f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801ba92:	2800      	cmp	r0, #0
 801ba94:	d1e9      	bne.n	801ba6a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801ba96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801ba9c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801ba9c:	b570      	push	{r4, r5, r6, lr}
 801ba9e:	4b21      	ldr	r3, [pc, #132]	; (801bb24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 801baa0:	681a      	ldr	r2, [r3, #0]
 801baa2:	4604      	mov	r4, r0
 801baa4:	b912      	cbnz	r2, 801baac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x10>
 801baa6:	6858      	ldr	r0, [r3, #4]
 801baa8:	07c0      	lsls	r0, r0, #31
 801baaa:	d511      	bpl.n	801bad0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 801baac:	6858      	ldr	r0, [r3, #4]
 801baae:	f010 0f01 	tst.w	r0, #1
 801bab2:	ea4f 0060 	mov.w	r0, r0, asr #1
 801bab6:	f104 051a 	add.w	r5, r4, #26
 801baba:	bf18      	it	ne
 801babc:	5823      	ldrne	r3, [r4, r0]
 801babe:	4420      	add	r0, r4
 801bac0:	bf18      	it	ne
 801bac2:	589a      	ldrne	r2, [r3, r2]
 801bac4:	4790      	blx	r2
 801bac6:	2100      	movs	r1, #0
 801bac8:	4602      	mov	r2, r0
 801baca:	4628      	mov	r0, r5
 801bacc:	f7ff fcc8 	bl	801b460 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801bad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bad2:	b133      	cbz	r3, 801bae2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 801bad4:	f104 051a 	add.w	r5, r4, #26
 801bad8:	2100      	movs	r1, #0
 801bada:	4628      	mov	r0, r5
 801badc:	f7ff fcda 	bl	801b494 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bae0:	b920      	cbnz	r0, 801baec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x50>
 801bae2:	4620      	mov	r0, r4
 801bae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bae8:	f7ff beec 	b.w	801b8c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801baec:	4620      	mov	r0, r4
 801baee:	f7ff ffb3 	bl	801ba58 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801baf2:	2101      	movs	r1, #1
 801baf4:	4628      	mov	r0, r5
 801baf6:	f7ff fccd 	bl	801b494 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bafa:	f640 133f 	movw	r3, #2367	; 0x93f
 801bafe:	4298      	cmp	r0, r3
 801bb00:	4606      	mov	r6, r0
 801bb02:	d1ee      	bne.n	801bae2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 801bb04:	2100      	movs	r1, #0
 801bb06:	4628      	mov	r0, r5
 801bb08:	f7ff fcc4 	bl	801b494 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801bb0c:	2101      	movs	r1, #1
 801bb0e:	4602      	mov	r2, r0
 801bb10:	4628      	mov	r0, r5
 801bb12:	f7ff fca5 	bl	801b460 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801bb16:	4632      	mov	r2, r6
 801bb18:	2100      	movs	r1, #0
 801bb1a:	4628      	mov	r0, r5
 801bb1c:	f7ff fca0 	bl	801b460 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801bb20:	e7df      	b.n	801bae2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 801bb22:	bf00      	nop
 801bb24:	20008aac 	.word	0x20008aac

0801bb28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb2a:	4617      	mov	r7, r2
 801bb2c:	461e      	mov	r6, r3
 801bb2e:	4605      	mov	r5, r0
 801bb30:	f7ff ffb4 	bl	801ba9c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bb34:	683b      	ldr	r3, [r7, #0]
 801bb36:	4604      	mov	r4, r0
 801bb38:	68db      	ldr	r3, [r3, #12]
 801bb3a:	4601      	mov	r1, r0
 801bb3c:	4638      	mov	r0, r7
 801bb3e:	4798      	blx	r3
 801bb40:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801bb44:	b29b      	uxth	r3, r3
 801bb46:	2b7f      	cmp	r3, #127	; 0x7f
 801bb48:	4602      	mov	r2, r0
 801bb4a:	6030      	str	r0, [r6, #0]
 801bb4c:	d816      	bhi.n	801bb7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x54>
 801bb4e:	4639      	mov	r1, r7
 801bb50:	4628      	mov	r0, r5
 801bb52:	f7ff fcb9 	bl	801b4c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bb56:	6030      	str	r0, [r6, #0]
 801bb58:	6833      	ldr	r3, [r6, #0]
 801bb5a:	b15b      	cbz	r3, 801bb74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801bb5c:	7a9a      	ldrb	r2, [r3, #10]
 801bb5e:	f993 300d 	ldrsb.w	r3, [r3, #13]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	bfb4      	ite	lt
 801bb66:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801bb6a:	2300      	movge	r3, #0
 801bb6c:	4313      	orrs	r3, r2
 801bb6e:	bf0c      	ite	eq
 801bb70:	2301      	moveq	r3, #1
 801bb72:	2300      	movne	r3, #0
 801bb74:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801bb78:	4620      	mov	r0, r4
 801bb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb7c:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d0e9      	beq.n	801bb58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801bb84:	f640 1302 	movw	r3, #2306	; 0x902
 801bb88:	429c      	cmp	r4, r3
 801bb8a:	d1e5      	bne.n	801bb58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801bb8c:	4601      	mov	r1, r0
 801bb8e:	4628      	mov	r0, r5
 801bb90:	f7ff fc16 	bl	801b3c0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bb94:	e7df      	b.n	801bb56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
	...

0801bb98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bb98:	4b01      	ldr	r3, [pc, #4]	; (801bba0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bb9a:	6018      	str	r0, [r3, #0]
 801bb9c:	4770      	bx	lr
 801bb9e:	bf00      	nop
 801bba0:	20009de4 	.word	0x20009de4

0801bba4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801bba4:	4b07      	ldr	r3, [pc, #28]	; (801bbc4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801bba6:	881a      	ldrh	r2, [r3, #0]
 801bba8:	4290      	cmp	r0, r2
 801bbaa:	db09      	blt.n	801bbc0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bbac:	4b06      	ldr	r3, [pc, #24]	; (801bbc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801bbae:	881b      	ldrh	r3, [r3, #0]
 801bbb0:	4413      	add	r3, r2
 801bbb2:	4298      	cmp	r0, r3
 801bbb4:	da04      	bge.n	801bbc0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801bbb6:	4b05      	ldr	r3, [pc, #20]	; (801bbcc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801bbbe:	4770      	bx	lr
 801bbc0:	2000      	movs	r0, #0
 801bbc2:	4770      	bx	lr
 801bbc4:	20009e04 	.word	0x20009e04
 801bbc8:	20009e08 	.word	0x20009e08
 801bbcc:	20009de8 	.word	0x20009de8

0801bbd0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbd4:	4e26      	ldr	r6, [pc, #152]	; (801bc70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801bbd6:	6833      	ldr	r3, [r6, #0]
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d046      	beq.n	801bc6a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801bbdc:	4a25      	ldr	r2, [pc, #148]	; (801bc74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801bbde:	4d26      	ldr	r5, [pc, #152]	; (801bc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bbe0:	8810      	ldrh	r0, [r2, #0]
 801bbe2:	882c      	ldrh	r4, [r5, #0]
 801bbe4:	4f25      	ldr	r7, [pc, #148]	; (801bc7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bbe6:	4420      	add	r0, r4
 801bbe8:	1c42      	adds	r2, r0, #1
 801bbea:	f022 0201 	bic.w	r2, r2, #1
 801bbee:	0412      	lsls	r2, r2, #16
 801bbf0:	0c12      	lsrs	r2, r2, #16
 801bbf2:	0051      	lsls	r1, r2, #1
 801bbf4:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801bbf8:	220e      	movs	r2, #14
 801bbfa:	fb02 fe04 	mul.w	lr, r2, r4
 801bbfe:	eb08 0c01 	add.w	ip, r8, r1
 801bc02:	eb03 0208 	add.w	r2, r3, r8
 801bc06:	4c1e      	ldr	r4, [pc, #120]	; (801bc80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bc08:	603a      	str	r2, [r7, #0]
 801bc0a:	eb03 020c 	add.w	r2, r3, ip
 801bc0e:	6022      	str	r2, [r4, #0]
 801bc10:	44f4      	add	ip, lr
 801bc12:	4a1c      	ldr	r2, [pc, #112]	; (801bc84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bc14:	4463      	add	r3, ip
 801bc16:	6013      	str	r3, [r2, #0]
 801bc18:	4a1b      	ldr	r2, [pc, #108]	; (801bc88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bc1a:	2300      	movs	r3, #0
 801bc1c:	8013      	strh	r3, [r2, #0]
 801bc1e:	4a1b      	ldr	r2, [pc, #108]	; (801bc8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801bc20:	6812      	ldr	r2, [r2, #0]
 801bc22:	eba2 0208 	sub.w	r2, r2, r8
 801bc26:	1a52      	subs	r2, r2, r1
 801bc28:	4919      	ldr	r1, [pc, #100]	; (801bc90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801bc2a:	eba2 020e 	sub.w	r2, r2, lr
 801bc2e:	600a      	str	r2, [r1, #0]
 801bc30:	4a18      	ldr	r2, [pc, #96]	; (801bc94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801bc32:	469e      	mov	lr, r3
 801bc34:	8013      	strh	r3, [r2, #0]
 801bc36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bc3a:	4283      	cmp	r3, r0
 801bc3c:	d007      	beq.n	801bc4e <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801bc3e:	6832      	ldr	r2, [r6, #0]
 801bc40:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 801bc44:	683a      	ldr	r2, [r7, #0]
 801bc46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801bc4a:	3301      	adds	r3, #1
 801bc4c:	e7f5      	b.n	801bc3a <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801bc4e:	882d      	ldrh	r5, [r5, #0]
 801bc50:	6820      	ldr	r0, [r4, #0]
 801bc52:	2300      	movs	r3, #0
 801bc54:	240e      	movs	r4, #14
 801bc56:	42ab      	cmp	r3, r5
 801bc58:	d207      	bcs.n	801bc6a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801bc5a:	fb04 0203 	mla	r2, r4, r3, r0
 801bc5e:	3301      	adds	r3, #1
 801bc60:	7b11      	ldrb	r1, [r2, #12]
 801bc62:	f36f 1145 	bfc	r1, #5, #1
 801bc66:	7311      	strb	r1, [r2, #12]
 801bc68:	e7f5      	b.n	801bc56 <_ZN8touchgfx6Bitmap10clearCacheEv+0x86>
 801bc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc6e:	bf00      	nop
 801bc70:	20009de8 	.word	0x20009de8
 801bc74:	20009e04 	.word	0x20009e04
 801bc78:	20009e08 	.word	0x20009e08
 801bc7c:	20009dfc 	.word	0x20009dfc
 801bc80:	20009dec 	.word	0x20009dec
 801bc84:	20009df4 	.word	0x20009df4
 801bc88:	20009e06 	.word	0x20009e06
 801bc8c:	20009df0 	.word	0x20009df0
 801bc90:	20009e00 	.word	0x20009e00
 801bc94:	20009df8 	.word	0x20009df8

0801bc98 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bc98:	b510      	push	{r4, lr}
 801bc9a:	4b10      	ldr	r3, [pc, #64]	; (801bcdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	b9db      	cbnz	r3, 801bcd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bca0:	b1d1      	cbz	r1, 801bcd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bca2:	4b0f      	ldr	r3, [pc, #60]	; (801bce0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801bca4:	801a      	strh	r2, [r3, #0]
 801bca6:	4b0f      	ldr	r3, [pc, #60]	; (801bce4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801bca8:	881b      	ldrh	r3, [r3, #0]
 801bcaa:	b292      	uxth	r2, r2
 801bcac:	240e      	movs	r4, #14
 801bcae:	4413      	add	r3, r2
 801bcb0:	4362      	muls	r2, r4
 801bcb2:	2406      	movs	r4, #6
 801bcb4:	fb04 2203 	mla	r2, r4, r3, r2
 801bcb8:	4291      	cmp	r1, r2
 801bcba:	d805      	bhi.n	801bcc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801bcbc:	4b0a      	ldr	r3, [pc, #40]	; (801bce8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801bcbe:	4a0b      	ldr	r2, [pc, #44]	; (801bcec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801bcc0:	480b      	ldr	r0, [pc, #44]	; (801bcf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801bcc2:	2137      	movs	r1, #55	; 0x37
 801bcc4:	f002 fe02 	bl	801e8cc <__assert_func>
 801bcc8:	4b0a      	ldr	r3, [pc, #40]	; (801bcf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801bcca:	6019      	str	r1, [r3, #0]
 801bccc:	4b0a      	ldr	r3, [pc, #40]	; (801bcf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801bcce:	6018      	str	r0, [r3, #0]
 801bcd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcd4:	f7ff bf7c 	b.w	801bbd0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bcd8:	bd10      	pop	{r4, pc}
 801bcda:	bf00      	nop
 801bcdc:	20009df4 	.word	0x20009df4
 801bce0:	20009e08 	.word	0x20009e08
 801bce4:	20009e04 	.word	0x20009e04
 801bce8:	080220bc 	.word	0x080220bc
 801bcec:	08022151 	.word	0x08022151
 801bcf0:	08022097 	.word	0x08022097
 801bcf4:	20009df0 	.word	0x20009df0
 801bcf8:	20009de8 	.word	0x20009de8

0801bcfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bcfc:	b470      	push	{r4, r5, r6}
 801bcfe:	4c07      	ldr	r4, [pc, #28]	; (801bd1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bd00:	6826      	ldr	r6, [r4, #0]
 801bd02:	4605      	mov	r5, r0
 801bd04:	4610      	mov	r0, r2
 801bd06:	9a03      	ldr	r2, [sp, #12]
 801bd08:	b936      	cbnz	r6, 801bd18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bd0a:	6025      	str	r5, [r4, #0]
 801bd0c:	4c04      	ldr	r4, [pc, #16]	; (801bd20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bd0e:	8021      	strh	r1, [r4, #0]
 801bd10:	bc70      	pop	{r4, r5, r6}
 801bd12:	4619      	mov	r1, r3
 801bd14:	f7ff bfc0 	b.w	801bc98 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bd18:	bc70      	pop	{r4, r5, r6}
 801bd1a:	4770      	bx	lr
 801bd1c:	20009e0c 	.word	0x20009e0c
 801bd20:	20009e04 	.word	0x20009e04

0801bd24 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bd24:	b508      	push	{r3, lr}
 801bd26:	4b14      	ldr	r3, [pc, #80]	; (801bd78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bd28:	6819      	ldr	r1, [r3, #0]
 801bd2a:	b931      	cbnz	r1, 801bd3a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801bd2c:	4b13      	ldr	r3, [pc, #76]	; (801bd7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bd2e:	4a14      	ldr	r2, [pc, #80]	; (801bd80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bd30:	4814      	ldr	r0, [pc, #80]	; (801bd84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bd32:	f240 21e3 	movw	r1, #739	; 0x2e3
 801bd36:	f002 fdc9 	bl	801e8cc <__assert_func>
 801bd3a:	4a13      	ldr	r2, [pc, #76]	; (801bd88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bd3c:	8803      	ldrh	r3, [r0, #0]
 801bd3e:	8812      	ldrh	r2, [r2, #0]
 801bd40:	4293      	cmp	r3, r2
 801bd42:	da04      	bge.n	801bd4e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801bd44:	2214      	movs	r2, #20
 801bd46:	fb02 1303 	mla	r3, r2, r3, r1
 801bd4a:	8918      	ldrh	r0, [r3, #8]
 801bd4c:	bd08      	pop	{r3, pc}
 801bd4e:	490f      	ldr	r1, [pc, #60]	; (801bd8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801bd50:	8809      	ldrh	r1, [r1, #0]
 801bd52:	4411      	add	r1, r2
 801bd54:	428b      	cmp	r3, r1
 801bd56:	da06      	bge.n	801bd66 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801bd58:	1a9b      	subs	r3, r3, r2
 801bd5a:	4a0d      	ldr	r2, [pc, #52]	; (801bd90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801bd5c:	6812      	ldr	r2, [r2, #0]
 801bd5e:	210e      	movs	r1, #14
 801bd60:	fb01 2303 	mla	r3, r1, r3, r2
 801bd64:	e7f1      	b.n	801bd4a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801bd66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd6a:	4293      	cmp	r3, r2
 801bd6c:	bf06      	itte	eq
 801bd6e:	4b09      	ldreq	r3, [pc, #36]	; (801bd94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801bd70:	8818      	ldrheq	r0, [r3, #0]
 801bd72:	2000      	movne	r0, #0
 801bd74:	bd08      	pop	{r3, pc}
 801bd76:	bf00      	nop
 801bd78:	20009e0c 	.word	0x20009e0c
 801bd7c:	08022115 	.word	0x08022115
 801bd80:	080221fe 	.word	0x080221fe
 801bd84:	08022097 	.word	0x08022097
 801bd88:	20009e04 	.word	0x20009e04
 801bd8c:	20009e08 	.word	0x20009e08
 801bd90:	20009dec 	.word	0x20009dec
 801bd94:	20009d62 	.word	0x20009d62

0801bd98 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bd98:	b508      	push	{r3, lr}
 801bd9a:	4b14      	ldr	r3, [pc, #80]	; (801bdec <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bd9c:	6819      	ldr	r1, [r3, #0]
 801bd9e:	b931      	cbnz	r1, 801bdae <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801bda0:	4b13      	ldr	r3, [pc, #76]	; (801bdf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bda2:	4a14      	ldr	r2, [pc, #80]	; (801bdf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bda4:	4814      	ldr	r0, [pc, #80]	; (801bdf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bda6:	f240 21f7 	movw	r1, #759	; 0x2f7
 801bdaa:	f002 fd8f 	bl	801e8cc <__assert_func>
 801bdae:	4a13      	ldr	r2, [pc, #76]	; (801bdfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bdb0:	8803      	ldrh	r3, [r0, #0]
 801bdb2:	8812      	ldrh	r2, [r2, #0]
 801bdb4:	4293      	cmp	r3, r2
 801bdb6:	da04      	bge.n	801bdc2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801bdb8:	2214      	movs	r2, #20
 801bdba:	fb02 1303 	mla	r3, r2, r3, r1
 801bdbe:	8958      	ldrh	r0, [r3, #10]
 801bdc0:	bd08      	pop	{r3, pc}
 801bdc2:	490f      	ldr	r1, [pc, #60]	; (801be00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801bdc4:	8809      	ldrh	r1, [r1, #0]
 801bdc6:	4411      	add	r1, r2
 801bdc8:	428b      	cmp	r3, r1
 801bdca:	da06      	bge.n	801bdda <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801bdcc:	1a9b      	subs	r3, r3, r2
 801bdce:	4a0d      	ldr	r2, [pc, #52]	; (801be04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801bdd0:	6812      	ldr	r2, [r2, #0]
 801bdd2:	210e      	movs	r1, #14
 801bdd4:	fb01 2303 	mla	r3, r1, r3, r2
 801bdd8:	e7f1      	b.n	801bdbe <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801bdda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bdde:	4293      	cmp	r3, r2
 801bde0:	bf06      	itte	eq
 801bde2:	4b09      	ldreq	r3, [pc, #36]	; (801be08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801bde4:	8818      	ldrheq	r0, [r3, #0]
 801bde6:	2000      	movne	r0, #0
 801bde8:	bd08      	pop	{r3, pc}
 801bdea:	bf00      	nop
 801bdec:	20009e0c 	.word	0x20009e0c
 801bdf0:	08022115 	.word	0x08022115
 801bdf4:	0802222a 	.word	0x0802222a
 801bdf8:	08022097 	.word	0x08022097
 801bdfc:	20009e04 	.word	0x20009e04
 801be00:	20009e08 	.word	0x20009e08
 801be04:	20009dec 	.word	0x20009dec
 801be08:	20009d64 	.word	0x20009d64

0801be0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801be0c:	b510      	push	{r4, lr}
 801be0e:	4b23      	ldr	r3, [pc, #140]	; (801be9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801be10:	681c      	ldr	r4, [r3, #0]
 801be12:	b934      	cbnz	r4, 801be22 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801be14:	4b22      	ldr	r3, [pc, #136]	; (801bea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801be16:	4a23      	ldr	r2, [pc, #140]	; (801bea4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801be18:	4823      	ldr	r0, [pc, #140]	; (801bea8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801be1a:	f240 310b 	movw	r1, #779	; 0x30b
 801be1e:	f002 fd55 	bl	801e8cc <__assert_func>
 801be22:	4a22      	ldr	r2, [pc, #136]	; (801beac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801be24:	880b      	ldrh	r3, [r1, #0]
 801be26:	8812      	ldrh	r2, [r2, #0]
 801be28:	4293      	cmp	r3, r2
 801be2a:	da11      	bge.n	801be50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801be2c:	2214      	movs	r2, #20
 801be2e:	fb02 4303 	mla	r3, r2, r3, r4
 801be32:	8a1a      	ldrh	r2, [r3, #16]
 801be34:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801be38:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801be3c:	8a5b      	ldrh	r3, [r3, #18]
 801be3e:	8004      	strh	r4, [r0, #0]
 801be40:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801be44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be48:	8041      	strh	r1, [r0, #2]
 801be4a:	8082      	strh	r2, [r0, #4]
 801be4c:	80c3      	strh	r3, [r0, #6]
 801be4e:	bd10      	pop	{r4, pc}
 801be50:	4917      	ldr	r1, [pc, #92]	; (801beb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801be52:	8809      	ldrh	r1, [r1, #0]
 801be54:	4411      	add	r1, r2
 801be56:	428b      	cmp	r3, r1
 801be58:	da0a      	bge.n	801be70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801be5a:	1a9b      	subs	r3, r3, r2
 801be5c:	4a15      	ldr	r2, [pc, #84]	; (801beb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801be5e:	6812      	ldr	r2, [r2, #0]
 801be60:	210e      	movs	r1, #14
 801be62:	fb01 2303 	mla	r3, r1, r3, r2
 801be66:	681a      	ldr	r2, [r3, #0]
 801be68:	6002      	str	r2, [r0, #0]
 801be6a:	685a      	ldr	r2, [r3, #4]
 801be6c:	6042      	str	r2, [r0, #4]
 801be6e:	bd10      	pop	{r4, pc}
 801be70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be74:	4293      	cmp	r3, r2
 801be76:	d10b      	bne.n	801be90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801be78:	4b0f      	ldr	r3, [pc, #60]	; (801beb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801be7a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801be7e:	4b0f      	ldr	r3, [pc, #60]	; (801bebc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801be80:	8081      	strh	r1, [r0, #4]
 801be82:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be86:	80c2      	strh	r2, [r0, #6]
 801be88:	2300      	movs	r3, #0
 801be8a:	8003      	strh	r3, [r0, #0]
 801be8c:	8043      	strh	r3, [r0, #2]
 801be8e:	bd10      	pop	{r4, pc}
 801be90:	2300      	movs	r3, #0
 801be92:	8003      	strh	r3, [r0, #0]
 801be94:	8043      	strh	r3, [r0, #2]
 801be96:	8083      	strh	r3, [r0, #4]
 801be98:	e7d8      	b.n	801be4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801be9a:	bf00      	nop
 801be9c:	20009e0c 	.word	0x20009e0c
 801bea0:	08022115 	.word	0x08022115
 801bea4:	08022197 	.word	0x08022197
 801bea8:	08022097 	.word	0x08022097
 801beac:	20009e04 	.word	0x20009e04
 801beb0:	20009e08 	.word	0x20009e08
 801beb4:	20009dec 	.word	0x20009dec
 801beb8:	20009d62 	.word	0x20009d62
 801bebc:	20009d64 	.word	0x20009d64

0801bec0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bec0:	b508      	push	{r3, lr}
 801bec2:	4b11      	ldr	r3, [pc, #68]	; (801bf08 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 801bec4:	6819      	ldr	r1, [r3, #0]
 801bec6:	b931      	cbnz	r1, 801bed6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bec8:	4b10      	ldr	r3, [pc, #64]	; (801bf0c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801beca:	4a11      	ldr	r2, [pc, #68]	; (801bf10 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801becc:	4811      	ldr	r0, [pc, #68]	; (801bf14 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bece:	f240 312f 	movw	r1, #815	; 0x32f
 801bed2:	f002 fcfb 	bl	801e8cc <__assert_func>
 801bed6:	8803      	ldrh	r3, [r0, #0]
 801bed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bedc:	4293      	cmp	r3, r2
 801bede:	d011      	beq.n	801bf04 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 801bee0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bee4:	4293      	cmp	r3, r2
 801bee6:	d103      	bne.n	801bef0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bee8:	4b0b      	ldr	r3, [pc, #44]	; (801bf18 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801beee:	bd08      	pop	{r3, pc}
 801bef0:	4a0a      	ldr	r2, [pc, #40]	; (801bf1c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bef2:	6812      	ldr	r2, [r2, #0]
 801bef4:	b112      	cbz	r2, 801befc <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 801bef6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801befa:	b920      	cbnz	r0, 801bf06 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801befc:	2214      	movs	r2, #20
 801befe:	4353      	muls	r3, r2
 801bf00:	58c8      	ldr	r0, [r1, r3]
 801bf02:	bd08      	pop	{r3, pc}
 801bf04:	2000      	movs	r0, #0
 801bf06:	bd08      	pop	{r3, pc}
 801bf08:	20009e0c 	.word	0x20009e0c
 801bf0c:	08022115 	.word	0x08022115
 801bf10:	080221cd 	.word	0x080221cd
 801bf14:	08022097 	.word	0x08022097
 801bf18:	20009d70 	.word	0x20009d70
 801bf1c:	20009de8 	.word	0x20009de8

0801bf20 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bf20:	8802      	ldrh	r2, [r0, #0]
 801bf22:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bf26:	429a      	cmp	r2, r3
 801bf28:	dc40      	bgt.n	801bfac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bf2a:	4b21      	ldr	r3, [pc, #132]	; (801bfb0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bf2c:	881b      	ldrh	r3, [r3, #0]
 801bf2e:	429a      	cmp	r2, r3
 801bf30:	da20      	bge.n	801bf74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bf32:	4b20      	ldr	r3, [pc, #128]	; (801bfb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bf34:	6819      	ldr	r1, [r3, #0]
 801bf36:	2314      	movs	r3, #20
 801bf38:	fb03 1302 	mla	r3, r3, r2, r1
 801bf3c:	6858      	ldr	r0, [r3, #4]
 801bf3e:	2800      	cmp	r0, #0
 801bf40:	d035      	beq.n	801bfae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bf42:	491d      	ldr	r1, [pc, #116]	; (801bfb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bf44:	6809      	ldr	r1, [r1, #0]
 801bf46:	2900      	cmp	r1, #0
 801bf48:	d031      	beq.n	801bfae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bf4a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bf4e:	b371      	cbz	r1, 801bfae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bf50:	7c5a      	ldrb	r2, [r3, #17]
 801bf52:	7cd8      	ldrb	r0, [r3, #19]
 801bf54:	0952      	lsrs	r2, r2, #5
 801bf56:	00d2      	lsls	r2, r2, #3
 801bf58:	ea42 1250 	orr.w	r2, r2, r0, lsr #5
 801bf5c:	2a0b      	cmp	r2, #11
 801bf5e:	8958      	ldrh	r0, [r3, #10]
 801bf60:	891a      	ldrh	r2, [r3, #8]
 801bf62:	fb00 f002 	mul.w	r0, r0, r2
 801bf66:	bf18      	it	ne
 801bf68:	0040      	lslne	r0, r0, #1
 801bf6a:	3003      	adds	r0, #3
 801bf6c:	f020 0003 	bic.w	r0, r0, #3
 801bf70:	4408      	add	r0, r1
 801bf72:	4770      	bx	lr
 801bf74:	4911      	ldr	r1, [pc, #68]	; (801bfbc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bf76:	8809      	ldrh	r1, [r1, #0]
 801bf78:	4419      	add	r1, r3
 801bf7a:	428a      	cmp	r2, r1
 801bf7c:	da16      	bge.n	801bfac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bf7e:	4910      	ldr	r1, [pc, #64]	; (801bfc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bf80:	6809      	ldr	r1, [r1, #0]
 801bf82:	1ad3      	subs	r3, r2, r3
 801bf84:	200e      	movs	r0, #14
 801bf86:	fb00 1303 	mla	r3, r0, r3, r1
 801bf8a:	7b19      	ldrb	r1, [r3, #12]
 801bf8c:	f001 011f 	and.w	r1, r1, #31
 801bf90:	290b      	cmp	r1, #11
 801bf92:	d10b      	bne.n	801bfac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bf94:	8919      	ldrh	r1, [r3, #8]
 801bf96:	8958      	ldrh	r0, [r3, #10]
 801bf98:	4b07      	ldr	r3, [pc, #28]	; (801bfb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bf9a:	4348      	muls	r0, r1
 801bf9c:	6819      	ldr	r1, [r3, #0]
 801bf9e:	3003      	adds	r0, #3
 801bfa0:	f020 0303 	bic.w	r3, r0, #3
 801bfa4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bfa8:	4418      	add	r0, r3
 801bfaa:	4770      	bx	lr
 801bfac:	2000      	movs	r0, #0
 801bfae:	4770      	bx	lr
 801bfb0:	20009e04 	.word	0x20009e04
 801bfb4:	20009e0c 	.word	0x20009e0c
 801bfb8:	20009de8 	.word	0x20009de8
 801bfbc:	20009e08 	.word	0x20009e08
 801bfc0:	20009dec 	.word	0x20009dec

0801bfc4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bfc4:	4b18      	ldr	r3, [pc, #96]	; (801c028 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801bfc6:	6819      	ldr	r1, [r3, #0]
 801bfc8:	8803      	ldrh	r3, [r0, #0]
 801bfca:	b1e1      	cbz	r1, 801c006 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801bfcc:	4a17      	ldr	r2, [pc, #92]	; (801c02c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bfce:	8812      	ldrh	r2, [r2, #0]
 801bfd0:	4293      	cmp	r3, r2
 801bfd2:	da09      	bge.n	801bfe8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801bfd4:	2214      	movs	r2, #20
 801bfd6:	fb02 1303 	mla	r3, r2, r3, r1
 801bfda:	7c58      	ldrb	r0, [r3, #17]
 801bfdc:	7cdb      	ldrb	r3, [r3, #19]
 801bfde:	0940      	lsrs	r0, r0, #5
 801bfe0:	00c0      	lsls	r0, r0, #3
 801bfe2:	ea40 1053 	orr.w	r0, r0, r3, lsr #5
 801bfe6:	4770      	bx	lr
 801bfe8:	4911      	ldr	r1, [pc, #68]	; (801c030 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801bfea:	8809      	ldrh	r1, [r1, #0]
 801bfec:	4411      	add	r1, r2
 801bfee:	428b      	cmp	r3, r1
 801bff0:	da09      	bge.n	801c006 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801bff2:	1a9b      	subs	r3, r3, r2
 801bff4:	4a0f      	ldr	r2, [pc, #60]	; (801c034 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801bff6:	6812      	ldr	r2, [r2, #0]
 801bff8:	210e      	movs	r1, #14
 801bffa:	fb01 2303 	mla	r3, r1, r3, r2
 801bffe:	7b18      	ldrb	r0, [r3, #12]
 801c000:	f000 001f 	and.w	r0, r0, #31
 801c004:	4770      	bx	lr
 801c006:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c00a:	4293      	cmp	r3, r2
 801c00c:	d10a      	bne.n	801c024 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801c00e:	4b0a      	ldr	r3, [pc, #40]	; (801c038 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c016:	b10a      	cbz	r2, 801c01c <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801c018:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c01a:	b900      	cbnz	r0, 801c01e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c01c:	6898      	ldr	r0, [r3, #8]
 801c01e:	6803      	ldr	r3, [r0, #0]
 801c020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c022:	4718      	bx	r3
 801c024:	2000      	movs	r0, #0
 801c026:	4770      	bx	lr
 801c028:	20009e0c 	.word	0x20009e0c
 801c02c:	20009e04 	.word	0x20009e04
 801c030:	20009e08 	.word	0x20009e08
 801c034:	20009dec 	.word	0x20009dec
 801c038:	20009d70 	.word	0x20009d70

0801c03c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c03c:	2018      	movs	r0, #24
 801c03e:	4770      	bx	lr

0801c040 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c040:	2001      	movs	r0, #1
 801c042:	4770      	bx	lr

0801c044 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801c044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c048:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801c04c:	4770      	bx	lr

0801c04e <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801c04e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801c052:	4770      	bx	lr

0801c054 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801c054:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801c058:	4770      	bx	lr

0801c05a <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801c05a:	b2c8      	uxtb	r0, r1
 801c05c:	4770      	bx	lr

0801c05e <_ZN8touchgfx8LCD24bpp4initEv>:
 801c05e:	4770      	bx	lr

0801c060 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801c060:	b508      	push	{r3, lr}
 801c062:	4b06      	ldr	r3, [pc, #24]	; (801c07c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801c064:	8818      	ldrh	r0, [r3, #0]
 801c066:	b928      	cbnz	r0, 801c074 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801c068:	4b05      	ldr	r3, [pc, #20]	; (801c080 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801c06a:	4a06      	ldr	r2, [pc, #24]	; (801c084 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801c06c:	4806      	ldr	r0, [pc, #24]	; (801c088 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801c06e:	21d4      	movs	r1, #212	; 0xd4
 801c070:	f002 fc2c 	bl	801e8cc <__assert_func>
 801c074:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c078:	b280      	uxth	r0, r0
 801c07a:	bd08      	pop	{r3, pc}
 801c07c:	20009d68 	.word	0x20009d68
 801c080:	08022670 	.word	0x08022670
 801c084:	0802294e 	.word	0x0802294e
 801c088:	080226b2 	.word	0x080226b2

0801c08c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c090:	4691      	mov	r9, r2
 801c092:	b087      	sub	sp, #28
 801c094:	461c      	mov	r4, r3
 801c096:	b13b      	cbz	r3, 801c0a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801c098:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c09c:	b123      	cbz	r3, 801c0a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801c09e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	f040 80aa 	bne.w	801c1fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>
 801c0a8:	b007      	add	sp, #28
 801c0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ae:	f010 0f08 	tst.w	r0, #8
 801c0b2:	d010      	beq.n	801c0d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4a>
 801c0b4:	6818      	ldr	r0, [r3, #0]
 801c0b6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c0ba:	6801      	ldr	r1, [r0, #0]
 801c0bc:	9402      	str	r4, [sp, #8]
 801c0be:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c0c2:	9401      	str	r4, [sp, #4]
 801c0c4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c0c8:	9400      	str	r4, [sp, #0]
 801c0ca:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801c0cc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c0d0:	4649      	mov	r1, r9
 801c0d2:	47a0      	blx	r4
 801c0d4:	e7e8      	b.n	801c0a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801c0d6:	6818      	ldr	r0, [r3, #0]
 801c0d8:	f8df 814c 	ldr.w	r8, [pc, #332]	; 801c228 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x19c>
 801c0dc:	6803      	ldr	r3, [r0, #0]
 801c0de:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801c0e2:	6a1b      	ldr	r3, [r3, #32]
 801c0e4:	f9bd 6016 	ldrsh.w	r6, [sp, #22]
 801c0e8:	4798      	blx	r3
 801c0ea:	f8b8 1000 	ldrh.w	r1, [r8]
 801c0ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c0f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c0f6:	fb01 2303 	mla	r3, r1, r3, r2
 801c0fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0fe:	2cff      	cmp	r4, #255	; 0xff
 801c100:	4418      	add	r0, r3
 801c102:	f3c9 4707 	ubfx	r7, r9, #16, #8
 801c106:	f3c9 2e07 	ubfx	lr, r9, #8, #8
 801c10a:	fa5f f289 	uxtb.w	r2, r9
 801c10e:	46c4      	mov	ip, r8
 801c110:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
 801c114:	d04e      	beq.n	801c1b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 801c116:	b2a3      	uxth	r3, r4
 801c118:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 801c11c:	435f      	muls	r7, r3
 801c11e:	fb0e fe03 	mul.w	lr, lr, r3
 801c122:	435a      	muls	r2, r3
 801c124:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c128:	f04f 0c00 	mov.w	ip, #0
 801c12c:	b2a4      	uxth	r4, r4
 801c12e:	45b4      	cmp	ip, r6
 801c130:	da5e      	bge.n	801c1f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 801c132:	4603      	mov	r3, r0
 801c134:	f04f 0a00 	mov.w	sl, #0
 801c138:	45aa      	cmp	sl, r5
 801c13a:	f103 0303 	add.w	r3, r3, #3
 801c13e:	da2f      	bge.n	801c1a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x114>
 801c140:	f813 9c03 	ldrb.w	r9, [r3, #-3]
 801c144:	fb19 f904 	smulbb	r9, r9, r4
 801c148:	4491      	add	r9, r2
 801c14a:	fa1f f989 	uxth.w	r9, r9
 801c14e:	f109 0b01 	add.w	fp, r9, #1
 801c152:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c156:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c15a:	f803 9c03 	strb.w	r9, [r3, #-3]
 801c15e:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 801c162:	fb19 f904 	smulbb	r9, r9, r4
 801c166:	44f1      	add	r9, lr
 801c168:	fa1f f989 	uxth.w	r9, r9
 801c16c:	f109 0b01 	add.w	fp, r9, #1
 801c170:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c174:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c178:	f803 9c02 	strb.w	r9, [r3, #-2]
 801c17c:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 801c180:	fb19 f904 	smulbb	r9, r9, r4
 801c184:	44b9      	add	r9, r7
 801c186:	fa1f f989 	uxth.w	r9, r9
 801c18a:	f109 0b01 	add.w	fp, r9, #1
 801c18e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c192:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c196:	f803 9c01 	strb.w	r9, [r3, #-1]
 801c19a:	f10a 0a01 	add.w	sl, sl, #1
 801c19e:	e7cb      	b.n	801c138 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 801c1a0:	f8b8 3000 	ldrh.w	r3, [r8]
 801c1a4:	1b5b      	subs	r3, r3, r5
 801c1a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1aa:	440b      	add	r3, r1
 801c1ac:	4418      	add	r0, r3
 801c1ae:	f10c 0c01 	add.w	ip, ip, #1
 801c1b2:	e7bc      	b.n	801c12e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa2>
 801c1b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c1b8:	2400      	movs	r4, #0
 801c1ba:	42b4      	cmp	r4, r6
 801c1bc:	da18      	bge.n	801c1f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 801c1be:	4603      	mov	r3, r0
 801c1c0:	f04f 0800 	mov.w	r8, #0
 801c1c4:	45a8      	cmp	r8, r5
 801c1c6:	f103 0303 	add.w	r3, r3, #3
 801c1ca:	da08      	bge.n	801c1de <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x152>
 801c1cc:	f803 2c03 	strb.w	r2, [r3, #-3]
 801c1d0:	f803 ec02 	strb.w	lr, [r3, #-2]
 801c1d4:	f803 7c01 	strb.w	r7, [r3, #-1]
 801c1d8:	f108 0801 	add.w	r8, r8, #1
 801c1dc:	e7f2      	b.n	801c1c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x138>
 801c1de:	f8bc 3000 	ldrh.w	r3, [ip]
 801c1e2:	1b5b      	subs	r3, r3, r5
 801c1e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1e8:	440b      	add	r3, r1
 801c1ea:	4418      	add	r0, r3
 801c1ec:	3401      	adds	r4, #1
 801c1ee:	e7e4      	b.n	801c1ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x12e>
 801c1f0:	4b0c      	ldr	r3, [pc, #48]	; (801c224 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x198>)
 801c1f2:	6818      	ldr	r0, [r3, #0]
 801c1f4:	6803      	ldr	r3, [r0, #0]
 801c1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1f8:	4798      	blx	r3
 801c1fa:	e755      	b.n	801c0a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801c1fc:	6808      	ldr	r0, [r1, #0]
 801c1fe:	6849      	ldr	r1, [r1, #4]
 801c200:	4d08      	ldr	r5, [pc, #32]	; (801c224 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x198>)
 801c202:	ab04      	add	r3, sp, #16
 801c204:	c303      	stmia	r3!, {r0, r1}
 801c206:	a804      	add	r0, sp, #16
 801c208:	f7fd fe8a 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c20c:	6828      	ldr	r0, [r5, #0]
 801c20e:	6803      	ldr	r3, [r0, #0]
 801c210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c212:	4798      	blx	r3
 801c214:	2cff      	cmp	r4, #255	; 0xff
 801c216:	462b      	mov	r3, r5
 801c218:	f47f af49 	bne.w	801c0ae <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 801c21c:	f010 0f02 	tst.w	r0, #2
 801c220:	e747      	b.n	801c0b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 801c222:	bf00      	nop
 801c224:	20009d70 	.word	0x20009d70
 801c228:	20009d68 	.word	0x20009d68

0801c22c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c230:	b095      	sub	sp, #84	; 0x54
 801c232:	461d      	mov	r5, r3
 801c234:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 801c238:	9305      	str	r3, [sp, #20]
 801c23a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c23c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c240:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 801c244:	f89d b08c 	ldrb.w	fp, [sp, #140]	; 0x8c
 801c248:	2600      	movs	r6, #0
 801c24a:	a812      	add	r0, sp, #72	; 0x48
 801c24c:	4617      	mov	r7, r2
 801c24e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801c252:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801c256:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 801c25a:	468a      	mov	sl, r1
 801c25c:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
 801c260:	f8ad 604a 	strh.w	r6, [sp, #74]	; 0x4a
 801c264:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 801c268:	f7fd fe5a 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c26c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c26e:	682c      	ldr	r4, [r5, #0]
 801c270:	6818      	ldr	r0, [r3, #0]
 801c272:	f9b8 3000 	ldrsh.w	r3, [r8]
 801c276:	f9b9 e000 	ldrsh.w	lr, [r9]
 801c27a:	18e1      	adds	r1, r4, r3
 801c27c:	1b00      	subs	r0, r0, r4
 801c27e:	ebae 0c01 	sub.w	ip, lr, r1
 801c282:	4560      	cmp	r0, ip
 801c284:	f341 8222 	ble.w	801d6cc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x14a0>
 801c288:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 801c28c:	44f1      	add	r9, lr
 801c28e:	fa0f f989 	sxth.w	r9, r9
 801c292:	4549      	cmp	r1, r9
 801c294:	f301 821a 	bgt.w	801d6cc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x14a0>
 801c298:	ea6f 020b 	mvn.w	r2, fp
 801c29c:	b2d2      	uxtb	r2, r2
 801c29e:	9208      	str	r2, [sp, #32]
 801c2a0:	f8da 2000 	ldr.w	r2, [sl]
 801c2a4:	9201      	str	r2, [sp, #4]
 801c2a6:	f9b8 8002 	ldrsh.w	r8, [r8, #2]
 801c2aa:	696a      	ldr	r2, [r5, #20]
 801c2ac:	ed95 3a07 	vldr	s6, [r5, #28]
 801c2b0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801c2b4:	edd7 4a09 	vldr	s9, [r7, #36]	; 0x24
 801c2b8:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 801c2bc:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 801c2c0:	ed95 2a0d 	vldr	s4, [r5, #52]	; 0x34
 801c2c4:	4442      	add	r2, r8
 801c2c6:	f8da 8004 	ldr.w	r8, [sl, #4]
 801c2ca:	fb08 4802 	mla	r8, r8, r2, r4
 801c2ce:	4498      	add	r8, r3
 801c2d0:	9a01      	ldr	r2, [sp, #4]
 801c2d2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c2d6:	eb02 0a08 	add.w	sl, r2, r8
 801c2da:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 801c2de:	4282      	cmp	r2, r0
 801c2e0:	bfa8      	it	ge
 801c2e2:	4602      	movge	r2, r0
 801c2e4:	ee07 2a10 	vmov	s14, r2
 801c2e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c2ec:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801c2f0:	ee67 4a24 	vmul.f32	s9, s14, s9
 801c2f4:	ee27 4a04 	vmul.f32	s8, s14, s8
 801c2f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c2fc:	eec3 6a83 	vdiv.f32	s13, s7, s6
 801c300:	458e      	cmp	lr, r1
 801c302:	9206      	str	r2, [sp, #24]
 801c304:	ee77 5a84 	vadd.f32	s11, s15, s8
 801c308:	ee32 5a07 	vadd.f32	s10, s4, s14
 801c30c:	ee33 6a24 	vadd.f32	s12, s6, s9
 801c310:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c314:	ee22 2a26 	vmul.f32	s4, s4, s13
 801c318:	dc01      	bgt.n	801c31e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf2>
 801c31a:	9609      	str	r6, [sp, #36]	; 0x24
 801c31c:	e02b      	b.n	801c376 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x14a>
 801c31e:	9a06      	ldr	r2, [sp, #24]
 801c320:	fb9c f1f2 	sdiv	r1, ip, r2
 801c324:	ee06 1a90 	vmov	s13, r1
 801c328:	434a      	muls	r2, r1
 801c32a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c32e:	ebac 0502 	sub.w	r5, ip, r2
 801c332:	2900      	cmp	r1, #0
 801c334:	9509      	str	r5, [sp, #36]	; 0x24
 801c336:	eea4 6aa6 	vfma.f32	s12, s9, s13
 801c33a:	eee4 5a26 	vfma.f32	s11, s8, s13
 801c33e:	eea7 5a26 	vfma.f32	s10, s14, s13
 801c342:	dd13      	ble.n	801c36c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x140>
 801c344:	ee76 7a64 	vsub.f32	s15, s12, s9
 801c348:	ee35 2a47 	vsub.f32	s4, s10, s14
 801c34c:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c354:	bf18      	it	ne
 801c356:	eec3 6aa7 	vdivne.f32	s13, s7, s15
 801c35a:	ee75 7ac4 	vsub.f32	s15, s11, s8
 801c35e:	bf08      	it	eq
 801c360:	eef0 6a63 	vmoveq.f32	s13, s7
 801c364:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c368:	ee22 2a26 	vmul.f32	s4, s4, s13
 801c36c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801c370:	1a80      	subs	r0, r0, r2
 801c372:	448a      	add	sl, r1
 801c374:	4414      	add	r4, r2
 801c376:	18e2      	adds	r2, r4, r3
 801c378:	4402      	add	r2, r0
 801c37a:	4591      	cmp	r9, r2
 801c37c:	bfbc      	itt	lt
 801c37e:	eba9 0003 	sublt.w	r0, r9, r3
 801c382:	1b00      	sublt	r0, r0, r4
 801c384:	2800      	cmp	r0, #0
 801c386:	f341 81a1 	ble.w	801d6cc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x14a0>
 801c38a:	9a06      	ldr	r2, [sp, #24]
 801c38c:	9b06      	ldr	r3, [sp, #24]
 801c38e:	fb90 f3f3 	sdiv	r3, r0, r3
 801c392:	9307      	str	r3, [sp, #28]
 801c394:	fb02 0313 	mls	r3, r2, r3, r0
 801c398:	930a      	str	r3, [sp, #40]	; 0x28
 801c39a:	b91b      	cbnz	r3, 801c3a4 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x178>
 801c39c:	9b07      	ldr	r3, [sp, #28]
 801c39e:	920a      	str	r2, [sp, #40]	; 0x28
 801c3a0:	3b01      	subs	r3, #1
 801c3a2:	9307      	str	r3, [sp, #28]
 801c3a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c3a6:	eddf 6acc 	vldr	s13, [pc, #816]	; 801c6d8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4ac>
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	9302      	str	r3, [sp, #8]
 801c3ae:	9b05      	ldr	r3, [sp, #20]
 801c3b0:	f003 0301 	and.w	r3, r3, #1
 801c3b4:	9311      	str	r3, [sp, #68]	; 0x44
 801c3b6:	9b07      	ldr	r3, [sp, #28]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	dc03      	bgt.n	801c3c4 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801c3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	f341 8184 	ble.w	801d6cc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x14a0>
 801c3c4:	ee83 3a86 	vdiv.f32	s6, s7, s12
 801c3c8:	9a06      	ldr	r2, [sp, #24]
 801c3ca:	9807      	ldr	r0, [sp, #28]
 801c3cc:	eef0 1a67 	vmov.f32	s3, s15
 801c3d0:	ee65 2a83 	vmul.f32	s5, s11, s6
 801c3d4:	eefe 1ac8 	vcvt.s32.f32	s3, s3, #16
 801c3d8:	ee25 3a03 	vmul.f32	s6, s10, s6
 801c3dc:	ee72 7ae7 	vsub.f32	s15, s5, s15
 801c3e0:	ee11 9a90 	vmov	r9, s3
 801c3e4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801c3e8:	eef0 1a42 	vmov.f32	s3, s4
 801c3ec:	ee33 2a42 	vsub.f32	s4, s6, s4
 801c3f0:	ee17 1a90 	vmov	r1, s15
 801c3f4:	eebe 2ac8 	vcvt.s32.f32	s4, s4, #16
 801c3f8:	fb91 f2f2 	sdiv	r2, r1, r2
 801c3fc:	ee12 1a10 	vmov	r1, s4
 801c400:	9203      	str	r2, [sp, #12]
 801c402:	9a06      	ldr	r2, [sp, #24]
 801c404:	fb91 f2f2 	sdiv	r2, r1, r2
 801c408:	9906      	ldr	r1, [sp, #24]
 801c40a:	9204      	str	r2, [sp, #16]
 801c40c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c40e:	2800      	cmp	r0, #0
 801c410:	bfc8      	it	gt
 801c412:	460a      	movgt	r2, r1
 801c414:	4690      	mov	r8, r2
 801c416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c418:	eefe 1ac8 	vcvt.s32.f32	s3, s3, #16
 801c41c:	2a00      	cmp	r2, #0
 801c41e:	ee11 3a90 	vmov	r3, s3
 801c422:	dd0d      	ble.n	801c440 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x214>
 801c424:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c428:	9903      	ldr	r1, [sp, #12]
 801c42a:	4492      	add	sl, r2
 801c42c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c42e:	fb01 9902 	mla	r9, r1, r2, r9
 801c432:	9904      	ldr	r1, [sp, #16]
 801c434:	eba8 0802 	sub.w	r8, r8, r2
 801c438:	fb01 3302 	mla	r3, r1, r2, r3
 801c43c:	2200      	movs	r2, #0
 801c43e:	9209      	str	r2, [sp, #36]	; 0x24
 801c440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c442:	b91a      	cbnz	r2, 801c44c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x220>
 801c444:	f509 4900 	add.w	r9, r9, #32768	; 0x8000
 801c448:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801c44c:	ea5f 4229 	movs.w	r2, r9, asr #16
 801c450:	d43a      	bmi.n	801c4c8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x29c>
 801c452:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	; 0x4c
 801c456:	42a2      	cmp	r2, r4
 801c458:	da36      	bge.n	801c4c8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x29c>
 801c45a:	141a      	asrs	r2, r3, #16
 801c45c:	d434      	bmi.n	801c4c8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x29c>
 801c45e:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
 801c462:	4282      	cmp	r2, r0
 801c464:	da30      	bge.n	801c4c8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x29c>
 801c466:	9903      	ldr	r1, [sp, #12]
 801c468:	f108 32ff 	add.w	r2, r8, #4294967295
 801c46c:	fb02 9101 	mla	r1, r2, r1, r9
 801c470:	1409      	asrs	r1, r1, #16
 801c472:	d429      	bmi.n	801c4c8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x29c>
 801c474:	42a1      	cmp	r1, r4
 801c476:	da27      	bge.n	801c4c8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x29c>
 801c478:	9904      	ldr	r1, [sp, #16]
 801c47a:	fb02 3201 	mla	r2, r2, r1, r3
 801c47e:	1412      	asrs	r2, r2, #16
 801c480:	d422      	bmi.n	801c4c8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x29c>
 801c482:	4282      	cmp	r2, r0
 801c484:	bfb4      	ite	lt
 801c486:	2200      	movlt	r2, #0
 801c488:	2201      	movge	r2, #1
 801c48a:	9201      	str	r2, [sp, #4]
 801c48c:	9a05      	ldr	r2, [sp, #20]
 801c48e:	2a0a      	cmp	r2, #10
 801c490:	f000 86be 	beq.w	801d210 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe4>
 801c494:	f200 8122 	bhi.w	801c6dc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4b0>
 801c498:	2a05      	cmp	r2, #5
 801c49a:	f000 85de 	beq.w	801d05a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe2e>
 801c49e:	d815      	bhi.n	801c4cc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a0>
 801c4a0:	2a04      	cmp	r2, #4
 801c4a2:	f000 864a 	beq.w	801d13a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf0e>
 801c4a6:	9b07      	ldr	r3, [sp, #28]
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	ee36 6a24 	vadd.f32	s12, s12, s9
 801c4ae:	ee75 5a84 	vadd.f32	s11, s11, s8
 801c4b2:	ee35 5a07 	vadd.f32	s10, s10, s14
 801c4b6:	f341 8109 	ble.w	801d6cc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x14a0>
 801c4ba:	3b01      	subs	r3, #1
 801c4bc:	9307      	str	r3, [sp, #28]
 801c4be:	eeb0 2a43 	vmov.f32	s4, s6
 801c4c2:	eef0 7a62 	vmov.f32	s15, s5
 801c4c6:	e776      	b.n	801c3b6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18a>
 801c4c8:	2201      	movs	r2, #1
 801c4ca:	e7de      	b.n	801c48a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x25e>
 801c4cc:	9a05      	ldr	r2, [sp, #20]
 801c4ce:	2a08      	cmp	r2, #8
 801c4d0:	f000 8704 	beq.w	801d2dc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10b0>
 801c4d4:	2a09      	cmp	r2, #9
 801c4d6:	d1e6      	bne.n	801c4a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27a>
 801c4d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c4dc:	920b      	str	r2, [sp, #44]	; 0x2c
 801c4de:	f10a 0703 	add.w	r7, sl, #3
 801c4e2:	f04f 0e00 	mov.w	lr, #0
 801c4e6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 801c4ea:	fa1f fc8b 	uxth.w	ip, fp
 801c4ee:	45f0      	cmp	r8, lr
 801c4f0:	f340 82e1 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801c4f4:	9801      	ldr	r0, [sp, #4]
 801c4f6:	ea4f 4129 	mov.w	r1, r9, asr #16
 801c4fa:	141a      	asrs	r2, r3, #16
 801c4fc:	b178      	cbz	r0, 801c51e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2f2>
 801c4fe:	2900      	cmp	r1, #0
 801c500:	f2c0 80e1 	blt.w	801c6c6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x49a>
 801c504:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 801c508:	4281      	cmp	r1, r0
 801c50a:	f280 80dc 	bge.w	801c6c6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x49a>
 801c50e:	2a00      	cmp	r2, #0
 801c510:	f2c0 80d9 	blt.w	801c6c6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x49a>
 801c514:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
 801c518:	4282      	cmp	r2, r0
 801c51a:	f280 80d4 	bge.w	801c6c6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x49a>
 801c51e:	f1bb 0f00 	cmp.w	fp, #0
 801c522:	f000 80d0 	beq.w	801c6c6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x49a>
 801c526:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	; 0x4c
 801c52a:	fb02 1204 	mla	r2, r2, r4, r1
 801c52e:	9902      	ldr	r1, [sp, #8]
 801c530:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 801c534:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801c538:	6846      	ldr	r6, [r0, #4]
 801c53a:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 801c53e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801c542:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 801c546:	6845      	ldr	r5, [r0, #4]
 801c548:	fa1f f089 	uxth.w	r0, r9
 801c54c:	ee01 0a90 	vmov	s3, r0
 801c550:	b298      	uxth	r0, r3
 801c552:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 801c556:	ee00 0a10 	vmov	s0, r0
 801c55a:	0c10      	lsrs	r0, r2, #16
 801c55c:	ee07 0a90 	vmov	s15, r0
 801c560:	0c30      	lsrs	r0, r6, #16
 801c562:	ee02 0a10 	vmov	s4, r0
 801c566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c56a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c56e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c572:	ee61 1aa6 	vmul.f32	s3, s3, s13
 801c576:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801c57a:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c57e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 801c582:	0c08      	lsrs	r0, r1, #16
 801c584:	eee1 7a82 	vfma.f32	s15, s3, s4
 801c588:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801c58c:	b2d2      	uxtb	r2, r2
 801c58e:	ee02 0a10 	vmov	s4, r0
 801c592:	0c28      	lsrs	r0, r5, #16
 801c594:	ee01 0a10 	vmov	s2, r0
 801c598:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c59c:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 801c5a0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801c5a4:	ee31 1a42 	vsub.f32	s2, s2, s4
 801c5a8:	ee20 0a26 	vmul.f32	s0, s0, s13
 801c5ac:	eea1 2a81 	vfma.f32	s4, s3, s2
 801c5b0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c5b4:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c5b8:	eee0 7a02 	vfma.f32	s15, s0, s4
 801c5bc:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801c5c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c5c4:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 801c5c8:	ee07 4a90 	vmov	s15, r4
 801c5cc:	f3c6 2407 	ubfx	r4, r6, #8, #8
 801c5d0:	ee02 4a10 	vmov	s4, r4
 801c5d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c5d8:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c5dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801c5e0:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c5e4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801c5e8:	eee1 7a82 	vfma.f32	s15, s3, s4
 801c5ec:	b2c9      	uxtb	r1, r1
 801c5ee:	ee02 4a10 	vmov	s4, r4
 801c5f2:	f3c5 2407 	ubfx	r4, r5, #8, #8
 801c5f6:	ee01 4a10 	vmov	s2, r4
 801c5fa:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c5fe:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 801c602:	ee31 1a42 	vsub.f32	s2, s2, s4
 801c606:	eea1 2a81 	vfma.f32	s4, s3, s2
 801c60a:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c60e:	eee0 7a02 	vfma.f32	s15, s0, s4
 801c612:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801c616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c61a:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 801c61e:	ee07 2a90 	vmov	s15, r2
 801c622:	b2f2      	uxtb	r2, r6
 801c624:	ee02 2a10 	vmov	s4, r2
 801c628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c62c:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c630:	b2ea      	uxtb	r2, r5
 801c632:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c636:	ee01 2a10 	vmov	s2, r2
 801c63a:	eee1 7a82 	vfma.f32	s15, s3, s4
 801c63e:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801c642:	ee02 1a10 	vmov	s4, r1
 801c646:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 801c64a:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c64e:	ee31 1a42 	vsub.f32	s2, s2, s4
 801c652:	eea1 2a81 	vfma.f32	s4, s3, s2
 801c656:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c65a:	eee0 7a02 	vfma.f32	s15, s0, s4
 801c65e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801c662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c666:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 801c66a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801c66e:	d024      	beq.n	801c6ba <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x48e>
 801c670:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c672:	f817 1c03 	ldrb.w	r1, [r7, #-3]
 801c676:	fb12 f20c 	smulbb	r2, r2, ip
 801c67a:	fb01 2205 	mla	r2, r1, r5, r2
 801c67e:	b292      	uxth	r2, r2
 801c680:	1c51      	adds	r1, r2, #1
 801c682:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c686:	f817 1c02 	ldrb.w	r1, [r7, #-2]
 801c68a:	fb14 f40c 	smulbb	r4, r4, ip
 801c68e:	fb01 4405 	mla	r4, r1, r5, r4
 801c692:	b2a4      	uxth	r4, r4
 801c694:	1c61      	adds	r1, r4, #1
 801c696:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 801c69a:	f817 1c01 	ldrb.w	r1, [r7, #-1]
 801c69e:	fb10 f00c 	smulbb	r0, r0, ip
 801c6a2:	fb01 0005 	mla	r0, r1, r5, r0
 801c6a6:	b280      	uxth	r0, r0
 801c6a8:	1c41      	adds	r1, r0, #1
 801c6aa:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801c6ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c6b2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c6b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c6ba:	f807 2c03 	strb.w	r2, [r7, #-3]
 801c6be:	f807 4c02 	strb.w	r4, [r7, #-2]
 801c6c2:	f807 0c01 	strb.w	r0, [r7, #-1]
 801c6c6:	9a03      	ldr	r2, [sp, #12]
 801c6c8:	4491      	add	r9, r2
 801c6ca:	9a04      	ldr	r2, [sp, #16]
 801c6cc:	f10e 0e01 	add.w	lr, lr, #1
 801c6d0:	4413      	add	r3, r2
 801c6d2:	3703      	adds	r7, #3
 801c6d4:	e70b      	b.n	801c4ee <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2c2>
 801c6d6:	bf00      	nop
 801c6d8:	37800000 	.word	0x37800000
 801c6dc:	9a05      	ldr	r2, [sp, #20]
 801c6de:	2a2d      	cmp	r2, #45	; 0x2d
 801c6e0:	f000 81c4 	beq.w	801ca6c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x840>
 801c6e4:	d815      	bhi.n	801c712 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4e6>
 801c6e6:	2a0b      	cmp	r2, #11
 801c6e8:	f000 8659 	beq.w	801d39e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1172>
 801c6ec:	2a2c      	cmp	r2, #44	; 0x2c
 801c6ee:	f47f aeda 	bne.w	801c4a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27a>
 801c6f2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c6f4:	6852      	ldr	r2, [r2, #4]
 801c6f6:	7812      	ldrb	r2, [r2, #0]
 801c6f8:	2a01      	cmp	r2, #1
 801c6fa:	f000 83cb 	beq.w	801ce94 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc68>
 801c6fe:	f0c0 8363 	bcc.w	801cdc8 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb9c>
 801c702:	2a02      	cmp	r2, #2
 801c704:	f47f aecf 	bne.w	801c4a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27a>
 801c708:	4be1      	ldr	r3, [pc, #900]	; (801ca90 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x864>)
 801c70a:	4ae2      	ldr	r2, [pc, #904]	; (801ca94 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x868>)
 801c70c:	f240 31e9 	movw	r1, #1001	; 0x3e9
 801c710:	e1ba      	b.n	801ca88 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x85c>
 801c712:	9a05      	ldr	r2, [sp, #20]
 801c714:	2a2e      	cmp	r2, #46	; 0x2e
 801c716:	f000 8431 	beq.w	801cf7c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd50>
 801c71a:	2a2f      	cmp	r2, #47	; 0x2f
 801c71c:	f47f aec3 	bne.w	801c4a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27a>
 801c720:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c722:	6852      	ldr	r2, [r2, #4]
 801c724:	7812      	ldrb	r2, [r2, #0]
 801c726:	2a00      	cmp	r2, #0
 801c728:	f47f aebd 	bne.w	801c4a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27a>
 801c72c:	920c      	str	r2, [sp, #48]	; 0x30
 801c72e:	fa1f f28b 	uxth.w	r2, fp
 801c732:	f10a 0403 	add.w	r4, sl, #3
 801c736:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 801c73a:	920b      	str	r2, [sp, #44]	; 0x2c
 801c73c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c73e:	4590      	cmp	r8, r2
 801c740:	f340 81b9 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801c744:	9901      	ldr	r1, [sp, #4]
 801c746:	ea4f 4229 	mov.w	r2, r9, asr #16
 801c74a:	1418      	asrs	r0, r3, #16
 801c74c:	b179      	cbz	r1, 801c76e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x542>
 801c74e:	2a00      	cmp	r2, #0
 801c750:	f2c0 8183 	blt.w	801ca5a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x82e>
 801c754:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801c758:	428a      	cmp	r2, r1
 801c75a:	f280 817e 	bge.w	801ca5a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x82e>
 801c75e:	2800      	cmp	r0, #0
 801c760:	f2c0 817b 	blt.w	801ca5a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x82e>
 801c764:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801c768:	4288      	cmp	r0, r1
 801c76a:	f280 8176 	bge.w	801ca5a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x82e>
 801c76e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801c772:	9d02      	ldr	r5, [sp, #8]
 801c774:	fb00 2001 	mla	r0, r0, r1, r2
 801c778:	9a02      	ldr	r2, [sp, #8]
 801c77a:	1816      	adds	r6, r2, r0
 801c77c:	5c28      	ldrb	r0, [r5, r0]
 801c77e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c780:	7875      	ldrb	r5, [r6, #1]
 801c782:	6852      	ldr	r2, [r2, #4]
 801c784:	3501      	adds	r5, #1
 801c786:	3001      	adds	r0, #1
 801c788:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
 801c78c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 801c790:	1875      	adds	r5, r6, r1
 801c792:	5c71      	ldrb	r1, [r6, r1]
 801c794:	3101      	adds	r1, #1
 801c796:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 801c79a:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 801c79e:	7869      	ldrb	r1, [r5, #1]
 801c7a0:	3101      	adds	r1, #1
 801c7a2:	ee07 ea90 	vmov	s15, lr
 801c7a6:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801c7aa:	0e3a      	lsrs	r2, r7, #24
 801c7ac:	920d      	str	r2, [sp, #52]	; 0x34
 801c7ae:	0e32      	lsrs	r2, r6, #24
 801c7b0:	920e      	str	r2, [sp, #56]	; 0x38
 801c7b2:	fa1f f289 	uxth.w	r2, r9
 801c7b6:	ee01 2a90 	vmov	s3, r2
 801c7ba:	ed9d 2a0d 	vldr	s4, [sp, #52]	; 0x34
 801c7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c7c2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c7c6:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c7ca:	ee61 1aa6 	vmul.f32	s3, s3, s13
 801c7ce:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c7d2:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 801c7d6:	eee1 7a82 	vfma.f32	s15, s3, s4
 801c7da:	b29a      	uxth	r2, r3
 801c7dc:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 801c7e0:	ee00 ca10 	vmov	s0, ip
 801c7e4:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c7e8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c7ec:	ee00 2a90 	vmov	s1, r2
 801c7f0:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c7f4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c7f8:	eea1 2a80 	vfma.f32	s4, s3, s0
 801c7fc:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801c800:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c804:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c808:	ee77 7a81 	vadd.f32	s15, s15, s2
 801c80c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c810:	ee17 1a90 	vmov	r1, s15
 801c814:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801c818:	f000 811f 	beq.w	801ca5a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x82e>
 801c81c:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 801c820:	fb0e f202 	mul.w	r2, lr, r2
 801c824:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c828:	fb0e fe00 	mul.w	lr, lr, r0
 801c82c:	0a10      	lsrs	r0, r2, #8
 801c82e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c832:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 801c836:	4410      	add	r0, r2
 801c838:	f50e 7280 	add.w	r2, lr, #256	; 0x100
 801c83c:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801c840:	0a00      	lsrs	r0, r0, #8
 801c842:	0a12      	lsrs	r2, r2, #8
 801c844:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c848:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c84c:	4310      	orrs	r0, r2
 801c84e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801c852:	0e3a      	lsrs	r2, r7, #24
 801c854:	fb02 fe0e 	mul.w	lr, r2, lr
 801c858:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c85c:	4357      	muls	r7, r2
 801c85e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801c862:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c866:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c86a:	4496      	add	lr, r2
 801c86c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801c870:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801c874:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c878:	0a12      	lsrs	r2, r2, #8
 801c87a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c87e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c882:	ea4e 0e02 	orr.w	lr, lr, r2
 801c886:	0e37      	lsrs	r7, r6, #24
 801c888:	f006 12ff 	and.w	r2, r6, #16711935	; 0xff00ff
 801c88c:	437a      	muls	r2, r7
 801c88e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c892:	4377      	muls	r7, r6
 801c894:	0a16      	lsrs	r6, r2, #8
 801c896:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c89a:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 801c89e:	4432      	add	r2, r6
 801c8a0:	f507 7680 	add.w	r6, r7, #256	; 0x100
 801c8a4:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 801c8a8:	0a12      	lsrs	r2, r2, #8
 801c8aa:	0a3f      	lsrs	r7, r7, #8
 801c8ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c8b0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c8b4:	433a      	orrs	r2, r7
 801c8b6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801c8ba:	fb0c f707 	mul.w	r7, ip, r7
 801c8be:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c8c2:	fb0c fc05 	mul.w	ip, ip, r5
 801c8c6:	0a3d      	lsrs	r5, r7, #8
 801c8c8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c8cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c8d0:	442f      	add	r7, r5
 801c8d2:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801c8d6:	0a3d      	lsrs	r5, r7, #8
 801c8d8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801c8dc:	eb06 251c 	add.w	r5, r6, ip, lsr #8
 801c8e0:	0c06      	lsrs	r6, r0, #16
 801c8e2:	ee07 6a90 	vmov	s15, r6
 801c8e6:	ea4f 461e 	mov.w	r6, lr, lsr #16
 801c8ea:	ee02 6a10 	vmov	s4, r6
 801c8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c8f2:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c8f6:	0a2d      	lsrs	r5, r5, #8
 801c8f8:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c8fc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c900:	433d      	orrs	r5, r7
 801c902:	0c16      	lsrs	r6, r2, #16
 801c904:	eee1 7a82 	vfma.f32	s15, s3, s4
 801c908:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801c90c:	b2c0      	uxtb	r0, r0
 801c90e:	ee02 6a10 	vmov	s4, r6
 801c912:	0c2e      	lsrs	r6, r5, #16
 801c914:	ee00 6a10 	vmov	s0, r6
 801c918:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c91c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c920:	29ff      	cmp	r1, #255	; 0xff
 801c922:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c926:	eea1 2a80 	vfma.f32	s4, s3, s0
 801c92a:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c92e:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c932:	ee77 7a81 	vadd.f32	s15, s15, s2
 801c936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c93a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801c93e:	ee07 7a90 	vmov	s15, r7
 801c942:	f3ce 2707 	ubfx	r7, lr, #8, #8
 801c946:	ee02 7a10 	vmov	s4, r7
 801c94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c94e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c952:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801c956:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c95a:	fa5f fe8e 	uxtb.w	lr, lr
 801c95e:	eee1 7a82 	vfma.f32	s15, s3, s4
 801c962:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801c966:	ee02 7a10 	vmov	s4, r7
 801c96a:	f3c5 2707 	ubfx	r7, r5, #8, #8
 801c96e:	ee00 7a10 	vmov	s0, r7
 801c972:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c976:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c97a:	b2d2      	uxtb	r2, r2
 801c97c:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c980:	eea1 2a80 	vfma.f32	s4, s3, s0
 801c984:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c988:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c98c:	ee02 ea10 	vmov	s4, lr
 801c990:	ee77 7a81 	vadd.f32	s15, s15, s2
 801c994:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c99c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801c9a0:	ee07 0a90 	vmov	s15, r0
 801c9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c9a8:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801c9ac:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c9b0:	eee1 7a82 	vfma.f32	s15, s3, s4
 801c9b4:	ee02 2a10 	vmov	s4, r2
 801c9b8:	b2ea      	uxtb	r2, r5
 801c9ba:	ee00 2a10 	vmov	s0, r2
 801c9be:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801c9c2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801c9c6:	ee30 0a42 	vsub.f32	s0, s0, s4
 801c9ca:	eea1 2a80 	vfma.f32	s4, s3, s0
 801c9ce:	ee32 2a67 	vsub.f32	s4, s4, s15
 801c9d2:	eee0 7a82 	vfma.f32	s15, s1, s4
 801c9d6:	ee77 7a81 	vadd.f32	s15, s15, s2
 801c9da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c9de:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801c9e2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801c9e6:	d102      	bne.n	801c9ee <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7c2>
 801c9e8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c9ec:	d02f      	beq.n	801ca4e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 801c9ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c9f0:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 801c9f4:	4341      	muls	r1, r0
 801c9f6:	1c48      	adds	r0, r1, #1
 801c9f8:	eb00 2121 	add.w	r1, r0, r1, asr #8
 801c9fc:	ea6f 2121 	mvn.w	r1, r1, asr #8
 801ca00:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 801ca04:	b2c9      	uxtb	r1, r1
 801ca06:	fb12 f205 	smulbb	r2, r2, r5
 801ca0a:	fb00 2201 	mla	r2, r0, r1, r2
 801ca0e:	b292      	uxth	r2, r2
 801ca10:	1c50      	adds	r0, r2, #1
 801ca12:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ca16:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 801ca1a:	fb1c fc05 	smulbb	ip, ip, r5
 801ca1e:	fb00 cc01 	mla	ip, r0, r1, ip
 801ca22:	fa1f fc8c 	uxth.w	ip, ip
 801ca26:	f10c 0001 	add.w	r0, ip, #1
 801ca2a:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801ca2e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 801ca32:	fb16 f605 	smulbb	r6, r6, r5
 801ca36:	fb00 6601 	mla	r6, r0, r1, r6
 801ca3a:	b2b6      	uxth	r6, r6
 801ca3c:	1c71      	adds	r1, r6, #1
 801ca3e:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801ca42:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ca46:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ca4a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ca4e:	f804 2c03 	strb.w	r2, [r4, #-3]
 801ca52:	f804 cc02 	strb.w	ip, [r4, #-2]
 801ca56:	f804 6c01 	strb.w	r6, [r4, #-1]
 801ca5a:	9a03      	ldr	r2, [sp, #12]
 801ca5c:	4491      	add	r9, r2
 801ca5e:	9a04      	ldr	r2, [sp, #16]
 801ca60:	4413      	add	r3, r2
 801ca62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca64:	3201      	adds	r2, #1
 801ca66:	920c      	str	r2, [sp, #48]	; 0x30
 801ca68:	3403      	adds	r4, #3
 801ca6a:	e667      	b.n	801c73c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x510>
 801ca6c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ca6e:	6852      	ldr	r2, [r2, #4]
 801ca70:	7812      	ldrb	r2, [r2, #0]
 801ca72:	2a01      	cmp	r2, #1
 801ca74:	f000 811d 	beq.w	801ccb2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa86>
 801ca78:	d310      	bcc.n	801ca9c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x870>
 801ca7a:	2a02      	cmp	r2, #2
 801ca7c:	f47f ad13 	bne.w	801c4a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27a>
 801ca80:	4b03      	ldr	r3, [pc, #12]	; (801ca90 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x864>)
 801ca82:	4a04      	ldr	r2, [pc, #16]	; (801ca94 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x868>)
 801ca84:	f240 318a 	movw	r1, #906	; 0x38a
 801ca88:	4803      	ldr	r0, [pc, #12]	; (801ca98 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86c>)
 801ca8a:	f001 ff1f 	bl	801e8cc <__assert_func>
 801ca8e:	bf00      	nop
 801ca90:	080223e6 	.word	0x080223e6
 801ca94:	08022989 	.word	0x08022989
 801ca98:	08022432 	.word	0x08022432
 801ca9c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801caa0:	920b      	str	r2, [sp, #44]	; 0x2c
 801caa2:	f10a 0703 	add.w	r7, sl, #3
 801caa6:	f04f 0e00 	mov.w	lr, #0
 801caaa:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 801caae:	fa1f fc8b 	uxth.w	ip, fp
 801cab2:	45f0      	cmp	r8, lr
 801cab4:	dc05      	bgt.n	801cac2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x896>
 801cab6:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 801caba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cabe:	449a      	add	sl, r3
 801cac0:	e4f1      	b.n	801c4a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27a>
 801cac2:	9901      	ldr	r1, [sp, #4]
 801cac4:	ea4f 4229 	mov.w	r2, r9, asr #16
 801cac8:	1418      	asrs	r0, r3, #16
 801caca:	b179      	cbz	r1, 801caec <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c0>
 801cacc:	2a00      	cmp	r2, #0
 801cace:	f2c0 80e8 	blt.w	801cca2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa76>
 801cad2:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801cad6:	428a      	cmp	r2, r1
 801cad8:	f280 80e3 	bge.w	801cca2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa76>
 801cadc:	2800      	cmp	r0, #0
 801cade:	f2c0 80e0 	blt.w	801cca2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa76>
 801cae2:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801cae6:	4288      	cmp	r0, r1
 801cae8:	f280 80db 	bge.w	801cca2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa76>
 801caec:	f1bb 0f00 	cmp.w	fp, #0
 801caf0:	f000 80d7 	beq.w	801cca2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa76>
 801caf4:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801caf8:	9c02      	ldr	r4, [sp, #8]
 801cafa:	fb00 2201 	mla	r2, r0, r1, r2
 801cafe:	9802      	ldr	r0, [sp, #8]
 801cb00:	1885      	adds	r5, r0, r2
 801cb02:	5ca2      	ldrb	r2, [r4, r2]
 801cb04:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801cb06:	786c      	ldrb	r4, [r5, #1]
 801cb08:	6840      	ldr	r0, [r0, #4]
 801cb0a:	3401      	adds	r4, #1
 801cb0c:	3201      	adds	r2, #1
 801cb0e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 801cb12:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801cb16:	186c      	adds	r4, r5, r1
 801cb18:	5c69      	ldrb	r1, [r5, r1]
 801cb1a:	7864      	ldrb	r4, [r4, #1]
 801cb1c:	3101      	adds	r1, #1
 801cb1e:	3401      	adds	r4, #1
 801cb20:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 801cb24:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 801cb28:	fa1f f089 	uxth.w	r0, r9
 801cb2c:	ee01 0a90 	vmov	s3, r0
 801cb30:	b298      	uxth	r0, r3
 801cb32:	ee00 0a10 	vmov	s0, r0
 801cb36:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801cb3a:	ee07 0a90 	vmov	s15, r0
 801cb3e:	f3c6 4007 	ubfx	r0, r6, #16, #8
 801cb42:	ee02 0a10 	vmov	s4, r0
 801cb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cb4a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801cb4e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801cb52:	ee61 1aa6 	vmul.f32	s3, s3, s13
 801cb56:	ee32 2a67 	vsub.f32	s4, s4, s15
 801cb5a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801cb5e:	eee1 7a82 	vfma.f32	s15, s3, s4
 801cb62:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801cb66:	b2d2      	uxtb	r2, r2
 801cb68:	ee02 0a10 	vmov	s4, r0
 801cb6c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801cb70:	ee01 0a10 	vmov	s2, r0
 801cb74:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801cb78:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 801cb7c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801cb80:	ee31 1a42 	vsub.f32	s2, s2, s4
 801cb84:	ee20 0a26 	vmul.f32	s0, s0, s13
 801cb88:	eea1 2a81 	vfma.f32	s4, s3, s2
 801cb8c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801cb90:	ee32 2a67 	vsub.f32	s4, s4, s15
 801cb94:	eee0 7a02 	vfma.f32	s15, s0, s4
 801cb98:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801cb9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cba0:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 801cba4:	ee07 4a90 	vmov	s15, r4
 801cba8:	f3c6 2407 	ubfx	r4, r6, #8, #8
 801cbac:	ee02 4a10 	vmov	s4, r4
 801cbb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cbb4:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801cbb8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801cbbc:	ee32 2a67 	vsub.f32	s4, s4, s15
 801cbc0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801cbc4:	eee1 7a82 	vfma.f32	s15, s3, s4
 801cbc8:	b2c9      	uxtb	r1, r1
 801cbca:	ee02 4a10 	vmov	s4, r4
 801cbce:	f3c5 2407 	ubfx	r4, r5, #8, #8
 801cbd2:	ee01 4a10 	vmov	s2, r4
 801cbd6:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801cbda:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 801cbde:	ee31 1a42 	vsub.f32	s2, s2, s4
 801cbe2:	eea1 2a81 	vfma.f32	s4, s3, s2
 801cbe6:	ee32 2a67 	vsub.f32	s4, s4, s15
 801cbea:	eee0 7a02 	vfma.f32	s15, s0, s4
 801cbee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801cbf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cbf6:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 801cbfa:	ee07 2a90 	vmov	s15, r2
 801cbfe:	b2f2      	uxtb	r2, r6
 801cc00:	ee02 2a10 	vmov	s4, r2
 801cc04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cc08:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801cc0c:	b2ea      	uxtb	r2, r5
 801cc0e:	ee32 2a67 	vsub.f32	s4, s4, s15
 801cc12:	ee01 2a10 	vmov	s2, r2
 801cc16:	eee1 7a82 	vfma.f32	s15, s3, s4
 801cc1a:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801cc1e:	ee02 1a10 	vmov	s4, r1
 801cc22:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 801cc26:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801cc2a:	ee31 1a42 	vsub.f32	s2, s2, s4
 801cc2e:	eea1 2a81 	vfma.f32	s4, s3, s2
 801cc32:	ee32 2a67 	vsub.f32	s4, s4, s15
 801cc36:	eee0 7a02 	vfma.f32	s15, s0, s4
 801cc3a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801cc3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cc42:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 801cc46:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801cc4a:	d024      	beq.n	801cc96 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa6a>
 801cc4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801cc4e:	f817 1c03 	ldrb.w	r1, [r7, #-3]
 801cc52:	fb12 f20c 	smulbb	r2, r2, ip
 801cc56:	fb01 2205 	mla	r2, r1, r5, r2
 801cc5a:	b292      	uxth	r2, r2
 801cc5c:	1c51      	adds	r1, r2, #1
 801cc5e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801cc62:	f817 1c02 	ldrb.w	r1, [r7, #-2]
 801cc66:	fb14 f40c 	smulbb	r4, r4, ip
 801cc6a:	fb01 4405 	mla	r4, r1, r5, r4
 801cc6e:	b2a4      	uxth	r4, r4
 801cc70:	1c61      	adds	r1, r4, #1
 801cc72:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 801cc76:	f817 1c01 	ldrb.w	r1, [r7, #-1]
 801cc7a:	fb10 f00c 	smulbb	r0, r0, ip
 801cc7e:	fb01 0005 	mla	r0, r1, r5, r0
 801cc82:	b280      	uxth	r0, r0
 801cc84:	1c41      	adds	r1, r0, #1
 801cc86:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801cc8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cc8e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801cc92:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801cc96:	f807 2c03 	strb.w	r2, [r7, #-3]
 801cc9a:	f807 4c02 	strb.w	r4, [r7, #-2]
 801cc9e:	f807 0c01 	strb.w	r0, [r7, #-1]
 801cca2:	9a03      	ldr	r2, [sp, #12]
 801cca4:	4491      	add	r9, r2
 801cca6:	9a04      	ldr	r2, [sp, #16]
 801cca8:	f10e 0e01 	add.w	lr, lr, #1
 801ccac:	4413      	add	r3, r2
 801ccae:	3703      	adds	r7, #3
 801ccb0:	e6ff      	b.n	801cab2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x886>
 801ccb2:	f10a 0203 	add.w	r2, sl, #3
 801ccb6:	920c      	str	r2, [sp, #48]	; 0x30
 801ccb8:	2200      	movs	r2, #0
 801ccba:	920d      	str	r2, [sp, #52]	; 0x34
 801ccbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ccbe:	3a03      	subs	r2, #3
 801ccc0:	920b      	str	r2, [sp, #44]	; 0x2c
 801ccc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ccc4:	4590      	cmp	r8, r2
 801ccc6:	f77f aef6 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801ccca:	9a01      	ldr	r2, [sp, #4]
 801cccc:	ea4f 4129 	mov.w	r1, r9, asr #16
 801ccd0:	1418      	asrs	r0, r3, #16
 801ccd2:	b15a      	cbz	r2, 801ccec <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xac0>
 801ccd4:	2900      	cmp	r1, #0
 801ccd6:	db6c      	blt.n	801cdb2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb86>
 801ccd8:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ccdc:	4291      	cmp	r1, r2
 801ccde:	da68      	bge.n	801cdb2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb86>
 801cce0:	2800      	cmp	r0, #0
 801cce2:	db66      	blt.n	801cdb2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb86>
 801cce4:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801cce8:	4290      	cmp	r0, r2
 801ccea:	da62      	bge.n	801cdb2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb86>
 801ccec:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ccf0:	9d02      	ldr	r5, [sp, #8]
 801ccf2:	fb00 1002 	mla	r0, r0, r2, r1
 801ccf6:	9902      	ldr	r1, [sp, #8]
 801ccf8:	5c2d      	ldrb	r5, [r5, r0]
 801ccfa:	180c      	adds	r4, r1, r0
 801ccfc:	2604      	movs	r6, #4
 801ccfe:	2003      	movs	r0, #3
 801cd00:	fb10 6505 	smlabb	r5, r0, r5, r6
 801cd04:	7866      	ldrb	r6, [r4, #1]
 801cd06:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801cd08:	2003      	movs	r0, #3
 801cd0a:	2704      	movs	r7, #4
 801cd0c:	fb10 7606 	smlabb	r6, r0, r6, r7
 801cd10:	18a0      	adds	r0, r4, r2
 801cd12:	5ca7      	ldrb	r7, [r4, r2]
 801cd14:	6849      	ldr	r1, [r1, #4]
 801cd16:	2404      	movs	r4, #4
 801cd18:	2203      	movs	r2, #3
 801cd1a:	fb12 4707 	smlabb	r7, r2, r7, r4
 801cd1e:	7842      	ldrb	r2, [r0, #1]
 801cd20:	2003      	movs	r0, #3
 801cd22:	fb10 4202 	smlabb	r2, r0, r2, r4
 801cd26:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801cd2a:	f3c9 3003 	ubfx	r0, r9, #12, #4
 801cd2e:	fb0c f400 	mul.w	r4, ip, r0
 801cd32:	10e4      	asrs	r4, r4, #3
 801cd34:	188a      	adds	r2, r1, r2
 801cd36:	f1cc 0e10 	rsb	lr, ip, #16
 801cd3a:	920e      	str	r2, [sp, #56]	; 0x38
 801cd3c:	ebae 0e00 	sub.w	lr, lr, r0
 801cd40:	ebc4 0240 	rsb	r2, r4, r0, lsl #1
 801cd44:	440d      	add	r5, r1
 801cd46:	440e      	add	r6, r1
 801cd48:	440f      	add	r7, r1
 801cd4a:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 801cd4e:	920f      	str	r2, [sp, #60]	; 0x3c
 801cd50:	ebc4 0c4c 	rsb	ip, r4, ip, lsl #1
 801cd54:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801cd56:	f816 1b01 	ldrb.w	r1, [r6], #1
 801cd5a:	f815 2b01 	ldrb.w	r2, [r5], #1
 801cd5e:	4341      	muls	r1, r0
 801cd60:	fb0e 1202 	mla	r2, lr, r2, r1
 801cd64:	980e      	ldr	r0, [sp, #56]	; 0x38
 801cd66:	f817 1b01 	ldrb.w	r1, [r7], #1
 801cd6a:	fb0c 2201 	mla	r2, ip, r1, r2
 801cd6e:	f810 1b01 	ldrb.w	r1, [r0], #1
 801cd72:	900e      	str	r0, [sp, #56]	; 0x38
 801cd74:	fb04 2201 	mla	r2, r4, r1, r2
 801cd78:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801cd7c:	f3c2 1247 	ubfx	r2, r2, #5, #8
 801cd80:	d00f      	beq.n	801cda2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb76>
 801cd82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cd84:	7809      	ldrb	r1, [r1, #0]
 801cd86:	9110      	str	r1, [sp, #64]	; 0x40
 801cd88:	9908      	ldr	r1, [sp, #32]
 801cd8a:	4608      	mov	r0, r1
 801cd8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801cd8e:	fb12 f20b 	smulbb	r2, r2, fp
 801cd92:	fb01 2200 	mla	r2, r1, r0, r2
 801cd96:	b292      	uxth	r2, r2
 801cd98:	1c51      	adds	r1, r2, #1
 801cd9a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801cd9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cda2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cda4:	f801 2b01 	strb.w	r2, [r1], #1
 801cda8:	460a      	mov	r2, r1
 801cdaa:	910b      	str	r1, [sp, #44]	; 0x2c
 801cdac:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cdae:	428a      	cmp	r2, r1
 801cdb0:	d1d0      	bne.n	801cd54 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb28>
 801cdb2:	9a03      	ldr	r2, [sp, #12]
 801cdb4:	4491      	add	r9, r2
 801cdb6:	9a04      	ldr	r2, [sp, #16]
 801cdb8:	4413      	add	r3, r2
 801cdba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cdbc:	3201      	adds	r2, #1
 801cdbe:	920d      	str	r2, [sp, #52]	; 0x34
 801cdc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cdc2:	3203      	adds	r2, #3
 801cdc4:	920c      	str	r2, [sp, #48]	; 0x30
 801cdc6:	e779      	b.n	801ccbc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa90>
 801cdc8:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801cdcc:	f10a 0403 	add.w	r4, sl, #3
 801cdd0:	2500      	movs	r5, #0
 801cdd2:	fa1f f68b 	uxth.w	r6, fp
 801cdd6:	45a8      	cmp	r8, r5
 801cdd8:	f77f ae6d 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801cddc:	9901      	ldr	r1, [sp, #4]
 801cdde:	ea4f 4229 	mov.w	r2, r9, asr #16
 801cde2:	1418      	asrs	r0, r3, #16
 801cde4:	b159      	cbz	r1, 801cdfe <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xbd2>
 801cde6:	2a00      	cmp	r2, #0
 801cde8:	db4d      	blt.n	801ce86 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc5a>
 801cdea:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801cdee:	428a      	cmp	r2, r1
 801cdf0:	da49      	bge.n	801ce86 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc5a>
 801cdf2:	2800      	cmp	r0, #0
 801cdf4:	db47      	blt.n	801ce86 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc5a>
 801cdf6:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801cdfa:	4288      	cmp	r0, r1
 801cdfc:	da43      	bge.n	801ce86 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc5a>
 801cdfe:	f1bb 0f00 	cmp.w	fp, #0
 801ce02:	d040      	beq.n	801ce86 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc5a>
 801ce04:	f9bd e04c 	ldrsh.w	lr, [sp, #76]	; 0x4c
 801ce08:	9902      	ldr	r1, [sp, #8]
 801ce0a:	fb00 110e 	mla	r1, r0, lr, r1
 801ce0e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ce12:	5c89      	ldrb	r1, [r1, r2]
 801ce14:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ce16:	f101 0101 	add.w	r1, r1, #1
 801ce1a:	6852      	ldr	r2, [r2, #4]
 801ce1c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801ce20:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801ce24:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801ce28:	b2d2      	uxtb	r2, r2
 801ce2a:	d026      	beq.n	801ce7a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc4e>
 801ce2c:	f814 ec03 	ldrb.w	lr, [r4, #-3]
 801ce30:	fb12 f206 	smulbb	r2, r2, r6
 801ce34:	fb0e 2207 	mla	r2, lr, r7, r2
 801ce38:	b292      	uxth	r2, r2
 801ce3a:	f102 0e01 	add.w	lr, r2, #1
 801ce3e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801ce42:	f814 ec02 	ldrb.w	lr, [r4, #-2]
 801ce46:	fb10 f006 	smulbb	r0, r0, r6
 801ce4a:	fb0e 0007 	mla	r0, lr, r7, r0
 801ce4e:	b280      	uxth	r0, r0
 801ce50:	f100 0e01 	add.w	lr, r0, #1
 801ce54:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801ce58:	f814 ec01 	ldrb.w	lr, [r4, #-1]
 801ce5c:	fb11 f106 	smulbb	r1, r1, r6
 801ce60:	fb0e 1107 	mla	r1, lr, r7, r1
 801ce64:	b289      	uxth	r1, r1
 801ce66:	f101 0e01 	add.w	lr, r1, #1
 801ce6a:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 801ce6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ce72:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ce76:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ce7a:	f804 2c03 	strb.w	r2, [r4, #-3]
 801ce7e:	f804 0c02 	strb.w	r0, [r4, #-2]
 801ce82:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ce86:	9a03      	ldr	r2, [sp, #12]
 801ce88:	4491      	add	r9, r2
 801ce8a:	9a04      	ldr	r2, [sp, #16]
 801ce8c:	3501      	adds	r5, #1
 801ce8e:	4413      	add	r3, r2
 801ce90:	3403      	adds	r4, #3
 801ce92:	e7a0      	b.n	801cdd6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xbaa>
 801ce94:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ce98:	f10a 0103 	add.w	r1, sl, #3
 801ce9c:	d03c      	beq.n	801cf18 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcec>
 801ce9e:	2500      	movs	r5, #0
 801cea0:	45a8      	cmp	r8, r5
 801cea2:	f1a1 0403 	sub.w	r4, r1, #3
 801cea6:	f77f ae06 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801ceaa:	9801      	ldr	r0, [sp, #4]
 801ceac:	ea4f 4229 	mov.w	r2, r9, asr #16
 801ceb0:	141e      	asrs	r6, r3, #16
 801ceb2:	b158      	cbz	r0, 801cecc <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca0>
 801ceb4:	2a00      	cmp	r2, #0
 801ceb6:	db28      	blt.n	801cf0a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcde>
 801ceb8:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 801cebc:	4282      	cmp	r2, r0
 801cebe:	da24      	bge.n	801cf0a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcde>
 801cec0:	2e00      	cmp	r6, #0
 801cec2:	db22      	blt.n	801cf0a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcde>
 801cec4:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
 801cec8:	4286      	cmp	r6, r0
 801ceca:	da1e      	bge.n	801cf0a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcde>
 801cecc:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 801ced0:	9f02      	ldr	r7, [sp, #8]
 801ced2:	fb06 7000 	mla	r0, r6, r0, r7
 801ced6:	2604      	movs	r6, #4
 801ced8:	5c82      	ldrb	r2, [r0, r2]
 801ceda:	2003      	movs	r0, #3
 801cedc:	fb10 6002 	smlabb	r0, r0, r2, r6
 801cee0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cee2:	6852      	ldr	r2, [r2, #4]
 801cee4:	4402      	add	r2, r0
 801cee6:	7826      	ldrb	r6, [r4, #0]
 801cee8:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801ceec:	f812 0b01 	ldrb.w	r0, [r2], #1
 801cef0:	fb16 f607 	smulbb	r6, r6, r7
 801cef4:	fb00 600b 	mla	r0, r0, fp, r6
 801cef8:	b280      	uxth	r0, r0
 801cefa:	1c46      	adds	r6, r0, #1
 801cefc:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801cf00:	1200      	asrs	r0, r0, #8
 801cf02:	f804 0b01 	strb.w	r0, [r4], #1
 801cf06:	428c      	cmp	r4, r1
 801cf08:	d1ed      	bne.n	801cee6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 801cf0a:	9a03      	ldr	r2, [sp, #12]
 801cf0c:	4491      	add	r9, r2
 801cf0e:	9a04      	ldr	r2, [sp, #16]
 801cf10:	3501      	adds	r5, #1
 801cf12:	4413      	add	r3, r2
 801cf14:	3103      	adds	r1, #3
 801cf16:	e7c3      	b.n	801cea0 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc74>
 801cf18:	2000      	movs	r0, #0
 801cf1a:	4580      	cmp	r8, r0
 801cf1c:	f77f adcb 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801cf20:	9c01      	ldr	r4, [sp, #4]
 801cf22:	ea4f 4229 	mov.w	r2, r9, asr #16
 801cf26:	141d      	asrs	r5, r3, #16
 801cf28:	b15c      	cbz	r4, 801cf42 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd16>
 801cf2a:	2a00      	cmp	r2, #0
 801cf2c:	db1f      	blt.n	801cf6e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd42>
 801cf2e:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	; 0x4c
 801cf32:	42a2      	cmp	r2, r4
 801cf34:	da1b      	bge.n	801cf6e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd42>
 801cf36:	2d00      	cmp	r5, #0
 801cf38:	db19      	blt.n	801cf6e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd42>
 801cf3a:	f9bd 404e 	ldrsh.w	r4, [sp, #78]	; 0x4e
 801cf3e:	42a5      	cmp	r5, r4
 801cf40:	da15      	bge.n	801cf6e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd42>
 801cf42:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	; 0x4c
 801cf46:	9e02      	ldr	r6, [sp, #8]
 801cf48:	fb05 6404 	mla	r4, r5, r4, r6
 801cf4c:	2504      	movs	r5, #4
 801cf4e:	5ca2      	ldrb	r2, [r4, r2]
 801cf50:	2403      	movs	r4, #3
 801cf52:	fb14 5202 	smlabb	r2, r4, r2, r5
 801cf56:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 801cf58:	6865      	ldr	r5, [r4, #4]
 801cf5a:	18ac      	adds	r4, r5, r2
 801cf5c:	5caa      	ldrb	r2, [r5, r2]
 801cf5e:	f801 2c03 	strb.w	r2, [r1, #-3]
 801cf62:	7862      	ldrb	r2, [r4, #1]
 801cf64:	f801 2c02 	strb.w	r2, [r1, #-2]
 801cf68:	78a2      	ldrb	r2, [r4, #2]
 801cf6a:	f801 2c01 	strb.w	r2, [r1, #-1]
 801cf6e:	9a03      	ldr	r2, [sp, #12]
 801cf70:	4491      	add	r9, r2
 801cf72:	9a04      	ldr	r2, [sp, #16]
 801cf74:	3001      	adds	r0, #1
 801cf76:	4413      	add	r3, r2
 801cf78:	3103      	adds	r1, #3
 801cf7a:	e7ce      	b.n	801cf1a <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcee>
 801cf7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cf7e:	6852      	ldr	r2, [r2, #4]
 801cf80:	7816      	ldrb	r6, [r2, #0]
 801cf82:	2e00      	cmp	r6, #0
 801cf84:	f47f aa8f 	bne.w	801c4a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x27a>
 801cf88:	f10a 0403 	add.w	r4, sl, #3
 801cf8c:	45b0      	cmp	r8, r6
 801cf8e:	f77f ad92 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801cf92:	9901      	ldr	r1, [sp, #4]
 801cf94:	ea4f 4229 	mov.w	r2, r9, asr #16
 801cf98:	1418      	asrs	r0, r3, #16
 801cf9a:	b159      	cbz	r1, 801cfb4 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd88>
 801cf9c:	2a00      	cmp	r2, #0
 801cf9e:	db55      	blt.n	801d04c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe20>
 801cfa0:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801cfa4:	428a      	cmp	r2, r1
 801cfa6:	da51      	bge.n	801d04c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe20>
 801cfa8:	2800      	cmp	r0, #0
 801cfaa:	db4f      	blt.n	801d04c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe20>
 801cfac:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801cfb0:	4288      	cmp	r0, r1
 801cfb2:	da4b      	bge.n	801d04c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe20>
 801cfb4:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801cfb8:	9d02      	ldr	r5, [sp, #8]
 801cfba:	fb00 5101 	mla	r1, r0, r1, r5
 801cfbe:	5c89      	ldrb	r1, [r1, r2]
 801cfc0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cfc2:	3101      	adds	r1, #1
 801cfc4:	6852      	ldr	r2, [r2, #4]
 801cfc6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801cfca:	0e0f      	lsrs	r7, r1, #24
 801cfcc:	d03e      	beq.n	801d04c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe20>
 801cfce:	2fff      	cmp	r7, #255	; 0xff
 801cfd0:	f3c1 4507 	ubfx	r5, r1, #16, #8
 801cfd4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801cfd8:	b2c9      	uxtb	r1, r1
 801cfda:	d102      	bne.n	801cfe2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb6>
 801cfdc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801cfe0:	d02e      	beq.n	801d040 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe14>
 801cfe2:	fb0b f707 	mul.w	r7, fp, r7
 801cfe6:	1c7a      	adds	r2, r7, #1
 801cfe8:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801cfec:	1212      	asrs	r2, r2, #8
 801cfee:	b297      	uxth	r7, r2
 801cff0:	f814 ec03 	ldrb.w	lr, [r4, #-3]
 801cff4:	43d2      	mvns	r2, r2
 801cff6:	b2d2      	uxtb	r2, r2
 801cff8:	fb11 f107 	smulbb	r1, r1, r7
 801cffc:	fb0e 1102 	mla	r1, lr, r2, r1
 801d000:	b289      	uxth	r1, r1
 801d002:	f101 0e01 	add.w	lr, r1, #1
 801d006:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 801d00a:	f814 ec02 	ldrb.w	lr, [r4, #-2]
 801d00e:	fb10 f007 	smulbb	r0, r0, r7
 801d012:	fb0e 0002 	mla	r0, lr, r2, r0
 801d016:	b280      	uxth	r0, r0
 801d018:	f100 0e01 	add.w	lr, r0, #1
 801d01c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801d020:	f814 ec01 	ldrb.w	lr, [r4, #-1]
 801d024:	fb15 f507 	smulbb	r5, r5, r7
 801d028:	fb0e 5502 	mla	r5, lr, r2, r5
 801d02c:	b2ad      	uxth	r5, r5
 801d02e:	1c6a      	adds	r2, r5, #1
 801d030:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801d034:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d038:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d03c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d040:	f804 1c03 	strb.w	r1, [r4, #-3]
 801d044:	f804 0c02 	strb.w	r0, [r4, #-2]
 801d048:	f804 5c01 	strb.w	r5, [r4, #-1]
 801d04c:	9a03      	ldr	r2, [sp, #12]
 801d04e:	4491      	add	r9, r2
 801d050:	9a04      	ldr	r2, [sp, #16]
 801d052:	3601      	adds	r6, #1
 801d054:	4413      	add	r3, r2
 801d056:	3403      	adds	r4, #3
 801d058:	e798      	b.n	801cf8c <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd60>
 801d05a:	2200      	movs	r2, #0
 801d05c:	f10a 0e03 	add.w	lr, sl, #3
 801d060:	920b      	str	r2, [sp, #44]	; 0x2c
 801d062:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d064:	4590      	cmp	r8, r2
 801d066:	f1ae 0c03 	sub.w	ip, lr, #3
 801d06a:	f77f ad24 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801d06e:	9a01      	ldr	r2, [sp, #4]
 801d070:	ea4f 4629 	mov.w	r6, r9, asr #16
 801d074:	141f      	asrs	r7, r3, #16
 801d076:	b15a      	cbz	r2, 801d090 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe64>
 801d078:	2e00      	cmp	r6, #0
 801d07a:	db54      	blt.n	801d126 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xefa>
 801d07c:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d080:	4296      	cmp	r6, r2
 801d082:	da50      	bge.n	801d126 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xefa>
 801d084:	2f00      	cmp	r7, #0
 801d086:	db4e      	blt.n	801d126 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xefa>
 801d088:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801d08c:	4297      	cmp	r7, r2
 801d08e:	da4a      	bge.n	801d126 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xefa>
 801d090:	f3c9 3103 	ubfx	r1, r9, #12, #4
 801d094:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801d098:	fb05 f001 	mul.w	r0, r5, r1
 801d09c:	f1c5 0410 	rsb	r4, r5, #16
 801d0a0:	10c0      	asrs	r0, r0, #3
 801d0a2:	1a64      	subs	r4, r4, r1
 801d0a4:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 801d0a8:	920c      	str	r2, [sp, #48]	; 0x30
 801d0aa:	ebc0 0241 	rsb	r2, r0, r1, lsl #1
 801d0ae:	920d      	str	r2, [sp, #52]	; 0x34
 801d0b0:	ebc0 0245 	rsb	r2, r0, r5, lsl #1
 801d0b4:	920e      	str	r2, [sp, #56]	; 0x38
 801d0b6:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d0ba:	9902      	ldr	r1, [sp, #8]
 801d0bc:	fb07 6202 	mla	r2, r7, r2, r6
 801d0c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d0c4:	440a      	add	r2, r1
 801d0c6:	4611      	mov	r1, r2
 801d0c8:	3201      	adds	r2, #1
 801d0ca:	780f      	ldrb	r7, [r1, #0]
 801d0cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d0ce:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 801d0d2:	463d      	mov	r5, r7
 801d0d4:	7897      	ldrb	r7, [r2, #2]
 801d0d6:	4367      	muls	r7, r4
 801d0d8:	462c      	mov	r4, r5
 801d0da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d0dc:	fb05 7704 	mla	r7, r5, r4, r7
 801d0e0:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801d0e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d0e6:	5d0c      	ldrb	r4, [r1, r4]
 801d0e8:	fb05 7704 	mla	r7, r5, r4, r7
 801d0ec:	2403      	movs	r4, #3
 801d0ee:	2503      	movs	r5, #3
 801d0f0:	fb16 5604 	smlabb	r6, r6, r4, r5
 801d0f4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d0f8:	5d89      	ldrb	r1, [r1, r6]
 801d0fa:	fb00 7701 	mla	r7, r0, r1, r7
 801d0fe:	f3c7 1747 	ubfx	r7, r7, #5, #8
 801d102:	d00c      	beq.n	801d11e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xef2>
 801d104:	f89c 6000 	ldrb.w	r6, [ip]
 801d108:	9908      	ldr	r1, [sp, #32]
 801d10a:	fb17 f70b 	smulbb	r7, r7, fp
 801d10e:	fb06 7701 	mla	r7, r6, r1, r7
 801d112:	b2be      	uxth	r6, r7
 801d114:	1c77      	adds	r7, r6, #1
 801d116:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801d11a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d11e:	f80c 7b01 	strb.w	r7, [ip], #1
 801d122:	45e6      	cmp	lr, ip
 801d124:	d1cf      	bne.n	801d0c6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe9a>
 801d126:	9a03      	ldr	r2, [sp, #12]
 801d128:	4491      	add	r9, r2
 801d12a:	9a04      	ldr	r2, [sp, #16]
 801d12c:	4413      	add	r3, r2
 801d12e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d130:	3201      	adds	r2, #1
 801d132:	920b      	str	r2, [sp, #44]	; 0x2c
 801d134:	f10e 0e03 	add.w	lr, lr, #3
 801d138:	e793      	b.n	801d062 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe36>
 801d13a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d13e:	f10a 0203 	add.w	r2, sl, #3
 801d142:	d037      	beq.n	801d1b4 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf88>
 801d144:	2500      	movs	r5, #0
 801d146:	45a8      	cmp	r8, r5
 801d148:	f1a2 0403 	sub.w	r4, r2, #3
 801d14c:	f77f acb3 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801d150:	9901      	ldr	r1, [sp, #4]
 801d152:	ea4f 4029 	mov.w	r0, r9, asr #16
 801d156:	141e      	asrs	r6, r3, #16
 801d158:	b159      	cbz	r1, 801d172 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf46>
 801d15a:	2800      	cmp	r0, #0
 801d15c:	db23      	blt.n	801d1a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf7a>
 801d15e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d162:	4288      	cmp	r0, r1
 801d164:	da1f      	bge.n	801d1a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf7a>
 801d166:	2e00      	cmp	r6, #0
 801d168:	db1d      	blt.n	801d1a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf7a>
 801d16a:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801d16e:	428e      	cmp	r6, r1
 801d170:	da19      	bge.n	801d1a6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf7a>
 801d172:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d176:	fb06 0101 	mla	r1, r6, r1, r0
 801d17a:	9802      	ldr	r0, [sp, #8]
 801d17c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d180:	4401      	add	r1, r0
 801d182:	7826      	ldrb	r6, [r4, #0]
 801d184:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801d188:	f811 0b01 	ldrb.w	r0, [r1], #1
 801d18c:	fb16 f607 	smulbb	r6, r6, r7
 801d190:	fb00 600b 	mla	r0, r0, fp, r6
 801d194:	b280      	uxth	r0, r0
 801d196:	1c46      	adds	r6, r0, #1
 801d198:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801d19c:	1200      	asrs	r0, r0, #8
 801d19e:	f804 0b01 	strb.w	r0, [r4], #1
 801d1a2:	4294      	cmp	r4, r2
 801d1a4:	d1ed      	bne.n	801d182 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf56>
 801d1a6:	9903      	ldr	r1, [sp, #12]
 801d1a8:	4489      	add	r9, r1
 801d1aa:	9904      	ldr	r1, [sp, #16]
 801d1ac:	3501      	adds	r5, #1
 801d1ae:	440b      	add	r3, r1
 801d1b0:	3203      	adds	r2, #3
 801d1b2:	e7c8      	b.n	801d146 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf1a>
 801d1b4:	2000      	movs	r0, #0
 801d1b6:	4580      	cmp	r8, r0
 801d1b8:	f77f ac7d 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801d1bc:	9901      	ldr	r1, [sp, #4]
 801d1be:	ea4f 4429 	mov.w	r4, r9, asr #16
 801d1c2:	141d      	asrs	r5, r3, #16
 801d1c4:	b159      	cbz	r1, 801d1de <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfb2>
 801d1c6:	2c00      	cmp	r4, #0
 801d1c8:	db1b      	blt.n	801d202 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfd6>
 801d1ca:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d1ce:	428c      	cmp	r4, r1
 801d1d0:	da17      	bge.n	801d202 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfd6>
 801d1d2:	2d00      	cmp	r5, #0
 801d1d4:	db15      	blt.n	801d202 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfd6>
 801d1d6:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801d1da:	428d      	cmp	r5, r1
 801d1dc:	da11      	bge.n	801d202 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfd6>
 801d1de:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d1e2:	fb05 4101 	mla	r1, r5, r1, r4
 801d1e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d1ea:	9c02      	ldr	r4, [sp, #8]
 801d1ec:	9d02      	ldr	r5, [sp, #8]
 801d1ee:	440c      	add	r4, r1
 801d1f0:	5c69      	ldrb	r1, [r5, r1]
 801d1f2:	f802 1c03 	strb.w	r1, [r2, #-3]
 801d1f6:	7861      	ldrb	r1, [r4, #1]
 801d1f8:	f802 1c02 	strb.w	r1, [r2, #-2]
 801d1fc:	78a1      	ldrb	r1, [r4, #2]
 801d1fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 801d202:	9903      	ldr	r1, [sp, #12]
 801d204:	4489      	add	r9, r1
 801d206:	9904      	ldr	r1, [sp, #16]
 801d208:	3001      	adds	r0, #1
 801d20a:	440b      	add	r3, r1
 801d20c:	3203      	adds	r2, #3
 801d20e:	e7d2      	b.n	801d1b6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf8a>
 801d210:	f10a 0403 	add.w	r4, sl, #3
 801d214:	2700      	movs	r7, #0
 801d216:	45b8      	cmp	r8, r7
 801d218:	f77f ac4d 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801d21c:	9a01      	ldr	r2, [sp, #4]
 801d21e:	ea4f 4129 	mov.w	r1, r9, asr #16
 801d222:	1418      	asrs	r0, r3, #16
 801d224:	b15a      	cbz	r2, 801d23e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1012>
 801d226:	2900      	cmp	r1, #0
 801d228:	db51      	blt.n	801d2ce <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10a2>
 801d22a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d22e:	4291      	cmp	r1, r2
 801d230:	da4d      	bge.n	801d2ce <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10a2>
 801d232:	2800      	cmp	r0, #0
 801d234:	db4b      	blt.n	801d2ce <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10a2>
 801d236:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801d23a:	4290      	cmp	r0, r2
 801d23c:	da47      	bge.n	801d2ce <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10a2>
 801d23e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d242:	fb00 1202 	mla	r2, r0, r2, r1
 801d246:	9902      	ldr	r1, [sp, #8]
 801d248:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d24c:	0e0e      	lsrs	r6, r1, #24
 801d24e:	d03e      	beq.n	801d2ce <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10a2>
 801d250:	2eff      	cmp	r6, #255	; 0xff
 801d252:	f3c1 4507 	ubfx	r5, r1, #16, #8
 801d256:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801d25a:	b2c9      	uxtb	r1, r1
 801d25c:	d102      	bne.n	801d264 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1038>
 801d25e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d262:	d02e      	beq.n	801d2c2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1096>
 801d264:	fb0b f606 	mul.w	r6, fp, r6
 801d268:	1c72      	adds	r2, r6, #1
 801d26a:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d26e:	1212      	asrs	r2, r2, #8
 801d270:	b296      	uxth	r6, r2
 801d272:	f814 ec03 	ldrb.w	lr, [r4, #-3]
 801d276:	43d2      	mvns	r2, r2
 801d278:	b2d2      	uxtb	r2, r2
 801d27a:	fb11 f106 	smulbb	r1, r1, r6
 801d27e:	fb0e 1102 	mla	r1, lr, r2, r1
 801d282:	b289      	uxth	r1, r1
 801d284:	f101 0e01 	add.w	lr, r1, #1
 801d288:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 801d28c:	f814 ec02 	ldrb.w	lr, [r4, #-2]
 801d290:	fb10 f006 	smulbb	r0, r0, r6
 801d294:	fb0e 0002 	mla	r0, lr, r2, r0
 801d298:	b280      	uxth	r0, r0
 801d29a:	f100 0e01 	add.w	lr, r0, #1
 801d29e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801d2a2:	f814 ec01 	ldrb.w	lr, [r4, #-1]
 801d2a6:	fb15 f506 	smulbb	r5, r5, r6
 801d2aa:	fb0e 5502 	mla	r5, lr, r2, r5
 801d2ae:	b2ad      	uxth	r5, r5
 801d2b0:	1c6a      	adds	r2, r5, #1
 801d2b2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801d2b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d2ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d2be:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d2c2:	f804 1c03 	strb.w	r1, [r4, #-3]
 801d2c6:	f804 0c02 	strb.w	r0, [r4, #-2]
 801d2ca:	f804 5c01 	strb.w	r5, [r4, #-1]
 801d2ce:	9a03      	ldr	r2, [sp, #12]
 801d2d0:	4491      	add	r9, r2
 801d2d2:	9a04      	ldr	r2, [sp, #16]
 801d2d4:	3701      	adds	r7, #1
 801d2d6:	4413      	add	r3, r2
 801d2d8:	3403      	adds	r4, #3
 801d2da:	e79c      	b.n	801d216 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfea>
 801d2dc:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801d2e0:	f10a 0403 	add.w	r4, sl, #3
 801d2e4:	2500      	movs	r5, #0
 801d2e6:	fa1f f68b 	uxth.w	r6, fp
 801d2ea:	45a8      	cmp	r8, r5
 801d2ec:	f77f abe3 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801d2f0:	9a01      	ldr	r2, [sp, #4]
 801d2f2:	ea4f 4129 	mov.w	r1, r9, asr #16
 801d2f6:	1418      	asrs	r0, r3, #16
 801d2f8:	b15a      	cbz	r2, 801d312 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10e6>
 801d2fa:	2900      	cmp	r1, #0
 801d2fc:	db48      	blt.n	801d390 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1164>
 801d2fe:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d302:	4291      	cmp	r1, r2
 801d304:	da44      	bge.n	801d390 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1164>
 801d306:	2800      	cmp	r0, #0
 801d308:	db42      	blt.n	801d390 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1164>
 801d30a:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801d30e:	4290      	cmp	r0, r2
 801d310:	da3e      	bge.n	801d390 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1164>
 801d312:	f1bb 0f00 	cmp.w	fp, #0
 801d316:	d03b      	beq.n	801d390 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1164>
 801d318:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d31c:	fb00 1202 	mla	r2, r0, r2, r1
 801d320:	9902      	ldr	r1, [sp, #8]
 801d322:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d326:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d32a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801d32e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801d332:	b2d2      	uxtb	r2, r2
 801d334:	d026      	beq.n	801d384 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1158>
 801d336:	f814 ec03 	ldrb.w	lr, [r4, #-3]
 801d33a:	fb12 f206 	smulbb	r2, r2, r6
 801d33e:	fb0e 2207 	mla	r2, lr, r7, r2
 801d342:	b292      	uxth	r2, r2
 801d344:	f102 0e01 	add.w	lr, r2, #1
 801d348:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801d34c:	f814 ec02 	ldrb.w	lr, [r4, #-2]
 801d350:	fb10 f006 	smulbb	r0, r0, r6
 801d354:	fb0e 0007 	mla	r0, lr, r7, r0
 801d358:	b280      	uxth	r0, r0
 801d35a:	f100 0e01 	add.w	lr, r0, #1
 801d35e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801d362:	f814 ec01 	ldrb.w	lr, [r4, #-1]
 801d366:	fb11 f106 	smulbb	r1, r1, r6
 801d36a:	fb0e 1107 	mla	r1, lr, r7, r1
 801d36e:	b289      	uxth	r1, r1
 801d370:	f101 0e01 	add.w	lr, r1, #1
 801d374:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 801d378:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d37c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d380:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d384:	f804 2c03 	strb.w	r2, [r4, #-3]
 801d388:	f804 0c02 	strb.w	r0, [r4, #-2]
 801d38c:	f804 1c01 	strb.w	r1, [r4, #-1]
 801d390:	9a03      	ldr	r2, [sp, #12]
 801d392:	4491      	add	r9, r2
 801d394:	9a04      	ldr	r2, [sp, #16]
 801d396:	3501      	adds	r5, #1
 801d398:	4413      	add	r3, r2
 801d39a:	3403      	adds	r4, #3
 801d39c:	e7a5      	b.n	801d2ea <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10be>
 801d39e:	2200      	movs	r2, #0
 801d3a0:	920c      	str	r2, [sp, #48]	; 0x30
 801d3a2:	fa1f f28b 	uxth.w	r2, fp
 801d3a6:	f10a 0403 	add.w	r4, sl, #3
 801d3aa:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 801d3ae:	920b      	str	r2, [sp, #44]	; 0x2c
 801d3b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d3b2:	4590      	cmp	r8, r2
 801d3b4:	f77f ab7f 	ble.w	801cab6 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x88a>
 801d3b8:	9901      	ldr	r1, [sp, #4]
 801d3ba:	ea4f 4029 	mov.w	r0, r9, asr #16
 801d3be:	141a      	asrs	r2, r3, #16
 801d3c0:	b179      	cbz	r1, 801d3e2 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11b6>
 801d3c2:	2800      	cmp	r0, #0
 801d3c4:	f2c0 8179 	blt.w	801d6ba <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x148e>
 801d3c8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d3cc:	4288      	cmp	r0, r1
 801d3ce:	f280 8174 	bge.w	801d6ba <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x148e>
 801d3d2:	2a00      	cmp	r2, #0
 801d3d4:	f2c0 8171 	blt.w	801d6ba <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x148e>
 801d3d8:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801d3dc:	428a      	cmp	r2, r1
 801d3de:	f280 816c 	bge.w	801d6ba <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x148e>
 801d3e2:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801d3e6:	9d02      	ldr	r5, [sp, #8]
 801d3e8:	fb02 0001 	mla	r0, r2, r1, r0
 801d3ec:	9a02      	ldr	r2, [sp, #8]
 801d3ee:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801d3f2:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801d3f6:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 801d3fa:	6857      	ldr	r7, [r2, #4]
 801d3fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801d400:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 801d404:	6855      	ldr	r5, [r2, #4]
 801d406:	0e3a      	lsrs	r2, r7, #24
 801d408:	920d      	str	r2, [sp, #52]	; 0x34
 801d40a:	0e32      	lsrs	r2, r6, #24
 801d40c:	920e      	str	r2, [sp, #56]	; 0x38
 801d40e:	fa1f f289 	uxth.w	r2, r9
 801d412:	ee01 2a90 	vmov	s3, r2
 801d416:	ee07 ea90 	vmov	s15, lr
 801d41a:	ed9d 2a0d 	vldr	s4, [sp, #52]	; 0x34
 801d41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d422:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d426:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d42a:	ee61 1aa6 	vmul.f32	s3, s3, s13
 801d42e:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d432:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 801d436:	eee1 7a82 	vfma.f32	s15, s3, s4
 801d43a:	b29a      	uxth	r2, r3
 801d43c:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 801d440:	ee00 ca10 	vmov	s0, ip
 801d444:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d448:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d44c:	ee00 2a90 	vmov	s1, r2
 801d450:	ee30 0a42 	vsub.f32	s0, s0, s4
 801d454:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d458:	eea1 2a80 	vfma.f32	s4, s3, s0
 801d45c:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801d460:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d464:	eee0 7a82 	vfma.f32	s15, s1, s4
 801d468:	ee77 7a81 	vadd.f32	s15, s15, s2
 801d46c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d470:	ee17 1a90 	vmov	r1, s15
 801d474:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801d478:	f000 811f 	beq.w	801d6ba <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x148e>
 801d47c:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 801d480:	fb0e f202 	mul.w	r2, lr, r2
 801d484:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d488:	fb0e fe00 	mul.w	lr, lr, r0
 801d48c:	0a10      	lsrs	r0, r2, #8
 801d48e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d492:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 801d496:	4410      	add	r0, r2
 801d498:	f50e 7280 	add.w	r2, lr, #256	; 0x100
 801d49c:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801d4a0:	0a00      	lsrs	r0, r0, #8
 801d4a2:	0a12      	lsrs	r2, r2, #8
 801d4a4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d4a8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d4ac:	4310      	orrs	r0, r2
 801d4ae:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801d4b2:	0e3a      	lsrs	r2, r7, #24
 801d4b4:	fb02 fe0e 	mul.w	lr, r2, lr
 801d4b8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d4bc:	4357      	muls	r7, r2
 801d4be:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801d4c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d4c6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d4ca:	4496      	add	lr, r2
 801d4cc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801d4d0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801d4d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d4d8:	0a12      	lsrs	r2, r2, #8
 801d4da:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d4de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d4e2:	ea4e 0e02 	orr.w	lr, lr, r2
 801d4e6:	0e37      	lsrs	r7, r6, #24
 801d4e8:	f006 12ff 	and.w	r2, r6, #16711935	; 0xff00ff
 801d4ec:	437a      	muls	r2, r7
 801d4ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d4f2:	4377      	muls	r7, r6
 801d4f4:	0a16      	lsrs	r6, r2, #8
 801d4f6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d4fa:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 801d4fe:	4432      	add	r2, r6
 801d500:	f507 7680 	add.w	r6, r7, #256	; 0x100
 801d504:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 801d508:	0a12      	lsrs	r2, r2, #8
 801d50a:	0a3f      	lsrs	r7, r7, #8
 801d50c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d510:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d514:	433a      	orrs	r2, r7
 801d516:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d51a:	fb0c f707 	mul.w	r7, ip, r7
 801d51e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d522:	fb0c fc05 	mul.w	ip, ip, r5
 801d526:	0a3d      	lsrs	r5, r7, #8
 801d528:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d52c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d530:	442f      	add	r7, r5
 801d532:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801d536:	0a3d      	lsrs	r5, r7, #8
 801d538:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d53c:	eb06 251c 	add.w	r5, r6, ip, lsr #8
 801d540:	0c06      	lsrs	r6, r0, #16
 801d542:	ee07 6a90 	vmov	s15, r6
 801d546:	ea4f 461e 	mov.w	r6, lr, lsr #16
 801d54a:	ee02 6a10 	vmov	s4, r6
 801d54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d552:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d556:	0a2d      	lsrs	r5, r5, #8
 801d558:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d55c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d560:	433d      	orrs	r5, r7
 801d562:	0c16      	lsrs	r6, r2, #16
 801d564:	eee1 7a82 	vfma.f32	s15, s3, s4
 801d568:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801d56c:	b2c0      	uxtb	r0, r0
 801d56e:	ee02 6a10 	vmov	s4, r6
 801d572:	0c2e      	lsrs	r6, r5, #16
 801d574:	ee00 6a10 	vmov	s0, r6
 801d578:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d57c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d580:	29ff      	cmp	r1, #255	; 0xff
 801d582:	ee30 0a42 	vsub.f32	s0, s0, s4
 801d586:	eea1 2a80 	vfma.f32	s4, s3, s0
 801d58a:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d58e:	eee0 7a82 	vfma.f32	s15, s1, s4
 801d592:	ee77 7a81 	vadd.f32	s15, s15, s2
 801d596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d59a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801d59e:	ee07 7a90 	vmov	s15, r7
 801d5a2:	f3ce 2707 	ubfx	r7, lr, #8, #8
 801d5a6:	ee02 7a10 	vmov	s4, r7
 801d5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d5ae:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d5b2:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801d5b6:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d5ba:	fa5f fe8e 	uxtb.w	lr, lr
 801d5be:	eee1 7a82 	vfma.f32	s15, s3, s4
 801d5c2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801d5c6:	ee02 7a10 	vmov	s4, r7
 801d5ca:	f3c5 2707 	ubfx	r7, r5, #8, #8
 801d5ce:	ee00 7a10 	vmov	s0, r7
 801d5d2:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d5d6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d5da:	b2d2      	uxtb	r2, r2
 801d5dc:	ee30 0a42 	vsub.f32	s0, s0, s4
 801d5e0:	eea1 2a80 	vfma.f32	s4, s3, s0
 801d5e4:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d5e8:	eee0 7a82 	vfma.f32	s15, s1, s4
 801d5ec:	ee02 ea10 	vmov	s4, lr
 801d5f0:	ee77 7a81 	vadd.f32	s15, s15, s2
 801d5f4:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d5f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d5fc:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801d600:	ee07 0a90 	vmov	s15, r0
 801d604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d608:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801d60c:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d610:	eee1 7a82 	vfma.f32	s15, s3, s4
 801d614:	ee02 2a10 	vmov	s4, r2
 801d618:	b2ea      	uxtb	r2, r5
 801d61a:	ee00 2a10 	vmov	s0, r2
 801d61e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d622:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d626:	ee30 0a42 	vsub.f32	s0, s0, s4
 801d62a:	eea1 2a80 	vfma.f32	s4, s3, s0
 801d62e:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d632:	eee0 7a82 	vfma.f32	s15, s1, s4
 801d636:	ee77 7a81 	vadd.f32	s15, s15, s2
 801d63a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d63e:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801d642:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801d646:	d102      	bne.n	801d64e <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1422>
 801d648:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d64c:	d02f      	beq.n	801d6ae <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1482>
 801d64e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d650:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 801d654:	4341      	muls	r1, r0
 801d656:	1c48      	adds	r0, r1, #1
 801d658:	eb00 2121 	add.w	r1, r0, r1, asr #8
 801d65c:	ea6f 2121 	mvn.w	r1, r1, asr #8
 801d660:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 801d664:	b2c9      	uxtb	r1, r1
 801d666:	fb12 f205 	smulbb	r2, r2, r5
 801d66a:	fb00 2201 	mla	r2, r0, r1, r2
 801d66e:	b292      	uxth	r2, r2
 801d670:	1c50      	adds	r0, r2, #1
 801d672:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d676:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 801d67a:	fb1c fc05 	smulbb	ip, ip, r5
 801d67e:	fb00 cc01 	mla	ip, r0, r1, ip
 801d682:	fa1f fc8c 	uxth.w	ip, ip
 801d686:	f10c 0001 	add.w	r0, ip, #1
 801d68a:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801d68e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 801d692:	fb16 f605 	smulbb	r6, r6, r5
 801d696:	fb00 6601 	mla	r6, r0, r1, r6
 801d69a:	b2b6      	uxth	r6, r6
 801d69c:	1c71      	adds	r1, r6, #1
 801d69e:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801d6a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d6a6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d6aa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d6ae:	f804 2c03 	strb.w	r2, [r4, #-3]
 801d6b2:	f804 cc02 	strb.w	ip, [r4, #-2]
 801d6b6:	f804 6c01 	strb.w	r6, [r4, #-1]
 801d6ba:	9a03      	ldr	r2, [sp, #12]
 801d6bc:	4491      	add	r9, r2
 801d6be:	9a04      	ldr	r2, [sp, #16]
 801d6c0:	4413      	add	r3, r2
 801d6c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d6c4:	3201      	adds	r2, #1
 801d6c6:	920c      	str	r2, [sp, #48]	; 0x30
 801d6c8:	3403      	adds	r4, #3
 801d6ca:	e671      	b.n	801d3b0 <_ZN8touchgfx8LCD24bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1184>
 801d6cc:	b015      	add	sp, #84	; 0x54
 801d6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6d2:	bf00      	nop

0801d6d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d8:	b08d      	sub	sp, #52	; 0x34
 801d6da:	460c      	mov	r4, r1
 801d6dc:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d6e0:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d6e4:	4617      	mov	r7, r2
 801d6e6:	2e00      	cmp	r6, #0
 801d6e8:	d04b      	beq.n	801d782 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801d6ea:	6810      	ldr	r0, [r2, #0]
 801d6ec:	6851      	ldr	r1, [r2, #4]
 801d6ee:	ad08      	add	r5, sp, #32
 801d6f0:	c503      	stmia	r5!, {r0, r1}
 801d6f2:	6818      	ldr	r0, [r3, #0]
 801d6f4:	6859      	ldr	r1, [r3, #4]
 801d6f6:	ad0a      	add	r5, sp, #40	; 0x28
 801d6f8:	c503      	stmia	r5!, {r0, r1}
 801d6fa:	a808      	add	r0, sp, #32
 801d6fc:	f7fc fc10 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d700:	4639      	mov	r1, r7
 801d702:	a80a      	add	r0, sp, #40	; 0x28
 801d704:	f7fc fbf4 	bl	8019ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d708:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d70c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d710:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d714:	4f58      	ldr	r7, [pc, #352]	; (801d878 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a4>)
 801d716:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d71a:	6838      	ldr	r0, [r7, #0]
 801d71c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d720:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d724:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d728:	440c      	add	r4, r1
 801d72a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d72e:	440a      	add	r2, r1
 801d730:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d734:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d738:	4413      	add	r3, r2
 801d73a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d73e:	6803      	ldr	r3, [r0, #0]
 801d740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d742:	4798      	blx	r3
 801d744:	2eff      	cmp	r6, #255	; 0xff
 801d746:	f000 808f 	beq.w	801d868 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 801d74a:	0743      	lsls	r3, r0, #29
 801d74c:	d405      	bmi.n	801d75a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801d74e:	f1b9 0f00 	cmp.w	r9, #0
 801d752:	d019      	beq.n	801d788 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801d754:	f010 0f10 	tst.w	r0, #16
 801d758:	d016      	beq.n	801d788 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801d75a:	6838      	ldr	r0, [r7, #0]
 801d75c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d760:	6801      	ldr	r1, [r0, #0]
 801d762:	9603      	str	r6, [sp, #12]
 801d764:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801d768:	9602      	str	r6, [sp, #8]
 801d76a:	b2ad      	uxth	r5, r5
 801d76c:	fa1f f688 	uxth.w	r6, r8
 801d770:	f8cd 9010 	str.w	r9, [sp, #16]
 801d774:	9601      	str	r6, [sp, #4]
 801d776:	9500      	str	r5, [sp, #0]
 801d778:	6c4d      	ldr	r5, [r1, #68]	; 0x44
 801d77a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d77e:	4621      	mov	r1, r4
 801d780:	47a8      	blx	r5
 801d782:	b00d      	add	sp, #52	; 0x34
 801d784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d788:	6838      	ldr	r0, [r7, #0]
 801d78a:	6803      	ldr	r3, [r0, #0]
 801d78c:	6a1b      	ldr	r3, [r3, #32]
 801d78e:	4798      	blx	r3
 801d790:	493a      	ldr	r1, [pc, #232]	; (801d87c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a8>)
 801d792:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801d796:	880b      	ldrh	r3, [r1, #0]
 801d798:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d79c:	fb0e 2303 	mla	r3, lr, r3, r2
 801d7a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7a4:	2eff      	cmp	r6, #255	; 0xff
 801d7a6:	4418      	add	r0, r3
 801d7a8:	ea4f 0345 	mov.w	r3, r5, lsl #1
 801d7ac:	d035      	beq.n	801d81a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801d7ae:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
 801d7b2:	442b      	add	r3, r5
 801d7b4:	9206      	str	r2, [sp, #24]
 801d7b6:	f04f 0e00 	mov.w	lr, #0
 801d7ba:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 801d7be:	45c6      	cmp	lr, r8
 801d7c0:	da4d      	bge.n	801d85e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x18a>
 801d7c2:	4684      	mov	ip, r0
 801d7c4:	46a1      	mov	r9, r4
 801d7c6:	eba9 0204 	sub.w	r2, r9, r4
 801d7ca:	4293      	cmp	r3, r2
 801d7cc:	dd14      	ble.n	801d7f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801d7ce:	f819 2b01 	ldrb.w	r2, [r9], #1
 801d7d2:	9207      	str	r2, [sp, #28]
 801d7d4:	f89c b000 	ldrb.w	fp, [ip]
 801d7d8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801d7dc:	fb1b fb02 	smulbb	fp, fp, r2
 801d7e0:	9a07      	ldr	r2, [sp, #28]
 801d7e2:	fb02 b206 	mla	r2, r2, r6, fp
 801d7e6:	b292      	uxth	r2, r2
 801d7e8:	f102 0b01 	add.w	fp, r2, #1
 801d7ec:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d7f0:	1212      	asrs	r2, r2, #8
 801d7f2:	f80c 2b01 	strb.w	r2, [ip], #1
 801d7f6:	e7e6      	b.n	801d7c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf2>
 801d7f8:	880a      	ldrh	r2, [r1, #0]
 801d7fa:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801d7fe:	1b52      	subs	r2, r2, r5
 801d800:	ebac 0c05 	sub.w	ip, ip, r5
 801d804:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d808:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d80c:	4452      	add	r2, sl
 801d80e:	44d4      	add	ip, sl
 801d810:	4464      	add	r4, ip
 801d812:	f10e 0e01 	add.w	lr, lr, #1
 801d816:	4410      	add	r0, r2
 801d818:	e7d1      	b.n	801d7be <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xea>
 801d81a:	442b      	add	r3, r5
 801d81c:	f04f 0e00 	mov.w	lr, #0
 801d820:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
 801d824:	45c6      	cmp	lr, r8
 801d826:	da1a      	bge.n	801d85e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x18a>
 801d828:	1e46      	subs	r6, r0, #1
 801d82a:	4622      	mov	r2, r4
 801d82c:	eba2 0904 	sub.w	r9, r2, r4
 801d830:	454b      	cmp	r3, r9
 801d832:	dd04      	ble.n	801d83e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x16a>
 801d834:	f812 9b01 	ldrb.w	r9, [r2], #1
 801d838:	f806 9f01 	strb.w	r9, [r6, #1]!
 801d83c:	e7f6      	b.n	801d82c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x158>
 801d83e:	880a      	ldrh	r2, [r1, #0]
 801d840:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801d844:	1b52      	subs	r2, r2, r5
 801d846:	1b76      	subs	r6, r6, r5
 801d848:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d84c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d850:	4462      	add	r2, ip
 801d852:	4466      	add	r6, ip
 801d854:	4434      	add	r4, r6
 801d856:	f10e 0e01 	add.w	lr, lr, #1
 801d85a:	4410      	add	r0, r2
 801d85c:	e7e2      	b.n	801d824 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801d85e:	6838      	ldr	r0, [r7, #0]
 801d860:	6803      	ldr	r3, [r0, #0]
 801d862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d864:	4798      	blx	r3
 801d866:	e78c      	b.n	801d782 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801d868:	f1b9 0f00 	cmp.w	r9, #0
 801d86c:	f47f af72 	bne.w	801d754 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801d870:	f010 0f01 	tst.w	r0, #1
 801d874:	e770      	b.n	801d758 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801d876:	bf00      	nop
 801d878:	20009d70 	.word	0x20009d70
 801d87c:	20009d68 	.word	0x20009d68

0801d880 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d884:	4ea2      	ldr	r6, [pc, #648]	; (801db10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801d886:	4690      	mov	r8, r2
 801d888:	6832      	ldr	r2, [r6, #0]
 801d88a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801d88e:	2a02      	cmp	r2, #2
 801d890:	b08f      	sub	sp, #60	; 0x3c
 801d892:	4605      	mov	r5, r0
 801d894:	4689      	mov	r9, r1
 801d896:	d106      	bne.n	801d8a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801d898:	4b9e      	ldr	r3, [pc, #632]	; (801db14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801d89a:	4a9f      	ldr	r2, [pc, #636]	; (801db18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801d89c:	f240 1183 	movw	r1, #387	; 0x183
 801d8a0:	489e      	ldr	r0, [pc, #632]	; (801db1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d8a2:	f001 f813 	bl	801e8cc <__assert_func>
 801d8a6:	af0e      	add	r7, sp, #56	; 0x38
 801d8a8:	f827 3d24 	strh.w	r3, [r7, #-36]!
 801d8ac:	4638      	mov	r0, r7
 801d8ae:	f7fe fb89 	bl	801bfc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d8b2:	682b      	ldr	r3, [r5, #0]
 801d8b4:	4604      	mov	r4, r0
 801d8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8b8:	4628      	mov	r0, r5
 801d8ba:	4798      	blx	r3
 801d8bc:	4284      	cmp	r4, r0
 801d8be:	d004      	beq.n	801d8ca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801d8c0:	4b97      	ldr	r3, [pc, #604]	; (801db20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801d8c2:	4a95      	ldr	r2, [pc, #596]	; (801db18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801d8c4:	f240 1185 	movw	r1, #389	; 0x185
 801d8c8:	e7ea      	b.n	801d8a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d8ca:	4638      	mov	r0, r7
 801d8cc:	f7fe faf8 	bl	801bec0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d8d0:	4604      	mov	r4, r0
 801d8d2:	b920      	cbnz	r0, 801d8de <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801d8d4:	4b93      	ldr	r3, [pc, #588]	; (801db24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a4>)
 801d8d6:	4a90      	ldr	r2, [pc, #576]	; (801db18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801d8d8:	f240 1187 	movw	r1, #391	; 0x187
 801d8dc:	e7e0      	b.n	801d8a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d8de:	f8d8 0000 	ldr.w	r0, [r8]
 801d8e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d8e6:	f9b8 a000 	ldrsh.w	sl, [r8]
 801d8ea:	ab06      	add	r3, sp, #24
 801d8ec:	c303      	stmia	r3!, {r0, r1}
 801d8ee:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d8f2:	f8d9 0000 	ldr.w	r0, [r9]
 801d8f6:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801d8fa:	ab08      	add	r3, sp, #32
 801d8fc:	c303      	stmia	r3!, {r0, r1}
 801d8fe:	4638      	mov	r0, r7
 801d900:	f7fe fa10 	bl	801bd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d904:	4680      	mov	r8, r0
 801d906:	4638      	mov	r0, r7
 801d908:	f7fe fa46 	bl	801bd98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d90c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d910:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801d914:	f10d 0a20 	add.w	sl, sp, #32
 801d918:	a806      	add	r0, sp, #24
 801d91a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801d91e:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801d922:	f7fc fafd 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d926:	4650      	mov	r0, sl
 801d928:	f7fc fafa 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d92c:	4f7e      	ldr	r7, [pc, #504]	; (801db28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a8>)
 801d92e:	a80a      	add	r0, sp, #40	; 0x28
 801d930:	f7fc faf6 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d934:	4b7d      	ldr	r3, [pc, #500]	; (801db2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ac>)
 801d936:	f9b7 1000 	ldrsh.w	r1, [r7]
 801d93a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d93e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 801d942:	2300      	movs	r3, #0
 801d944:	a90c      	add	r1, sp, #48	; 0x30
 801d946:	4650      	mov	r0, sl
 801d948:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801d94c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d950:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801d954:	f7f1 fdce 	bl	800f4f4 <_ZN8touchgfx4RectaNERKS0_>
 801d958:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801d95c:	9702      	str	r7, [sp, #8]
 801d95e:	f1be 0f00 	cmp.w	lr, #0
 801d962:	d004      	beq.n	801d96e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801d964:	f9bd 7026 	ldrsh.w	r7, [sp, #38]	; 0x26
 801d968:	2f00      	cmp	r7, #0
 801d96a:	f040 80c5 	bne.w	801daf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>
 801d96e:	4620      	mov	r0, r4
 801d970:	b00f      	add	sp, #60	; 0x3c
 801d972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d976:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801d97a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d97e:	429a      	cmp	r2, r3
 801d980:	f2c0 80c1 	blt.w	801db06 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 801d984:	4470      	add	r0, lr
 801d986:	f8bd e01c 	ldrh.w	lr, [sp, #28]
 801d98a:	4471      	add	r1, lr
 801d98c:	b200      	sxth	r0, r0
 801d98e:	b209      	sxth	r1, r1
 801d990:	4288      	cmp	r0, r1
 801d992:	f300 80b8 	bgt.w	801db06 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 801d996:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801d99a:	443a      	add	r2, r7
 801d99c:	440b      	add	r3, r1
 801d99e:	b212      	sxth	r2, r2
 801d9a0:	b21b      	sxth	r3, r3
 801d9a2:	429a      	cmp	r2, r3
 801d9a4:	f300 80af 	bgt.w	801db06 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 801d9a8:	682b      	ldr	r3, [r5, #0]
 801d9aa:	4628      	mov	r0, r5
 801d9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9ae:	4798      	blx	r3
 801d9b0:	4681      	mov	r9, r0
 801d9b2:	6830      	ldr	r0, [r6, #0]
 801d9b4:	6803      	ldr	r3, [r0, #0]
 801d9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9b8:	4798      	blx	r3
 801d9ba:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d9be:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d9c2:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d9c6:	9303      	str	r3, [sp, #12]
 801d9c8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d9cc:	1a9b      	subs	r3, r3, r2
 801d9ce:	b29b      	uxth	r3, r3
 801d9d0:	b21d      	sxth	r5, r3
 801d9d2:	2d00      	cmp	r5, #0
 801d9d4:	dc09      	bgt.n	801d9ea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 801d9d6:	b135      	cbz	r5, 801d9e6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x166>
 801d9d8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d9dc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d9e0:	4413      	add	r3, r2
 801d9e2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801d9e6:	4625      	mov	r5, r4
 801d9e8:	e006      	b.n	801d9f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x178>
 801d9ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d9ee:	ebab 0303 	sub.w	r3, fp, r3
 801d9f2:	4425      	add	r5, r4
 801d9f4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d9f8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d9fc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801da00:	1a9b      	subs	r3, r3, r2
 801da02:	b29b      	uxth	r3, r3
 801da04:	b219      	sxth	r1, r3
 801da06:	2900      	cmp	r1, #0
 801da08:	dd4d      	ble.n	801daa6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801da0a:	9a03      	ldr	r2, [sp, #12]
 801da0c:	fb02 5501 	mla	r5, r2, r1, r5
 801da10:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801da14:	1ad3      	subs	r3, r2, r3
 801da16:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801da1a:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 801da1e:	2900      	cmp	r1, #0
 801da20:	dda5      	ble.n	801d96e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801da22:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 801da26:	2f00      	cmp	r7, #0
 801da28:	dda1      	ble.n	801d96e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801da2a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801da2e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801da32:	fb09 fe02 	mul.w	lr, r9, r2
 801da36:	f04f 0803 	mov.w	r8, #3
 801da3a:	fb13 e808 	smlabb	r8, r3, r8, lr
 801da3e:	4480      	add	r8, r0
 801da40:	9802      	ldr	r0, [sp, #8]
 801da42:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801da46:	8800      	ldrh	r0, [r0, #0]
 801da48:	4571      	cmp	r1, lr
 801da4a:	bfa8      	it	ge
 801da4c:	4671      	movge	r1, lr
 801da4e:	1ac3      	subs	r3, r0, r3
 801da50:	4299      	cmp	r1, r3
 801da52:	bfa8      	it	ge
 801da54:	4619      	movge	r1, r3
 801da56:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801da5a:	429f      	cmp	r7, r3
 801da5c:	bfa8      	it	ge
 801da5e:	461f      	movge	r7, r3
 801da60:	4b32      	ldr	r3, [pc, #200]	; (801db2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ac>)
 801da62:	881b      	ldrh	r3, [r3, #0]
 801da64:	1a9a      	subs	r2, r3, r2
 801da66:	4297      	cmp	r7, r2
 801da68:	463b      	mov	r3, r7
 801da6a:	bfa8      	it	ge
 801da6c:	4613      	movge	r3, r2
 801da6e:	4288      	cmp	r0, r1
 801da70:	9302      	str	r3, [sp, #8]
 801da72:	d12b      	bne.n	801dacc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x24c>
 801da74:	4583      	cmp	fp, r0
 801da76:	d129      	bne.n	801dacc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x24c>
 801da78:	6830      	ldr	r0, [r6, #0]
 801da7a:	6803      	ldr	r3, [r0, #0]
 801da7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da7e:	4798      	blx	r3
 801da80:	07c3      	lsls	r3, r0, #31
 801da82:	d519      	bpl.n	801dab8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 801da84:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801da88:	6830      	ldr	r0, [r6, #0]
 801da8a:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801da8e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801da92:	6803      	ldr	r3, [r0, #0]
 801da94:	f8cd b000 	str.w	fp, [sp]
 801da98:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801da9a:	e89a 0006 	ldmia.w	sl, {r1, r2}
 801da9e:	462b      	mov	r3, r5
 801daa0:	47a0      	blx	r4
 801daa2:	4604      	mov	r4, r0
 801daa4:	e763      	b.n	801d96e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801daa6:	bf1f      	itttt	ne
 801daa8:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801daac:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801dab0:	189b      	addne	r3, r3, r2
 801dab2:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801dab6:	e7b0      	b.n	801da1a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19a>
 801dab8:	6830      	ldr	r0, [r6, #0]
 801daba:	6803      	ldr	r3, [r0, #0]
 801dabc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801dabe:	9b02      	ldr	r3, [sp, #8]
 801dac0:	4642      	mov	r2, r8
 801dac2:	fb03 f309 	mul.w	r3, r3, r9
 801dac6:	4629      	mov	r1, r5
 801dac8:	47b0      	blx	r6
 801daca:	e750      	b.n	801d96e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801dacc:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
 801dad0:	f04f 0a00 	mov.w	sl, #0
 801dad4:	9b02      	ldr	r3, [sp, #8]
 801dad6:	459a      	cmp	sl, r3
 801dad8:	f6bf af49 	bge.w	801d96e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801dadc:	6830      	ldr	r0, [r6, #0]
 801dade:	6803      	ldr	r3, [r0, #0]
 801dae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dae2:	4642      	mov	r2, r8
 801dae4:	461f      	mov	r7, r3
 801dae6:	4629      	mov	r1, r5
 801dae8:	465b      	mov	r3, fp
 801daea:	47b8      	blx	r7
 801daec:	9b03      	ldr	r3, [sp, #12]
 801daee:	44c8      	add	r8, r9
 801daf0:	441d      	add	r5, r3
 801daf2:	f10a 0a01 	add.w	sl, sl, #1
 801daf6:	e7ed      	b.n	801dad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x254>
 801daf8:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801dafc:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801db00:	4288      	cmp	r0, r1
 801db02:	f6bf af38 	bge.w	801d976 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf6>
 801db06:	4b0a      	ldr	r3, [pc, #40]	; (801db30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b0>)
 801db08:	4a03      	ldr	r2, [pc, #12]	; (801db18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801db0a:	f240 1195 	movw	r1, #405	; 0x195
 801db0e:	e6c7      	b.n	801d8a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801db10:	20009d70 	.word	0x20009d70
 801db14:	08022464 	.word	0x08022464
 801db18:	08022aaa 	.word	0x08022aaa
 801db1c:	08022432 	.word	0x08022432
 801db20:	08022518 	.word	0x08022518
 801db24:	0802256d 	.word	0x0802256d
 801db28:	20009d68 	.word	0x20009d68
 801db2c:	20009d6a 	.word	0x20009d6a
 801db30:	080225ab 	.word	0x080225ab

0801db34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801db34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db38:	b093      	sub	sp, #76	; 0x4c
 801db3a:	880e      	ldrh	r6, [r1, #0]
 801db3c:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801db40:	4604      	mov	r4, r0
 801db42:	460f      	mov	r7, r1
 801db44:	4691      	mov	r9, r2
 801db46:	b12e      	cbz	r6, 801db54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801db48:	4b74      	ldr	r3, [pc, #464]	; (801dd1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801db4a:	4a75      	ldr	r2, [pc, #468]	; (801dd20 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 801db4c:	4875      	ldr	r0, [pc, #468]	; (801dd24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f0>)
 801db4e:	2153      	movs	r1, #83	; 0x53
 801db50:	f000 febc 	bl	801e8cc <__assert_func>
 801db54:	6810      	ldr	r0, [r2, #0]
 801db56:	6851      	ldr	r1, [r2, #4]
 801db58:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 801dd28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f4>
 801db5c:	ad0e      	add	r5, sp, #56	; 0x38
 801db5e:	c503      	stmia	r5!, {r0, r1}
 801db60:	6818      	ldr	r0, [r3, #0]
 801db62:	6859      	ldr	r1, [r3, #4]
 801db64:	ad10      	add	r5, sp, #64	; 0x40
 801db66:	c503      	stmia	r5!, {r0, r1}
 801db68:	a80e      	add	r0, sp, #56	; 0x38
 801db6a:	f7fc f9d9 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db6e:	4649      	mov	r1, r9
 801db70:	a810      	add	r0, sp, #64	; 0x40
 801db72:	f7fc f9bd 	bl	8019ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801db76:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801db7a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801db7e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801db82:	f8da 0000 	ldr.w	r0, [sl]
 801db86:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 801db8a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 801dd2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f8>
 801db8e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801db92:	440c      	add	r4, r1
 801db94:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801db98:	440a      	add	r2, r1
 801db9a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801db9e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801dba2:	4413      	add	r3, r2
 801dba4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801dba8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801dbac:	930b      	str	r3, [sp, #44]	; 0x2c
 801dbae:	6803      	ldr	r3, [r0, #0]
 801dbb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dbb4:	4798      	blx	r3
 801dbb6:	2801      	cmp	r0, #1
 801dbb8:	d11e      	bne.n	801dbf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801dbba:	220b      	movs	r2, #11
 801dbbc:	9008      	str	r0, [sp, #32]
 801dbbe:	9207      	str	r2, [sp, #28]
 801dbc0:	f8b9 2000 	ldrh.w	r2, [r9]
 801dbc4:	9206      	str	r2, [sp, #24]
 801dbc6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801dbca:	9203      	str	r2, [sp, #12]
 801dbcc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801dbd0:	9202      	str	r2, [sp, #8]
 801dbd2:	b2ad      	uxth	r5, r5
 801dbd4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801dbd8:	9200      	str	r2, [sp, #0]
 801dbda:	9005      	str	r0, [sp, #20]
 801dbdc:	f8cd 8010 	str.w	r8, [sp, #16]
 801dbe0:	9501      	str	r5, [sp, #4]
 801dbe2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801dbe6:	f8da 0000 	ldr.w	r0, [sl]
 801dbea:	463a      	mov	r2, r7
 801dbec:	4621      	mov	r1, r4
 801dbee:	f7fb fcf5 	bl	80195dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801dbf2:	b013      	add	sp, #76	; 0x4c
 801dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbf8:	f8da 0000 	ldr.w	r0, [sl]
 801dbfc:	6803      	ldr	r3, [r0, #0]
 801dbfe:	6a1b      	ldr	r3, [r3, #32]
 801dc00:	4798      	blx	r3
 801dc02:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801dc06:	f8b9 3000 	ldrh.w	r3, [r9]
 801dc0a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801dc0e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801dc12:	fb01 2303 	mla	r3, r1, r3, r2
 801dc16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc1a:	ea25 7ce5 	bic.w	ip, r5, r5, asr #31
 801dc1e:	4418      	add	r0, r3
 801dc20:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 801dc24:	930c      	str	r3, [sp, #48]	; 0x30
 801dc26:	4631      	mov	r1, r6
 801dc28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc2a:	4299      	cmp	r1, r3
 801dc2c:	da70      	bge.n	801dd10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801dc2e:	1cc2      	adds	r2, r0, #3
 801dc30:	46a1      	mov	r9, r4
 801dc32:	eba9 0304 	sub.w	r3, r9, r4
 801dc36:	429d      	cmp	r5, r3
 801dc38:	dd5b      	ble.n	801dcf2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1be>
 801dc3a:	f819 6b01 	ldrb.w	r6, [r9], #1
 801dc3e:	2304      	movs	r3, #4
 801dc40:	f04f 0e04 	mov.w	lr, #4
 801dc44:	fb13 e606 	smlabb	r6, r3, r6, lr
 801dc48:	eb07 0e06 	add.w	lr, r7, r6
 801dc4c:	f89e 3003 	ldrb.w	r3, [lr, #3]
 801dc50:	b17b      	cbz	r3, 801dc72 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801dc52:	2bff      	cmp	r3, #255	; 0xff
 801dc54:	d10f      	bne.n	801dc76 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801dc56:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dc5a:	d10c      	bne.n	801dc76 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801dc5c:	5dbb      	ldrb	r3, [r7, r6]
 801dc5e:	f802 3c03 	strb.w	r3, [r2, #-3]
 801dc62:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801dc66:	f802 3c02 	strb.w	r3, [r2, #-2]
 801dc6a:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801dc6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801dc72:	3203      	adds	r2, #3
 801dc74:	e7dd      	b.n	801dc32 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801dc76:	fb08 fa03 	mul.w	sl, r8, r3
 801dc7a:	f10a 0301 	add.w	r3, sl, #1
 801dc7e:	eb03 232a 	add.w	r3, r3, sl, asr #8
 801dc82:	f817 b006 	ldrb.w	fp, [r7, r6]
 801dc86:	f812 6c03 	ldrb.w	r6, [r2, #-3]
 801dc8a:	121b      	asrs	r3, r3, #8
 801dc8c:	fa1f fa83 	uxth.w	sl, r3
 801dc90:	43db      	mvns	r3, r3
 801dc92:	b2db      	uxtb	r3, r3
 801dc94:	fb1b fb0a 	smulbb	fp, fp, sl
 801dc98:	fb06 b603 	mla	r6, r6, r3, fp
 801dc9c:	b2b6      	uxth	r6, r6
 801dc9e:	f106 0b01 	add.w	fp, r6, #1
 801dca2:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801dca6:	1236      	asrs	r6, r6, #8
 801dca8:	f802 6c03 	strb.w	r6, [r2, #-3]
 801dcac:	f89e b001 	ldrb.w	fp, [lr, #1]
 801dcb0:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 801dcb4:	fb1b fb0a 	smulbb	fp, fp, sl
 801dcb8:	fb06 b603 	mla	r6, r6, r3, fp
 801dcbc:	b2b6      	uxth	r6, r6
 801dcbe:	f106 0b01 	add.w	fp, r6, #1
 801dcc2:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801dcc6:	1236      	asrs	r6, r6, #8
 801dcc8:	f802 6c02 	strb.w	r6, [r2, #-2]
 801dccc:	f89e 6002 	ldrb.w	r6, [lr, #2]
 801dcd0:	fb16 fa0a 	smulbb	sl, r6, sl
 801dcd4:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 801dcd8:	fb06 aa03 	mla	sl, r6, r3, sl
 801dcdc:	fa1f fa8a 	uxth.w	sl, sl
 801dce0:	f10a 0601 	add.w	r6, sl, #1
 801dce4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801dce8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dcec:	f802 ac01 	strb.w	sl, [r2, #-1]
 801dcf0:	e7bf      	b.n	801dc72 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801dcf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dcf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dcf6:	881b      	ldrh	r3, [r3, #0]
 801dcf8:	1b5b      	subs	r3, r3, r5
 801dcfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dcfe:	4413      	add	r3, r2
 801dd00:	4418      	add	r0, r3
 801dd02:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801dd06:	1b5b      	subs	r3, r3, r5
 801dd08:	4463      	add	r3, ip
 801dd0a:	441c      	add	r4, r3
 801dd0c:	3101      	adds	r1, #1
 801dd0e:	e78b      	b.n	801dc28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801dd10:	4b05      	ldr	r3, [pc, #20]	; (801dd28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f4>)
 801dd12:	6818      	ldr	r0, [r3, #0]
 801dd14:	6803      	ldr	r3, [r0, #0]
 801dd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd18:	4798      	blx	r3
 801dd1a:	e76a      	b.n	801dbf2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801dd1c:	08022396 	.word	0x08022396
 801dd20:	080228c3 	.word	0x080228c3
 801dd24:	08022432 	.word	0x08022432
 801dd28:	20009d70 	.word	0x20009d70
 801dd2c:	20009d68 	.word	0x20009d68

0801dd30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd34:	4614      	mov	r4, r2
 801dd36:	880a      	ldrh	r2, [r1, #0]
 801dd38:	b091      	sub	sp, #68	; 0x44
 801dd3a:	2a01      	cmp	r2, #1
 801dd3c:	4680      	mov	r8, r0
 801dd3e:	460e      	mov	r6, r1
 801dd40:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801dd44:	d005      	beq.n	801dd52 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801dd46:	4b6d      	ldr	r3, [pc, #436]	; (801defc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801dd48:	4a6d      	ldr	r2, [pc, #436]	; (801df00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801dd4a:	486e      	ldr	r0, [pc, #440]	; (801df04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801dd4c:	21a1      	movs	r1, #161	; 0xa1
 801dd4e:	f000 fdbd 	bl	801e8cc <__assert_func>
 801dd52:	6820      	ldr	r0, [r4, #0]
 801dd54:	6861      	ldr	r1, [r4, #4]
 801dd56:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 801df08 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801dd5a:	ad0c      	add	r5, sp, #48	; 0x30
 801dd5c:	c503      	stmia	r5!, {r0, r1}
 801dd5e:	6818      	ldr	r0, [r3, #0]
 801dd60:	6859      	ldr	r1, [r3, #4]
 801dd62:	ad0e      	add	r5, sp, #56	; 0x38
 801dd64:	c503      	stmia	r5!, {r0, r1}
 801dd66:	a80c      	add	r0, sp, #48	; 0x30
 801dd68:	f7fc f8da 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd6c:	4621      	mov	r1, r4
 801dd6e:	a80e      	add	r0, sp, #56	; 0x38
 801dd70:	f7fc f8be 	bl	8019ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dd74:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801dd78:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801dd7c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801dd80:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801dd84:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dd88:	eb08 0401 	add.w	r4, r8, r1
 801dd8c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801dd90:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801df0c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801dd94:	440a      	add	r2, r1
 801dd96:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801dd9a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801dd9e:	f8d8 0000 	ldr.w	r0, [r8]
 801dda2:	4413      	add	r3, r2
 801dda4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801dda8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ddac:	930a      	str	r3, [sp, #40]	; 0x28
 801ddae:	6803      	ldr	r3, [r0, #0]
 801ddb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ddb4:	4798      	blx	r3
 801ddb6:	2801      	cmp	r0, #1
 801ddb8:	d11e      	bne.n	801ddf8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801ddba:	220b      	movs	r2, #11
 801ddbc:	9008      	str	r0, [sp, #32]
 801ddbe:	9207      	str	r2, [sp, #28]
 801ddc0:	f8b9 2000 	ldrh.w	r2, [r9]
 801ddc4:	9206      	str	r2, [sp, #24]
 801ddc6:	2200      	movs	r2, #0
 801ddc8:	9205      	str	r2, [sp, #20]
 801ddca:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ddce:	9203      	str	r2, [sp, #12]
 801ddd0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ddd4:	9202      	str	r2, [sp, #8]
 801ddd6:	b2ad      	uxth	r5, r5
 801ddd8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801dddc:	9200      	str	r2, [sp, #0]
 801ddde:	9704      	str	r7, [sp, #16]
 801dde0:	9501      	str	r5, [sp, #4]
 801dde2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801dde6:	f8d8 0000 	ldr.w	r0, [r8]
 801ddea:	4632      	mov	r2, r6
 801ddec:	4621      	mov	r1, r4
 801ddee:	f7fb fbf5 	bl	80195dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ddf2:	b011      	add	sp, #68	; 0x44
 801ddf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddf8:	f8d8 0000 	ldr.w	r0, [r8]
 801ddfc:	6803      	ldr	r3, [r0, #0]
 801ddfe:	6a1b      	ldr	r3, [r3, #32]
 801de00:	4798      	blx	r3
 801de02:	f8b9 3000 	ldrh.w	r3, [r9]
 801de06:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801de0a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801de0e:	fb01 2303 	mla	r3, r1, r3, r2
 801de12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de16:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801de1a:	4418      	add	r0, r3
 801de1c:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801de20:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801de24:	930b      	str	r3, [sp, #44]	; 0x2c
 801de26:	f04f 0c00 	mov.w	ip, #0
 801de2a:	fa1f f987 	uxth.w	r9, r7
 801de2e:	b289      	uxth	r1, r1
 801de30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de32:	459c      	cmp	ip, r3
 801de34:	da5c      	bge.n	801def0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801de36:	1cc3      	adds	r3, r0, #3
 801de38:	46a2      	mov	sl, r4
 801de3a:	ebaa 0204 	sub.w	r2, sl, r4
 801de3e:	4295      	cmp	r5, r2
 801de40:	dd46      	ble.n	801ded0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801de42:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801de46:	f04f 0e03 	mov.w	lr, #3
 801de4a:	f04f 0b04 	mov.w	fp, #4
 801de4e:	fb1e b202 	smlabb	r2, lr, r2, fp
 801de52:	2fff      	cmp	r7, #255	; 0xff
 801de54:	eb06 0e02 	add.w	lr, r6, r2
 801de58:	f816 b002 	ldrb.w	fp, [r6, r2]
 801de5c:	d02f      	beq.n	801debe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801de5e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801de62:	fb12 f201 	smulbb	r2, r2, r1
 801de66:	fb0b 2209 	mla	r2, fp, r9, r2
 801de6a:	b292      	uxth	r2, r2
 801de6c:	f102 0b01 	add.w	fp, r2, #1
 801de70:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801de74:	1212      	asrs	r2, r2, #8
 801de76:	f803 2c03 	strb.w	r2, [r3, #-3]
 801de7a:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801de7e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801de82:	fb1b fb01 	smulbb	fp, fp, r1
 801de86:	fb02 b209 	mla	r2, r2, r9, fp
 801de8a:	b292      	uxth	r2, r2
 801de8c:	f102 0b01 	add.w	fp, r2, #1
 801de90:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801de94:	1212      	asrs	r2, r2, #8
 801de96:	f803 2c02 	strb.w	r2, [r3, #-2]
 801de9a:	f89e 2002 	ldrb.w	r2, [lr, #2]
 801de9e:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 801dea2:	fb1e fe01 	smulbb	lr, lr, r1
 801dea6:	fb02 e209 	mla	r2, r2, r9, lr
 801deaa:	b292      	uxth	r2, r2
 801deac:	f102 0e01 	add.w	lr, r2, #1
 801deb0:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801deb4:	1212      	asrs	r2, r2, #8
 801deb6:	f803 2c01 	strb.w	r2, [r3, #-1]
 801deba:	3303      	adds	r3, #3
 801debc:	e7bd      	b.n	801de3a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801debe:	f803 bc03 	strb.w	fp, [r3, #-3]
 801dec2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801dec6:	f803 2c02 	strb.w	r2, [r3, #-2]
 801deca:	f89e 2002 	ldrb.w	r2, [lr, #2]
 801dece:	e7f2      	b.n	801deb6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801ded0:	4b0d      	ldr	r3, [pc, #52]	; (801df08 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801ded2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ded4:	881b      	ldrh	r3, [r3, #0]
 801ded6:	1b5b      	subs	r3, r3, r5
 801ded8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dedc:	4413      	add	r3, r2
 801dede:	4418      	add	r0, r3
 801dee0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dee4:	1b5b      	subs	r3, r3, r5
 801dee6:	4443      	add	r3, r8
 801dee8:	441c      	add	r4, r3
 801deea:	f10c 0c01 	add.w	ip, ip, #1
 801deee:	e79f      	b.n	801de30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801def0:	4b06      	ldr	r3, [pc, #24]	; (801df0c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801def2:	6818      	ldr	r0, [r3, #0]
 801def4:	6803      	ldr	r3, [r0, #0]
 801def6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801def8:	4798      	blx	r3
 801defa:	e77a      	b.n	801ddf2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801defc:	080222a2 	.word	0x080222a2
 801df00:	080227b6 	.word	0x080227b6
 801df04:	08022432 	.word	0x08022432
 801df08:	20009d68 	.word	0x20009d68
 801df0c:	20009d70 	.word	0x20009d70

0801df10 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801df10:	b570      	push	{r4, r5, r6, lr}
 801df12:	780d      	ldrb	r5, [r1, #0]
 801df14:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801df18:	2d01      	cmp	r5, #1
 801df1a:	d00d      	beq.n	801df38 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801df1c:	d307      	bcc.n	801df2e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801df1e:	2d02      	cmp	r5, #2
 801df20:	d10f      	bne.n	801df42 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801df22:	4b08      	ldr	r3, [pc, #32]	; (801df44 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801df24:	4a08      	ldr	r2, [pc, #32]	; (801df48 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801df26:	4809      	ldr	r0, [pc, #36]	; (801df4c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801df28:	2146      	movs	r1, #70	; 0x46
 801df2a:	f000 fccf 	bl	801e8cc <__assert_func>
 801df2e:	9404      	str	r4, [sp, #16]
 801df30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df34:	f7ff bdfe 	b.w	801db34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801df38:	9404      	str	r4, [sp, #16]
 801df3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df3e:	f7ff bef7 	b.w	801dd30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801df42:	bd70      	pop	{r4, r5, r6, pc}
 801df44:	08022257 	.word	0x08022257
 801df48:	08022734 	.word	0x08022734
 801df4c:	08022432 	.word	0x08022432

0801df50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df54:	460d      	mov	r5, r1
 801df56:	b08b      	sub	sp, #44	; 0x2c
 801df58:	4604      	mov	r4, r0
 801df5a:	6808      	ldr	r0, [r1, #0]
 801df5c:	6849      	ldr	r1, [r1, #4]
 801df5e:	4699      	mov	r9, r3
 801df60:	ab06      	add	r3, sp, #24
 801df62:	c303      	stmia	r3!, {r0, r1}
 801df64:	6810      	ldr	r0, [r2, #0]
 801df66:	6851      	ldr	r1, [r2, #4]
 801df68:	ab08      	add	r3, sp, #32
 801df6a:	c303      	stmia	r3!, {r0, r1}
 801df6c:	a806      	add	r0, sp, #24
 801df6e:	f7fb ffd7 	bl	8019f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df72:	4629      	mov	r1, r5
 801df74:	a808      	add	r0, sp, #32
 801df76:	f7fb ffbb 	bl	8019ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df7a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801df7e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801df82:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801df86:	4d61      	ldr	r5, [pc, #388]	; (801e10c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 801df88:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801df8c:	6828      	ldr	r0, [r5, #0]
 801df8e:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 801df92:	fb11 2103 	smlabb	r1, r1, r3, r2
 801df96:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801df9a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801df9e:	440a      	add	r2, r1
 801dfa0:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dfa4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dfa8:	4413      	add	r3, r2
 801dfaa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801dfae:	6803      	ldr	r3, [r0, #0]
 801dfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfb2:	4798      	blx	r3
 801dfb4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dfb8:	d118      	bne.n	801dfec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801dfba:	f010 0f20 	tst.w	r0, #32
 801dfbe:	6828      	ldr	r0, [r5, #0]
 801dfc0:	d017      	beq.n	801dff2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801dfc2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801dfc6:	6801      	ldr	r1, [r0, #0]
 801dfc8:	9502      	str	r5, [sp, #8]
 801dfca:	b2b6      	uxth	r6, r6
 801dfcc:	fa1f f588 	uxth.w	r5, r8
 801dfd0:	f8cd 900c 	str.w	r9, [sp, #12]
 801dfd4:	9501      	str	r5, [sp, #4]
 801dfd6:	9600      	str	r6, [sp, #0]
 801dfd8:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 801dfda:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dfde:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dfe2:	4621      	mov	r1, r4
 801dfe4:	47a8      	blx	r5
 801dfe6:	b00b      	add	sp, #44	; 0x2c
 801dfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfec:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dff0:	e7e5      	b.n	801dfbe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801dff2:	6803      	ldr	r3, [r0, #0]
 801dff4:	6a1b      	ldr	r3, [r3, #32]
 801dff6:	4798      	blx	r3
 801dff8:	4b45      	ldr	r3, [pc, #276]	; (801e110 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c0>)
 801dffa:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801dffe:	881a      	ldrh	r2, [r3, #0]
 801e000:	f9bd 5022 	ldrsh.w	r5, [sp, #34]	; 0x22
 801e004:	fb05 1202 	mla	r2, r5, r2, r1
 801e008:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e00c:	4410      	add	r0, r2
 801e00e:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
 801e012:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801e016:	0092      	lsls	r2, r2, #2
 801e018:	9105      	str	r1, [sp, #20]
 801e01a:	9204      	str	r2, [sp, #16]
 801e01c:	4621      	mov	r1, r4
 801e01e:	f04f 0e00 	mov.w	lr, #0
 801e022:	45c6      	cmp	lr, r8
 801e024:	da6c      	bge.n	801e100 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>
 801e026:	1cc4      	adds	r4, r0, #3
 801e028:	1d0d      	adds	r5, r1, #4
 801e02a:	f04f 0c00 	mov.w	ip, #0
 801e02e:	45b4      	cmp	ip, r6
 801e030:	da55      	bge.n	801e0de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 801e032:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801e036:	b187      	cbz	r7, 801e05a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e038:	2fff      	cmp	r7, #255	; 0xff
 801e03a:	d113      	bne.n	801e064 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e03c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e040:	d110      	bne.n	801e064 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e042:	f815 2c04 	ldrb.w	r2, [r5, #-4]
 801e046:	f804 2c03 	strb.w	r2, [r4, #-3]
 801e04a:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801e04e:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e052:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801e056:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e05a:	f10c 0c01 	add.w	ip, ip, #1
 801e05e:	3403      	adds	r4, #3
 801e060:	3504      	adds	r5, #4
 801e062:	e7e4      	b.n	801e02e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e064:	fb09 f707 	mul.w	r7, r9, r7
 801e068:	1c7a      	adds	r2, r7, #1
 801e06a:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801e06e:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801e072:	f814 7c03 	ldrb.w	r7, [r4, #-3]
 801e076:	1212      	asrs	r2, r2, #8
 801e078:	fa1f fa82 	uxth.w	sl, r2
 801e07c:	43d2      	mvns	r2, r2
 801e07e:	b2d2      	uxtb	r2, r2
 801e080:	fb1b fb0a 	smulbb	fp, fp, sl
 801e084:	fb07 b702 	mla	r7, r7, r2, fp
 801e088:	b2bf      	uxth	r7, r7
 801e08a:	f107 0b01 	add.w	fp, r7, #1
 801e08e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e092:	123f      	asrs	r7, r7, #8
 801e094:	f804 7c03 	strb.w	r7, [r4, #-3]
 801e098:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 801e09c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 801e0a0:	fb1b fb0a 	smulbb	fp, fp, sl
 801e0a4:	fb07 b702 	mla	r7, r7, r2, fp
 801e0a8:	b2bf      	uxth	r7, r7
 801e0aa:	f107 0b01 	add.w	fp, r7, #1
 801e0ae:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e0b2:	123f      	asrs	r7, r7, #8
 801e0b4:	f804 7c02 	strb.w	r7, [r4, #-2]
 801e0b8:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801e0bc:	fb17 fa0a 	smulbb	sl, r7, sl
 801e0c0:	f814 7c01 	ldrb.w	r7, [r4, #-1]
 801e0c4:	fb07 aa02 	mla	sl, r7, r2, sl
 801e0c8:	fa1f fa8a 	uxth.w	sl, sl
 801e0cc:	f10a 0701 	add.w	r7, sl, #1
 801e0d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e0d8:	f804 ac01 	strb.w	sl, [r4, #-1]
 801e0dc:	e7bd      	b.n	801e05a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e0de:	881a      	ldrh	r2, [r3, #0]
 801e0e0:	9c05      	ldr	r4, [sp, #20]
 801e0e2:	1b92      	subs	r2, r2, r6
 801e0e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e0e8:	4422      	add	r2, r4
 801e0ea:	4410      	add	r0, r2
 801e0ec:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e0f0:	9c04      	ldr	r4, [sp, #16]
 801e0f2:	1b92      	subs	r2, r2, r6
 801e0f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e0f8:	4411      	add	r1, r2
 801e0fa:	f10e 0e01 	add.w	lr, lr, #1
 801e0fe:	e790      	b.n	801e022 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd2>
 801e100:	4b02      	ldr	r3, [pc, #8]	; (801e10c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 801e102:	6818      	ldr	r0, [r3, #0]
 801e104:	6803      	ldr	r3, [r0, #0]
 801e106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e108:	4798      	blx	r3
 801e10a:	e76c      	b.n	801dfe6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e10c:	20009d70 	.word	0x20009d70
 801e110:	20009d68 	.word	0x20009d68

0801e114 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e118:	b085      	sub	sp, #20
 801e11a:	4606      	mov	r6, r0
 801e11c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e120:	460c      	mov	r4, r1
 801e122:	4691      	mov	r9, r2
 801e124:	4698      	mov	r8, r3
 801e126:	b385      	cbz	r5, 801e18a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e128:	4608      	mov	r0, r1
 801e12a:	f7fd fdfb 	bl	801bd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e12e:	4607      	mov	r7, r0
 801e130:	4620      	mov	r0, r4
 801e132:	f7fd fe31 	bl	801bd98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e136:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e13a:	4620      	mov	r0, r4
 801e13c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e140:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e144:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e148:	f7fd ff3c 	bl	801bfc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e14c:	2801      	cmp	r0, #1
 801e14e:	d00f      	beq.n	801e170 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e150:	4620      	mov	r0, r4
 801e152:	f7fd ff37 	bl	801bfc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e156:	2802      	cmp	r0, #2
 801e158:	d00a      	beq.n	801e170 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e15a:	4620      	mov	r0, r4
 801e15c:	f7fd ff32 	bl	801bfc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e160:	280b      	cmp	r0, #11
 801e162:	d005      	beq.n	801e170 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e164:	4b1b      	ldr	r3, [pc, #108]	; (801e1d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801e166:	4a1c      	ldr	r2, [pc, #112]	; (801e1d8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801e168:	481c      	ldr	r0, [pc, #112]	; (801e1dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801e16a:	212e      	movs	r1, #46	; 0x2e
 801e16c:	f000 fbae 	bl	801e8cc <__assert_func>
 801e170:	4620      	mov	r0, r4
 801e172:	f7fd ff27 	bl	801bfc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e176:	2802      	cmp	r0, #2
 801e178:	4620      	mov	r0, r4
 801e17a:	d109      	bne.n	801e190 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801e17c:	f7fd fea0 	bl	801bec0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e180:	462b      	mov	r3, r5
 801e182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e184:	a902      	add	r1, sp, #8
 801e186:	f7ff fee3 	bl	801df50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e18a:	b005      	add	sp, #20
 801e18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e190:	f7fd ff18 	bl	801bfc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e194:	280b      	cmp	r0, #11
 801e196:	d10e      	bne.n	801e1b6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801e198:	4620      	mov	r0, r4
 801e19a:	f7fd fe91 	bl	801bec0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e19e:	4606      	mov	r6, r0
 801e1a0:	4620      	mov	r0, r4
 801e1a2:	f7fd febd 	bl	801bf20 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e1a6:	9500      	str	r5, [sp, #0]
 801e1a8:	4601      	mov	r1, r0
 801e1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e1ac:	aa02      	add	r2, sp, #8
 801e1ae:	4630      	mov	r0, r6
 801e1b0:	f7ff feae 	bl	801df10 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e1b4:	e7e9      	b.n	801e18a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e1b6:	6833      	ldr	r3, [r6, #0]
 801e1b8:	4620      	mov	r0, r4
 801e1ba:	691f      	ldr	r7, [r3, #16]
 801e1bc:	f7fd fe80 	bl	801bec0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e1c0:	2300      	movs	r3, #0
 801e1c2:	9301      	str	r3, [sp, #4]
 801e1c4:	4601      	mov	r1, r0
 801e1c6:	9500      	str	r5, [sp, #0]
 801e1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e1ca:	aa02      	add	r2, sp, #8
 801e1cc:	4630      	mov	r0, r6
 801e1ce:	47b8      	blx	r7
 801e1d0:	e7db      	b.n	801e18a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e1d2:	bf00      	nop
 801e1d4:	080222f0 	.word	0x080222f0
 801e1d8:	0802283f 	.word	0x0802283f
 801e1dc:	08022432 	.word	0x08022432

0801e1e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e1e0:	b570      	push	{r4, r5, r6, lr}
 801e1e2:	9d04      	ldr	r5, [sp, #16]
 801e1e4:	460c      	mov	r4, r1
 801e1e6:	4619      	mov	r1, r3
 801e1e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e1ec:	2a0b      	cmp	r2, #11
 801e1ee:	d825      	bhi.n	801e23c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>
 801e1f0:	e8df f002 	tbb	[pc, r2]
 801e1f4:	1f0d1306 	.word	0x1f0d1306
 801e1f8:	1f1f1f1f 	.word	0x1f1f1f1f
 801e1fc:	1f1f1f1f 	.word	0x1f1f1f1f
 801e200:	4b0f      	ldr	r3, [pc, #60]	; (801e240 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e202:	4a10      	ldr	r2, [pc, #64]	; (801e244 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e204:	f240 116b 	movw	r1, #363	; 0x16b
 801e208:	480f      	ldr	r0, [pc, #60]	; (801e248 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e20a:	f000 fb5f 	bl	801e8cc <__assert_func>
 801e20e:	462a      	mov	r2, r5
 801e210:	4620      	mov	r0, r4
 801e212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e216:	f7ff be9b 	b.w	801df50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e21a:	6802      	ldr	r2, [r0, #0]
 801e21c:	9304      	str	r3, [sp, #16]
 801e21e:	2600      	movs	r6, #0
 801e220:	9605      	str	r6, [sp, #20]
 801e222:	6916      	ldr	r6, [r2, #16]
 801e224:	462b      	mov	r3, r5
 801e226:	460a      	mov	r2, r1
 801e228:	46b4      	mov	ip, r6
 801e22a:	4621      	mov	r1, r4
 801e22c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e230:	4760      	bx	ip
 801e232:	4b06      	ldr	r3, [pc, #24]	; (801e24c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e234:	4a03      	ldr	r2, [pc, #12]	; (801e244 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e236:	f44f 71be 	mov.w	r1, #380	; 0x17c
 801e23a:	e7e5      	b.n	801e208 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x28>
 801e23c:	bd70      	pop	{r4, r5, r6, pc}
 801e23e:	bf00      	nop
 801e240:	080225fa 	.word	0x080225fa
 801e244:	08022b30 	.word	0x08022b30
 801e248:	08022432 	.word	0x08022432
 801e24c:	0802263b 	.word	0x0802263b

0801e250 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e250:	b138      	cbz	r0, 801e262 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e252:	2902      	cmp	r1, #2
 801e254:	d00b      	beq.n	801e26e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1e>
 801e256:	2903      	cmp	r1, #3
 801e258:	d00c      	beq.n	801e274 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e25a:	2901      	cmp	r1, #1
 801e25c:	d10d      	bne.n	801e27a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801e25e:	2001      	movs	r0, #1
 801e260:	4770      	bx	lr
 801e262:	2902      	cmp	r1, #2
 801e264:	d006      	beq.n	801e274 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e266:	2903      	cmp	r1, #3
 801e268:	d007      	beq.n	801e27a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801e26a:	2901      	cmp	r1, #1
 801e26c:	d1f7      	bne.n	801e25e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e26e:	4b05      	ldr	r3, [pc, #20]	; (801e284 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e270:	8818      	ldrh	r0, [r3, #0]
 801e272:	4770      	bx	lr
 801e274:	f04f 30ff 	mov.w	r0, #4294967295
 801e278:	4770      	bx	lr
 801e27a:	4b02      	ldr	r3, [pc, #8]	; (801e284 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e27c:	8818      	ldrh	r0, [r3, #0]
 801e27e:	4240      	negs	r0, r0
 801e280:	4770      	bx	lr
 801e282:	bf00      	nop
 801e284:	20009d68 	.word	0x20009d68

0801e288 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e288:	b140      	cbz	r0, 801e29c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x14>
 801e28a:	2902      	cmp	r1, #2
 801e28c:	d00c      	beq.n	801e2a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801e28e:	2903      	cmp	r1, #3
 801e290:	d00d      	beq.n	801e2ae <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x26>
 801e292:	2901      	cmp	r1, #1
 801e294:	d10f      	bne.n	801e2b6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2e>
 801e296:	4b09      	ldr	r3, [pc, #36]	; (801e2bc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e298:	8818      	ldrh	r0, [r3, #0]
 801e29a:	4770      	bx	lr
 801e29c:	2902      	cmp	r1, #2
 801e29e:	d006      	beq.n	801e2ae <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x26>
 801e2a0:	2903      	cmp	r1, #3
 801e2a2:	d008      	beq.n	801e2b6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2e>
 801e2a4:	2901      	cmp	r1, #1
 801e2a6:	d1f6      	bne.n	801e296 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801e2a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e2ac:	4770      	bx	lr
 801e2ae:	4b03      	ldr	r3, [pc, #12]	; (801e2bc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e2b0:	8818      	ldrh	r0, [r3, #0]
 801e2b2:	4240      	negs	r0, r0
 801e2b4:	4770      	bx	lr
 801e2b6:	2001      	movs	r0, #1
 801e2b8:	4770      	bx	lr
 801e2ba:	bf00      	nop
 801e2bc:	20009d68 	.word	0x20009d68

0801e2c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2c4:	b097      	sub	sp, #92	; 0x5c
 801e2c6:	910b      	str	r1, [sp, #44]	; 0x2c
 801e2c8:	a912      	add	r1, sp, #72	; 0x48
 801e2ca:	e881 000c 	stmia.w	r1, {r2, r3}
 801e2ce:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801e2d2:	9308      	str	r3, [sp, #32]
 801e2d4:	aa24      	add	r2, sp, #144	; 0x90
 801e2d6:	e892 020c 	ldmia.w	r2, {r2, r3, r9}
 801e2da:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
 801e2de:	7b58      	ldrb	r0, [r3, #13]
 801e2e0:	9110      	str	r1, [sp, #64]	; 0x40
 801e2e2:	f89d 10a8 	ldrb.w	r1, [sp, #168]	; 0xa8
 801e2e6:	910c      	str	r1, [sp, #48]	; 0x30
 801e2e8:	f010 0f08 	tst.w	r0, #8
 801e2ec:	7999      	ldrb	r1, [r3, #6]
 801e2ee:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
 801e2f2:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
 801e2f6:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801e2fa:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801e2fe:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801e302:	bf14      	ite	ne
 801e304:	f44f 7780 	movne.w	r7, #256	; 0x100
 801e308:	2700      	moveq	r7, #0
 801e30a:	f010 0f10 	tst.w	r0, #16
 801e30e:	bf14      	ite	ne
 801e310:	f44f 7080 	movne.w	r0, #256	; 0x100
 801e314:	2000      	moveq	r0, #0
 801e316:	4339      	orrs	r1, r7
 801e318:	910a      	str	r1, [sp, #40]	; 0x28
 801e31a:	f000 8174 	beq.w	801e606 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x346>
 801e31e:	79d9      	ldrb	r1, [r3, #7]
 801e320:	4301      	orrs	r1, r0
 801e322:	9109      	str	r1, [sp, #36]	; 0x24
 801e324:	f000 816f 	beq.w	801e606 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x346>
 801e328:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801e32c:	2e00      	cmp	r6, #0
 801e32e:	f000 8115 	beq.w	801e55c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29c>
 801e332:	1af6      	subs	r6, r6, r3
 801e334:	b2b6      	uxth	r6, r6
 801e336:	0433      	lsls	r3, r6, #16
 801e338:	d502      	bpl.n	801e340 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 801e33a:	1bad      	subs	r5, r5, r6
 801e33c:	b22d      	sxth	r5, r5
 801e33e:	2600      	movs	r6, #0
 801e340:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e344:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 801e348:	428d      	cmp	r5, r1
 801e34a:	b28b      	uxth	r3, r1
 801e34c:	bfbf      	itttt	lt
 801e34e:	18f6      	addlt	r6, r6, r3
 801e350:	1b75      	sublt	r5, r6, r5
 801e352:	b2ae      	uxthlt	r6, r5
 801e354:	460d      	movlt	r5, r1
 801e356:	8891      	ldrh	r1, [r2, #4]
 801e358:	440b      	add	r3, r1
 801e35a:	b21b      	sxth	r3, r3
 801e35c:	8851      	ldrh	r1, [r2, #2]
 801e35e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e360:	88d3      	ldrh	r3, [r2, #6]
 801e362:	9a08      	ldr	r2, [sp, #32]
 801e364:	4419      	add	r1, r3
 801e366:	b20b      	sxth	r3, r1
 801e368:	930e      	str	r3, [sp, #56]	; 0x38
 801e36a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801e36e:	9307      	str	r3, [sp, #28]
 801e370:	4bbc      	ldr	r3, [pc, #752]	; (801e664 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801e372:	f893 a000 	ldrb.w	sl, [r3]
 801e376:	f10a 3eff 	add.w	lr, sl, #4294967295
 801e37a:	f1de 0300 	rsbs	r3, lr, #0
 801e37e:	eb43 030e 	adc.w	r3, r3, lr
 801e382:	930d      	str	r3, [sp, #52]	; 0x34
 801e384:	4629      	mov	r1, r5
 801e386:	465b      	mov	r3, fp
 801e388:	a812      	add	r0, sp, #72	; 0x48
 801e38a:	f7fb fcb9 	bl	8019d00 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e38e:	4629      	mov	r1, r5
 801e390:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801e394:	465b      	mov	r3, fp
 801e396:	9a08      	ldr	r2, [sp, #32]
 801e398:	a812      	add	r0, sp, #72	; 0x48
 801e39a:	f7fb fccc 	bl	8019d36 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e39e:	a916      	add	r1, sp, #88	; 0x58
 801e3a0:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e3a4:	a815      	add	r0, sp, #84	; 0x54
 801e3a6:	f7fb fd89 	bl	8019ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e3aa:	f1bb 0f00 	cmp.w	fp, #0
 801e3ae:	f040 80d8 	bne.w	801e562 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a2>
 801e3b2:	f1ba 0f01 	cmp.w	sl, #1
 801e3b6:	f040 80dc 	bne.w	801e572 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b2>
 801e3ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	f040 8127 	bne.w	801e610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801e3c2:	4ba9      	ldr	r3, [pc, #676]	; (801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e3c4:	6818      	ldr	r0, [r3, #0]
 801e3c6:	6803      	ldr	r3, [r0, #0]
 801e3c8:	6a1b      	ldr	r3, [r3, #32]
 801e3ca:	4798      	blx	r3
 801e3cc:	4aa7      	ldr	r2, [pc, #668]	; (801e66c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801e3ce:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801e3d2:	8811      	ldrh	r1, [r2, #0]
 801e3d4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801e3d8:	fb01 2303 	mla	r3, r1, r3, r2
 801e3dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3e0:	18c3      	adds	r3, r0, r3
 801e3e2:	f04f 0a01 	mov.w	sl, #1
 801e3e6:	9309      	str	r3, [sp, #36]	; 0x24
 801e3e8:	fa0a f308 	lsl.w	r3, sl, r8
 801e3ec:	3b01      	subs	r3, #1
 801e3ee:	b2db      	uxtb	r3, r3
 801e3f0:	45d0      	cmp	r8, sl
 801e3f2:	9311      	str	r3, [sp, #68]	; 0x44
 801e3f4:	f000 810e 	beq.w	801e614 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x354>
 801e3f8:	f1b8 0f02 	cmp.w	r8, #2
 801e3fc:	f000 8146 	beq.w	801e68c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3cc>
 801e400:	f1b8 0f04 	cmp.w	r8, #4
 801e404:	f000 8139 	beq.w	801e67a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ba>
 801e408:	b906      	cbnz	r6, 801e40c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801e40a:	b164      	cbz	r4, 801e426 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x166>
 801e40c:	9a07      	ldr	r2, [sp, #28]
 801e40e:	fb17 6304 	smlabb	r3, r7, r4, r6
 801e412:	fb13 f308 	smulbb	r3, r3, r8
 801e416:	1b14      	subs	r4, r2, r4
 801e418:	b29b      	uxth	r3, r3
 801e41a:	b2a2      	uxth	r2, r4
 801e41c:	eb09 09d3 	add.w	r9, r9, r3, lsr #3
 801e420:	9207      	str	r2, [sp, #28]
 801e422:	f003 0407 	and.w	r4, r3, #7
 801e426:	4659      	mov	r1, fp
 801e428:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e42a:	f7ff ff11 	bl	801e250 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e42e:	4659      	mov	r1, fp
 801e430:	9010      	str	r0, [sp, #64]	; 0x40
 801e432:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e434:	f7ff ff28 	bl	801e288 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e43a:	9a08      	ldr	r2, [sp, #32]
 801e43c:	1a99      	subs	r1, r3, r2
 801e43e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e440:	f899 2000 	ldrb.w	r2, [r9]
 801e444:	1bad      	subs	r5, r5, r6
 801e446:	1b5d      	subs	r5, r3, r5
 801e448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e44a:	429d      	cmp	r5, r3
 801e44c:	bfd4      	ite	le
 801e44e:	ebc6 0605 	rsble	r6, r6, r5
 801e452:	ebc6 0603 	rsbgt	r6, r6, r3
 801e456:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e458:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e45c:	9308      	str	r3, [sp, #32]
 801e45e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e460:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e464:	930a      	str	r3, [sp, #40]	; 0x28
 801e466:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801e46a:	930d      	str	r3, [sp, #52]	; 0x34
 801e46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e46e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 801e472:	950e      	str	r5, [sp, #56]	; 0x38
 801e474:	9d07      	ldr	r5, [sp, #28]
 801e476:	428d      	cmp	r5, r1
 801e478:	fb03 0016 	mls	r0, r3, r6, r0
 801e47c:	bfa8      	it	ge
 801e47e:	460d      	movge	r5, r1
 801e480:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e482:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e486:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801e48a:	1bbf      	subs	r7, r7, r6
 801e48c:	4122      	asrs	r2, r4
 801e48e:	fb01 0303 	mla	r3, r1, r3, r0
 801e492:	fb08 f707 	mul.w	r7, r8, r7
 801e496:	b2d2      	uxtb	r2, r2
 801e498:	9307      	str	r3, [sp, #28]
 801e49a:	2d00      	cmp	r5, #0
 801e49c:	f340 80d8 	ble.w	801e650 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e4a2:	46b4      	mov	ip, r6
 801e4a4:	f1bc 0f00 	cmp.w	ip, #0
 801e4a8:	f340 80c1 	ble.w	801e62e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 801e4ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e4ae:	4013      	ands	r3, r2
 801e4b0:	d042      	beq.n	801e538 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x278>
 801e4b2:	fb13 f30a 	smulbb	r3, r3, sl
 801e4b6:	2bfe      	cmp	r3, #254	; 0xfe
 801e4b8:	dd03      	ble.n	801e4c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 801e4ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e4bc:	28ff      	cmp	r0, #255	; 0xff
 801e4be:	f000 80ac 	beq.w	801e61a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801e4c2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801e4c6:	f8bd b034 	ldrh.w	fp, [sp, #52]	; 0x34
 801e4ca:	fb10 f303 	smulbb	r3, r0, r3
 801e4ce:	b29b      	uxth	r3, r3
 801e4d0:	1c58      	adds	r0, r3, #1
 801e4d2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e4d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e4da:	fa1f fe83 	uxth.w	lr, r3
 801e4de:	7808      	ldrb	r0, [r1, #0]
 801e4e0:	43db      	mvns	r3, r3
 801e4e2:	b2db      	uxtb	r3, r3
 801e4e4:	fb1b fb0e 	smulbb	fp, fp, lr
 801e4e8:	fb00 b003 	mla	r0, r0, r3, fp
 801e4ec:	b280      	uxth	r0, r0
 801e4ee:	f100 0b01 	add.w	fp, r0, #1
 801e4f2:	eb0b 2010 	add.w	r0, fp, r0, lsr #8
 801e4f6:	1200      	asrs	r0, r0, #8
 801e4f8:	f8bd b028 	ldrh.w	fp, [sp, #40]	; 0x28
 801e4fc:	7008      	strb	r0, [r1, #0]
 801e4fe:	7848      	ldrb	r0, [r1, #1]
 801e500:	fb1b fb0e 	smulbb	fp, fp, lr
 801e504:	fb00 b003 	mla	r0, r0, r3, fp
 801e508:	b280      	uxth	r0, r0
 801e50a:	f100 0b01 	add.w	fp, r0, #1
 801e50e:	eb0b 2010 	add.w	r0, fp, r0, lsr #8
 801e512:	1200      	asrs	r0, r0, #8
 801e514:	f8bd b020 	ldrh.w	fp, [sp, #32]
 801e518:	7048      	strb	r0, [r1, #1]
 801e51a:	7888      	ldrb	r0, [r1, #2]
 801e51c:	fb1b fe0e 	smulbb	lr, fp, lr
 801e520:	fb00 ee03 	mla	lr, r0, r3, lr
 801e524:	fa1f fe8e 	uxth.w	lr, lr
 801e528:	f10e 0301 	add.w	r3, lr, #1
 801e52c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801e530:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e534:	f881 e002 	strb.w	lr, [r1, #2]
 801e538:	4444      	add	r4, r8
 801e53a:	b2a4      	uxth	r4, r4
 801e53c:	2c07      	cmp	r4, #7
 801e53e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e540:	bf8d      	iteet	hi
 801e542:	f899 2001 	ldrbhi.w	r2, [r9, #1]
 801e546:	fa42 f208 	asrls.w	r2, r2, r8
 801e54a:	b2d2      	uxtbls	r2, r2
 801e54c:	f109 0901 	addhi.w	r9, r9, #1
 801e550:	bf88      	it	hi
 801e552:	2400      	movhi	r4, #0
 801e554:	4419      	add	r1, r3
 801e556:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e55a:	e7a3      	b.n	801e4a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801e55c:	441d      	add	r5, r3
 801e55e:	b22d      	sxth	r5, r5
 801e560:	e6ee      	b.n	801e340 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 801e562:	f1bb 0f01 	cmp.w	fp, #1
 801e566:	f47f af28 	bne.w	801e3ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 801e56a:	f1ba 0f01 	cmp.w	sl, #1
 801e56e:	f47f af24 	bne.w	801e3ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 801e572:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801e576:	f8da 0000 	ldr.w	r0, [sl]
 801e57a:	6803      	ldr	r3, [r0, #0]
 801e57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e57e:	4798      	blx	r3
 801e580:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801e584:	4652      	mov	r2, sl
 801e586:	d006      	beq.n	801e596 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d6>
 801e588:	f1b8 0f04 	cmp.w	r8, #4
 801e58c:	d13e      	bne.n	801e60c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801e58e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e590:	3300      	adds	r3, #0
 801e592:	bf18      	it	ne
 801e594:	2301      	movne	r3, #1
 801e596:	05c0      	lsls	r0, r0, #23
 801e598:	d56a      	bpl.n	801e670 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801e59a:	f1b8 0f08 	cmp.w	r8, #8
 801e59e:	d167      	bne.n	801e670 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	bf14      	ite	ne
 801e5a4:	2180      	movne	r1, #128	; 0x80
 801e5a6:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801e5aa:	2e00      	cmp	r6, #0
 801e5ac:	f47f af05 	bne.w	801e3ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 801e5b0:	2c00      	cmp	r4, #0
 801e5b2:	f47f af02 	bne.w	801e3ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 801e5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e5ba:	18eb      	adds	r3, r5, r3
 801e5bc:	4298      	cmp	r0, r3
 801e5be:	f6ff aefc 	blt.w	801e3ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 801e5c2:	9808      	ldr	r0, [sp, #32]
 801e5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5c6:	4403      	add	r3, r0
 801e5c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e5ca:	4298      	cmp	r0, r3
 801e5cc:	f6ff aef5 	blt.w	801e3ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 801e5d0:	6810      	ldr	r0, [r2, #0]
 801e5d2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801e5d6:	6804      	ldr	r4, [r0, #0]
 801e5d8:	9105      	str	r1, [sp, #20]
 801e5da:	f1b8 0f08 	cmp.w	r8, #8
 801e5de:	bf18      	it	ne
 801e5e0:	3701      	addne	r7, #1
 801e5e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e5e4:	9104      	str	r1, [sp, #16]
 801e5e6:	bf18      	it	ne
 801e5e8:	f027 0701 	bicne.w	r7, r7, #1
 801e5ec:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e5ee:	9103      	str	r1, [sp, #12]
 801e5f0:	bf18      	it	ne
 801e5f2:	b2bf      	uxthne	r7, r7
 801e5f4:	9907      	ldr	r1, [sp, #28]
 801e5f6:	9101      	str	r1, [sp, #4]
 801e5f8:	9702      	str	r7, [sp, #8]
 801e5fa:	9700      	str	r7, [sp, #0]
 801e5fc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801e600:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
 801e602:	4649      	mov	r1, r9
 801e604:	47a0      	blx	r4
 801e606:	b017      	add	sp, #92	; 0x5c
 801e608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e60c:	2300      	movs	r3, #0
 801e60e:	e7c2      	b.n	801e596 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d6>
 801e610:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e612:	e6db      	b.n	801e3cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10c>
 801e614:	f04f 0aff 	mov.w	sl, #255	; 0xff
 801e618:	e6f6      	b.n	801e408 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801e61a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 801e61e:	700b      	strb	r3, [r1, #0]
 801e620:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801e624:	704b      	strb	r3, [r1, #1]
 801e626:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801e62a:	708b      	strb	r3, [r1, #2]
 801e62c:	e784      	b.n	801e538 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x278>
 801e62e:	b14f      	cbz	r7, 801e644 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801e630:	443c      	add	r4, r7
 801e632:	b2a4      	uxth	r4, r4
 801e634:	eb09 09d4 	add.w	r9, r9, r4, lsr #3
 801e638:	f004 0407 	and.w	r4, r4, #7
 801e63c:	f899 2000 	ldrb.w	r2, [r9]
 801e640:	4122      	asrs	r2, r4
 801e642:	b2d2      	uxtb	r2, r2
 801e644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e646:	9907      	ldr	r1, [sp, #28]
 801e648:	440b      	add	r3, r1
 801e64a:	9309      	str	r3, [sp, #36]	; 0x24
 801e64c:	3d01      	subs	r5, #1
 801e64e:	e724      	b.n	801e49a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801e650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e652:	2b00      	cmp	r3, #0
 801e654:	d1d7      	bne.n	801e606 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x346>
 801e656:	4b04      	ldr	r3, [pc, #16]	; (801e668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e658:	6818      	ldr	r0, [r3, #0]
 801e65a:	6803      	ldr	r3, [r0, #0]
 801e65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e65e:	4798      	blx	r3
 801e660:	e7d1      	b.n	801e606 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x346>
 801e662:	bf00      	nop
 801e664:	20009d66 	.word	0x20009d66
 801e668:	20009d70 	.word	0x20009d70
 801e66c:	20009d68 	.word	0x20009d68
 801e670:	2b00      	cmp	r3, #0
 801e672:	f43f aea2 	beq.w	801e3ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 801e676:	2180      	movs	r1, #128	; 0x80
 801e678:	e797      	b.n	801e5aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 801e67a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e67c:	b11b      	cbz	r3, 801e686 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801e67e:	07fb      	lsls	r3, r7, #31
 801e680:	d501      	bpl.n	801e686 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801e682:	3701      	adds	r7, #1
 801e684:	b2bf      	uxth	r7, r7
 801e686:	f04f 0a11 	mov.w	sl, #17
 801e68a:	e6bd      	b.n	801e408 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801e68c:	f04f 0a55 	mov.w	sl, #85	; 0x55
 801e690:	e6ba      	b.n	801e408 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801e692:	bf00      	nop

0801e694 <CRC_Lock>:
 801e694:	b530      	push	{r4, r5, lr}
 801e696:	4a1f      	ldr	r2, [pc, #124]	; (801e714 <CRC_Lock+0x80>)
 801e698:	6813      	ldr	r3, [r2, #0]
 801e69a:	f023 0301 	bic.w	r3, r3, #1
 801e69e:	6013      	str	r3, [r2, #0]
 801e6a0:	4b1d      	ldr	r3, [pc, #116]	; (801e718 <CRC_Lock+0x84>)
 801e6a2:	681a      	ldr	r2, [r3, #0]
 801e6a4:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801e6a8:	4022      	ands	r2, r4
 801e6aa:	f24c 2540 	movw	r5, #49728	; 0xc240
 801e6ae:	42aa      	cmp	r2, r5
 801e6b0:	d005      	beq.n	801e6be <CRC_Lock+0x2a>
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	f24c 2270 	movw	r2, #49776	; 0xc270
 801e6b8:	4023      	ands	r3, r4
 801e6ba:	4293      	cmp	r3, r2
 801e6bc:	d11e      	bne.n	801e6fc <CRC_Lock+0x68>
 801e6be:	4b17      	ldr	r3, [pc, #92]	; (801e71c <CRC_Lock+0x88>)
 801e6c0:	681b      	ldr	r3, [r3, #0]
 801e6c2:	b9db      	cbnz	r3, 801e6fc <CRC_Lock+0x68>
 801e6c4:	4a16      	ldr	r2, [pc, #88]	; (801e720 <CRC_Lock+0x8c>)
 801e6c6:	6813      	ldr	r3, [r2, #0]
 801e6c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e6cc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e6d0:	d006      	beq.n	801e6e0 <CRC_Lock+0x4c>
 801e6d2:	6813      	ldr	r3, [r2, #0]
 801e6d4:	f240 4283 	movw	r2, #1155	; 0x483
 801e6d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e6dc:	4293      	cmp	r3, r2
 801e6de:	d10d      	bne.n	801e6fc <CRC_Lock+0x68>
 801e6e0:	4b10      	ldr	r3, [pc, #64]	; (801e724 <CRC_Lock+0x90>)
 801e6e2:	2201      	movs	r2, #1
 801e6e4:	601a      	str	r2, [r3, #0]
 801e6e6:	681a      	ldr	r2, [r3, #0]
 801e6e8:	2a00      	cmp	r2, #0
 801e6ea:	d1fc      	bne.n	801e6e6 <CRC_Lock+0x52>
 801e6ec:	4b0e      	ldr	r3, [pc, #56]	; (801e728 <CRC_Lock+0x94>)
 801e6ee:	6018      	str	r0, [r3, #0]
 801e6f0:	6818      	ldr	r0, [r3, #0]
 801e6f2:	4288      	cmp	r0, r1
 801e6f4:	bf14      	ite	ne
 801e6f6:	2000      	movne	r0, #0
 801e6f8:	2001      	moveq	r0, #1
 801e6fa:	bd30      	pop	{r4, r5, pc}
 801e6fc:	4b0b      	ldr	r3, [pc, #44]	; (801e72c <CRC_Lock+0x98>)
 801e6fe:	2201      	movs	r2, #1
 801e700:	601a      	str	r2, [r3, #0]
 801e702:	681a      	ldr	r2, [r3, #0]
 801e704:	2a00      	cmp	r2, #0
 801e706:	d1fc      	bne.n	801e702 <CRC_Lock+0x6e>
 801e708:	4b09      	ldr	r3, [pc, #36]	; (801e730 <CRC_Lock+0x9c>)
 801e70a:	6018      	str	r0, [r3, #0]
 801e70c:	6818      	ldr	r0, [r3, #0]
 801e70e:	4281      	cmp	r1, r0
 801e710:	e7f0      	b.n	801e6f4 <CRC_Lock+0x60>
 801e712:	bf00      	nop
 801e714:	e0002000 	.word	0xe0002000
 801e718:	e000ed00 	.word	0xe000ed00
 801e71c:	e0042000 	.word	0xe0042000
 801e720:	5c001000 	.word	0x5c001000
 801e724:	58024c08 	.word	0x58024c08
 801e728:	58024c00 	.word	0x58024c00
 801e72c:	40023008 	.word	0x40023008
 801e730:	40023000 	.word	0x40023000

0801e734 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801e734:	6101      	str	r1, [r0, #16]
 801e736:	4770      	bx	lr

0801e738 <_ZN8touchgfx8Gestures4tickEv>:
 801e738:	7b83      	ldrb	r3, [r0, #14]
 801e73a:	b14b      	cbz	r3, 801e750 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801e73c:	8903      	ldrh	r3, [r0, #8]
 801e73e:	3301      	adds	r3, #1
 801e740:	b29b      	uxth	r3, r3
 801e742:	2b07      	cmp	r3, #7
 801e744:	8103      	strh	r3, [r0, #8]
 801e746:	bf81      	itttt	hi
 801e748:	2300      	movhi	r3, #0
 801e74a:	8143      	strhhi	r3, [r0, #10]
 801e74c:	8183      	strhhi	r3, [r0, #12]
 801e74e:	7383      	strbhi	r3, [r0, #14]
 801e750:	4770      	bx	lr
	...

0801e754 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801e754:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801e758:	4604      	mov	r4, r0
 801e75a:	8880      	ldrh	r0, [r0, #4]
 801e75c:	f8ad 0006 	strh.w	r0, [sp, #6]
 801e760:	4698      	mov	r8, r3
 801e762:	eba8 0000 	sub.w	r0, r8, r0
 801e766:	4b1c      	ldr	r3, [pc, #112]	; (801e7d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801e768:	9300      	str	r3, [sp, #0]
 801e76a:	b280      	uxth	r0, r0
 801e76c:	2300      	movs	r3, #0
 801e76e:	f88d 3004 	strb.w	r3, [sp, #4]
 801e772:	b203      	sxth	r3, r0
 801e774:	2b00      	cmp	r3, #0
 801e776:	bfb8      	it	lt
 801e778:	4240      	neglt	r0, r0
 801e77a:	4617      	mov	r7, r2
 801e77c:	8aa2      	ldrh	r2, [r4, #20]
 801e77e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801e782:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e786:	bfb8      	it	lt
 801e788:	b203      	sxthlt	r3, r0
 801e78a:	460e      	mov	r6, r1
 801e78c:	4293      	cmp	r3, r2
 801e78e:	88e1      	ldrh	r1, [r4, #6]
 801e790:	f8ad 1008 	strh.w	r1, [sp, #8]
 801e794:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e798:	dc0c      	bgt.n	801e7b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801e79a:	1a69      	subs	r1, r5, r1
 801e79c:	b289      	uxth	r1, r1
 801e79e:	b20b      	sxth	r3, r1
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	bfbc      	itt	lt
 801e7a4:	4249      	neglt	r1, r1
 801e7a6:	b20b      	sxthlt	r3, r1
 801e7a8:	429a      	cmp	r2, r3
 801e7aa:	db03      	blt.n	801e7b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801e7ac:	2000      	movs	r0, #0
 801e7ae:	b004      	add	sp, #16
 801e7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7b4:	6920      	ldr	r0, [r4, #16]
 801e7b6:	6803      	ldr	r3, [r0, #0]
 801e7b8:	4669      	mov	r1, sp
 801e7ba:	685b      	ldr	r3, [r3, #4]
 801e7bc:	4798      	blx	r3
 801e7be:	eba8 0606 	sub.w	r6, r8, r6
 801e7c2:	2300      	movs	r3, #0
 801e7c4:	1bef      	subs	r7, r5, r7
 801e7c6:	2001      	movs	r0, #1
 801e7c8:	8123      	strh	r3, [r4, #8]
 801e7ca:	8166      	strh	r6, [r4, #10]
 801e7cc:	81a7      	strh	r7, [r4, #12]
 801e7ce:	f8a4 8004 	strh.w	r8, [r4, #4]
 801e7d2:	80e5      	strh	r5, [r4, #6]
 801e7d4:	73a0      	strb	r0, [r4, #14]
 801e7d6:	e7ea      	b.n	801e7ae <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 801e7d8:	080203e8 	.word	0x080203e8

0801e7dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801e7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7de:	461e      	mov	r6, r3
 801e7e0:	1e4b      	subs	r3, r1, #1
 801e7e2:	2b01      	cmp	r3, #1
 801e7e4:	b085      	sub	sp, #20
 801e7e6:	4604      	mov	r4, r0
 801e7e8:	460d      	mov	r5, r1
 801e7ea:	4617      	mov	r7, r2
 801e7ec:	d845      	bhi.n	801e87a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 801e7ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e7f2:	1cd3      	adds	r3, r2, #3
 801e7f4:	b29b      	uxth	r3, r3
 801e7f6:	2b06      	cmp	r3, #6
 801e7f8:	d913      	bls.n	801e822 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 801e7fa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801e7fe:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e802:	4820      	ldr	r0, [pc, #128]	; (801e884 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801e804:	9001      	str	r0, [sp, #4]
 801e806:	2000      	movs	r0, #0
 801e808:	f88d 0008 	strb.w	r0, [sp, #8]
 801e80c:	6920      	ldr	r0, [r4, #16]
 801e80e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e812:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e816:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e81a:	6803      	ldr	r3, [r0, #0]
 801e81c:	a901      	add	r1, sp, #4
 801e81e:	689b      	ldr	r3, [r3, #8]
 801e820:	4798      	blx	r3
 801e822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e826:	1cd3      	adds	r3, r2, #3
 801e828:	b29b      	uxth	r3, r3
 801e82a:	2b06      	cmp	r3, #6
 801e82c:	d913      	bls.n	801e856 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801e82e:	4815      	ldr	r0, [pc, #84]	; (801e884 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801e830:	9001      	str	r0, [sp, #4]
 801e832:	2001      	movs	r0, #1
 801e834:	f88d 0008 	strb.w	r0, [sp, #8]
 801e838:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e83c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e840:	6920      	ldr	r0, [r4, #16]
 801e842:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e846:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e84a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e84e:	6803      	ldr	r3, [r0, #0]
 801e850:	a901      	add	r1, sp, #4
 801e852:	689b      	ldr	r3, [r3, #8]
 801e854:	4798      	blx	r3
 801e856:	4b0c      	ldr	r3, [pc, #48]	; (801e888 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 801e858:	9301      	str	r3, [sp, #4]
 801e85a:	6920      	ldr	r0, [r4, #16]
 801e85c:	f88d 5008 	strb.w	r5, [sp, #8]
 801e860:	2300      	movs	r3, #0
 801e862:	f8ad 700a 	strh.w	r7, [sp, #10]
 801e866:	f8ad 600c 	strh.w	r6, [sp, #12]
 801e86a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e86e:	6803      	ldr	r3, [r0, #0]
 801e870:	a901      	add	r1, sp, #4
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	4798      	blx	r3
 801e876:	b005      	add	sp, #20
 801e878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e87a:	2900      	cmp	r1, #0
 801e87c:	d1eb      	bne.n	801e856 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801e87e:	80a2      	strh	r2, [r4, #4]
 801e880:	80c6      	strh	r6, [r0, #6]
 801e882:	e7e8      	b.n	801e856 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801e884:	080218bc 	.word	0x080218bc
 801e888:	080203fc 	.word	0x080203fc

0801e88c <__cxa_pure_virtual>:
 801e88c:	b508      	push	{r3, lr}
 801e88e:	f000 f811 	bl	801e8b4 <_ZSt9terminatev>

0801e892 <_ZdlPvj>:
 801e892:	f000 b800 	b.w	801e896 <_ZdlPv>

0801e896 <_ZdlPv>:
 801e896:	f000 b881 	b.w	801e99c <free>

0801e89a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e89a:	b508      	push	{r3, lr}
 801e89c:	4780      	blx	r0
 801e89e:	f000 f80e 	bl	801e8be <abort>
	...

0801e8a4 <_ZSt13get_terminatev>:
 801e8a4:	4b02      	ldr	r3, [pc, #8]	; (801e8b0 <_ZSt13get_terminatev+0xc>)
 801e8a6:	6818      	ldr	r0, [r3, #0]
 801e8a8:	f3bf 8f5b 	dmb	ish
 801e8ac:	4770      	bx	lr
 801e8ae:	bf00      	nop
 801e8b0:	2000008c 	.word	0x2000008c

0801e8b4 <_ZSt9terminatev>:
 801e8b4:	b508      	push	{r3, lr}
 801e8b6:	f7ff fff5 	bl	801e8a4 <_ZSt13get_terminatev>
 801e8ba:	f7ff ffee 	bl	801e89a <_ZN10__cxxabiv111__terminateEPFvvE>

0801e8be <abort>:
 801e8be:	b508      	push	{r3, lr}
 801e8c0:	2006      	movs	r0, #6
 801e8c2:	f000 fc2f 	bl	801f124 <raise>
 801e8c6:	2001      	movs	r0, #1
 801e8c8:	f7e2 ff62 	bl	8001790 <_exit>

0801e8cc <__assert_func>:
 801e8cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e8ce:	461c      	mov	r4, r3
 801e8d0:	4b09      	ldr	r3, [pc, #36]	; (801e8f8 <__assert_func+0x2c>)
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	4605      	mov	r5, r0
 801e8d6:	68d8      	ldr	r0, [r3, #12]
 801e8d8:	b152      	cbz	r2, 801e8f0 <__assert_func+0x24>
 801e8da:	4b08      	ldr	r3, [pc, #32]	; (801e8fc <__assert_func+0x30>)
 801e8dc:	9100      	str	r1, [sp, #0]
 801e8de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801e8e2:	4907      	ldr	r1, [pc, #28]	; (801e900 <__assert_func+0x34>)
 801e8e4:	462b      	mov	r3, r5
 801e8e6:	4622      	mov	r2, r4
 801e8e8:	f000 f81a 	bl	801e920 <fiprintf>
 801e8ec:	f7ff ffe7 	bl	801e8be <abort>
 801e8f0:	4b04      	ldr	r3, [pc, #16]	; (801e904 <__assert_func+0x38>)
 801e8f2:	461a      	mov	r2, r3
 801e8f4:	e7f2      	b.n	801e8dc <__assert_func+0x10>
 801e8f6:	bf00      	nop
 801e8f8:	20000090 	.word	0x20000090
 801e8fc:	08022bc7 	.word	0x08022bc7
 801e900:	08022bd4 	.word	0x08022bd4
 801e904:	08022c02 	.word	0x08022c02

0801e908 <atexit>:
 801e908:	2300      	movs	r3, #0
 801e90a:	4601      	mov	r1, r0
 801e90c:	461a      	mov	r2, r3
 801e90e:	4618      	mov	r0, r3
 801e910:	f000 bce4 	b.w	801f2dc <__register_exitproc>

0801e914 <__errno>:
 801e914:	4b01      	ldr	r3, [pc, #4]	; (801e91c <__errno+0x8>)
 801e916:	6818      	ldr	r0, [r3, #0]
 801e918:	4770      	bx	lr
 801e91a:	bf00      	nop
 801e91c:	20000090 	.word	0x20000090

0801e920 <fiprintf>:
 801e920:	b40e      	push	{r1, r2, r3}
 801e922:	b503      	push	{r0, r1, lr}
 801e924:	4601      	mov	r1, r0
 801e926:	ab03      	add	r3, sp, #12
 801e928:	4805      	ldr	r0, [pc, #20]	; (801e940 <fiprintf+0x20>)
 801e92a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e92e:	6800      	ldr	r0, [r0, #0]
 801e930:	9301      	str	r3, [sp, #4]
 801e932:	f000 f921 	bl	801eb78 <_vfiprintf_r>
 801e936:	b002      	add	sp, #8
 801e938:	f85d eb04 	ldr.w	lr, [sp], #4
 801e93c:	b003      	add	sp, #12
 801e93e:	4770      	bx	lr
 801e940:	20000090 	.word	0x20000090

0801e944 <__libc_init_array>:
 801e944:	b570      	push	{r4, r5, r6, lr}
 801e946:	4e0d      	ldr	r6, [pc, #52]	; (801e97c <__libc_init_array+0x38>)
 801e948:	4c0d      	ldr	r4, [pc, #52]	; (801e980 <__libc_init_array+0x3c>)
 801e94a:	1ba4      	subs	r4, r4, r6
 801e94c:	10a4      	asrs	r4, r4, #2
 801e94e:	2500      	movs	r5, #0
 801e950:	42a5      	cmp	r5, r4
 801e952:	d109      	bne.n	801e968 <__libc_init_array+0x24>
 801e954:	4e0b      	ldr	r6, [pc, #44]	; (801e984 <__libc_init_array+0x40>)
 801e956:	4c0c      	ldr	r4, [pc, #48]	; (801e988 <__libc_init_array+0x44>)
 801e958:	f000 ffb0 	bl	801f8bc <_init>
 801e95c:	1ba4      	subs	r4, r4, r6
 801e95e:	10a4      	asrs	r4, r4, #2
 801e960:	2500      	movs	r5, #0
 801e962:	42a5      	cmp	r5, r4
 801e964:	d105      	bne.n	801e972 <__libc_init_array+0x2e>
 801e966:	bd70      	pop	{r4, r5, r6, pc}
 801e968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e96c:	4798      	blx	r3
 801e96e:	3501      	adds	r5, #1
 801e970:	e7ee      	b.n	801e950 <__libc_init_array+0xc>
 801e972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e976:	4798      	blx	r3
 801e978:	3501      	adds	r5, #1
 801e97a:	e7f2      	b.n	801e962 <__libc_init_array+0x1e>
 801e97c:	08036bac 	.word	0x08036bac
 801e980:	08036bac 	.word	0x08036bac
 801e984:	08036bac 	.word	0x08036bac
 801e988:	08036bb8 	.word	0x08036bb8

0801e98c <malloc>:
 801e98c:	4b02      	ldr	r3, [pc, #8]	; (801e998 <malloc+0xc>)
 801e98e:	4601      	mov	r1, r0
 801e990:	6818      	ldr	r0, [r3, #0]
 801e992:	f000 b86d 	b.w	801ea70 <_malloc_r>
 801e996:	bf00      	nop
 801e998:	20000090 	.word	0x20000090

0801e99c <free>:
 801e99c:	4b02      	ldr	r3, [pc, #8]	; (801e9a8 <free+0xc>)
 801e99e:	4601      	mov	r1, r0
 801e9a0:	6818      	ldr	r0, [r3, #0]
 801e9a2:	f000 b817 	b.w	801e9d4 <_free_r>
 801e9a6:	bf00      	nop
 801e9a8:	20000090 	.word	0x20000090

0801e9ac <memcpy>:
 801e9ac:	b510      	push	{r4, lr}
 801e9ae:	1e43      	subs	r3, r0, #1
 801e9b0:	440a      	add	r2, r1
 801e9b2:	4291      	cmp	r1, r2
 801e9b4:	d100      	bne.n	801e9b8 <memcpy+0xc>
 801e9b6:	bd10      	pop	{r4, pc}
 801e9b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e9bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e9c0:	e7f7      	b.n	801e9b2 <memcpy+0x6>

0801e9c2 <memset>:
 801e9c2:	4402      	add	r2, r0
 801e9c4:	4603      	mov	r3, r0
 801e9c6:	4293      	cmp	r3, r2
 801e9c8:	d100      	bne.n	801e9cc <memset+0xa>
 801e9ca:	4770      	bx	lr
 801e9cc:	f803 1b01 	strb.w	r1, [r3], #1
 801e9d0:	e7f9      	b.n	801e9c6 <memset+0x4>
	...

0801e9d4 <_free_r>:
 801e9d4:	b538      	push	{r3, r4, r5, lr}
 801e9d6:	4605      	mov	r5, r0
 801e9d8:	2900      	cmp	r1, #0
 801e9da:	d045      	beq.n	801ea68 <_free_r+0x94>
 801e9dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e9e0:	1f0c      	subs	r4, r1, #4
 801e9e2:	2b00      	cmp	r3, #0
 801e9e4:	bfb8      	it	lt
 801e9e6:	18e4      	addlt	r4, r4, r3
 801e9e8:	f000 feba 	bl	801f760 <__malloc_lock>
 801e9ec:	4a1f      	ldr	r2, [pc, #124]	; (801ea6c <_free_r+0x98>)
 801e9ee:	6813      	ldr	r3, [r2, #0]
 801e9f0:	4610      	mov	r0, r2
 801e9f2:	b933      	cbnz	r3, 801ea02 <_free_r+0x2e>
 801e9f4:	6063      	str	r3, [r4, #4]
 801e9f6:	6014      	str	r4, [r2, #0]
 801e9f8:	4628      	mov	r0, r5
 801e9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e9fe:	f000 beb0 	b.w	801f762 <__malloc_unlock>
 801ea02:	42a3      	cmp	r3, r4
 801ea04:	d90c      	bls.n	801ea20 <_free_r+0x4c>
 801ea06:	6821      	ldr	r1, [r4, #0]
 801ea08:	1862      	adds	r2, r4, r1
 801ea0a:	4293      	cmp	r3, r2
 801ea0c:	bf04      	itt	eq
 801ea0e:	681a      	ldreq	r2, [r3, #0]
 801ea10:	685b      	ldreq	r3, [r3, #4]
 801ea12:	6063      	str	r3, [r4, #4]
 801ea14:	bf04      	itt	eq
 801ea16:	1852      	addeq	r2, r2, r1
 801ea18:	6022      	streq	r2, [r4, #0]
 801ea1a:	6004      	str	r4, [r0, #0]
 801ea1c:	e7ec      	b.n	801e9f8 <_free_r+0x24>
 801ea1e:	4613      	mov	r3, r2
 801ea20:	685a      	ldr	r2, [r3, #4]
 801ea22:	b10a      	cbz	r2, 801ea28 <_free_r+0x54>
 801ea24:	42a2      	cmp	r2, r4
 801ea26:	d9fa      	bls.n	801ea1e <_free_r+0x4a>
 801ea28:	6819      	ldr	r1, [r3, #0]
 801ea2a:	1858      	adds	r0, r3, r1
 801ea2c:	42a0      	cmp	r0, r4
 801ea2e:	d10b      	bne.n	801ea48 <_free_r+0x74>
 801ea30:	6820      	ldr	r0, [r4, #0]
 801ea32:	4401      	add	r1, r0
 801ea34:	1858      	adds	r0, r3, r1
 801ea36:	4282      	cmp	r2, r0
 801ea38:	6019      	str	r1, [r3, #0]
 801ea3a:	d1dd      	bne.n	801e9f8 <_free_r+0x24>
 801ea3c:	6810      	ldr	r0, [r2, #0]
 801ea3e:	6852      	ldr	r2, [r2, #4]
 801ea40:	605a      	str	r2, [r3, #4]
 801ea42:	4401      	add	r1, r0
 801ea44:	6019      	str	r1, [r3, #0]
 801ea46:	e7d7      	b.n	801e9f8 <_free_r+0x24>
 801ea48:	d902      	bls.n	801ea50 <_free_r+0x7c>
 801ea4a:	230c      	movs	r3, #12
 801ea4c:	602b      	str	r3, [r5, #0]
 801ea4e:	e7d3      	b.n	801e9f8 <_free_r+0x24>
 801ea50:	6820      	ldr	r0, [r4, #0]
 801ea52:	1821      	adds	r1, r4, r0
 801ea54:	428a      	cmp	r2, r1
 801ea56:	bf04      	itt	eq
 801ea58:	6811      	ldreq	r1, [r2, #0]
 801ea5a:	6852      	ldreq	r2, [r2, #4]
 801ea5c:	6062      	str	r2, [r4, #4]
 801ea5e:	bf04      	itt	eq
 801ea60:	1809      	addeq	r1, r1, r0
 801ea62:	6021      	streq	r1, [r4, #0]
 801ea64:	605c      	str	r4, [r3, #4]
 801ea66:	e7c7      	b.n	801e9f8 <_free_r+0x24>
 801ea68:	bd38      	pop	{r3, r4, r5, pc}
 801ea6a:	bf00      	nop
 801ea6c:	20009e10 	.word	0x20009e10

0801ea70 <_malloc_r>:
 801ea70:	b570      	push	{r4, r5, r6, lr}
 801ea72:	1ccd      	adds	r5, r1, #3
 801ea74:	f025 0503 	bic.w	r5, r5, #3
 801ea78:	3508      	adds	r5, #8
 801ea7a:	2d0c      	cmp	r5, #12
 801ea7c:	bf38      	it	cc
 801ea7e:	250c      	movcc	r5, #12
 801ea80:	2d00      	cmp	r5, #0
 801ea82:	4606      	mov	r6, r0
 801ea84:	db01      	blt.n	801ea8a <_malloc_r+0x1a>
 801ea86:	42a9      	cmp	r1, r5
 801ea88:	d903      	bls.n	801ea92 <_malloc_r+0x22>
 801ea8a:	230c      	movs	r3, #12
 801ea8c:	6033      	str	r3, [r6, #0]
 801ea8e:	2000      	movs	r0, #0
 801ea90:	bd70      	pop	{r4, r5, r6, pc}
 801ea92:	f000 fe65 	bl	801f760 <__malloc_lock>
 801ea96:	4a21      	ldr	r2, [pc, #132]	; (801eb1c <_malloc_r+0xac>)
 801ea98:	6814      	ldr	r4, [r2, #0]
 801ea9a:	4621      	mov	r1, r4
 801ea9c:	b991      	cbnz	r1, 801eac4 <_malloc_r+0x54>
 801ea9e:	4c20      	ldr	r4, [pc, #128]	; (801eb20 <_malloc_r+0xb0>)
 801eaa0:	6823      	ldr	r3, [r4, #0]
 801eaa2:	b91b      	cbnz	r3, 801eaac <_malloc_r+0x3c>
 801eaa4:	4630      	mov	r0, r6
 801eaa6:	f000 fb05 	bl	801f0b4 <_sbrk_r>
 801eaaa:	6020      	str	r0, [r4, #0]
 801eaac:	4629      	mov	r1, r5
 801eaae:	4630      	mov	r0, r6
 801eab0:	f000 fb00 	bl	801f0b4 <_sbrk_r>
 801eab4:	1c43      	adds	r3, r0, #1
 801eab6:	d124      	bne.n	801eb02 <_malloc_r+0x92>
 801eab8:	230c      	movs	r3, #12
 801eaba:	6033      	str	r3, [r6, #0]
 801eabc:	4630      	mov	r0, r6
 801eabe:	f000 fe50 	bl	801f762 <__malloc_unlock>
 801eac2:	e7e4      	b.n	801ea8e <_malloc_r+0x1e>
 801eac4:	680b      	ldr	r3, [r1, #0]
 801eac6:	1b5b      	subs	r3, r3, r5
 801eac8:	d418      	bmi.n	801eafc <_malloc_r+0x8c>
 801eaca:	2b0b      	cmp	r3, #11
 801eacc:	d90f      	bls.n	801eaee <_malloc_r+0x7e>
 801eace:	600b      	str	r3, [r1, #0]
 801ead0:	50cd      	str	r5, [r1, r3]
 801ead2:	18cc      	adds	r4, r1, r3
 801ead4:	4630      	mov	r0, r6
 801ead6:	f000 fe44 	bl	801f762 <__malloc_unlock>
 801eada:	f104 000b 	add.w	r0, r4, #11
 801eade:	1d23      	adds	r3, r4, #4
 801eae0:	f020 0007 	bic.w	r0, r0, #7
 801eae4:	1ac3      	subs	r3, r0, r3
 801eae6:	d0d3      	beq.n	801ea90 <_malloc_r+0x20>
 801eae8:	425a      	negs	r2, r3
 801eaea:	50e2      	str	r2, [r4, r3]
 801eaec:	e7d0      	b.n	801ea90 <_malloc_r+0x20>
 801eaee:	428c      	cmp	r4, r1
 801eaf0:	684b      	ldr	r3, [r1, #4]
 801eaf2:	bf16      	itet	ne
 801eaf4:	6063      	strne	r3, [r4, #4]
 801eaf6:	6013      	streq	r3, [r2, #0]
 801eaf8:	460c      	movne	r4, r1
 801eafa:	e7eb      	b.n	801ead4 <_malloc_r+0x64>
 801eafc:	460c      	mov	r4, r1
 801eafe:	6849      	ldr	r1, [r1, #4]
 801eb00:	e7cc      	b.n	801ea9c <_malloc_r+0x2c>
 801eb02:	1cc4      	adds	r4, r0, #3
 801eb04:	f024 0403 	bic.w	r4, r4, #3
 801eb08:	42a0      	cmp	r0, r4
 801eb0a:	d005      	beq.n	801eb18 <_malloc_r+0xa8>
 801eb0c:	1a21      	subs	r1, r4, r0
 801eb0e:	4630      	mov	r0, r6
 801eb10:	f000 fad0 	bl	801f0b4 <_sbrk_r>
 801eb14:	3001      	adds	r0, #1
 801eb16:	d0cf      	beq.n	801eab8 <_malloc_r+0x48>
 801eb18:	6025      	str	r5, [r4, #0]
 801eb1a:	e7db      	b.n	801ead4 <_malloc_r+0x64>
 801eb1c:	20009e10 	.word	0x20009e10
 801eb20:	20009e14 	.word	0x20009e14

0801eb24 <__sfputc_r>:
 801eb24:	6893      	ldr	r3, [r2, #8]
 801eb26:	3b01      	subs	r3, #1
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	b410      	push	{r4}
 801eb2c:	6093      	str	r3, [r2, #8]
 801eb2e:	da08      	bge.n	801eb42 <__sfputc_r+0x1e>
 801eb30:	6994      	ldr	r4, [r2, #24]
 801eb32:	42a3      	cmp	r3, r4
 801eb34:	db01      	blt.n	801eb3a <__sfputc_r+0x16>
 801eb36:	290a      	cmp	r1, #10
 801eb38:	d103      	bne.n	801eb42 <__sfputc_r+0x1e>
 801eb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eb3e:	f000 bb0d 	b.w	801f15c <__swbuf_r>
 801eb42:	6813      	ldr	r3, [r2, #0]
 801eb44:	1c58      	adds	r0, r3, #1
 801eb46:	6010      	str	r0, [r2, #0]
 801eb48:	7019      	strb	r1, [r3, #0]
 801eb4a:	4608      	mov	r0, r1
 801eb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eb50:	4770      	bx	lr

0801eb52 <__sfputs_r>:
 801eb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb54:	4606      	mov	r6, r0
 801eb56:	460f      	mov	r7, r1
 801eb58:	4614      	mov	r4, r2
 801eb5a:	18d5      	adds	r5, r2, r3
 801eb5c:	42ac      	cmp	r4, r5
 801eb5e:	d101      	bne.n	801eb64 <__sfputs_r+0x12>
 801eb60:	2000      	movs	r0, #0
 801eb62:	e007      	b.n	801eb74 <__sfputs_r+0x22>
 801eb64:	463a      	mov	r2, r7
 801eb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb6a:	4630      	mov	r0, r6
 801eb6c:	f7ff ffda 	bl	801eb24 <__sfputc_r>
 801eb70:	1c43      	adds	r3, r0, #1
 801eb72:	d1f3      	bne.n	801eb5c <__sfputs_r+0xa>
 801eb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eb78 <_vfiprintf_r>:
 801eb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb7c:	460c      	mov	r4, r1
 801eb7e:	b09d      	sub	sp, #116	; 0x74
 801eb80:	4617      	mov	r7, r2
 801eb82:	461d      	mov	r5, r3
 801eb84:	4606      	mov	r6, r0
 801eb86:	b118      	cbz	r0, 801eb90 <_vfiprintf_r+0x18>
 801eb88:	6983      	ldr	r3, [r0, #24]
 801eb8a:	b90b      	cbnz	r3, 801eb90 <_vfiprintf_r+0x18>
 801eb8c:	f000 fcfa 	bl	801f584 <__sinit>
 801eb90:	4b7c      	ldr	r3, [pc, #496]	; (801ed84 <_vfiprintf_r+0x20c>)
 801eb92:	429c      	cmp	r4, r3
 801eb94:	d158      	bne.n	801ec48 <_vfiprintf_r+0xd0>
 801eb96:	6874      	ldr	r4, [r6, #4]
 801eb98:	89a3      	ldrh	r3, [r4, #12]
 801eb9a:	0718      	lsls	r0, r3, #28
 801eb9c:	d55e      	bpl.n	801ec5c <_vfiprintf_r+0xe4>
 801eb9e:	6923      	ldr	r3, [r4, #16]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	d05b      	beq.n	801ec5c <_vfiprintf_r+0xe4>
 801eba4:	2300      	movs	r3, #0
 801eba6:	9309      	str	r3, [sp, #36]	; 0x24
 801eba8:	2320      	movs	r3, #32
 801ebaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ebae:	2330      	movs	r3, #48	; 0x30
 801ebb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ebb4:	9503      	str	r5, [sp, #12]
 801ebb6:	f04f 0b01 	mov.w	fp, #1
 801ebba:	46b8      	mov	r8, r7
 801ebbc:	4645      	mov	r5, r8
 801ebbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ebc2:	b10b      	cbz	r3, 801ebc8 <_vfiprintf_r+0x50>
 801ebc4:	2b25      	cmp	r3, #37	; 0x25
 801ebc6:	d154      	bne.n	801ec72 <_vfiprintf_r+0xfa>
 801ebc8:	ebb8 0a07 	subs.w	sl, r8, r7
 801ebcc:	d00b      	beq.n	801ebe6 <_vfiprintf_r+0x6e>
 801ebce:	4653      	mov	r3, sl
 801ebd0:	463a      	mov	r2, r7
 801ebd2:	4621      	mov	r1, r4
 801ebd4:	4630      	mov	r0, r6
 801ebd6:	f7ff ffbc 	bl	801eb52 <__sfputs_r>
 801ebda:	3001      	adds	r0, #1
 801ebdc:	f000 80c2 	beq.w	801ed64 <_vfiprintf_r+0x1ec>
 801ebe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ebe2:	4453      	add	r3, sl
 801ebe4:	9309      	str	r3, [sp, #36]	; 0x24
 801ebe6:	f898 3000 	ldrb.w	r3, [r8]
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	f000 80ba 	beq.w	801ed64 <_vfiprintf_r+0x1ec>
 801ebf0:	2300      	movs	r3, #0
 801ebf2:	f04f 32ff 	mov.w	r2, #4294967295
 801ebf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ebfa:	9304      	str	r3, [sp, #16]
 801ebfc:	9307      	str	r3, [sp, #28]
 801ebfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ec02:	931a      	str	r3, [sp, #104]	; 0x68
 801ec04:	46a8      	mov	r8, r5
 801ec06:	2205      	movs	r2, #5
 801ec08:	f818 1b01 	ldrb.w	r1, [r8], #1
 801ec0c:	485e      	ldr	r0, [pc, #376]	; (801ed88 <_vfiprintf_r+0x210>)
 801ec0e:	f7e1 faf7 	bl	8000200 <memchr>
 801ec12:	9b04      	ldr	r3, [sp, #16]
 801ec14:	bb78      	cbnz	r0, 801ec76 <_vfiprintf_r+0xfe>
 801ec16:	06d9      	lsls	r1, r3, #27
 801ec18:	bf44      	itt	mi
 801ec1a:	2220      	movmi	r2, #32
 801ec1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ec20:	071a      	lsls	r2, r3, #28
 801ec22:	bf44      	itt	mi
 801ec24:	222b      	movmi	r2, #43	; 0x2b
 801ec26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ec2a:	782a      	ldrb	r2, [r5, #0]
 801ec2c:	2a2a      	cmp	r2, #42	; 0x2a
 801ec2e:	d02a      	beq.n	801ec86 <_vfiprintf_r+0x10e>
 801ec30:	9a07      	ldr	r2, [sp, #28]
 801ec32:	46a8      	mov	r8, r5
 801ec34:	2000      	movs	r0, #0
 801ec36:	250a      	movs	r5, #10
 801ec38:	4641      	mov	r1, r8
 801ec3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ec3e:	3b30      	subs	r3, #48	; 0x30
 801ec40:	2b09      	cmp	r3, #9
 801ec42:	d969      	bls.n	801ed18 <_vfiprintf_r+0x1a0>
 801ec44:	b360      	cbz	r0, 801eca0 <_vfiprintf_r+0x128>
 801ec46:	e024      	b.n	801ec92 <_vfiprintf_r+0x11a>
 801ec48:	4b50      	ldr	r3, [pc, #320]	; (801ed8c <_vfiprintf_r+0x214>)
 801ec4a:	429c      	cmp	r4, r3
 801ec4c:	d101      	bne.n	801ec52 <_vfiprintf_r+0xda>
 801ec4e:	68b4      	ldr	r4, [r6, #8]
 801ec50:	e7a2      	b.n	801eb98 <_vfiprintf_r+0x20>
 801ec52:	4b4f      	ldr	r3, [pc, #316]	; (801ed90 <_vfiprintf_r+0x218>)
 801ec54:	429c      	cmp	r4, r3
 801ec56:	bf08      	it	eq
 801ec58:	68f4      	ldreq	r4, [r6, #12]
 801ec5a:	e79d      	b.n	801eb98 <_vfiprintf_r+0x20>
 801ec5c:	4621      	mov	r1, r4
 801ec5e:	4630      	mov	r0, r6
 801ec60:	f000 face 	bl	801f200 <__swsetup_r>
 801ec64:	2800      	cmp	r0, #0
 801ec66:	d09d      	beq.n	801eba4 <_vfiprintf_r+0x2c>
 801ec68:	f04f 30ff 	mov.w	r0, #4294967295
 801ec6c:	b01d      	add	sp, #116	; 0x74
 801ec6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec72:	46a8      	mov	r8, r5
 801ec74:	e7a2      	b.n	801ebbc <_vfiprintf_r+0x44>
 801ec76:	4a44      	ldr	r2, [pc, #272]	; (801ed88 <_vfiprintf_r+0x210>)
 801ec78:	1a80      	subs	r0, r0, r2
 801ec7a:	fa0b f000 	lsl.w	r0, fp, r0
 801ec7e:	4318      	orrs	r0, r3
 801ec80:	9004      	str	r0, [sp, #16]
 801ec82:	4645      	mov	r5, r8
 801ec84:	e7be      	b.n	801ec04 <_vfiprintf_r+0x8c>
 801ec86:	9a03      	ldr	r2, [sp, #12]
 801ec88:	1d11      	adds	r1, r2, #4
 801ec8a:	6812      	ldr	r2, [r2, #0]
 801ec8c:	9103      	str	r1, [sp, #12]
 801ec8e:	2a00      	cmp	r2, #0
 801ec90:	db01      	blt.n	801ec96 <_vfiprintf_r+0x11e>
 801ec92:	9207      	str	r2, [sp, #28]
 801ec94:	e004      	b.n	801eca0 <_vfiprintf_r+0x128>
 801ec96:	4252      	negs	r2, r2
 801ec98:	f043 0302 	orr.w	r3, r3, #2
 801ec9c:	9207      	str	r2, [sp, #28]
 801ec9e:	9304      	str	r3, [sp, #16]
 801eca0:	f898 3000 	ldrb.w	r3, [r8]
 801eca4:	2b2e      	cmp	r3, #46	; 0x2e
 801eca6:	d10e      	bne.n	801ecc6 <_vfiprintf_r+0x14e>
 801eca8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ecac:	2b2a      	cmp	r3, #42	; 0x2a
 801ecae:	d138      	bne.n	801ed22 <_vfiprintf_r+0x1aa>
 801ecb0:	9b03      	ldr	r3, [sp, #12]
 801ecb2:	1d1a      	adds	r2, r3, #4
 801ecb4:	681b      	ldr	r3, [r3, #0]
 801ecb6:	9203      	str	r2, [sp, #12]
 801ecb8:	2b00      	cmp	r3, #0
 801ecba:	bfb8      	it	lt
 801ecbc:	f04f 33ff 	movlt.w	r3, #4294967295
 801ecc0:	f108 0802 	add.w	r8, r8, #2
 801ecc4:	9305      	str	r3, [sp, #20]
 801ecc6:	4d33      	ldr	r5, [pc, #204]	; (801ed94 <_vfiprintf_r+0x21c>)
 801ecc8:	f898 1000 	ldrb.w	r1, [r8]
 801eccc:	2203      	movs	r2, #3
 801ecce:	4628      	mov	r0, r5
 801ecd0:	f7e1 fa96 	bl	8000200 <memchr>
 801ecd4:	b140      	cbz	r0, 801ece8 <_vfiprintf_r+0x170>
 801ecd6:	2340      	movs	r3, #64	; 0x40
 801ecd8:	1b40      	subs	r0, r0, r5
 801ecda:	fa03 f000 	lsl.w	r0, r3, r0
 801ecde:	9b04      	ldr	r3, [sp, #16]
 801ece0:	4303      	orrs	r3, r0
 801ece2:	f108 0801 	add.w	r8, r8, #1
 801ece6:	9304      	str	r3, [sp, #16]
 801ece8:	f898 1000 	ldrb.w	r1, [r8]
 801ecec:	482a      	ldr	r0, [pc, #168]	; (801ed98 <_vfiprintf_r+0x220>)
 801ecee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ecf2:	2206      	movs	r2, #6
 801ecf4:	f108 0701 	add.w	r7, r8, #1
 801ecf8:	f7e1 fa82 	bl	8000200 <memchr>
 801ecfc:	2800      	cmp	r0, #0
 801ecfe:	d037      	beq.n	801ed70 <_vfiprintf_r+0x1f8>
 801ed00:	4b26      	ldr	r3, [pc, #152]	; (801ed9c <_vfiprintf_r+0x224>)
 801ed02:	bb1b      	cbnz	r3, 801ed4c <_vfiprintf_r+0x1d4>
 801ed04:	9b03      	ldr	r3, [sp, #12]
 801ed06:	3307      	adds	r3, #7
 801ed08:	f023 0307 	bic.w	r3, r3, #7
 801ed0c:	3308      	adds	r3, #8
 801ed0e:	9303      	str	r3, [sp, #12]
 801ed10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed12:	444b      	add	r3, r9
 801ed14:	9309      	str	r3, [sp, #36]	; 0x24
 801ed16:	e750      	b.n	801ebba <_vfiprintf_r+0x42>
 801ed18:	fb05 3202 	mla	r2, r5, r2, r3
 801ed1c:	2001      	movs	r0, #1
 801ed1e:	4688      	mov	r8, r1
 801ed20:	e78a      	b.n	801ec38 <_vfiprintf_r+0xc0>
 801ed22:	2300      	movs	r3, #0
 801ed24:	f108 0801 	add.w	r8, r8, #1
 801ed28:	9305      	str	r3, [sp, #20]
 801ed2a:	4619      	mov	r1, r3
 801ed2c:	250a      	movs	r5, #10
 801ed2e:	4640      	mov	r0, r8
 801ed30:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ed34:	3a30      	subs	r2, #48	; 0x30
 801ed36:	2a09      	cmp	r2, #9
 801ed38:	d903      	bls.n	801ed42 <_vfiprintf_r+0x1ca>
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d0c3      	beq.n	801ecc6 <_vfiprintf_r+0x14e>
 801ed3e:	9105      	str	r1, [sp, #20]
 801ed40:	e7c1      	b.n	801ecc6 <_vfiprintf_r+0x14e>
 801ed42:	fb05 2101 	mla	r1, r5, r1, r2
 801ed46:	2301      	movs	r3, #1
 801ed48:	4680      	mov	r8, r0
 801ed4a:	e7f0      	b.n	801ed2e <_vfiprintf_r+0x1b6>
 801ed4c:	ab03      	add	r3, sp, #12
 801ed4e:	9300      	str	r3, [sp, #0]
 801ed50:	4622      	mov	r2, r4
 801ed52:	4b13      	ldr	r3, [pc, #76]	; (801eda0 <_vfiprintf_r+0x228>)
 801ed54:	a904      	add	r1, sp, #16
 801ed56:	4630      	mov	r0, r6
 801ed58:	f3af 8000 	nop.w
 801ed5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ed60:	4681      	mov	r9, r0
 801ed62:	d1d5      	bne.n	801ed10 <_vfiprintf_r+0x198>
 801ed64:	89a3      	ldrh	r3, [r4, #12]
 801ed66:	065b      	lsls	r3, r3, #25
 801ed68:	f53f af7e 	bmi.w	801ec68 <_vfiprintf_r+0xf0>
 801ed6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed6e:	e77d      	b.n	801ec6c <_vfiprintf_r+0xf4>
 801ed70:	ab03      	add	r3, sp, #12
 801ed72:	9300      	str	r3, [sp, #0]
 801ed74:	4622      	mov	r2, r4
 801ed76:	4b0a      	ldr	r3, [pc, #40]	; (801eda0 <_vfiprintf_r+0x228>)
 801ed78:	a904      	add	r1, sp, #16
 801ed7a:	4630      	mov	r0, r6
 801ed7c:	f000 f888 	bl	801ee90 <_printf_i>
 801ed80:	e7ec      	b.n	801ed5c <_vfiprintf_r+0x1e4>
 801ed82:	bf00      	nop
 801ed84:	08022c5c 	.word	0x08022c5c
 801ed88:	08022c08 	.word	0x08022c08
 801ed8c:	08022c7c 	.word	0x08022c7c
 801ed90:	08022c3c 	.word	0x08022c3c
 801ed94:	08022c0e 	.word	0x08022c0e
 801ed98:	08022c12 	.word	0x08022c12
 801ed9c:	00000000 	.word	0x00000000
 801eda0:	0801eb53 	.word	0x0801eb53

0801eda4 <_printf_common>:
 801eda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eda8:	4691      	mov	r9, r2
 801edaa:	461f      	mov	r7, r3
 801edac:	688a      	ldr	r2, [r1, #8]
 801edae:	690b      	ldr	r3, [r1, #16]
 801edb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801edb4:	4293      	cmp	r3, r2
 801edb6:	bfb8      	it	lt
 801edb8:	4613      	movlt	r3, r2
 801edba:	f8c9 3000 	str.w	r3, [r9]
 801edbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801edc2:	4606      	mov	r6, r0
 801edc4:	460c      	mov	r4, r1
 801edc6:	b112      	cbz	r2, 801edce <_printf_common+0x2a>
 801edc8:	3301      	adds	r3, #1
 801edca:	f8c9 3000 	str.w	r3, [r9]
 801edce:	6823      	ldr	r3, [r4, #0]
 801edd0:	0699      	lsls	r1, r3, #26
 801edd2:	bf42      	ittt	mi
 801edd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 801edd8:	3302      	addmi	r3, #2
 801edda:	f8c9 3000 	strmi.w	r3, [r9]
 801edde:	6825      	ldr	r5, [r4, #0]
 801ede0:	f015 0506 	ands.w	r5, r5, #6
 801ede4:	d107      	bne.n	801edf6 <_printf_common+0x52>
 801ede6:	f104 0a19 	add.w	sl, r4, #25
 801edea:	68e3      	ldr	r3, [r4, #12]
 801edec:	f8d9 2000 	ldr.w	r2, [r9]
 801edf0:	1a9b      	subs	r3, r3, r2
 801edf2:	42ab      	cmp	r3, r5
 801edf4:	dc28      	bgt.n	801ee48 <_printf_common+0xa4>
 801edf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801edfa:	6822      	ldr	r2, [r4, #0]
 801edfc:	3300      	adds	r3, #0
 801edfe:	bf18      	it	ne
 801ee00:	2301      	movne	r3, #1
 801ee02:	0692      	lsls	r2, r2, #26
 801ee04:	d42d      	bmi.n	801ee62 <_printf_common+0xbe>
 801ee06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ee0a:	4639      	mov	r1, r7
 801ee0c:	4630      	mov	r0, r6
 801ee0e:	47c0      	blx	r8
 801ee10:	3001      	adds	r0, #1
 801ee12:	d020      	beq.n	801ee56 <_printf_common+0xb2>
 801ee14:	6823      	ldr	r3, [r4, #0]
 801ee16:	68e5      	ldr	r5, [r4, #12]
 801ee18:	f8d9 2000 	ldr.w	r2, [r9]
 801ee1c:	f003 0306 	and.w	r3, r3, #6
 801ee20:	2b04      	cmp	r3, #4
 801ee22:	bf08      	it	eq
 801ee24:	1aad      	subeq	r5, r5, r2
 801ee26:	68a3      	ldr	r3, [r4, #8]
 801ee28:	6922      	ldr	r2, [r4, #16]
 801ee2a:	bf0c      	ite	eq
 801ee2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ee30:	2500      	movne	r5, #0
 801ee32:	4293      	cmp	r3, r2
 801ee34:	bfc4      	itt	gt
 801ee36:	1a9b      	subgt	r3, r3, r2
 801ee38:	18ed      	addgt	r5, r5, r3
 801ee3a:	f04f 0900 	mov.w	r9, #0
 801ee3e:	341a      	adds	r4, #26
 801ee40:	454d      	cmp	r5, r9
 801ee42:	d11a      	bne.n	801ee7a <_printf_common+0xd6>
 801ee44:	2000      	movs	r0, #0
 801ee46:	e008      	b.n	801ee5a <_printf_common+0xb6>
 801ee48:	2301      	movs	r3, #1
 801ee4a:	4652      	mov	r2, sl
 801ee4c:	4639      	mov	r1, r7
 801ee4e:	4630      	mov	r0, r6
 801ee50:	47c0      	blx	r8
 801ee52:	3001      	adds	r0, #1
 801ee54:	d103      	bne.n	801ee5e <_printf_common+0xba>
 801ee56:	f04f 30ff 	mov.w	r0, #4294967295
 801ee5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee5e:	3501      	adds	r5, #1
 801ee60:	e7c3      	b.n	801edea <_printf_common+0x46>
 801ee62:	18e1      	adds	r1, r4, r3
 801ee64:	1c5a      	adds	r2, r3, #1
 801ee66:	2030      	movs	r0, #48	; 0x30
 801ee68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ee6c:	4422      	add	r2, r4
 801ee6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ee72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ee76:	3302      	adds	r3, #2
 801ee78:	e7c5      	b.n	801ee06 <_printf_common+0x62>
 801ee7a:	2301      	movs	r3, #1
 801ee7c:	4622      	mov	r2, r4
 801ee7e:	4639      	mov	r1, r7
 801ee80:	4630      	mov	r0, r6
 801ee82:	47c0      	blx	r8
 801ee84:	3001      	adds	r0, #1
 801ee86:	d0e6      	beq.n	801ee56 <_printf_common+0xb2>
 801ee88:	f109 0901 	add.w	r9, r9, #1
 801ee8c:	e7d8      	b.n	801ee40 <_printf_common+0x9c>
	...

0801ee90 <_printf_i>:
 801ee90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ee94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801ee98:	460c      	mov	r4, r1
 801ee9a:	7e09      	ldrb	r1, [r1, #24]
 801ee9c:	b085      	sub	sp, #20
 801ee9e:	296e      	cmp	r1, #110	; 0x6e
 801eea0:	4617      	mov	r7, r2
 801eea2:	4606      	mov	r6, r0
 801eea4:	4698      	mov	r8, r3
 801eea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eea8:	f000 80b3 	beq.w	801f012 <_printf_i+0x182>
 801eeac:	d822      	bhi.n	801eef4 <_printf_i+0x64>
 801eeae:	2963      	cmp	r1, #99	; 0x63
 801eeb0:	d036      	beq.n	801ef20 <_printf_i+0x90>
 801eeb2:	d80a      	bhi.n	801eeca <_printf_i+0x3a>
 801eeb4:	2900      	cmp	r1, #0
 801eeb6:	f000 80b9 	beq.w	801f02c <_printf_i+0x19c>
 801eeba:	2958      	cmp	r1, #88	; 0x58
 801eebc:	f000 8083 	beq.w	801efc6 <_printf_i+0x136>
 801eec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801eec4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801eec8:	e032      	b.n	801ef30 <_printf_i+0xa0>
 801eeca:	2964      	cmp	r1, #100	; 0x64
 801eecc:	d001      	beq.n	801eed2 <_printf_i+0x42>
 801eece:	2969      	cmp	r1, #105	; 0x69
 801eed0:	d1f6      	bne.n	801eec0 <_printf_i+0x30>
 801eed2:	6820      	ldr	r0, [r4, #0]
 801eed4:	6813      	ldr	r3, [r2, #0]
 801eed6:	0605      	lsls	r5, r0, #24
 801eed8:	f103 0104 	add.w	r1, r3, #4
 801eedc:	d52a      	bpl.n	801ef34 <_printf_i+0xa4>
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	6011      	str	r1, [r2, #0]
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	da03      	bge.n	801eeee <_printf_i+0x5e>
 801eee6:	222d      	movs	r2, #45	; 0x2d
 801eee8:	425b      	negs	r3, r3
 801eeea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801eeee:	486f      	ldr	r0, [pc, #444]	; (801f0ac <_printf_i+0x21c>)
 801eef0:	220a      	movs	r2, #10
 801eef2:	e039      	b.n	801ef68 <_printf_i+0xd8>
 801eef4:	2973      	cmp	r1, #115	; 0x73
 801eef6:	f000 809d 	beq.w	801f034 <_printf_i+0x1a4>
 801eefa:	d808      	bhi.n	801ef0e <_printf_i+0x7e>
 801eefc:	296f      	cmp	r1, #111	; 0x6f
 801eefe:	d020      	beq.n	801ef42 <_printf_i+0xb2>
 801ef00:	2970      	cmp	r1, #112	; 0x70
 801ef02:	d1dd      	bne.n	801eec0 <_printf_i+0x30>
 801ef04:	6823      	ldr	r3, [r4, #0]
 801ef06:	f043 0320 	orr.w	r3, r3, #32
 801ef0a:	6023      	str	r3, [r4, #0]
 801ef0c:	e003      	b.n	801ef16 <_printf_i+0x86>
 801ef0e:	2975      	cmp	r1, #117	; 0x75
 801ef10:	d017      	beq.n	801ef42 <_printf_i+0xb2>
 801ef12:	2978      	cmp	r1, #120	; 0x78
 801ef14:	d1d4      	bne.n	801eec0 <_printf_i+0x30>
 801ef16:	2378      	movs	r3, #120	; 0x78
 801ef18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ef1c:	4864      	ldr	r0, [pc, #400]	; (801f0b0 <_printf_i+0x220>)
 801ef1e:	e055      	b.n	801efcc <_printf_i+0x13c>
 801ef20:	6813      	ldr	r3, [r2, #0]
 801ef22:	1d19      	adds	r1, r3, #4
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	6011      	str	r1, [r2, #0]
 801ef28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ef2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ef30:	2301      	movs	r3, #1
 801ef32:	e08c      	b.n	801f04e <_printf_i+0x1be>
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	6011      	str	r1, [r2, #0]
 801ef38:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ef3c:	bf18      	it	ne
 801ef3e:	b21b      	sxthne	r3, r3
 801ef40:	e7cf      	b.n	801eee2 <_printf_i+0x52>
 801ef42:	6813      	ldr	r3, [r2, #0]
 801ef44:	6825      	ldr	r5, [r4, #0]
 801ef46:	1d18      	adds	r0, r3, #4
 801ef48:	6010      	str	r0, [r2, #0]
 801ef4a:	0628      	lsls	r0, r5, #24
 801ef4c:	d501      	bpl.n	801ef52 <_printf_i+0xc2>
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	e002      	b.n	801ef58 <_printf_i+0xc8>
 801ef52:	0668      	lsls	r0, r5, #25
 801ef54:	d5fb      	bpl.n	801ef4e <_printf_i+0xbe>
 801ef56:	881b      	ldrh	r3, [r3, #0]
 801ef58:	4854      	ldr	r0, [pc, #336]	; (801f0ac <_printf_i+0x21c>)
 801ef5a:	296f      	cmp	r1, #111	; 0x6f
 801ef5c:	bf14      	ite	ne
 801ef5e:	220a      	movne	r2, #10
 801ef60:	2208      	moveq	r2, #8
 801ef62:	2100      	movs	r1, #0
 801ef64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ef68:	6865      	ldr	r5, [r4, #4]
 801ef6a:	60a5      	str	r5, [r4, #8]
 801ef6c:	2d00      	cmp	r5, #0
 801ef6e:	f2c0 8095 	blt.w	801f09c <_printf_i+0x20c>
 801ef72:	6821      	ldr	r1, [r4, #0]
 801ef74:	f021 0104 	bic.w	r1, r1, #4
 801ef78:	6021      	str	r1, [r4, #0]
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d13d      	bne.n	801effa <_printf_i+0x16a>
 801ef7e:	2d00      	cmp	r5, #0
 801ef80:	f040 808e 	bne.w	801f0a0 <_printf_i+0x210>
 801ef84:	4665      	mov	r5, ip
 801ef86:	2a08      	cmp	r2, #8
 801ef88:	d10b      	bne.n	801efa2 <_printf_i+0x112>
 801ef8a:	6823      	ldr	r3, [r4, #0]
 801ef8c:	07db      	lsls	r3, r3, #31
 801ef8e:	d508      	bpl.n	801efa2 <_printf_i+0x112>
 801ef90:	6923      	ldr	r3, [r4, #16]
 801ef92:	6862      	ldr	r2, [r4, #4]
 801ef94:	429a      	cmp	r2, r3
 801ef96:	bfde      	ittt	le
 801ef98:	2330      	movle	r3, #48	; 0x30
 801ef9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ef9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 801efa2:	ebac 0305 	sub.w	r3, ip, r5
 801efa6:	6123      	str	r3, [r4, #16]
 801efa8:	f8cd 8000 	str.w	r8, [sp]
 801efac:	463b      	mov	r3, r7
 801efae:	aa03      	add	r2, sp, #12
 801efb0:	4621      	mov	r1, r4
 801efb2:	4630      	mov	r0, r6
 801efb4:	f7ff fef6 	bl	801eda4 <_printf_common>
 801efb8:	3001      	adds	r0, #1
 801efba:	d14d      	bne.n	801f058 <_printf_i+0x1c8>
 801efbc:	f04f 30ff 	mov.w	r0, #4294967295
 801efc0:	b005      	add	sp, #20
 801efc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efc6:	4839      	ldr	r0, [pc, #228]	; (801f0ac <_printf_i+0x21c>)
 801efc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801efcc:	6813      	ldr	r3, [r2, #0]
 801efce:	6821      	ldr	r1, [r4, #0]
 801efd0:	1d1d      	adds	r5, r3, #4
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	6015      	str	r5, [r2, #0]
 801efd6:	060a      	lsls	r2, r1, #24
 801efd8:	d50b      	bpl.n	801eff2 <_printf_i+0x162>
 801efda:	07ca      	lsls	r2, r1, #31
 801efdc:	bf44      	itt	mi
 801efde:	f041 0120 	orrmi.w	r1, r1, #32
 801efe2:	6021      	strmi	r1, [r4, #0]
 801efe4:	b91b      	cbnz	r3, 801efee <_printf_i+0x15e>
 801efe6:	6822      	ldr	r2, [r4, #0]
 801efe8:	f022 0220 	bic.w	r2, r2, #32
 801efec:	6022      	str	r2, [r4, #0]
 801efee:	2210      	movs	r2, #16
 801eff0:	e7b7      	b.n	801ef62 <_printf_i+0xd2>
 801eff2:	064d      	lsls	r5, r1, #25
 801eff4:	bf48      	it	mi
 801eff6:	b29b      	uxthmi	r3, r3
 801eff8:	e7ef      	b.n	801efda <_printf_i+0x14a>
 801effa:	4665      	mov	r5, ip
 801effc:	fbb3 f1f2 	udiv	r1, r3, r2
 801f000:	fb02 3311 	mls	r3, r2, r1, r3
 801f004:	5cc3      	ldrb	r3, [r0, r3]
 801f006:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801f00a:	460b      	mov	r3, r1
 801f00c:	2900      	cmp	r1, #0
 801f00e:	d1f5      	bne.n	801effc <_printf_i+0x16c>
 801f010:	e7b9      	b.n	801ef86 <_printf_i+0xf6>
 801f012:	6813      	ldr	r3, [r2, #0]
 801f014:	6825      	ldr	r5, [r4, #0]
 801f016:	6961      	ldr	r1, [r4, #20]
 801f018:	1d18      	adds	r0, r3, #4
 801f01a:	6010      	str	r0, [r2, #0]
 801f01c:	0628      	lsls	r0, r5, #24
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	d501      	bpl.n	801f026 <_printf_i+0x196>
 801f022:	6019      	str	r1, [r3, #0]
 801f024:	e002      	b.n	801f02c <_printf_i+0x19c>
 801f026:	066a      	lsls	r2, r5, #25
 801f028:	d5fb      	bpl.n	801f022 <_printf_i+0x192>
 801f02a:	8019      	strh	r1, [r3, #0]
 801f02c:	2300      	movs	r3, #0
 801f02e:	6123      	str	r3, [r4, #16]
 801f030:	4665      	mov	r5, ip
 801f032:	e7b9      	b.n	801efa8 <_printf_i+0x118>
 801f034:	6813      	ldr	r3, [r2, #0]
 801f036:	1d19      	adds	r1, r3, #4
 801f038:	6011      	str	r1, [r2, #0]
 801f03a:	681d      	ldr	r5, [r3, #0]
 801f03c:	6862      	ldr	r2, [r4, #4]
 801f03e:	2100      	movs	r1, #0
 801f040:	4628      	mov	r0, r5
 801f042:	f7e1 f8dd 	bl	8000200 <memchr>
 801f046:	b108      	cbz	r0, 801f04c <_printf_i+0x1bc>
 801f048:	1b40      	subs	r0, r0, r5
 801f04a:	6060      	str	r0, [r4, #4]
 801f04c:	6863      	ldr	r3, [r4, #4]
 801f04e:	6123      	str	r3, [r4, #16]
 801f050:	2300      	movs	r3, #0
 801f052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f056:	e7a7      	b.n	801efa8 <_printf_i+0x118>
 801f058:	6923      	ldr	r3, [r4, #16]
 801f05a:	462a      	mov	r2, r5
 801f05c:	4639      	mov	r1, r7
 801f05e:	4630      	mov	r0, r6
 801f060:	47c0      	blx	r8
 801f062:	3001      	adds	r0, #1
 801f064:	d0aa      	beq.n	801efbc <_printf_i+0x12c>
 801f066:	6823      	ldr	r3, [r4, #0]
 801f068:	079b      	lsls	r3, r3, #30
 801f06a:	d413      	bmi.n	801f094 <_printf_i+0x204>
 801f06c:	68e0      	ldr	r0, [r4, #12]
 801f06e:	9b03      	ldr	r3, [sp, #12]
 801f070:	4298      	cmp	r0, r3
 801f072:	bfb8      	it	lt
 801f074:	4618      	movlt	r0, r3
 801f076:	e7a3      	b.n	801efc0 <_printf_i+0x130>
 801f078:	2301      	movs	r3, #1
 801f07a:	464a      	mov	r2, r9
 801f07c:	4639      	mov	r1, r7
 801f07e:	4630      	mov	r0, r6
 801f080:	47c0      	blx	r8
 801f082:	3001      	adds	r0, #1
 801f084:	d09a      	beq.n	801efbc <_printf_i+0x12c>
 801f086:	3501      	adds	r5, #1
 801f088:	68e3      	ldr	r3, [r4, #12]
 801f08a:	9a03      	ldr	r2, [sp, #12]
 801f08c:	1a9b      	subs	r3, r3, r2
 801f08e:	42ab      	cmp	r3, r5
 801f090:	dcf2      	bgt.n	801f078 <_printf_i+0x1e8>
 801f092:	e7eb      	b.n	801f06c <_printf_i+0x1dc>
 801f094:	2500      	movs	r5, #0
 801f096:	f104 0919 	add.w	r9, r4, #25
 801f09a:	e7f5      	b.n	801f088 <_printf_i+0x1f8>
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d1ac      	bne.n	801effa <_printf_i+0x16a>
 801f0a0:	7803      	ldrb	r3, [r0, #0]
 801f0a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f0a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f0aa:	e76c      	b.n	801ef86 <_printf_i+0xf6>
 801f0ac:	08022c19 	.word	0x08022c19
 801f0b0:	08022c2a 	.word	0x08022c2a

0801f0b4 <_sbrk_r>:
 801f0b4:	b538      	push	{r3, r4, r5, lr}
 801f0b6:	4c06      	ldr	r4, [pc, #24]	; (801f0d0 <_sbrk_r+0x1c>)
 801f0b8:	2300      	movs	r3, #0
 801f0ba:	4605      	mov	r5, r0
 801f0bc:	4608      	mov	r0, r1
 801f0be:	6023      	str	r3, [r4, #0]
 801f0c0:	f7e2 fbde 	bl	8001880 <_sbrk>
 801f0c4:	1c43      	adds	r3, r0, #1
 801f0c6:	d102      	bne.n	801f0ce <_sbrk_r+0x1a>
 801f0c8:	6823      	ldr	r3, [r4, #0]
 801f0ca:	b103      	cbz	r3, 801f0ce <_sbrk_r+0x1a>
 801f0cc:	602b      	str	r3, [r5, #0]
 801f0ce:	bd38      	pop	{r3, r4, r5, pc}
 801f0d0:	2000a9f4 	.word	0x2000a9f4

0801f0d4 <_raise_r>:
 801f0d4:	291f      	cmp	r1, #31
 801f0d6:	b538      	push	{r3, r4, r5, lr}
 801f0d8:	4604      	mov	r4, r0
 801f0da:	460d      	mov	r5, r1
 801f0dc:	d904      	bls.n	801f0e8 <_raise_r+0x14>
 801f0de:	2316      	movs	r3, #22
 801f0e0:	6003      	str	r3, [r0, #0]
 801f0e2:	f04f 30ff 	mov.w	r0, #4294967295
 801f0e6:	bd38      	pop	{r3, r4, r5, pc}
 801f0e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f0ea:	b112      	cbz	r2, 801f0f2 <_raise_r+0x1e>
 801f0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f0f0:	b94b      	cbnz	r3, 801f106 <_raise_r+0x32>
 801f0f2:	4620      	mov	r0, r4
 801f0f4:	f000 f830 	bl	801f158 <_getpid_r>
 801f0f8:	462a      	mov	r2, r5
 801f0fa:	4601      	mov	r1, r0
 801f0fc:	4620      	mov	r0, r4
 801f0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f102:	f000 b817 	b.w	801f134 <_kill_r>
 801f106:	2b01      	cmp	r3, #1
 801f108:	d00a      	beq.n	801f120 <_raise_r+0x4c>
 801f10a:	1c59      	adds	r1, r3, #1
 801f10c:	d103      	bne.n	801f116 <_raise_r+0x42>
 801f10e:	2316      	movs	r3, #22
 801f110:	6003      	str	r3, [r0, #0]
 801f112:	2001      	movs	r0, #1
 801f114:	e7e7      	b.n	801f0e6 <_raise_r+0x12>
 801f116:	2400      	movs	r4, #0
 801f118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f11c:	4628      	mov	r0, r5
 801f11e:	4798      	blx	r3
 801f120:	2000      	movs	r0, #0
 801f122:	e7e0      	b.n	801f0e6 <_raise_r+0x12>

0801f124 <raise>:
 801f124:	4b02      	ldr	r3, [pc, #8]	; (801f130 <raise+0xc>)
 801f126:	4601      	mov	r1, r0
 801f128:	6818      	ldr	r0, [r3, #0]
 801f12a:	f7ff bfd3 	b.w	801f0d4 <_raise_r>
 801f12e:	bf00      	nop
 801f130:	20000090 	.word	0x20000090

0801f134 <_kill_r>:
 801f134:	b538      	push	{r3, r4, r5, lr}
 801f136:	4c07      	ldr	r4, [pc, #28]	; (801f154 <_kill_r+0x20>)
 801f138:	2300      	movs	r3, #0
 801f13a:	4605      	mov	r5, r0
 801f13c:	4608      	mov	r0, r1
 801f13e:	4611      	mov	r1, r2
 801f140:	6023      	str	r3, [r4, #0]
 801f142:	f7e2 fb15 	bl	8001770 <_kill>
 801f146:	1c43      	adds	r3, r0, #1
 801f148:	d102      	bne.n	801f150 <_kill_r+0x1c>
 801f14a:	6823      	ldr	r3, [r4, #0]
 801f14c:	b103      	cbz	r3, 801f150 <_kill_r+0x1c>
 801f14e:	602b      	str	r3, [r5, #0]
 801f150:	bd38      	pop	{r3, r4, r5, pc}
 801f152:	bf00      	nop
 801f154:	2000a9f4 	.word	0x2000a9f4

0801f158 <_getpid_r>:
 801f158:	f7e2 bb02 	b.w	8001760 <_getpid>

0801f15c <__swbuf_r>:
 801f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f15e:	460e      	mov	r6, r1
 801f160:	4614      	mov	r4, r2
 801f162:	4605      	mov	r5, r0
 801f164:	b118      	cbz	r0, 801f16e <__swbuf_r+0x12>
 801f166:	6983      	ldr	r3, [r0, #24]
 801f168:	b90b      	cbnz	r3, 801f16e <__swbuf_r+0x12>
 801f16a:	f000 fa0b 	bl	801f584 <__sinit>
 801f16e:	4b21      	ldr	r3, [pc, #132]	; (801f1f4 <__swbuf_r+0x98>)
 801f170:	429c      	cmp	r4, r3
 801f172:	d12a      	bne.n	801f1ca <__swbuf_r+0x6e>
 801f174:	686c      	ldr	r4, [r5, #4]
 801f176:	69a3      	ldr	r3, [r4, #24]
 801f178:	60a3      	str	r3, [r4, #8]
 801f17a:	89a3      	ldrh	r3, [r4, #12]
 801f17c:	071a      	lsls	r2, r3, #28
 801f17e:	d52e      	bpl.n	801f1de <__swbuf_r+0x82>
 801f180:	6923      	ldr	r3, [r4, #16]
 801f182:	b363      	cbz	r3, 801f1de <__swbuf_r+0x82>
 801f184:	6923      	ldr	r3, [r4, #16]
 801f186:	6820      	ldr	r0, [r4, #0]
 801f188:	1ac0      	subs	r0, r0, r3
 801f18a:	6963      	ldr	r3, [r4, #20]
 801f18c:	b2f6      	uxtb	r6, r6
 801f18e:	4283      	cmp	r3, r0
 801f190:	4637      	mov	r7, r6
 801f192:	dc04      	bgt.n	801f19e <__swbuf_r+0x42>
 801f194:	4621      	mov	r1, r4
 801f196:	4628      	mov	r0, r5
 801f198:	f000 f98a 	bl	801f4b0 <_fflush_r>
 801f19c:	bb28      	cbnz	r0, 801f1ea <__swbuf_r+0x8e>
 801f19e:	68a3      	ldr	r3, [r4, #8]
 801f1a0:	3b01      	subs	r3, #1
 801f1a2:	60a3      	str	r3, [r4, #8]
 801f1a4:	6823      	ldr	r3, [r4, #0]
 801f1a6:	1c5a      	adds	r2, r3, #1
 801f1a8:	6022      	str	r2, [r4, #0]
 801f1aa:	701e      	strb	r6, [r3, #0]
 801f1ac:	6963      	ldr	r3, [r4, #20]
 801f1ae:	3001      	adds	r0, #1
 801f1b0:	4283      	cmp	r3, r0
 801f1b2:	d004      	beq.n	801f1be <__swbuf_r+0x62>
 801f1b4:	89a3      	ldrh	r3, [r4, #12]
 801f1b6:	07db      	lsls	r3, r3, #31
 801f1b8:	d519      	bpl.n	801f1ee <__swbuf_r+0x92>
 801f1ba:	2e0a      	cmp	r6, #10
 801f1bc:	d117      	bne.n	801f1ee <__swbuf_r+0x92>
 801f1be:	4621      	mov	r1, r4
 801f1c0:	4628      	mov	r0, r5
 801f1c2:	f000 f975 	bl	801f4b0 <_fflush_r>
 801f1c6:	b190      	cbz	r0, 801f1ee <__swbuf_r+0x92>
 801f1c8:	e00f      	b.n	801f1ea <__swbuf_r+0x8e>
 801f1ca:	4b0b      	ldr	r3, [pc, #44]	; (801f1f8 <__swbuf_r+0x9c>)
 801f1cc:	429c      	cmp	r4, r3
 801f1ce:	d101      	bne.n	801f1d4 <__swbuf_r+0x78>
 801f1d0:	68ac      	ldr	r4, [r5, #8]
 801f1d2:	e7d0      	b.n	801f176 <__swbuf_r+0x1a>
 801f1d4:	4b09      	ldr	r3, [pc, #36]	; (801f1fc <__swbuf_r+0xa0>)
 801f1d6:	429c      	cmp	r4, r3
 801f1d8:	bf08      	it	eq
 801f1da:	68ec      	ldreq	r4, [r5, #12]
 801f1dc:	e7cb      	b.n	801f176 <__swbuf_r+0x1a>
 801f1de:	4621      	mov	r1, r4
 801f1e0:	4628      	mov	r0, r5
 801f1e2:	f000 f80d 	bl	801f200 <__swsetup_r>
 801f1e6:	2800      	cmp	r0, #0
 801f1e8:	d0cc      	beq.n	801f184 <__swbuf_r+0x28>
 801f1ea:	f04f 37ff 	mov.w	r7, #4294967295
 801f1ee:	4638      	mov	r0, r7
 801f1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1f2:	bf00      	nop
 801f1f4:	08022c5c 	.word	0x08022c5c
 801f1f8:	08022c7c 	.word	0x08022c7c
 801f1fc:	08022c3c 	.word	0x08022c3c

0801f200 <__swsetup_r>:
 801f200:	4b32      	ldr	r3, [pc, #200]	; (801f2cc <__swsetup_r+0xcc>)
 801f202:	b570      	push	{r4, r5, r6, lr}
 801f204:	681d      	ldr	r5, [r3, #0]
 801f206:	4606      	mov	r6, r0
 801f208:	460c      	mov	r4, r1
 801f20a:	b125      	cbz	r5, 801f216 <__swsetup_r+0x16>
 801f20c:	69ab      	ldr	r3, [r5, #24]
 801f20e:	b913      	cbnz	r3, 801f216 <__swsetup_r+0x16>
 801f210:	4628      	mov	r0, r5
 801f212:	f000 f9b7 	bl	801f584 <__sinit>
 801f216:	4b2e      	ldr	r3, [pc, #184]	; (801f2d0 <__swsetup_r+0xd0>)
 801f218:	429c      	cmp	r4, r3
 801f21a:	d10f      	bne.n	801f23c <__swsetup_r+0x3c>
 801f21c:	686c      	ldr	r4, [r5, #4]
 801f21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f222:	b29a      	uxth	r2, r3
 801f224:	0715      	lsls	r5, r2, #28
 801f226:	d42c      	bmi.n	801f282 <__swsetup_r+0x82>
 801f228:	06d0      	lsls	r0, r2, #27
 801f22a:	d411      	bmi.n	801f250 <__swsetup_r+0x50>
 801f22c:	2209      	movs	r2, #9
 801f22e:	6032      	str	r2, [r6, #0]
 801f230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f234:	81a3      	strh	r3, [r4, #12]
 801f236:	f04f 30ff 	mov.w	r0, #4294967295
 801f23a:	e03e      	b.n	801f2ba <__swsetup_r+0xba>
 801f23c:	4b25      	ldr	r3, [pc, #148]	; (801f2d4 <__swsetup_r+0xd4>)
 801f23e:	429c      	cmp	r4, r3
 801f240:	d101      	bne.n	801f246 <__swsetup_r+0x46>
 801f242:	68ac      	ldr	r4, [r5, #8]
 801f244:	e7eb      	b.n	801f21e <__swsetup_r+0x1e>
 801f246:	4b24      	ldr	r3, [pc, #144]	; (801f2d8 <__swsetup_r+0xd8>)
 801f248:	429c      	cmp	r4, r3
 801f24a:	bf08      	it	eq
 801f24c:	68ec      	ldreq	r4, [r5, #12]
 801f24e:	e7e6      	b.n	801f21e <__swsetup_r+0x1e>
 801f250:	0751      	lsls	r1, r2, #29
 801f252:	d512      	bpl.n	801f27a <__swsetup_r+0x7a>
 801f254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f256:	b141      	cbz	r1, 801f26a <__swsetup_r+0x6a>
 801f258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f25c:	4299      	cmp	r1, r3
 801f25e:	d002      	beq.n	801f266 <__swsetup_r+0x66>
 801f260:	4630      	mov	r0, r6
 801f262:	f7ff fbb7 	bl	801e9d4 <_free_r>
 801f266:	2300      	movs	r3, #0
 801f268:	6363      	str	r3, [r4, #52]	; 0x34
 801f26a:	89a3      	ldrh	r3, [r4, #12]
 801f26c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f270:	81a3      	strh	r3, [r4, #12]
 801f272:	2300      	movs	r3, #0
 801f274:	6063      	str	r3, [r4, #4]
 801f276:	6923      	ldr	r3, [r4, #16]
 801f278:	6023      	str	r3, [r4, #0]
 801f27a:	89a3      	ldrh	r3, [r4, #12]
 801f27c:	f043 0308 	orr.w	r3, r3, #8
 801f280:	81a3      	strh	r3, [r4, #12]
 801f282:	6923      	ldr	r3, [r4, #16]
 801f284:	b94b      	cbnz	r3, 801f29a <__swsetup_r+0x9a>
 801f286:	89a3      	ldrh	r3, [r4, #12]
 801f288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f290:	d003      	beq.n	801f29a <__swsetup_r+0x9a>
 801f292:	4621      	mov	r1, r4
 801f294:	4630      	mov	r0, r6
 801f296:	f000 fa23 	bl	801f6e0 <__smakebuf_r>
 801f29a:	89a2      	ldrh	r2, [r4, #12]
 801f29c:	f012 0301 	ands.w	r3, r2, #1
 801f2a0:	d00c      	beq.n	801f2bc <__swsetup_r+0xbc>
 801f2a2:	2300      	movs	r3, #0
 801f2a4:	60a3      	str	r3, [r4, #8]
 801f2a6:	6963      	ldr	r3, [r4, #20]
 801f2a8:	425b      	negs	r3, r3
 801f2aa:	61a3      	str	r3, [r4, #24]
 801f2ac:	6923      	ldr	r3, [r4, #16]
 801f2ae:	b953      	cbnz	r3, 801f2c6 <__swsetup_r+0xc6>
 801f2b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801f2b8:	d1ba      	bne.n	801f230 <__swsetup_r+0x30>
 801f2ba:	bd70      	pop	{r4, r5, r6, pc}
 801f2bc:	0792      	lsls	r2, r2, #30
 801f2be:	bf58      	it	pl
 801f2c0:	6963      	ldrpl	r3, [r4, #20]
 801f2c2:	60a3      	str	r3, [r4, #8]
 801f2c4:	e7f2      	b.n	801f2ac <__swsetup_r+0xac>
 801f2c6:	2000      	movs	r0, #0
 801f2c8:	e7f7      	b.n	801f2ba <__swsetup_r+0xba>
 801f2ca:	bf00      	nop
 801f2cc:	20000090 	.word	0x20000090
 801f2d0:	08022c5c 	.word	0x08022c5c
 801f2d4:	08022c7c 	.word	0x08022c7c
 801f2d8:	08022c3c 	.word	0x08022c3c

0801f2dc <__register_exitproc>:
 801f2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f2e0:	4d2c      	ldr	r5, [pc, #176]	; (801f394 <__register_exitproc+0xb8>)
 801f2e2:	682c      	ldr	r4, [r5, #0]
 801f2e4:	4607      	mov	r7, r0
 801f2e6:	460e      	mov	r6, r1
 801f2e8:	4691      	mov	r9, r2
 801f2ea:	4698      	mov	r8, r3
 801f2ec:	b934      	cbnz	r4, 801f2fc <__register_exitproc+0x20>
 801f2ee:	4b2a      	ldr	r3, [pc, #168]	; (801f398 <__register_exitproc+0xbc>)
 801f2f0:	4c2a      	ldr	r4, [pc, #168]	; (801f39c <__register_exitproc+0xc0>)
 801f2f2:	602c      	str	r4, [r5, #0]
 801f2f4:	b113      	cbz	r3, 801f2fc <__register_exitproc+0x20>
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801f2fc:	6863      	ldr	r3, [r4, #4]
 801f2fe:	2b1f      	cmp	r3, #31
 801f300:	dd3d      	ble.n	801f37e <__register_exitproc+0xa2>
 801f302:	4b27      	ldr	r3, [pc, #156]	; (801f3a0 <__register_exitproc+0xc4>)
 801f304:	b91b      	cbnz	r3, 801f30e <__register_exitproc+0x32>
 801f306:	f04f 30ff 	mov.w	r0, #4294967295
 801f30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f30e:	208c      	movs	r0, #140	; 0x8c
 801f310:	f7ff fb3c 	bl	801e98c <malloc>
 801f314:	4604      	mov	r4, r0
 801f316:	2800      	cmp	r0, #0
 801f318:	d0f5      	beq.n	801f306 <__register_exitproc+0x2a>
 801f31a:	2300      	movs	r3, #0
 801f31c:	682a      	ldr	r2, [r5, #0]
 801f31e:	6002      	str	r2, [r0, #0]
 801f320:	6043      	str	r3, [r0, #4]
 801f322:	6028      	str	r0, [r5, #0]
 801f324:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801f328:	b30f      	cbz	r7, 801f36e <__register_exitproc+0x92>
 801f32a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f32e:	f7ff fb2d 	bl	801e98c <malloc>
 801f332:	2800      	cmp	r0, #0
 801f334:	d0e7      	beq.n	801f306 <__register_exitproc+0x2a>
 801f336:	2300      	movs	r3, #0
 801f338:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801f33c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801f340:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801f344:	6862      	ldr	r2, [r4, #4]
 801f346:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801f34a:	2301      	movs	r3, #1
 801f34c:	4093      	lsls	r3, r2
 801f34e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801f352:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801f356:	431a      	orrs	r2, r3
 801f358:	2f02      	cmp	r7, #2
 801f35a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801f35e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801f362:	bf02      	ittt	eq
 801f364:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801f368:	4313      	orreq	r3, r2
 801f36a:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801f36e:	6863      	ldr	r3, [r4, #4]
 801f370:	1c5a      	adds	r2, r3, #1
 801f372:	3302      	adds	r3, #2
 801f374:	6062      	str	r2, [r4, #4]
 801f376:	2000      	movs	r0, #0
 801f378:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801f37c:	e7c5      	b.n	801f30a <__register_exitproc+0x2e>
 801f37e:	2f00      	cmp	r7, #0
 801f380:	d0f5      	beq.n	801f36e <__register_exitproc+0x92>
 801f382:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801f386:	2800      	cmp	r0, #0
 801f388:	d1dc      	bne.n	801f344 <__register_exitproc+0x68>
 801f38a:	4b05      	ldr	r3, [pc, #20]	; (801f3a0 <__register_exitproc+0xc4>)
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	d0ba      	beq.n	801f306 <__register_exitproc+0x2a>
 801f390:	e7cb      	b.n	801f32a <__register_exitproc+0x4e>
 801f392:	bf00      	nop
 801f394:	20009ea4 	.word	0x20009ea4
 801f398:	00000000 	.word	0x00000000
 801f39c:	20009e18 	.word	0x20009e18
 801f3a0:	0801e98d 	.word	0x0801e98d

0801f3a4 <__sflush_r>:
 801f3a4:	898a      	ldrh	r2, [r1, #12]
 801f3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3aa:	4605      	mov	r5, r0
 801f3ac:	0710      	lsls	r0, r2, #28
 801f3ae:	460c      	mov	r4, r1
 801f3b0:	d458      	bmi.n	801f464 <__sflush_r+0xc0>
 801f3b2:	684b      	ldr	r3, [r1, #4]
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	dc05      	bgt.n	801f3c4 <__sflush_r+0x20>
 801f3b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	dc02      	bgt.n	801f3c4 <__sflush_r+0x20>
 801f3be:	2000      	movs	r0, #0
 801f3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f3c6:	2e00      	cmp	r6, #0
 801f3c8:	d0f9      	beq.n	801f3be <__sflush_r+0x1a>
 801f3ca:	2300      	movs	r3, #0
 801f3cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f3d0:	682f      	ldr	r7, [r5, #0]
 801f3d2:	6a21      	ldr	r1, [r4, #32]
 801f3d4:	602b      	str	r3, [r5, #0]
 801f3d6:	d032      	beq.n	801f43e <__sflush_r+0x9a>
 801f3d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f3da:	89a3      	ldrh	r3, [r4, #12]
 801f3dc:	075a      	lsls	r2, r3, #29
 801f3de:	d505      	bpl.n	801f3ec <__sflush_r+0x48>
 801f3e0:	6863      	ldr	r3, [r4, #4]
 801f3e2:	1ac0      	subs	r0, r0, r3
 801f3e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f3e6:	b10b      	cbz	r3, 801f3ec <__sflush_r+0x48>
 801f3e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f3ea:	1ac0      	subs	r0, r0, r3
 801f3ec:	2300      	movs	r3, #0
 801f3ee:	4602      	mov	r2, r0
 801f3f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f3f2:	6a21      	ldr	r1, [r4, #32]
 801f3f4:	4628      	mov	r0, r5
 801f3f6:	47b0      	blx	r6
 801f3f8:	1c43      	adds	r3, r0, #1
 801f3fa:	89a3      	ldrh	r3, [r4, #12]
 801f3fc:	d106      	bne.n	801f40c <__sflush_r+0x68>
 801f3fe:	6829      	ldr	r1, [r5, #0]
 801f400:	291d      	cmp	r1, #29
 801f402:	d848      	bhi.n	801f496 <__sflush_r+0xf2>
 801f404:	4a29      	ldr	r2, [pc, #164]	; (801f4ac <__sflush_r+0x108>)
 801f406:	40ca      	lsrs	r2, r1
 801f408:	07d6      	lsls	r6, r2, #31
 801f40a:	d544      	bpl.n	801f496 <__sflush_r+0xf2>
 801f40c:	2200      	movs	r2, #0
 801f40e:	6062      	str	r2, [r4, #4]
 801f410:	04d9      	lsls	r1, r3, #19
 801f412:	6922      	ldr	r2, [r4, #16]
 801f414:	6022      	str	r2, [r4, #0]
 801f416:	d504      	bpl.n	801f422 <__sflush_r+0x7e>
 801f418:	1c42      	adds	r2, r0, #1
 801f41a:	d101      	bne.n	801f420 <__sflush_r+0x7c>
 801f41c:	682b      	ldr	r3, [r5, #0]
 801f41e:	b903      	cbnz	r3, 801f422 <__sflush_r+0x7e>
 801f420:	6560      	str	r0, [r4, #84]	; 0x54
 801f422:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f424:	602f      	str	r7, [r5, #0]
 801f426:	2900      	cmp	r1, #0
 801f428:	d0c9      	beq.n	801f3be <__sflush_r+0x1a>
 801f42a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f42e:	4299      	cmp	r1, r3
 801f430:	d002      	beq.n	801f438 <__sflush_r+0x94>
 801f432:	4628      	mov	r0, r5
 801f434:	f7ff face 	bl	801e9d4 <_free_r>
 801f438:	2000      	movs	r0, #0
 801f43a:	6360      	str	r0, [r4, #52]	; 0x34
 801f43c:	e7c0      	b.n	801f3c0 <__sflush_r+0x1c>
 801f43e:	2301      	movs	r3, #1
 801f440:	4628      	mov	r0, r5
 801f442:	47b0      	blx	r6
 801f444:	1c41      	adds	r1, r0, #1
 801f446:	d1c8      	bne.n	801f3da <__sflush_r+0x36>
 801f448:	682b      	ldr	r3, [r5, #0]
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d0c5      	beq.n	801f3da <__sflush_r+0x36>
 801f44e:	2b1d      	cmp	r3, #29
 801f450:	d001      	beq.n	801f456 <__sflush_r+0xb2>
 801f452:	2b16      	cmp	r3, #22
 801f454:	d101      	bne.n	801f45a <__sflush_r+0xb6>
 801f456:	602f      	str	r7, [r5, #0]
 801f458:	e7b1      	b.n	801f3be <__sflush_r+0x1a>
 801f45a:	89a3      	ldrh	r3, [r4, #12]
 801f45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f460:	81a3      	strh	r3, [r4, #12]
 801f462:	e7ad      	b.n	801f3c0 <__sflush_r+0x1c>
 801f464:	690f      	ldr	r7, [r1, #16]
 801f466:	2f00      	cmp	r7, #0
 801f468:	d0a9      	beq.n	801f3be <__sflush_r+0x1a>
 801f46a:	0793      	lsls	r3, r2, #30
 801f46c:	680e      	ldr	r6, [r1, #0]
 801f46e:	bf08      	it	eq
 801f470:	694b      	ldreq	r3, [r1, #20]
 801f472:	600f      	str	r7, [r1, #0]
 801f474:	bf18      	it	ne
 801f476:	2300      	movne	r3, #0
 801f478:	eba6 0807 	sub.w	r8, r6, r7
 801f47c:	608b      	str	r3, [r1, #8]
 801f47e:	f1b8 0f00 	cmp.w	r8, #0
 801f482:	dd9c      	ble.n	801f3be <__sflush_r+0x1a>
 801f484:	4643      	mov	r3, r8
 801f486:	463a      	mov	r2, r7
 801f488:	6a21      	ldr	r1, [r4, #32]
 801f48a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f48c:	4628      	mov	r0, r5
 801f48e:	47b0      	blx	r6
 801f490:	2800      	cmp	r0, #0
 801f492:	dc06      	bgt.n	801f4a2 <__sflush_r+0xfe>
 801f494:	89a3      	ldrh	r3, [r4, #12]
 801f496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f49a:	81a3      	strh	r3, [r4, #12]
 801f49c:	f04f 30ff 	mov.w	r0, #4294967295
 801f4a0:	e78e      	b.n	801f3c0 <__sflush_r+0x1c>
 801f4a2:	4407      	add	r7, r0
 801f4a4:	eba8 0800 	sub.w	r8, r8, r0
 801f4a8:	e7e9      	b.n	801f47e <__sflush_r+0xda>
 801f4aa:	bf00      	nop
 801f4ac:	20400001 	.word	0x20400001

0801f4b0 <_fflush_r>:
 801f4b0:	b538      	push	{r3, r4, r5, lr}
 801f4b2:	690b      	ldr	r3, [r1, #16]
 801f4b4:	4605      	mov	r5, r0
 801f4b6:	460c      	mov	r4, r1
 801f4b8:	b1db      	cbz	r3, 801f4f2 <_fflush_r+0x42>
 801f4ba:	b118      	cbz	r0, 801f4c4 <_fflush_r+0x14>
 801f4bc:	6983      	ldr	r3, [r0, #24]
 801f4be:	b90b      	cbnz	r3, 801f4c4 <_fflush_r+0x14>
 801f4c0:	f000 f860 	bl	801f584 <__sinit>
 801f4c4:	4b0c      	ldr	r3, [pc, #48]	; (801f4f8 <_fflush_r+0x48>)
 801f4c6:	429c      	cmp	r4, r3
 801f4c8:	d109      	bne.n	801f4de <_fflush_r+0x2e>
 801f4ca:	686c      	ldr	r4, [r5, #4]
 801f4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f4d0:	b17b      	cbz	r3, 801f4f2 <_fflush_r+0x42>
 801f4d2:	4621      	mov	r1, r4
 801f4d4:	4628      	mov	r0, r5
 801f4d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f4da:	f7ff bf63 	b.w	801f3a4 <__sflush_r>
 801f4de:	4b07      	ldr	r3, [pc, #28]	; (801f4fc <_fflush_r+0x4c>)
 801f4e0:	429c      	cmp	r4, r3
 801f4e2:	d101      	bne.n	801f4e8 <_fflush_r+0x38>
 801f4e4:	68ac      	ldr	r4, [r5, #8]
 801f4e6:	e7f1      	b.n	801f4cc <_fflush_r+0x1c>
 801f4e8:	4b05      	ldr	r3, [pc, #20]	; (801f500 <_fflush_r+0x50>)
 801f4ea:	429c      	cmp	r4, r3
 801f4ec:	bf08      	it	eq
 801f4ee:	68ec      	ldreq	r4, [r5, #12]
 801f4f0:	e7ec      	b.n	801f4cc <_fflush_r+0x1c>
 801f4f2:	2000      	movs	r0, #0
 801f4f4:	bd38      	pop	{r3, r4, r5, pc}
 801f4f6:	bf00      	nop
 801f4f8:	08022c5c 	.word	0x08022c5c
 801f4fc:	08022c7c 	.word	0x08022c7c
 801f500:	08022c3c 	.word	0x08022c3c

0801f504 <std>:
 801f504:	2300      	movs	r3, #0
 801f506:	b510      	push	{r4, lr}
 801f508:	4604      	mov	r4, r0
 801f50a:	e9c0 3300 	strd	r3, r3, [r0]
 801f50e:	6083      	str	r3, [r0, #8]
 801f510:	8181      	strh	r1, [r0, #12]
 801f512:	6643      	str	r3, [r0, #100]	; 0x64
 801f514:	81c2      	strh	r2, [r0, #14]
 801f516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f51a:	6183      	str	r3, [r0, #24]
 801f51c:	4619      	mov	r1, r3
 801f51e:	2208      	movs	r2, #8
 801f520:	305c      	adds	r0, #92	; 0x5c
 801f522:	f7ff fa4e 	bl	801e9c2 <memset>
 801f526:	4b05      	ldr	r3, [pc, #20]	; (801f53c <std+0x38>)
 801f528:	6263      	str	r3, [r4, #36]	; 0x24
 801f52a:	4b05      	ldr	r3, [pc, #20]	; (801f540 <std+0x3c>)
 801f52c:	62a3      	str	r3, [r4, #40]	; 0x28
 801f52e:	4b05      	ldr	r3, [pc, #20]	; (801f544 <std+0x40>)
 801f530:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f532:	4b05      	ldr	r3, [pc, #20]	; (801f548 <std+0x44>)
 801f534:	6224      	str	r4, [r4, #32]
 801f536:	6323      	str	r3, [r4, #48]	; 0x30
 801f538:	bd10      	pop	{r4, pc}
 801f53a:	bf00      	nop
 801f53c:	0801f765 	.word	0x0801f765
 801f540:	0801f787 	.word	0x0801f787
 801f544:	0801f7bf 	.word	0x0801f7bf
 801f548:	0801f7e3 	.word	0x0801f7e3

0801f54c <_cleanup_r>:
 801f54c:	4901      	ldr	r1, [pc, #4]	; (801f554 <_cleanup_r+0x8>)
 801f54e:	f000 b885 	b.w	801f65c <_fwalk_reent>
 801f552:	bf00      	nop
 801f554:	0801f4b1 	.word	0x0801f4b1

0801f558 <__sfmoreglue>:
 801f558:	b570      	push	{r4, r5, r6, lr}
 801f55a:	1e4a      	subs	r2, r1, #1
 801f55c:	2568      	movs	r5, #104	; 0x68
 801f55e:	4355      	muls	r5, r2
 801f560:	460e      	mov	r6, r1
 801f562:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f566:	f7ff fa83 	bl	801ea70 <_malloc_r>
 801f56a:	4604      	mov	r4, r0
 801f56c:	b140      	cbz	r0, 801f580 <__sfmoreglue+0x28>
 801f56e:	2100      	movs	r1, #0
 801f570:	e9c0 1600 	strd	r1, r6, [r0]
 801f574:	300c      	adds	r0, #12
 801f576:	60a0      	str	r0, [r4, #8]
 801f578:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f57c:	f7ff fa21 	bl	801e9c2 <memset>
 801f580:	4620      	mov	r0, r4
 801f582:	bd70      	pop	{r4, r5, r6, pc}

0801f584 <__sinit>:
 801f584:	6983      	ldr	r3, [r0, #24]
 801f586:	b510      	push	{r4, lr}
 801f588:	4604      	mov	r4, r0
 801f58a:	bb33      	cbnz	r3, 801f5da <__sinit+0x56>
 801f58c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801f590:	6503      	str	r3, [r0, #80]	; 0x50
 801f592:	4b12      	ldr	r3, [pc, #72]	; (801f5dc <__sinit+0x58>)
 801f594:	4a12      	ldr	r2, [pc, #72]	; (801f5e0 <__sinit+0x5c>)
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	6282      	str	r2, [r0, #40]	; 0x28
 801f59a:	4298      	cmp	r0, r3
 801f59c:	bf04      	itt	eq
 801f59e:	2301      	moveq	r3, #1
 801f5a0:	6183      	streq	r3, [r0, #24]
 801f5a2:	f000 f81f 	bl	801f5e4 <__sfp>
 801f5a6:	6060      	str	r0, [r4, #4]
 801f5a8:	4620      	mov	r0, r4
 801f5aa:	f000 f81b 	bl	801f5e4 <__sfp>
 801f5ae:	60a0      	str	r0, [r4, #8]
 801f5b0:	4620      	mov	r0, r4
 801f5b2:	f000 f817 	bl	801f5e4 <__sfp>
 801f5b6:	2200      	movs	r2, #0
 801f5b8:	60e0      	str	r0, [r4, #12]
 801f5ba:	2104      	movs	r1, #4
 801f5bc:	6860      	ldr	r0, [r4, #4]
 801f5be:	f7ff ffa1 	bl	801f504 <std>
 801f5c2:	2201      	movs	r2, #1
 801f5c4:	2109      	movs	r1, #9
 801f5c6:	68a0      	ldr	r0, [r4, #8]
 801f5c8:	f7ff ff9c 	bl	801f504 <std>
 801f5cc:	2202      	movs	r2, #2
 801f5ce:	2112      	movs	r1, #18
 801f5d0:	68e0      	ldr	r0, [r4, #12]
 801f5d2:	f7ff ff97 	bl	801f504 <std>
 801f5d6:	2301      	movs	r3, #1
 801f5d8:	61a3      	str	r3, [r4, #24]
 801f5da:	bd10      	pop	{r4, pc}
 801f5dc:	08022c04 	.word	0x08022c04
 801f5e0:	0801f54d 	.word	0x0801f54d

0801f5e4 <__sfp>:
 801f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5e6:	4b1b      	ldr	r3, [pc, #108]	; (801f654 <__sfp+0x70>)
 801f5e8:	681e      	ldr	r6, [r3, #0]
 801f5ea:	69b3      	ldr	r3, [r6, #24]
 801f5ec:	4607      	mov	r7, r0
 801f5ee:	b913      	cbnz	r3, 801f5f6 <__sfp+0x12>
 801f5f0:	4630      	mov	r0, r6
 801f5f2:	f7ff ffc7 	bl	801f584 <__sinit>
 801f5f6:	3648      	adds	r6, #72	; 0x48
 801f5f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f5fc:	3b01      	subs	r3, #1
 801f5fe:	d503      	bpl.n	801f608 <__sfp+0x24>
 801f600:	6833      	ldr	r3, [r6, #0]
 801f602:	b133      	cbz	r3, 801f612 <__sfp+0x2e>
 801f604:	6836      	ldr	r6, [r6, #0]
 801f606:	e7f7      	b.n	801f5f8 <__sfp+0x14>
 801f608:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f60c:	b16d      	cbz	r5, 801f62a <__sfp+0x46>
 801f60e:	3468      	adds	r4, #104	; 0x68
 801f610:	e7f4      	b.n	801f5fc <__sfp+0x18>
 801f612:	2104      	movs	r1, #4
 801f614:	4638      	mov	r0, r7
 801f616:	f7ff ff9f 	bl	801f558 <__sfmoreglue>
 801f61a:	6030      	str	r0, [r6, #0]
 801f61c:	2800      	cmp	r0, #0
 801f61e:	d1f1      	bne.n	801f604 <__sfp+0x20>
 801f620:	230c      	movs	r3, #12
 801f622:	603b      	str	r3, [r7, #0]
 801f624:	4604      	mov	r4, r0
 801f626:	4620      	mov	r0, r4
 801f628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f62a:	4b0b      	ldr	r3, [pc, #44]	; (801f658 <__sfp+0x74>)
 801f62c:	6665      	str	r5, [r4, #100]	; 0x64
 801f62e:	e9c4 5500 	strd	r5, r5, [r4]
 801f632:	60a5      	str	r5, [r4, #8]
 801f634:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801f638:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801f63c:	2208      	movs	r2, #8
 801f63e:	4629      	mov	r1, r5
 801f640:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f644:	f7ff f9bd 	bl	801e9c2 <memset>
 801f648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f64c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f650:	e7e9      	b.n	801f626 <__sfp+0x42>
 801f652:	bf00      	nop
 801f654:	08022c04 	.word	0x08022c04
 801f658:	ffff0001 	.word	0xffff0001

0801f65c <_fwalk_reent>:
 801f65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f660:	4680      	mov	r8, r0
 801f662:	4689      	mov	r9, r1
 801f664:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f668:	2600      	movs	r6, #0
 801f66a:	b914      	cbnz	r4, 801f672 <_fwalk_reent+0x16>
 801f66c:	4630      	mov	r0, r6
 801f66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f672:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801f676:	3f01      	subs	r7, #1
 801f678:	d501      	bpl.n	801f67e <_fwalk_reent+0x22>
 801f67a:	6824      	ldr	r4, [r4, #0]
 801f67c:	e7f5      	b.n	801f66a <_fwalk_reent+0xe>
 801f67e:	89ab      	ldrh	r3, [r5, #12]
 801f680:	2b01      	cmp	r3, #1
 801f682:	d907      	bls.n	801f694 <_fwalk_reent+0x38>
 801f684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f688:	3301      	adds	r3, #1
 801f68a:	d003      	beq.n	801f694 <_fwalk_reent+0x38>
 801f68c:	4629      	mov	r1, r5
 801f68e:	4640      	mov	r0, r8
 801f690:	47c8      	blx	r9
 801f692:	4306      	orrs	r6, r0
 801f694:	3568      	adds	r5, #104	; 0x68
 801f696:	e7ee      	b.n	801f676 <_fwalk_reent+0x1a>

0801f698 <__swhatbuf_r>:
 801f698:	b570      	push	{r4, r5, r6, lr}
 801f69a:	460e      	mov	r6, r1
 801f69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6a0:	2900      	cmp	r1, #0
 801f6a2:	b096      	sub	sp, #88	; 0x58
 801f6a4:	4614      	mov	r4, r2
 801f6a6:	461d      	mov	r5, r3
 801f6a8:	da07      	bge.n	801f6ba <__swhatbuf_r+0x22>
 801f6aa:	2300      	movs	r3, #0
 801f6ac:	602b      	str	r3, [r5, #0]
 801f6ae:	89b3      	ldrh	r3, [r6, #12]
 801f6b0:	061a      	lsls	r2, r3, #24
 801f6b2:	d410      	bmi.n	801f6d6 <__swhatbuf_r+0x3e>
 801f6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f6b8:	e00e      	b.n	801f6d8 <__swhatbuf_r+0x40>
 801f6ba:	466a      	mov	r2, sp
 801f6bc:	f000 f8b8 	bl	801f830 <_fstat_r>
 801f6c0:	2800      	cmp	r0, #0
 801f6c2:	dbf2      	blt.n	801f6aa <__swhatbuf_r+0x12>
 801f6c4:	9a01      	ldr	r2, [sp, #4]
 801f6c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f6ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f6ce:	425a      	negs	r2, r3
 801f6d0:	415a      	adcs	r2, r3
 801f6d2:	602a      	str	r2, [r5, #0]
 801f6d4:	e7ee      	b.n	801f6b4 <__swhatbuf_r+0x1c>
 801f6d6:	2340      	movs	r3, #64	; 0x40
 801f6d8:	2000      	movs	r0, #0
 801f6da:	6023      	str	r3, [r4, #0]
 801f6dc:	b016      	add	sp, #88	; 0x58
 801f6de:	bd70      	pop	{r4, r5, r6, pc}

0801f6e0 <__smakebuf_r>:
 801f6e0:	898b      	ldrh	r3, [r1, #12]
 801f6e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f6e4:	079d      	lsls	r5, r3, #30
 801f6e6:	4606      	mov	r6, r0
 801f6e8:	460c      	mov	r4, r1
 801f6ea:	d507      	bpl.n	801f6fc <__smakebuf_r+0x1c>
 801f6ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f6f0:	6023      	str	r3, [r4, #0]
 801f6f2:	6123      	str	r3, [r4, #16]
 801f6f4:	2301      	movs	r3, #1
 801f6f6:	6163      	str	r3, [r4, #20]
 801f6f8:	b002      	add	sp, #8
 801f6fa:	bd70      	pop	{r4, r5, r6, pc}
 801f6fc:	ab01      	add	r3, sp, #4
 801f6fe:	466a      	mov	r2, sp
 801f700:	f7ff ffca 	bl	801f698 <__swhatbuf_r>
 801f704:	9900      	ldr	r1, [sp, #0]
 801f706:	4605      	mov	r5, r0
 801f708:	4630      	mov	r0, r6
 801f70a:	f7ff f9b1 	bl	801ea70 <_malloc_r>
 801f70e:	b948      	cbnz	r0, 801f724 <__smakebuf_r+0x44>
 801f710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f714:	059a      	lsls	r2, r3, #22
 801f716:	d4ef      	bmi.n	801f6f8 <__smakebuf_r+0x18>
 801f718:	f023 0303 	bic.w	r3, r3, #3
 801f71c:	f043 0302 	orr.w	r3, r3, #2
 801f720:	81a3      	strh	r3, [r4, #12]
 801f722:	e7e3      	b.n	801f6ec <__smakebuf_r+0xc>
 801f724:	4b0d      	ldr	r3, [pc, #52]	; (801f75c <__smakebuf_r+0x7c>)
 801f726:	62b3      	str	r3, [r6, #40]	; 0x28
 801f728:	89a3      	ldrh	r3, [r4, #12]
 801f72a:	6020      	str	r0, [r4, #0]
 801f72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f730:	81a3      	strh	r3, [r4, #12]
 801f732:	9b00      	ldr	r3, [sp, #0]
 801f734:	6163      	str	r3, [r4, #20]
 801f736:	9b01      	ldr	r3, [sp, #4]
 801f738:	6120      	str	r0, [r4, #16]
 801f73a:	b15b      	cbz	r3, 801f754 <__smakebuf_r+0x74>
 801f73c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f740:	4630      	mov	r0, r6
 801f742:	f000 f887 	bl	801f854 <_isatty_r>
 801f746:	b128      	cbz	r0, 801f754 <__smakebuf_r+0x74>
 801f748:	89a3      	ldrh	r3, [r4, #12]
 801f74a:	f023 0303 	bic.w	r3, r3, #3
 801f74e:	f043 0301 	orr.w	r3, r3, #1
 801f752:	81a3      	strh	r3, [r4, #12]
 801f754:	89a3      	ldrh	r3, [r4, #12]
 801f756:	431d      	orrs	r5, r3
 801f758:	81a5      	strh	r5, [r4, #12]
 801f75a:	e7cd      	b.n	801f6f8 <__smakebuf_r+0x18>
 801f75c:	0801f54d 	.word	0x0801f54d

0801f760 <__malloc_lock>:
 801f760:	4770      	bx	lr

0801f762 <__malloc_unlock>:
 801f762:	4770      	bx	lr

0801f764 <__sread>:
 801f764:	b510      	push	{r4, lr}
 801f766:	460c      	mov	r4, r1
 801f768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f76c:	f000 f894 	bl	801f898 <_read_r>
 801f770:	2800      	cmp	r0, #0
 801f772:	bfab      	itete	ge
 801f774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f776:	89a3      	ldrhlt	r3, [r4, #12]
 801f778:	181b      	addge	r3, r3, r0
 801f77a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f77e:	bfac      	ite	ge
 801f780:	6563      	strge	r3, [r4, #84]	; 0x54
 801f782:	81a3      	strhlt	r3, [r4, #12]
 801f784:	bd10      	pop	{r4, pc}

0801f786 <__swrite>:
 801f786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f78a:	461f      	mov	r7, r3
 801f78c:	898b      	ldrh	r3, [r1, #12]
 801f78e:	05db      	lsls	r3, r3, #23
 801f790:	4605      	mov	r5, r0
 801f792:	460c      	mov	r4, r1
 801f794:	4616      	mov	r6, r2
 801f796:	d505      	bpl.n	801f7a4 <__swrite+0x1e>
 801f798:	2302      	movs	r3, #2
 801f79a:	2200      	movs	r2, #0
 801f79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7a0:	f000 f868 	bl	801f874 <_lseek_r>
 801f7a4:	89a3      	ldrh	r3, [r4, #12]
 801f7a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f7aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f7ae:	81a3      	strh	r3, [r4, #12]
 801f7b0:	4632      	mov	r2, r6
 801f7b2:	463b      	mov	r3, r7
 801f7b4:	4628      	mov	r0, r5
 801f7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f7ba:	f000 b817 	b.w	801f7ec <_write_r>

0801f7be <__sseek>:
 801f7be:	b510      	push	{r4, lr}
 801f7c0:	460c      	mov	r4, r1
 801f7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7c6:	f000 f855 	bl	801f874 <_lseek_r>
 801f7ca:	1c43      	adds	r3, r0, #1
 801f7cc:	89a3      	ldrh	r3, [r4, #12]
 801f7ce:	bf15      	itete	ne
 801f7d0:	6560      	strne	r0, [r4, #84]	; 0x54
 801f7d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f7d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f7da:	81a3      	strheq	r3, [r4, #12]
 801f7dc:	bf18      	it	ne
 801f7de:	81a3      	strhne	r3, [r4, #12]
 801f7e0:	bd10      	pop	{r4, pc}

0801f7e2 <__sclose>:
 801f7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7e6:	f000 b813 	b.w	801f810 <_close_r>
	...

0801f7ec <_write_r>:
 801f7ec:	b538      	push	{r3, r4, r5, lr}
 801f7ee:	4c07      	ldr	r4, [pc, #28]	; (801f80c <_write_r+0x20>)
 801f7f0:	4605      	mov	r5, r0
 801f7f2:	4608      	mov	r0, r1
 801f7f4:	4611      	mov	r1, r2
 801f7f6:	2200      	movs	r2, #0
 801f7f8:	6022      	str	r2, [r4, #0]
 801f7fa:	461a      	mov	r2, r3
 801f7fc:	f7e1 ffef 	bl	80017de <_write>
 801f800:	1c43      	adds	r3, r0, #1
 801f802:	d102      	bne.n	801f80a <_write_r+0x1e>
 801f804:	6823      	ldr	r3, [r4, #0]
 801f806:	b103      	cbz	r3, 801f80a <_write_r+0x1e>
 801f808:	602b      	str	r3, [r5, #0]
 801f80a:	bd38      	pop	{r3, r4, r5, pc}
 801f80c:	2000a9f4 	.word	0x2000a9f4

0801f810 <_close_r>:
 801f810:	b538      	push	{r3, r4, r5, lr}
 801f812:	4c06      	ldr	r4, [pc, #24]	; (801f82c <_close_r+0x1c>)
 801f814:	2300      	movs	r3, #0
 801f816:	4605      	mov	r5, r0
 801f818:	4608      	mov	r0, r1
 801f81a:	6023      	str	r3, [r4, #0]
 801f81c:	f7e1 fffb 	bl	8001816 <_close>
 801f820:	1c43      	adds	r3, r0, #1
 801f822:	d102      	bne.n	801f82a <_close_r+0x1a>
 801f824:	6823      	ldr	r3, [r4, #0]
 801f826:	b103      	cbz	r3, 801f82a <_close_r+0x1a>
 801f828:	602b      	str	r3, [r5, #0]
 801f82a:	bd38      	pop	{r3, r4, r5, pc}
 801f82c:	2000a9f4 	.word	0x2000a9f4

0801f830 <_fstat_r>:
 801f830:	b538      	push	{r3, r4, r5, lr}
 801f832:	4c07      	ldr	r4, [pc, #28]	; (801f850 <_fstat_r+0x20>)
 801f834:	2300      	movs	r3, #0
 801f836:	4605      	mov	r5, r0
 801f838:	4608      	mov	r0, r1
 801f83a:	4611      	mov	r1, r2
 801f83c:	6023      	str	r3, [r4, #0]
 801f83e:	f7e1 fff6 	bl	800182e <_fstat>
 801f842:	1c43      	adds	r3, r0, #1
 801f844:	d102      	bne.n	801f84c <_fstat_r+0x1c>
 801f846:	6823      	ldr	r3, [r4, #0]
 801f848:	b103      	cbz	r3, 801f84c <_fstat_r+0x1c>
 801f84a:	602b      	str	r3, [r5, #0]
 801f84c:	bd38      	pop	{r3, r4, r5, pc}
 801f84e:	bf00      	nop
 801f850:	2000a9f4 	.word	0x2000a9f4

0801f854 <_isatty_r>:
 801f854:	b538      	push	{r3, r4, r5, lr}
 801f856:	4c06      	ldr	r4, [pc, #24]	; (801f870 <_isatty_r+0x1c>)
 801f858:	2300      	movs	r3, #0
 801f85a:	4605      	mov	r5, r0
 801f85c:	4608      	mov	r0, r1
 801f85e:	6023      	str	r3, [r4, #0]
 801f860:	f7e1 fff5 	bl	800184e <_isatty>
 801f864:	1c43      	adds	r3, r0, #1
 801f866:	d102      	bne.n	801f86e <_isatty_r+0x1a>
 801f868:	6823      	ldr	r3, [r4, #0]
 801f86a:	b103      	cbz	r3, 801f86e <_isatty_r+0x1a>
 801f86c:	602b      	str	r3, [r5, #0]
 801f86e:	bd38      	pop	{r3, r4, r5, pc}
 801f870:	2000a9f4 	.word	0x2000a9f4

0801f874 <_lseek_r>:
 801f874:	b538      	push	{r3, r4, r5, lr}
 801f876:	4c07      	ldr	r4, [pc, #28]	; (801f894 <_lseek_r+0x20>)
 801f878:	4605      	mov	r5, r0
 801f87a:	4608      	mov	r0, r1
 801f87c:	4611      	mov	r1, r2
 801f87e:	2200      	movs	r2, #0
 801f880:	6022      	str	r2, [r4, #0]
 801f882:	461a      	mov	r2, r3
 801f884:	f7e1 ffee 	bl	8001864 <_lseek>
 801f888:	1c43      	adds	r3, r0, #1
 801f88a:	d102      	bne.n	801f892 <_lseek_r+0x1e>
 801f88c:	6823      	ldr	r3, [r4, #0]
 801f88e:	b103      	cbz	r3, 801f892 <_lseek_r+0x1e>
 801f890:	602b      	str	r3, [r5, #0]
 801f892:	bd38      	pop	{r3, r4, r5, pc}
 801f894:	2000a9f4 	.word	0x2000a9f4

0801f898 <_read_r>:
 801f898:	b538      	push	{r3, r4, r5, lr}
 801f89a:	4c07      	ldr	r4, [pc, #28]	; (801f8b8 <_read_r+0x20>)
 801f89c:	4605      	mov	r5, r0
 801f89e:	4608      	mov	r0, r1
 801f8a0:	4611      	mov	r1, r2
 801f8a2:	2200      	movs	r2, #0
 801f8a4:	6022      	str	r2, [r4, #0]
 801f8a6:	461a      	mov	r2, r3
 801f8a8:	f7e1 ff7c 	bl	80017a4 <_read>
 801f8ac:	1c43      	adds	r3, r0, #1
 801f8ae:	d102      	bne.n	801f8b6 <_read_r+0x1e>
 801f8b0:	6823      	ldr	r3, [r4, #0]
 801f8b2:	b103      	cbz	r3, 801f8b6 <_read_r+0x1e>
 801f8b4:	602b      	str	r3, [r5, #0]
 801f8b6:	bd38      	pop	{r3, r4, r5, pc}
 801f8b8:	2000a9f4 	.word	0x2000a9f4

0801f8bc <_init>:
 801f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8be:	bf00      	nop
 801f8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f8c2:	bc08      	pop	{r3}
 801f8c4:	469e      	mov	lr, r3
 801f8c6:	4770      	bx	lr

0801f8c8 <_fini>:
 801f8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8ca:	bf00      	nop
 801f8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f8ce:	bc08      	pop	{r3}
 801f8d0:	469e      	mov	lr, r3
 801f8d2:	4770      	bx	lr
